
Comento_I2C_Code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d2d4  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004b4  0800d4b8  0800d4b8  0000e4b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d96c  0800d96c  0000f2a4  2**0
                  CONTENTS
  4 .ARM          00000008  0800d96c  0800d96c  0000e96c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d974  0800d974  0000f2a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d974  0800d974  0000e974  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d978  0800d978  0000e978  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002a4  20000000  0800d97c  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001130  200002a4  0800dc20  0000f2a4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200013d4  0800dc20  0000f3d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f2a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000196b9  00000000  00000000  0000f2d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003ff1  00000000  00000000  0002898d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001648  00000000  00000000  0002c980  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001136  00000000  00000000  0002dfc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026b4a  00000000  00000000  0002f0fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d952  00000000  00000000  00055c48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000de1c9  00000000  00000000  0007359a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00151763  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006e38  00000000  00000000  001517a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000a1  00000000  00000000  001585e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200002a4 	.word	0x200002a4
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800d49c 	.word	0x0800d49c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200002a8 	.word	0x200002a8
 800021c:	0800d49c 	.word	0x0800d49c

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295
 8000c0c:	f000 b988 	b.w	8000f20 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9d08      	ldr	r5, [sp, #32]
 8000c2e:	468e      	mov	lr, r1
 8000c30:	4604      	mov	r4, r0
 8000c32:	4688      	mov	r8, r1
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d14a      	bne.n	8000cce <__udivmoddi4+0xa6>
 8000c38:	428a      	cmp	r2, r1
 8000c3a:	4617      	mov	r7, r2
 8000c3c:	d962      	bls.n	8000d04 <__udivmoddi4+0xdc>
 8000c3e:	fab2 f682 	clz	r6, r2
 8000c42:	b14e      	cbz	r6, 8000c58 <__udivmoddi4+0x30>
 8000c44:	f1c6 0320 	rsb	r3, r6, #32
 8000c48:	fa01 f806 	lsl.w	r8, r1, r6
 8000c4c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c50:	40b7      	lsls	r7, r6
 8000c52:	ea43 0808 	orr.w	r8, r3, r8
 8000c56:	40b4      	lsls	r4, r6
 8000c58:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c5c:	fa1f fc87 	uxth.w	ip, r7
 8000c60:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c64:	0c23      	lsrs	r3, r4, #16
 8000c66:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c6a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c6e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c72:	429a      	cmp	r2, r3
 8000c74:	d909      	bls.n	8000c8a <__udivmoddi4+0x62>
 8000c76:	18fb      	adds	r3, r7, r3
 8000c78:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c7c:	f080 80ea 	bcs.w	8000e54 <__udivmoddi4+0x22c>
 8000c80:	429a      	cmp	r2, r3
 8000c82:	f240 80e7 	bls.w	8000e54 <__udivmoddi4+0x22c>
 8000c86:	3902      	subs	r1, #2
 8000c88:	443b      	add	r3, r7
 8000c8a:	1a9a      	subs	r2, r3, r2
 8000c8c:	b2a3      	uxth	r3, r4
 8000c8e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c92:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c96:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c9a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c9e:	459c      	cmp	ip, r3
 8000ca0:	d909      	bls.n	8000cb6 <__udivmoddi4+0x8e>
 8000ca2:	18fb      	adds	r3, r7, r3
 8000ca4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ca8:	f080 80d6 	bcs.w	8000e58 <__udivmoddi4+0x230>
 8000cac:	459c      	cmp	ip, r3
 8000cae:	f240 80d3 	bls.w	8000e58 <__udivmoddi4+0x230>
 8000cb2:	443b      	add	r3, r7
 8000cb4:	3802      	subs	r0, #2
 8000cb6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cba:	eba3 030c 	sub.w	r3, r3, ip
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	b11d      	cbz	r5, 8000cca <__udivmoddi4+0xa2>
 8000cc2:	40f3      	lsrs	r3, r6
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	e9c5 3200 	strd	r3, r2, [r5]
 8000cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cce:	428b      	cmp	r3, r1
 8000cd0:	d905      	bls.n	8000cde <__udivmoddi4+0xb6>
 8000cd2:	b10d      	cbz	r5, 8000cd8 <__udivmoddi4+0xb0>
 8000cd4:	e9c5 0100 	strd	r0, r1, [r5]
 8000cd8:	2100      	movs	r1, #0
 8000cda:	4608      	mov	r0, r1
 8000cdc:	e7f5      	b.n	8000cca <__udivmoddi4+0xa2>
 8000cde:	fab3 f183 	clz	r1, r3
 8000ce2:	2900      	cmp	r1, #0
 8000ce4:	d146      	bne.n	8000d74 <__udivmoddi4+0x14c>
 8000ce6:	4573      	cmp	r3, lr
 8000ce8:	d302      	bcc.n	8000cf0 <__udivmoddi4+0xc8>
 8000cea:	4282      	cmp	r2, r0
 8000cec:	f200 8105 	bhi.w	8000efa <__udivmoddi4+0x2d2>
 8000cf0:	1a84      	subs	r4, r0, r2
 8000cf2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000cf6:	2001      	movs	r0, #1
 8000cf8:	4690      	mov	r8, r2
 8000cfa:	2d00      	cmp	r5, #0
 8000cfc:	d0e5      	beq.n	8000cca <__udivmoddi4+0xa2>
 8000cfe:	e9c5 4800 	strd	r4, r8, [r5]
 8000d02:	e7e2      	b.n	8000cca <__udivmoddi4+0xa2>
 8000d04:	2a00      	cmp	r2, #0
 8000d06:	f000 8090 	beq.w	8000e2a <__udivmoddi4+0x202>
 8000d0a:	fab2 f682 	clz	r6, r2
 8000d0e:	2e00      	cmp	r6, #0
 8000d10:	f040 80a4 	bne.w	8000e5c <__udivmoddi4+0x234>
 8000d14:	1a8a      	subs	r2, r1, r2
 8000d16:	0c03      	lsrs	r3, r0, #16
 8000d18:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d1c:	b280      	uxth	r0, r0
 8000d1e:	b2bc      	uxth	r4, r7
 8000d20:	2101      	movs	r1, #1
 8000d22:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d26:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d2a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d2e:	fb04 f20c 	mul.w	r2, r4, ip
 8000d32:	429a      	cmp	r2, r3
 8000d34:	d907      	bls.n	8000d46 <__udivmoddi4+0x11e>
 8000d36:	18fb      	adds	r3, r7, r3
 8000d38:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d3c:	d202      	bcs.n	8000d44 <__udivmoddi4+0x11c>
 8000d3e:	429a      	cmp	r2, r3
 8000d40:	f200 80e0 	bhi.w	8000f04 <__udivmoddi4+0x2dc>
 8000d44:	46c4      	mov	ip, r8
 8000d46:	1a9b      	subs	r3, r3, r2
 8000d48:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d4c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d50:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d54:	fb02 f404 	mul.w	r4, r2, r4
 8000d58:	429c      	cmp	r4, r3
 8000d5a:	d907      	bls.n	8000d6c <__udivmoddi4+0x144>
 8000d5c:	18fb      	adds	r3, r7, r3
 8000d5e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d62:	d202      	bcs.n	8000d6a <__udivmoddi4+0x142>
 8000d64:	429c      	cmp	r4, r3
 8000d66:	f200 80ca 	bhi.w	8000efe <__udivmoddi4+0x2d6>
 8000d6a:	4602      	mov	r2, r0
 8000d6c:	1b1b      	subs	r3, r3, r4
 8000d6e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d72:	e7a5      	b.n	8000cc0 <__udivmoddi4+0x98>
 8000d74:	f1c1 0620 	rsb	r6, r1, #32
 8000d78:	408b      	lsls	r3, r1
 8000d7a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d7e:	431f      	orrs	r7, r3
 8000d80:	fa0e f401 	lsl.w	r4, lr, r1
 8000d84:	fa20 f306 	lsr.w	r3, r0, r6
 8000d88:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d8c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d90:	4323      	orrs	r3, r4
 8000d92:	fa00 f801 	lsl.w	r8, r0, r1
 8000d96:	fa1f fc87 	uxth.w	ip, r7
 8000d9a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d9e:	0c1c      	lsrs	r4, r3, #16
 8000da0:	fb09 ee10 	mls	lr, r9, r0, lr
 8000da4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000da8:	fb00 fe0c 	mul.w	lr, r0, ip
 8000dac:	45a6      	cmp	lr, r4
 8000dae:	fa02 f201 	lsl.w	r2, r2, r1
 8000db2:	d909      	bls.n	8000dc8 <__udivmoddi4+0x1a0>
 8000db4:	193c      	adds	r4, r7, r4
 8000db6:	f100 3aff 	add.w	sl, r0, #4294967295
 8000dba:	f080 809c 	bcs.w	8000ef6 <__udivmoddi4+0x2ce>
 8000dbe:	45a6      	cmp	lr, r4
 8000dc0:	f240 8099 	bls.w	8000ef6 <__udivmoddi4+0x2ce>
 8000dc4:	3802      	subs	r0, #2
 8000dc6:	443c      	add	r4, r7
 8000dc8:	eba4 040e 	sub.w	r4, r4, lr
 8000dcc:	fa1f fe83 	uxth.w	lr, r3
 8000dd0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000dd4:	fb09 4413 	mls	r4, r9, r3, r4
 8000dd8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ddc:	fb03 fc0c 	mul.w	ip, r3, ip
 8000de0:	45a4      	cmp	ip, r4
 8000de2:	d908      	bls.n	8000df6 <__udivmoddi4+0x1ce>
 8000de4:	193c      	adds	r4, r7, r4
 8000de6:	f103 3eff 	add.w	lr, r3, #4294967295
 8000dea:	f080 8082 	bcs.w	8000ef2 <__udivmoddi4+0x2ca>
 8000dee:	45a4      	cmp	ip, r4
 8000df0:	d97f      	bls.n	8000ef2 <__udivmoddi4+0x2ca>
 8000df2:	3b02      	subs	r3, #2
 8000df4:	443c      	add	r4, r7
 8000df6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000dfa:	eba4 040c 	sub.w	r4, r4, ip
 8000dfe:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e02:	4564      	cmp	r4, ip
 8000e04:	4673      	mov	r3, lr
 8000e06:	46e1      	mov	r9, ip
 8000e08:	d362      	bcc.n	8000ed0 <__udivmoddi4+0x2a8>
 8000e0a:	d05f      	beq.n	8000ecc <__udivmoddi4+0x2a4>
 8000e0c:	b15d      	cbz	r5, 8000e26 <__udivmoddi4+0x1fe>
 8000e0e:	ebb8 0203 	subs.w	r2, r8, r3
 8000e12:	eb64 0409 	sbc.w	r4, r4, r9
 8000e16:	fa04 f606 	lsl.w	r6, r4, r6
 8000e1a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e1e:	431e      	orrs	r6, r3
 8000e20:	40cc      	lsrs	r4, r1
 8000e22:	e9c5 6400 	strd	r6, r4, [r5]
 8000e26:	2100      	movs	r1, #0
 8000e28:	e74f      	b.n	8000cca <__udivmoddi4+0xa2>
 8000e2a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e2e:	0c01      	lsrs	r1, r0, #16
 8000e30:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e34:	b280      	uxth	r0, r0
 8000e36:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e3a:	463b      	mov	r3, r7
 8000e3c:	4638      	mov	r0, r7
 8000e3e:	463c      	mov	r4, r7
 8000e40:	46b8      	mov	r8, r7
 8000e42:	46be      	mov	lr, r7
 8000e44:	2620      	movs	r6, #32
 8000e46:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e4a:	eba2 0208 	sub.w	r2, r2, r8
 8000e4e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e52:	e766      	b.n	8000d22 <__udivmoddi4+0xfa>
 8000e54:	4601      	mov	r1, r0
 8000e56:	e718      	b.n	8000c8a <__udivmoddi4+0x62>
 8000e58:	4610      	mov	r0, r2
 8000e5a:	e72c      	b.n	8000cb6 <__udivmoddi4+0x8e>
 8000e5c:	f1c6 0220 	rsb	r2, r6, #32
 8000e60:	fa2e f302 	lsr.w	r3, lr, r2
 8000e64:	40b7      	lsls	r7, r6
 8000e66:	40b1      	lsls	r1, r6
 8000e68:	fa20 f202 	lsr.w	r2, r0, r2
 8000e6c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e70:	430a      	orrs	r2, r1
 8000e72:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e76:	b2bc      	uxth	r4, r7
 8000e78:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e7c:	0c11      	lsrs	r1, r2, #16
 8000e7e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e82:	fb08 f904 	mul.w	r9, r8, r4
 8000e86:	40b0      	lsls	r0, r6
 8000e88:	4589      	cmp	r9, r1
 8000e8a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e8e:	b280      	uxth	r0, r0
 8000e90:	d93e      	bls.n	8000f10 <__udivmoddi4+0x2e8>
 8000e92:	1879      	adds	r1, r7, r1
 8000e94:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e98:	d201      	bcs.n	8000e9e <__udivmoddi4+0x276>
 8000e9a:	4589      	cmp	r9, r1
 8000e9c:	d81f      	bhi.n	8000ede <__udivmoddi4+0x2b6>
 8000e9e:	eba1 0109 	sub.w	r1, r1, r9
 8000ea2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ea6:	fb09 f804 	mul.w	r8, r9, r4
 8000eaa:	fb0e 1119 	mls	r1, lr, r9, r1
 8000eae:	b292      	uxth	r2, r2
 8000eb0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000eb4:	4542      	cmp	r2, r8
 8000eb6:	d229      	bcs.n	8000f0c <__udivmoddi4+0x2e4>
 8000eb8:	18ba      	adds	r2, r7, r2
 8000eba:	f109 31ff 	add.w	r1, r9, #4294967295
 8000ebe:	d2c4      	bcs.n	8000e4a <__udivmoddi4+0x222>
 8000ec0:	4542      	cmp	r2, r8
 8000ec2:	d2c2      	bcs.n	8000e4a <__udivmoddi4+0x222>
 8000ec4:	f1a9 0102 	sub.w	r1, r9, #2
 8000ec8:	443a      	add	r2, r7
 8000eca:	e7be      	b.n	8000e4a <__udivmoddi4+0x222>
 8000ecc:	45f0      	cmp	r8, lr
 8000ece:	d29d      	bcs.n	8000e0c <__udivmoddi4+0x1e4>
 8000ed0:	ebbe 0302 	subs.w	r3, lr, r2
 8000ed4:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000ed8:	3801      	subs	r0, #1
 8000eda:	46e1      	mov	r9, ip
 8000edc:	e796      	b.n	8000e0c <__udivmoddi4+0x1e4>
 8000ede:	eba7 0909 	sub.w	r9, r7, r9
 8000ee2:	4449      	add	r1, r9
 8000ee4:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ee8:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eec:	fb09 f804 	mul.w	r8, r9, r4
 8000ef0:	e7db      	b.n	8000eaa <__udivmoddi4+0x282>
 8000ef2:	4673      	mov	r3, lr
 8000ef4:	e77f      	b.n	8000df6 <__udivmoddi4+0x1ce>
 8000ef6:	4650      	mov	r0, sl
 8000ef8:	e766      	b.n	8000dc8 <__udivmoddi4+0x1a0>
 8000efa:	4608      	mov	r0, r1
 8000efc:	e6fd      	b.n	8000cfa <__udivmoddi4+0xd2>
 8000efe:	443b      	add	r3, r7
 8000f00:	3a02      	subs	r2, #2
 8000f02:	e733      	b.n	8000d6c <__udivmoddi4+0x144>
 8000f04:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f08:	443b      	add	r3, r7
 8000f0a:	e71c      	b.n	8000d46 <__udivmoddi4+0x11e>
 8000f0c:	4649      	mov	r1, r9
 8000f0e:	e79c      	b.n	8000e4a <__udivmoddi4+0x222>
 8000f10:	eba1 0109 	sub.w	r1, r1, r9
 8000f14:	46c4      	mov	ip, r8
 8000f16:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f1a:	fb09 f804 	mul.w	r8, r9, r4
 8000f1e:	e7c4      	b.n	8000eaa <__udivmoddi4+0x282>

08000f20 <__aeabi_idiv0>:
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop

08000f24 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000f28:	f3bf 8f4f 	dsb	sy
}
 8000f2c:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000f2e:	4b06      	ldr	r3, [pc, #24]	@ (8000f48 <__NVIC_SystemReset+0x24>)
 8000f30:	68db      	ldr	r3, [r3, #12]
 8000f32:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000f36:	4904      	ldr	r1, [pc, #16]	@ (8000f48 <__NVIC_SystemReset+0x24>)
 8000f38:	4b04      	ldr	r3, [pc, #16]	@ (8000f4c <__NVIC_SystemReset+0x28>)
 8000f3a:	4313      	orrs	r3, r2
 8000f3c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8000f3e:	f3bf 8f4f 	dsb	sy
}
 8000f42:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000f44:	bf00      	nop
 8000f46:	e7fd      	b.n	8000f44 <__NVIC_SystemReset+0x20>
 8000f48:	e000ed00 	.word	0xe000ed00
 8000f4c:	05fa0004 	.word	0x05fa0004

08000f50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f54:	f000 ff4a 	bl	8001dec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f58:	f000 f828 	bl	8000fac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f5c:	f000 f9dc 	bl	8001318 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000f60:	f000 f9b0 	bl	80012c4 <MX_USART3_UART_Init>
  MX_CAN1_Init();
 8000f64:	f000 f8e0 	bl	8001128 <MX_CAN1_Init>
  MX_I2C1_Init();
 8000f68:	f000 f912 	bl	8001190 <MX_I2C1_Init>
  MX_SPI2_Init();
 8000f6c:	f000 f93e 	bl	80011ec <MX_SPI2_Init>
  MX_SPI3_Init();
 8000f70:	f000 f972 	bl	8001258 <MX_SPI3_Init>
  MX_ADC1_Init();
 8000f74:	f000 f886 	bl	8001084 <MX_ADC1_Init>
  MX_USB_DEVICE_Init();
 8000f78:	f009 f8fe 	bl	800a178 <MX_USB_DEVICE_Init>

  /* USER CODE BEGIN 2 */
  BMP280_Init(); //BMP280 초기 설정
 8000f7c:	f000 fa7a 	bl	8001474 <BMP280_Init>
  BMP280_Read_Calibration(); //온도 보정계수 구하기
 8000f80:	f000 fad6 	bl	8001530 <BMP280_Read_Calibration>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  BMP280_Start_Temp_DMA();
 8000f84:	f000 fb64 	bl	8001650 <BMP280_Start_Temp_DMA>

	  while (!bmp280_dma_done)  // DMA 완료 대기
 8000f88:	e000      	b.n	8000f8c <main+0x3c>
	  {
	   __WFI(); //Wait For interrupt CPU를 Sleep 상태로 진입시킴
 8000f8a:	bf30      	wfi
	  while (!bmp280_dma_done)  // DMA 완료 대기
 8000f8c:	4b06      	ldr	r3, [pc, #24]	@ (8000fa8 <main+0x58>)
 8000f8e:	781b      	ldrb	r3, [r3, #0]
 8000f90:	b2db      	uxtb	r3, r3
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d0f9      	beq.n	8000f8a <main+0x3a>
	  }
	  bmp280_dma_done = 0;
 8000f96:	4b04      	ldr	r3, [pc, #16]	@ (8000fa8 <main+0x58>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	701a      	strb	r2, [r3, #0]
	  HAL_Delay(1000);
 8000f9c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000fa0:	f000 ff96 	bl	8001ed0 <HAL_Delay>
  {
 8000fa4:	e7ee      	b.n	8000f84 <main+0x34>
 8000fa6:	bf00      	nop
 8000fa8:	2000047b 	.word	0x2000047b

08000fac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b094      	sub	sp, #80	@ 0x50
 8000fb0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fb2:	f107 031c 	add.w	r3, r7, #28
 8000fb6:	2234      	movs	r2, #52	@ 0x34
 8000fb8:	2100      	movs	r1, #0
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f00a fbdc 	bl	800b778 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fc0:	f107 0308 	add.w	r3, r7, #8
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	601a      	str	r2, [r3, #0]
 8000fc8:	605a      	str	r2, [r3, #4]
 8000fca:	609a      	str	r2, [r3, #8]
 8000fcc:	60da      	str	r2, [r3, #12]
 8000fce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	607b      	str	r3, [r7, #4]
 8000fd4:	4b29      	ldr	r3, [pc, #164]	@ (800107c <SystemClock_Config+0xd0>)
 8000fd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fd8:	4a28      	ldr	r2, [pc, #160]	@ (800107c <SystemClock_Config+0xd0>)
 8000fda:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000fde:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fe0:	4b26      	ldr	r3, [pc, #152]	@ (800107c <SystemClock_Config+0xd0>)
 8000fe2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fe4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fe8:	607b      	str	r3, [r7, #4]
 8000fea:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fec:	2300      	movs	r3, #0
 8000fee:	603b      	str	r3, [r7, #0]
 8000ff0:	4b23      	ldr	r3, [pc, #140]	@ (8001080 <SystemClock_Config+0xd4>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	4a22      	ldr	r2, [pc, #136]	@ (8001080 <SystemClock_Config+0xd4>)
 8000ff6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000ffa:	6013      	str	r3, [r2, #0]
 8000ffc:	4b20      	ldr	r3, [pc, #128]	@ (8001080 <SystemClock_Config+0xd4>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001004:	603b      	str	r3, [r7, #0]
 8001006:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001008:	2301      	movs	r3, #1
 800100a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800100c:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8001010:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001012:	2302      	movs	r3, #2
 8001014:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001016:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800101a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 800101c:	2308      	movs	r3, #8
 800101e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 384;
 8001020:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8001024:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001026:	2304      	movs	r3, #4
 8001028:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 8;
 800102a:	2308      	movs	r3, #8
 800102c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800102e:	2302      	movs	r3, #2
 8001030:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001032:	f107 031c 	add.w	r3, r7, #28
 8001036:	4618      	mov	r0, r3
 8001038:	f004 ff3c 	bl	8005eb4 <HAL_RCC_OscConfig>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d001      	beq.n	8001046 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001042:	f000 fb91 	bl	8001768 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001046:	230f      	movs	r3, #15
 8001048:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800104a:	2302      	movs	r3, #2
 800104c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800104e:	2300      	movs	r3, #0
 8001050:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001052:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001056:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001058:	2300      	movs	r3, #0
 800105a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800105c:	f107 0308 	add.w	r3, r7, #8
 8001060:	2103      	movs	r1, #3
 8001062:	4618      	mov	r0, r3
 8001064:	f004 fa7a 	bl	800555c <HAL_RCC_ClockConfig>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d001      	beq.n	8001072 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800106e:	f000 fb7b 	bl	8001768 <Error_Handler>
  }
}
 8001072:	bf00      	nop
 8001074:	3750      	adds	r7, #80	@ 0x50
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	40023800 	.word	0x40023800
 8001080:	40007000 	.word	0x40007000

08001084 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b084      	sub	sp, #16
 8001088:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800108a:	463b      	mov	r3, r7
 800108c:	2200      	movs	r2, #0
 800108e:	601a      	str	r2, [r3, #0]
 8001090:	605a      	str	r2, [r3, #4]
 8001092:	609a      	str	r2, [r3, #8]
 8001094:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001096:	4b21      	ldr	r3, [pc, #132]	@ (800111c <MX_ADC1_Init+0x98>)
 8001098:	4a21      	ldr	r2, [pc, #132]	@ (8001120 <MX_ADC1_Init+0x9c>)
 800109a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800109c:	4b1f      	ldr	r3, [pc, #124]	@ (800111c <MX_ADC1_Init+0x98>)
 800109e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80010a2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80010a4:	4b1d      	ldr	r3, [pc, #116]	@ (800111c <MX_ADC1_Init+0x98>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80010aa:	4b1c      	ldr	r3, [pc, #112]	@ (800111c <MX_ADC1_Init+0x98>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80010b0:	4b1a      	ldr	r3, [pc, #104]	@ (800111c <MX_ADC1_Init+0x98>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010b6:	4b19      	ldr	r3, [pc, #100]	@ (800111c <MX_ADC1_Init+0x98>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010be:	4b17      	ldr	r3, [pc, #92]	@ (800111c <MX_ADC1_Init+0x98>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010c4:	4b15      	ldr	r3, [pc, #84]	@ (800111c <MX_ADC1_Init+0x98>)
 80010c6:	4a17      	ldr	r2, [pc, #92]	@ (8001124 <MX_ADC1_Init+0xa0>)
 80010c8:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010ca:	4b14      	ldr	r3, [pc, #80]	@ (800111c <MX_ADC1_Init+0x98>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80010d0:	4b12      	ldr	r3, [pc, #72]	@ (800111c <MX_ADC1_Init+0x98>)
 80010d2:	2201      	movs	r2, #1
 80010d4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80010d6:	4b11      	ldr	r3, [pc, #68]	@ (800111c <MX_ADC1_Init+0x98>)
 80010d8:	2200      	movs	r2, #0
 80010da:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010de:	4b0f      	ldr	r3, [pc, #60]	@ (800111c <MX_ADC1_Init+0x98>)
 80010e0:	2201      	movs	r2, #1
 80010e2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010e4:	480d      	ldr	r0, [pc, #52]	@ (800111c <MX_ADC1_Init+0x98>)
 80010e6:	f000 ff17 	bl	8001f18 <HAL_ADC_Init>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d001      	beq.n	80010f4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80010f0:	f000 fb3a 	bl	8001768 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80010f4:	2301      	movs	r3, #1
 80010f6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80010f8:	2301      	movs	r3, #1
 80010fa:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80010fc:	2300      	movs	r3, #0
 80010fe:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001100:	463b      	mov	r3, r7
 8001102:	4619      	mov	r1, r3
 8001104:	4805      	ldr	r0, [pc, #20]	@ (800111c <MX_ADC1_Init+0x98>)
 8001106:	f000 ff4b 	bl	8001fa0 <HAL_ADC_ConfigChannel>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d001      	beq.n	8001114 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001110:	f000 fb2a 	bl	8001768 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001114:	bf00      	nop
 8001116:	3710      	adds	r7, #16
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}
 800111c:	200002c0 	.word	0x200002c0
 8001120:	40012000 	.word	0x40012000
 8001124:	0f000001 	.word	0x0f000001

08001128 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 800112c:	4b16      	ldr	r3, [pc, #88]	@ (8001188 <MX_CAN1_Init+0x60>)
 800112e:	4a17      	ldr	r2, [pc, #92]	@ (800118c <MX_CAN1_Init+0x64>)
 8001130:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8001132:	4b15      	ldr	r3, [pc, #84]	@ (8001188 <MX_CAN1_Init+0x60>)
 8001134:	2210      	movs	r2, #16
 8001136:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001138:	4b13      	ldr	r3, [pc, #76]	@ (8001188 <MX_CAN1_Init+0x60>)
 800113a:	2200      	movs	r2, #0
 800113c:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800113e:	4b12      	ldr	r3, [pc, #72]	@ (8001188 <MX_CAN1_Init+0x60>)
 8001140:	2200      	movs	r2, #0
 8001142:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 8001144:	4b10      	ldr	r3, [pc, #64]	@ (8001188 <MX_CAN1_Init+0x60>)
 8001146:	2200      	movs	r2, #0
 8001148:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 800114a:	4b0f      	ldr	r3, [pc, #60]	@ (8001188 <MX_CAN1_Init+0x60>)
 800114c:	2200      	movs	r2, #0
 800114e:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001150:	4b0d      	ldr	r3, [pc, #52]	@ (8001188 <MX_CAN1_Init+0x60>)
 8001152:	2200      	movs	r2, #0
 8001154:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001156:	4b0c      	ldr	r3, [pc, #48]	@ (8001188 <MX_CAN1_Init+0x60>)
 8001158:	2200      	movs	r2, #0
 800115a:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800115c:	4b0a      	ldr	r3, [pc, #40]	@ (8001188 <MX_CAN1_Init+0x60>)
 800115e:	2200      	movs	r2, #0
 8001160:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001162:	4b09      	ldr	r3, [pc, #36]	@ (8001188 <MX_CAN1_Init+0x60>)
 8001164:	2200      	movs	r2, #0
 8001166:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001168:	4b07      	ldr	r3, [pc, #28]	@ (8001188 <MX_CAN1_Init+0x60>)
 800116a:	2200      	movs	r2, #0
 800116c:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800116e:	4b06      	ldr	r3, [pc, #24]	@ (8001188 <MX_CAN1_Init+0x60>)
 8001170:	2200      	movs	r2, #0
 8001172:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001174:	4804      	ldr	r0, [pc, #16]	@ (8001188 <MX_CAN1_Init+0x60>)
 8001176:	f001 f941 	bl	80023fc <HAL_CAN_Init>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d001      	beq.n	8001184 <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 8001180:	f000 faf2 	bl	8001768 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001184:	bf00      	nop
 8001186:	bd80      	pop	{r7, pc}
 8001188:	20000308 	.word	0x20000308
 800118c:	40006400 	.word	0x40006400

08001190 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001194:	4b12      	ldr	r3, [pc, #72]	@ (80011e0 <MX_I2C1_Init+0x50>)
 8001196:	4a13      	ldr	r2, [pc, #76]	@ (80011e4 <MX_I2C1_Init+0x54>)
 8001198:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800119a:	4b11      	ldr	r3, [pc, #68]	@ (80011e0 <MX_I2C1_Init+0x50>)
 800119c:	4a12      	ldr	r2, [pc, #72]	@ (80011e8 <MX_I2C1_Init+0x58>)
 800119e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80011a0:	4b0f      	ldr	r3, [pc, #60]	@ (80011e0 <MX_I2C1_Init+0x50>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80011a6:	4b0e      	ldr	r3, [pc, #56]	@ (80011e0 <MX_I2C1_Init+0x50>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011ac:	4b0c      	ldr	r3, [pc, #48]	@ (80011e0 <MX_I2C1_Init+0x50>)
 80011ae:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80011b2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011b4:	4b0a      	ldr	r3, [pc, #40]	@ (80011e0 <MX_I2C1_Init+0x50>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80011ba:	4b09      	ldr	r3, [pc, #36]	@ (80011e0 <MX_I2C1_Init+0x50>)
 80011bc:	2200      	movs	r2, #0
 80011be:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011c0:	4b07      	ldr	r3, [pc, #28]	@ (80011e0 <MX_I2C1_Init+0x50>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011c6:	4b06      	ldr	r3, [pc, #24]	@ (80011e0 <MX_I2C1_Init+0x50>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80011cc:	4804      	ldr	r0, [pc, #16]	@ (80011e0 <MX_I2C1_Init+0x50>)
 80011ce:	f001 fd85 	bl	8002cdc <HAL_I2C_Init>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d001      	beq.n	80011dc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80011d8:	f000 fac6 	bl	8001768 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80011dc:	bf00      	nop
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	20000330 	.word	0x20000330
 80011e4:	40005400 	.word	0x40005400
 80011e8:	000186a0 	.word	0x000186a0

080011ec <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80011f0:	4b17      	ldr	r3, [pc, #92]	@ (8001250 <MX_SPI2_Init+0x64>)
 80011f2:	4a18      	ldr	r2, [pc, #96]	@ (8001254 <MX_SPI2_Init+0x68>)
 80011f4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80011f6:	4b16      	ldr	r3, [pc, #88]	@ (8001250 <MX_SPI2_Init+0x64>)
 80011f8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80011fc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80011fe:	4b14      	ldr	r3, [pc, #80]	@ (8001250 <MX_SPI2_Init+0x64>)
 8001200:	2200      	movs	r2, #0
 8001202:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001204:	4b12      	ldr	r3, [pc, #72]	@ (8001250 <MX_SPI2_Init+0x64>)
 8001206:	2200      	movs	r2, #0
 8001208:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800120a:	4b11      	ldr	r3, [pc, #68]	@ (8001250 <MX_SPI2_Init+0x64>)
 800120c:	2200      	movs	r2, #0
 800120e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001210:	4b0f      	ldr	r3, [pc, #60]	@ (8001250 <MX_SPI2_Init+0x64>)
 8001212:	2200      	movs	r2, #0
 8001214:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001216:	4b0e      	ldr	r3, [pc, #56]	@ (8001250 <MX_SPI2_Init+0x64>)
 8001218:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800121c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800121e:	4b0c      	ldr	r3, [pc, #48]	@ (8001250 <MX_SPI2_Init+0x64>)
 8001220:	2200      	movs	r2, #0
 8001222:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001224:	4b0a      	ldr	r3, [pc, #40]	@ (8001250 <MX_SPI2_Init+0x64>)
 8001226:	2200      	movs	r2, #0
 8001228:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800122a:	4b09      	ldr	r3, [pc, #36]	@ (8001250 <MX_SPI2_Init+0x64>)
 800122c:	2200      	movs	r2, #0
 800122e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001230:	4b07      	ldr	r3, [pc, #28]	@ (8001250 <MX_SPI2_Init+0x64>)
 8001232:	2200      	movs	r2, #0
 8001234:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001236:	4b06      	ldr	r3, [pc, #24]	@ (8001250 <MX_SPI2_Init+0x64>)
 8001238:	220a      	movs	r2, #10
 800123a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800123c:	4804      	ldr	r0, [pc, #16]	@ (8001250 <MX_SPI2_Init+0x64>)
 800123e:	f005 f8bd 	bl	80063bc <HAL_SPI_Init>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d001      	beq.n	800124c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001248:	f000 fa8e 	bl	8001768 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800124c:	bf00      	nop
 800124e:	bd80      	pop	{r7, pc}
 8001250:	20000384 	.word	0x20000384
 8001254:	40003800 	.word	0x40003800

08001258 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 800125c:	4b17      	ldr	r3, [pc, #92]	@ (80012bc <MX_SPI3_Init+0x64>)
 800125e:	4a18      	ldr	r2, [pc, #96]	@ (80012c0 <MX_SPI3_Init+0x68>)
 8001260:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001262:	4b16      	ldr	r3, [pc, #88]	@ (80012bc <MX_SPI3_Init+0x64>)
 8001264:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001268:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800126a:	4b14      	ldr	r3, [pc, #80]	@ (80012bc <MX_SPI3_Init+0x64>)
 800126c:	2200      	movs	r2, #0
 800126e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001270:	4b12      	ldr	r3, [pc, #72]	@ (80012bc <MX_SPI3_Init+0x64>)
 8001272:	2200      	movs	r2, #0
 8001274:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001276:	4b11      	ldr	r3, [pc, #68]	@ (80012bc <MX_SPI3_Init+0x64>)
 8001278:	2200      	movs	r2, #0
 800127a:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800127c:	4b0f      	ldr	r3, [pc, #60]	@ (80012bc <MX_SPI3_Init+0x64>)
 800127e:	2200      	movs	r2, #0
 8001280:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001282:	4b0e      	ldr	r3, [pc, #56]	@ (80012bc <MX_SPI3_Init+0x64>)
 8001284:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001288:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800128a:	4b0c      	ldr	r3, [pc, #48]	@ (80012bc <MX_SPI3_Init+0x64>)
 800128c:	2200      	movs	r2, #0
 800128e:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001290:	4b0a      	ldr	r3, [pc, #40]	@ (80012bc <MX_SPI3_Init+0x64>)
 8001292:	2200      	movs	r2, #0
 8001294:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001296:	4b09      	ldr	r3, [pc, #36]	@ (80012bc <MX_SPI3_Init+0x64>)
 8001298:	2200      	movs	r2, #0
 800129a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800129c:	4b07      	ldr	r3, [pc, #28]	@ (80012bc <MX_SPI3_Init+0x64>)
 800129e:	2200      	movs	r2, #0
 80012a0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 10;
 80012a2:	4b06      	ldr	r3, [pc, #24]	@ (80012bc <MX_SPI3_Init+0x64>)
 80012a4:	220a      	movs	r2, #10
 80012a6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80012a8:	4804      	ldr	r0, [pc, #16]	@ (80012bc <MX_SPI3_Init+0x64>)
 80012aa:	f005 f887 	bl	80063bc <HAL_SPI_Init>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d001      	beq.n	80012b8 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 80012b4:	f000 fa58 	bl	8001768 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80012b8:	bf00      	nop
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	200003dc 	.word	0x200003dc
 80012c0:	40003c00 	.word	0x40003c00

080012c4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80012c8:	4b11      	ldr	r3, [pc, #68]	@ (8001310 <MX_USART3_UART_Init+0x4c>)
 80012ca:	4a12      	ldr	r2, [pc, #72]	@ (8001314 <MX_USART3_UART_Init+0x50>)
 80012cc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80012ce:	4b10      	ldr	r3, [pc, #64]	@ (8001310 <MX_USART3_UART_Init+0x4c>)
 80012d0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80012d4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80012d6:	4b0e      	ldr	r3, [pc, #56]	@ (8001310 <MX_USART3_UART_Init+0x4c>)
 80012d8:	2200      	movs	r2, #0
 80012da:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80012dc:	4b0c      	ldr	r3, [pc, #48]	@ (8001310 <MX_USART3_UART_Init+0x4c>)
 80012de:	2200      	movs	r2, #0
 80012e0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80012e2:	4b0b      	ldr	r3, [pc, #44]	@ (8001310 <MX_USART3_UART_Init+0x4c>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80012e8:	4b09      	ldr	r3, [pc, #36]	@ (8001310 <MX_USART3_UART_Init+0x4c>)
 80012ea:	220c      	movs	r2, #12
 80012ec:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012ee:	4b08      	ldr	r3, [pc, #32]	@ (8001310 <MX_USART3_UART_Init+0x4c>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80012f4:	4b06      	ldr	r3, [pc, #24]	@ (8001310 <MX_USART3_UART_Init+0x4c>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80012fa:	4805      	ldr	r0, [pc, #20]	@ (8001310 <MX_USART3_UART_Init+0x4c>)
 80012fc:	f005 f8e7 	bl	80064ce <HAL_UART_Init>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d001      	beq.n	800130a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001306:	f000 fa2f 	bl	8001768 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800130a:	bf00      	nop
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	20000434 	.word	0x20000434
 8001314:	40004800 	.word	0x40004800

08001318 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b08c      	sub	sp, #48	@ 0x30
 800131c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800131e:	f107 031c 	add.w	r3, r7, #28
 8001322:	2200      	movs	r2, #0
 8001324:	601a      	str	r2, [r3, #0]
 8001326:	605a      	str	r2, [r3, #4]
 8001328:	609a      	str	r2, [r3, #8]
 800132a:	60da      	str	r2, [r3, #12]
 800132c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800132e:	2300      	movs	r3, #0
 8001330:	61bb      	str	r3, [r7, #24]
 8001332:	4b4c      	ldr	r3, [pc, #304]	@ (8001464 <MX_GPIO_Init+0x14c>)
 8001334:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001336:	4a4b      	ldr	r2, [pc, #300]	@ (8001464 <MX_GPIO_Init+0x14c>)
 8001338:	f043 0304 	orr.w	r3, r3, #4
 800133c:	6313      	str	r3, [r2, #48]	@ 0x30
 800133e:	4b49      	ldr	r3, [pc, #292]	@ (8001464 <MX_GPIO_Init+0x14c>)
 8001340:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001342:	f003 0304 	and.w	r3, r3, #4
 8001346:	61bb      	str	r3, [r7, #24]
 8001348:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800134a:	2300      	movs	r3, #0
 800134c:	617b      	str	r3, [r7, #20]
 800134e:	4b45      	ldr	r3, [pc, #276]	@ (8001464 <MX_GPIO_Init+0x14c>)
 8001350:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001352:	4a44      	ldr	r2, [pc, #272]	@ (8001464 <MX_GPIO_Init+0x14c>)
 8001354:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001358:	6313      	str	r3, [r2, #48]	@ 0x30
 800135a:	4b42      	ldr	r3, [pc, #264]	@ (8001464 <MX_GPIO_Init+0x14c>)
 800135c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800135e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001362:	617b      	str	r3, [r7, #20]
 8001364:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001366:	2300      	movs	r3, #0
 8001368:	613b      	str	r3, [r7, #16]
 800136a:	4b3e      	ldr	r3, [pc, #248]	@ (8001464 <MX_GPIO_Init+0x14c>)
 800136c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800136e:	4a3d      	ldr	r2, [pc, #244]	@ (8001464 <MX_GPIO_Init+0x14c>)
 8001370:	f043 0301 	orr.w	r3, r3, #1
 8001374:	6313      	str	r3, [r2, #48]	@ 0x30
 8001376:	4b3b      	ldr	r3, [pc, #236]	@ (8001464 <MX_GPIO_Init+0x14c>)
 8001378:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800137a:	f003 0301 	and.w	r3, r3, #1
 800137e:	613b      	str	r3, [r7, #16]
 8001380:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001382:	2300      	movs	r3, #0
 8001384:	60fb      	str	r3, [r7, #12]
 8001386:	4b37      	ldr	r3, [pc, #220]	@ (8001464 <MX_GPIO_Init+0x14c>)
 8001388:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800138a:	4a36      	ldr	r2, [pc, #216]	@ (8001464 <MX_GPIO_Init+0x14c>)
 800138c:	f043 0302 	orr.w	r3, r3, #2
 8001390:	6313      	str	r3, [r2, #48]	@ 0x30
 8001392:	4b34      	ldr	r3, [pc, #208]	@ (8001464 <MX_GPIO_Init+0x14c>)
 8001394:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001396:	f003 0302 	and.w	r3, r3, #2
 800139a:	60fb      	str	r3, [r7, #12]
 800139c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800139e:	2300      	movs	r3, #0
 80013a0:	60bb      	str	r3, [r7, #8]
 80013a2:	4b30      	ldr	r3, [pc, #192]	@ (8001464 <MX_GPIO_Init+0x14c>)
 80013a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013a6:	4a2f      	ldr	r2, [pc, #188]	@ (8001464 <MX_GPIO_Init+0x14c>)
 80013a8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80013ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80013ae:	4b2d      	ldr	r3, [pc, #180]	@ (8001464 <MX_GPIO_Init+0x14c>)
 80013b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80013b6:	60bb      	str	r3, [r7, #8]
 80013b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013ba:	2300      	movs	r3, #0
 80013bc:	607b      	str	r3, [r7, #4]
 80013be:	4b29      	ldr	r3, [pc, #164]	@ (8001464 <MX_GPIO_Init+0x14c>)
 80013c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013c2:	4a28      	ldr	r2, [pc, #160]	@ (8001464 <MX_GPIO_Init+0x14c>)
 80013c4:	f043 0308 	orr.w	r3, r3, #8
 80013c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80013ca:	4b26      	ldr	r3, [pc, #152]	@ (8001464 <MX_GPIO_Init+0x14c>)
 80013cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ce:	f003 0308 	and.w	r3, r3, #8
 80013d2:	607b      	str	r3, [r7, #4]
 80013d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80013d6:	2200      	movs	r2, #0
 80013d8:	f244 0181 	movw	r1, #16513	@ 0x4081
 80013dc:	4822      	ldr	r0, [pc, #136]	@ (8001468 <MX_GPIO_Init+0x150>)
 80013de:	f001 fc63 	bl	8002ca8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80013e2:	2200      	movs	r2, #0
 80013e4:	2140      	movs	r1, #64	@ 0x40
 80013e6:	4821      	ldr	r0, [pc, #132]	@ (800146c <MX_GPIO_Init+0x154>)
 80013e8:	f001 fc5e 	bl	8002ca8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80013ec:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80013f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80013f2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80013f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f8:	2300      	movs	r3, #0
 80013fa:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80013fc:	f107 031c 	add.w	r3, r7, #28
 8001400:	4619      	mov	r1, r3
 8001402:	481b      	ldr	r0, [pc, #108]	@ (8001470 <MX_GPIO_Init+0x158>)
 8001404:	f001 fabc 	bl	8002980 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001408:	f244 0381 	movw	r3, #16513	@ 0x4081
 800140c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800140e:	2301      	movs	r3, #1
 8001410:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001412:	2300      	movs	r3, #0
 8001414:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001416:	2300      	movs	r3, #0
 8001418:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800141a:	f107 031c 	add.w	r3, r7, #28
 800141e:	4619      	mov	r1, r3
 8001420:	4811      	ldr	r0, [pc, #68]	@ (8001468 <MX_GPIO_Init+0x150>)
 8001422:	f001 faad 	bl	8002980 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001426:	2340      	movs	r3, #64	@ 0x40
 8001428:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800142a:	2301      	movs	r3, #1
 800142c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142e:	2300      	movs	r3, #0
 8001430:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001432:	2300      	movs	r3, #0
 8001434:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001436:	f107 031c 	add.w	r3, r7, #28
 800143a:	4619      	mov	r1, r3
 800143c:	480b      	ldr	r0, [pc, #44]	@ (800146c <MX_GPIO_Init+0x154>)
 800143e:	f001 fa9f 	bl	8002980 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001442:	2380      	movs	r3, #128	@ 0x80
 8001444:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001446:	2300      	movs	r3, #0
 8001448:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144a:	2300      	movs	r3, #0
 800144c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800144e:	f107 031c 	add.w	r3, r7, #28
 8001452:	4619      	mov	r1, r3
 8001454:	4805      	ldr	r0, [pc, #20]	@ (800146c <MX_GPIO_Init+0x154>)
 8001456:	f001 fa93 	bl	8002980 <HAL_GPIO_Init>

}
 800145a:	bf00      	nop
 800145c:	3730      	adds	r7, #48	@ 0x30
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	40023800 	.word	0x40023800
 8001468:	40020400 	.word	0x40020400
 800146c:	40021800 	.word	0x40021800
 8001470:	40020800 	.word	0x40020800

08001474 <BMP280_Init>:

/* USER CODE BEGIN 4 */
void BMP280_Init(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b086      	sub	sp, #24
 8001478:	af04      	add	r7, sp, #16
    uint8_t id;
    HAL_I2C_Mem_Read(&hi2c1, BMP280_ADDR, BMP280_REG_ID, 1, &id, 1, HAL_MAX_DELAY);
 800147a:	f04f 33ff 	mov.w	r3, #4294967295
 800147e:	9302      	str	r3, [sp, #8]
 8001480:	2301      	movs	r3, #1
 8001482:	9301      	str	r3, [sp, #4]
 8001484:	1dfb      	adds	r3, r7, #7
 8001486:	9300      	str	r3, [sp, #0]
 8001488:	2301      	movs	r3, #1
 800148a:	22d0      	movs	r2, #208	@ 0xd0
 800148c:	21ec      	movs	r1, #236	@ 0xec
 800148e:	4825      	ldr	r0, [pc, #148]	@ (8001524 <BMP280_Init+0xb0>)
 8001490:	f001 fe62 	bl	8003158 <HAL_I2C_Mem_Read>
    if (id == BMP280_CHIP_ID) {
 8001494:	79fb      	ldrb	r3, [r7, #7]
 8001496:	2b58      	cmp	r3, #88	@ 0x58
 8001498:	d13d      	bne.n	8001516 <BMP280_Init+0xa2>
        printf("BMP280 Communication Start...\r\n");
 800149a:	4823      	ldr	r0, [pc, #140]	@ (8001528 <BMP280_Init+0xb4>)
 800149c:	f00a f88c 	bl	800b5b8 <puts>
    } else {
        printf("BMP280 not found!\r\n");
        return;  // ID가 틀리면 더 이상 진행 안 함
    }

    bmp280_ctrl_meas_reg_t ctrl_meas = {0};
 80014a0:	2300      	movs	r3, #0
 80014a2:	713b      	strb	r3, [r7, #4]
    ctrl_meas.bits.osrs_t = 1; //온도 oversampling 설정
 80014a4:	793b      	ldrb	r3, [r7, #4]
 80014a6:	2201      	movs	r2, #1
 80014a8:	f362 1347 	bfi	r3, r2, #5, #3
 80014ac:	713b      	strb	r3, [r7, #4]
    ctrl_meas.bits.osrs_p = 1; //기압 oversampling 설정
 80014ae:	793b      	ldrb	r3, [r7, #4]
 80014b0:	2201      	movs	r2, #1
 80014b2:	f362 0384 	bfi	r3, r2, #2, #3
 80014b6:	713b      	strb	r3, [r7, #4]
    ctrl_meas.bits.mode   = 1; //한 번만 측정하고 sleep 상태로 복귀
 80014b8:	793b      	ldrb	r3, [r7, #4]
 80014ba:	2201      	movs	r2, #1
 80014bc:	f362 0301 	bfi	r3, r2, #0, #2
 80014c0:	713b      	strb	r3, [r7, #4]
    HAL_I2C_Mem_Write(&hi2c1, BMP280_ADDR, BMP280_REG_CTRL_MEAS, 1, &ctrl_meas.raw, 1, HAL_MAX_DELAY); //Ctrl_meas 레지스터에 작성
 80014c2:	f04f 33ff 	mov.w	r3, #4294967295
 80014c6:	9302      	str	r3, [sp, #8]
 80014c8:	2301      	movs	r3, #1
 80014ca:	9301      	str	r3, [sp, #4]
 80014cc:	1d3b      	adds	r3, r7, #4
 80014ce:	9300      	str	r3, [sp, #0]
 80014d0:	2301      	movs	r3, #1
 80014d2:	22f4      	movs	r2, #244	@ 0xf4
 80014d4:	21ec      	movs	r1, #236	@ 0xec
 80014d6:	4813      	ldr	r0, [pc, #76]	@ (8001524 <BMP280_Init+0xb0>)
 80014d8:	f001 fd44 	bl	8002f64 <HAL_I2C_Mem_Write>

    bmp280_config_reg_t config = {0};
 80014dc:	2300      	movs	r3, #0
 80014de:	703b      	strb	r3, [r7, #0]
    config.bits.t_sb = 2; //normal mode일 때 측정 주기 사이 지연 시간 설정 125ms
 80014e0:	783b      	ldrb	r3, [r7, #0]
 80014e2:	2202      	movs	r2, #2
 80014e4:	f362 1347 	bfi	r3, r2, #5, #3
 80014e8:	703b      	strb	r3, [r7, #0]
    config.bits.filter = 0; //필터 사용 안함
 80014ea:	783b      	ldrb	r3, [r7, #0]
 80014ec:	f023 031c 	bic.w	r3, r3, #28
 80014f0:	703b      	strb	r3, [r7, #0]
    config.bits.spi3w_en = 0; //I2C 모드 이므로 0
 80014f2:	783b      	ldrb	r3, [r7, #0]
 80014f4:	f023 0301 	bic.w	r3, r3, #1
 80014f8:	703b      	strb	r3, [r7, #0]
    HAL_I2C_Mem_Write(&hi2c1, BMP280_ADDR, BMP280_REG_CONFIG, 1, &config.raw, 1, HAL_MAX_DELAY); //Reg_config 레지스터에 작성
 80014fa:	f04f 33ff 	mov.w	r3, #4294967295
 80014fe:	9302      	str	r3, [sp, #8]
 8001500:	2301      	movs	r3, #1
 8001502:	9301      	str	r3, [sp, #4]
 8001504:	463b      	mov	r3, r7
 8001506:	9300      	str	r3, [sp, #0]
 8001508:	2301      	movs	r3, #1
 800150a:	22f5      	movs	r2, #245	@ 0xf5
 800150c:	21ec      	movs	r1, #236	@ 0xec
 800150e:	4805      	ldr	r0, [pc, #20]	@ (8001524 <BMP280_Init+0xb0>)
 8001510:	f001 fd28 	bl	8002f64 <HAL_I2C_Mem_Write>
 8001514:	e002      	b.n	800151c <BMP280_Init+0xa8>
        printf("BMP280 not found!\r\n");
 8001516:	4805      	ldr	r0, [pc, #20]	@ (800152c <BMP280_Init+0xb8>)
 8001518:	f00a f84e 	bl	800b5b8 <puts>
}
 800151c:	3708      	adds	r7, #8
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	20000330 	.word	0x20000330
 8001528:	0800d4b8 	.word	0x0800d4b8
 800152c:	0800d4d8 	.word	0x0800d4d8

08001530 <BMP280_Read_Calibration>:
int16_t dig_T2, dig_T3;
int32_t t_fine;

//BMP280 내부에서 보정된 온도 보정 상수를 저장할 함수
void BMP280_Read_Calibration(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b086      	sub	sp, #24
 8001534:	af04      	add	r7, sp, #16
    uint8_t calib[6];
    HAL_I2C_Mem_Read(&hi2c1, BMP280_ADDR, BMP280_REG_CALIB, 1, calib, 6, HAL_MAX_DELAY);
 8001536:	f04f 33ff 	mov.w	r3, #4294967295
 800153a:	9302      	str	r3, [sp, #8]
 800153c:	2306      	movs	r3, #6
 800153e:	9301      	str	r3, [sp, #4]
 8001540:	463b      	mov	r3, r7
 8001542:	9300      	str	r3, [sp, #0]
 8001544:	2301      	movs	r3, #1
 8001546:	2288      	movs	r2, #136	@ 0x88
 8001548:	21ec      	movs	r1, #236	@ 0xec
 800154a:	4813      	ldr	r0, [pc, #76]	@ (8001598 <BMP280_Read_Calibration+0x68>)
 800154c:	f001 fe04 	bl	8003158 <HAL_I2C_Mem_Read>

    dig_T1 = (uint16_t)(calib[1] << 8 | calib[0]); //두 바이트 합쳐서 16비트 unsigned 값으로 변경
 8001550:	787b      	ldrb	r3, [r7, #1]
 8001552:	b21b      	sxth	r3, r3
 8001554:	021b      	lsls	r3, r3, #8
 8001556:	b21a      	sxth	r2, r3
 8001558:	783b      	ldrb	r3, [r7, #0]
 800155a:	b21b      	sxth	r3, r3
 800155c:	4313      	orrs	r3, r2
 800155e:	b21b      	sxth	r3, r3
 8001560:	b29a      	uxth	r2, r3
 8001562:	4b0e      	ldr	r3, [pc, #56]	@ (800159c <BMP280_Read_Calibration+0x6c>)
 8001564:	801a      	strh	r2, [r3, #0]
    dig_T2 = (int16_t)(calib[3] << 8 | calib[2]);
 8001566:	78fb      	ldrb	r3, [r7, #3]
 8001568:	b21b      	sxth	r3, r3
 800156a:	021b      	lsls	r3, r3, #8
 800156c:	b21a      	sxth	r2, r3
 800156e:	78bb      	ldrb	r3, [r7, #2]
 8001570:	b21b      	sxth	r3, r3
 8001572:	4313      	orrs	r3, r2
 8001574:	b21a      	sxth	r2, r3
 8001576:	4b0a      	ldr	r3, [pc, #40]	@ (80015a0 <BMP280_Read_Calibration+0x70>)
 8001578:	801a      	strh	r2, [r3, #0]
    dig_T3 = (int16_t)(calib[5] << 8 | calib[4]);
 800157a:	797b      	ldrb	r3, [r7, #5]
 800157c:	b21b      	sxth	r3, r3
 800157e:	021b      	lsls	r3, r3, #8
 8001580:	b21a      	sxth	r2, r3
 8001582:	793b      	ldrb	r3, [r7, #4]
 8001584:	b21b      	sxth	r3, r3
 8001586:	4313      	orrs	r3, r2
 8001588:	b21a      	sxth	r2, r3
 800158a:	4b06      	ldr	r3, [pc, #24]	@ (80015a4 <BMP280_Read_Calibration+0x74>)
 800158c:	801a      	strh	r2, [r3, #0]
}
 800158e:	bf00      	nop
 8001590:	3708      	adds	r7, #8
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	20000330 	.word	0x20000330
 800159c:	2000047c 	.word	0x2000047c
 80015a0:	2000047e 	.word	0x2000047e
 80015a4:	20000480 	.word	0x20000480

080015a8 <BMP280_Compensate_Temperature>:

//보정된 값을 이용해서 온도 계산
int32_t BMP280_Compensate_Temperature(int32_t adc_T)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b087      	sub	sp, #28
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
    int32_t var1, var2, T;
    var1 = ((((adc_T >> 3) - ((int32_t)dig_T1 << 1))) * ((int32_t)dig_T2)) >> 11;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	10da      	asrs	r2, r3, #3
 80015b4:	4b19      	ldr	r3, [pc, #100]	@ (800161c <BMP280_Compensate_Temperature+0x74>)
 80015b6:	881b      	ldrh	r3, [r3, #0]
 80015b8:	005b      	lsls	r3, r3, #1
 80015ba:	1ad3      	subs	r3, r2, r3
 80015bc:	4a18      	ldr	r2, [pc, #96]	@ (8001620 <BMP280_Compensate_Temperature+0x78>)
 80015be:	f9b2 2000 	ldrsh.w	r2, [r2]
 80015c2:	fb02 f303 	mul.w	r3, r2, r3
 80015c6:	12db      	asrs	r3, r3, #11
 80015c8:	617b      	str	r3, [r7, #20]
    var2 = (((((adc_T >> 4) - ((int32_t)dig_T1)) * ((adc_T >> 4) - ((int32_t)dig_T1))) >> 12) * ((int32_t)dig_T3)) >> 14;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	111b      	asrs	r3, r3, #4
 80015ce:	4a13      	ldr	r2, [pc, #76]	@ (800161c <BMP280_Compensate_Temperature+0x74>)
 80015d0:	8812      	ldrh	r2, [r2, #0]
 80015d2:	1a9b      	subs	r3, r3, r2
 80015d4:	687a      	ldr	r2, [r7, #4]
 80015d6:	1112      	asrs	r2, r2, #4
 80015d8:	4910      	ldr	r1, [pc, #64]	@ (800161c <BMP280_Compensate_Temperature+0x74>)
 80015da:	8809      	ldrh	r1, [r1, #0]
 80015dc:	1a52      	subs	r2, r2, r1
 80015de:	fb02 f303 	mul.w	r3, r2, r3
 80015e2:	131b      	asrs	r3, r3, #12
 80015e4:	4a0f      	ldr	r2, [pc, #60]	@ (8001624 <BMP280_Compensate_Temperature+0x7c>)
 80015e6:	f9b2 2000 	ldrsh.w	r2, [r2]
 80015ea:	fb02 f303 	mul.w	r3, r2, r3
 80015ee:	139b      	asrs	r3, r3, #14
 80015f0:	613b      	str	r3, [r7, #16]
    t_fine = var1 + var2;
 80015f2:	697a      	ldr	r2, [r7, #20]
 80015f4:	693b      	ldr	r3, [r7, #16]
 80015f6:	4413      	add	r3, r2
 80015f8:	4a0b      	ldr	r2, [pc, #44]	@ (8001628 <BMP280_Compensate_Temperature+0x80>)
 80015fa:	6013      	str	r3, [r2, #0]
    T = (t_fine * 5 + 128) >> 8;
 80015fc:	4b0a      	ldr	r3, [pc, #40]	@ (8001628 <BMP280_Compensate_Temperature+0x80>)
 80015fe:	681a      	ldr	r2, [r3, #0]
 8001600:	4613      	mov	r3, r2
 8001602:	009b      	lsls	r3, r3, #2
 8001604:	4413      	add	r3, r2
 8001606:	3380      	adds	r3, #128	@ 0x80
 8001608:	121b      	asrs	r3, r3, #8
 800160a:	60fb      	str	r3, [r7, #12]
    return T;  // 단위: 0.01°C
 800160c:	68fb      	ldr	r3, [r7, #12]
}
 800160e:	4618      	mov	r0, r3
 8001610:	371c      	adds	r7, #28
 8001612:	46bd      	mov	sp, r7
 8001614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001618:	4770      	bx	lr
 800161a:	bf00      	nop
 800161c:	2000047c 	.word	0x2000047c
 8001620:	2000047e 	.word	0x2000047e
 8001624:	20000480 	.word	0x20000480
 8001628:	20000484 	.word	0x20000484

0800162c <__io_putchar>:

// USER CODE BEGIN 0

int __io_putchar(int ch)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b082      	sub	sp, #8
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart3, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8001634:	1d39      	adds	r1, r7, #4
 8001636:	f04f 33ff 	mov.w	r3, #4294967295
 800163a:	2201      	movs	r2, #1
 800163c:	4803      	ldr	r0, [pc, #12]	@ (800164c <__io_putchar+0x20>)
 800163e:	f004 ff93 	bl	8006568 <HAL_UART_Transmit>
  return ch;
 8001642:	687b      	ldr	r3, [r7, #4]
}
 8001644:	4618      	mov	r0, r3
 8001646:	3708      	adds	r7, #8
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}
 800164c:	20000434 	.word	0x20000434

08001650 <BMP280_Start_Temp_DMA>:
void BMP280_Start_Temp_DMA(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b082      	sub	sp, #8
 8001654:	af02      	add	r7, sp, #8
  bmp280_dma_done = 0; //DMA 완료 여부 알려주는 플래그 변수 초기화
 8001656:	4b08      	ldr	r3, [pc, #32]	@ (8001678 <BMP280_Start_Temp_DMA+0x28>)
 8001658:	2200      	movs	r2, #0
 800165a:	701a      	strb	r2, [r3, #0]
  HAL_I2C_Mem_Read_DMA(&hi2c1, BMP280_ADDR, BMP280_REG_TEMP_MSB, 1, bmp280_temp_raw, 3); //BMP280에서 온도 3바이트를 DMA로 읽어서 bmp280_temp_raw[]에 저장
 800165c:	2303      	movs	r3, #3
 800165e:	9301      	str	r3, [sp, #4]
 8001660:	4b06      	ldr	r3, [pc, #24]	@ (800167c <BMP280_Start_Temp_DMA+0x2c>)
 8001662:	9300      	str	r3, [sp, #0]
 8001664:	2301      	movs	r3, #1
 8001666:	22fa      	movs	r2, #250	@ 0xfa
 8001668:	21ec      	movs	r1, #236	@ 0xec
 800166a:	4805      	ldr	r0, [pc, #20]	@ (8001680 <BMP280_Start_Temp_DMA+0x30>)
 800166c:	f001 ff9a 	bl	80035a4 <HAL_I2C_Mem_Read_DMA>
}
 8001670:	bf00      	nop
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	2000047b 	.word	0x2000047b
 800167c:	20000478 	.word	0x20000478
 8001680:	20000330 	.word	0x20000330

08001684 <HAL_I2C_MemRxCpltCallback>:

void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b086      	sub	sp, #24
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  if (hi2c->Instance == hi2c1.Instance) //I2C1만 사용하도록 필터링
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681a      	ldr	r2, [r3, #0]
 8001690:	4b2d      	ldr	r3, [pc, #180]	@ (8001748 <HAL_I2C_MemRxCpltCallback+0xc4>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	429a      	cmp	r2, r3
 8001696:	d153      	bne.n	8001740 <HAL_I2C_MemRxCpltCallback+0xbc>
  {
    int32_t adc_T = ((int32_t)(bmp280_temp_raw[0]) << 12) |
 8001698:	4b2c      	ldr	r3, [pc, #176]	@ (800174c <HAL_I2C_MemRxCpltCallback+0xc8>)
 800169a:	781b      	ldrb	r3, [r3, #0]
 800169c:	031a      	lsls	r2, r3, #12
                    ((int32_t)(bmp280_temp_raw[1]) << 4)  |
 800169e:	4b2b      	ldr	r3, [pc, #172]	@ (800174c <HAL_I2C_MemRxCpltCallback+0xc8>)
 80016a0:	785b      	ldrb	r3, [r3, #1]
 80016a2:	011b      	lsls	r3, r3, #4
    int32_t adc_T = ((int32_t)(bmp280_temp_raw[0]) << 12) |
 80016a4:	4313      	orrs	r3, r2
                    ((int32_t)(bmp280_temp_raw[2]) >> 4);
 80016a6:	4a29      	ldr	r2, [pc, #164]	@ (800174c <HAL_I2C_MemRxCpltCallback+0xc8>)
 80016a8:	7892      	ldrb	r2, [r2, #2]
 80016aa:	0912      	lsrs	r2, r2, #4
 80016ac:	b2d2      	uxtb	r2, r2
    int32_t adc_T = ((int32_t)(bmp280_temp_raw[0]) << 12) |
 80016ae:	4313      	orrs	r3, r2
 80016b0:	617b      	str	r3, [r7, #20]

    int32_t temp = BMP280_Compensate_Temperature(adc_T);
 80016b2:	6978      	ldr	r0, [r7, #20]
 80016b4:	f7ff ff78 	bl	80015a8 <BMP280_Compensate_Temperature>
 80016b8:	6138      	str	r0, [r7, #16]
    float temperature = temp / 100.0f;
 80016ba:	693b      	ldr	r3, [r7, #16]
 80016bc:	ee07 3a90 	vmov	s15, r3
 80016c0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016c4:	eddf 6a22 	vldr	s13, [pc, #136]	@ 8001750 <HAL_I2C_MemRxCpltCallback+0xcc>
 80016c8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80016cc:	edc7 7a03 	vstr	s15, [r7, #12]

    if (temperature >= 50.0f)
 80016d0:	edd7 7a03 	vldr	s15, [r7, #12]
 80016d4:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 8001754 <HAL_I2C_MemRxCpltCallback+0xd0>
 80016d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016e0:	db07      	blt.n	80016f2 <HAL_I2C_MemRxCpltCallback+0x6e>
    {
        printf("Overheat detected! System will reset.\r\n");
 80016e2:	481d      	ldr	r0, [pc, #116]	@ (8001758 <HAL_I2C_MemRxCpltCallback+0xd4>)
 80016e4:	f009 ff68 	bl	800b5b8 <puts>
        HAL_Delay(100);
 80016e8:	2064      	movs	r0, #100	@ 0x64
 80016ea:	f000 fbf1 	bl	8001ed0 <HAL_Delay>
        __NVIC_SystemReset();  // 시스템 소프트웨어 리셋
 80016ee:	f7ff fc19 	bl	8000f24 <__NVIC_SystemReset>
    }

    if (temperature >= 30.0f){
 80016f2:	edd7 7a03 	vldr	s15, [r7, #12]
 80016f6:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 80016fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001702:	db0d      	blt.n	8001720 <HAL_I2C_MemRxCpltCallback+0x9c>
      HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_SET);
 8001704:	2201      	movs	r2, #1
 8001706:	2101      	movs	r1, #1
 8001708:	4814      	ldr	r0, [pc, #80]	@ (800175c <HAL_I2C_MemRxCpltCallback+0xd8>)
 800170a:	f001 facd 	bl	8002ca8 <HAL_GPIO_WritePin>
      printf("Temperature: %.2f C\r\n", temperature);}
 800170e:	68f8      	ldr	r0, [r7, #12]
 8001710:	f7fe ff42 	bl	8000598 <__aeabi_f2d>
 8001714:	4602      	mov	r2, r0
 8001716:	460b      	mov	r3, r1
 8001718:	4811      	ldr	r0, [pc, #68]	@ (8001760 <HAL_I2C_MemRxCpltCallback+0xdc>)
 800171a:	f009 fee5 	bl	800b4e8 <iprintf>
 800171e:	e00c      	b.n	800173a <HAL_I2C_MemRxCpltCallback+0xb6>
    else{
      HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_RESET);
 8001720:	2200      	movs	r2, #0
 8001722:	2101      	movs	r1, #1
 8001724:	480d      	ldr	r0, [pc, #52]	@ (800175c <HAL_I2C_MemRxCpltCallback+0xd8>)
 8001726:	f001 fabf 	bl	8002ca8 <HAL_GPIO_WritePin>
      printf("Temperature: %.2f C\r\n", temperature);}
 800172a:	68f8      	ldr	r0, [r7, #12]
 800172c:	f7fe ff34 	bl	8000598 <__aeabi_f2d>
 8001730:	4602      	mov	r2, r0
 8001732:	460b      	mov	r3, r1
 8001734:	480a      	ldr	r0, [pc, #40]	@ (8001760 <HAL_I2C_MemRxCpltCallback+0xdc>)
 8001736:	f009 fed7 	bl	800b4e8 <iprintf>

    bmp280_dma_done = 1;
 800173a:	4b0a      	ldr	r3, [pc, #40]	@ (8001764 <HAL_I2C_MemRxCpltCallback+0xe0>)
 800173c:	2201      	movs	r2, #1
 800173e:	701a      	strb	r2, [r3, #0]
  }
}
 8001740:	bf00      	nop
 8001742:	3718      	adds	r7, #24
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}
 8001748:	20000330 	.word	0x20000330
 800174c:	20000478 	.word	0x20000478
 8001750:	42c80000 	.word	0x42c80000
 8001754:	42480000 	.word	0x42480000
 8001758:	0800d4ec 	.word	0x0800d4ec
 800175c:	40020400 	.word	0x40020400
 8001760:	0800d514 	.word	0x0800d514
 8001764:	2000047b 	.word	0x2000047b

08001768 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800176c:	b672      	cpsid	i
}
 800176e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001770:	bf00      	nop
 8001772:	e7fd      	b.n	8001770 <Error_Handler+0x8>

08001774 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001774:	b480      	push	{r7}
 8001776:	b083      	sub	sp, #12
 8001778:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800177a:	2300      	movs	r3, #0
 800177c:	607b      	str	r3, [r7, #4]
 800177e:	4b10      	ldr	r3, [pc, #64]	@ (80017c0 <HAL_MspInit+0x4c>)
 8001780:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001782:	4a0f      	ldr	r2, [pc, #60]	@ (80017c0 <HAL_MspInit+0x4c>)
 8001784:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001788:	6453      	str	r3, [r2, #68]	@ 0x44
 800178a:	4b0d      	ldr	r3, [pc, #52]	@ (80017c0 <HAL_MspInit+0x4c>)
 800178c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800178e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001792:	607b      	str	r3, [r7, #4]
 8001794:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001796:	2300      	movs	r3, #0
 8001798:	603b      	str	r3, [r7, #0]
 800179a:	4b09      	ldr	r3, [pc, #36]	@ (80017c0 <HAL_MspInit+0x4c>)
 800179c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800179e:	4a08      	ldr	r2, [pc, #32]	@ (80017c0 <HAL_MspInit+0x4c>)
 80017a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80017a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80017a6:	4b06      	ldr	r3, [pc, #24]	@ (80017c0 <HAL_MspInit+0x4c>)
 80017a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017ae:	603b      	str	r3, [r7, #0]
 80017b0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017b2:	bf00      	nop
 80017b4:	370c      	adds	r7, #12
 80017b6:	46bd      	mov	sp, r7
 80017b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017bc:	4770      	bx	lr
 80017be:	bf00      	nop
 80017c0:	40023800 	.word	0x40023800

080017c4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b08a      	sub	sp, #40	@ 0x28
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017cc:	f107 0314 	add.w	r3, r7, #20
 80017d0:	2200      	movs	r2, #0
 80017d2:	601a      	str	r2, [r3, #0]
 80017d4:	605a      	str	r2, [r3, #4]
 80017d6:	609a      	str	r2, [r3, #8]
 80017d8:	60da      	str	r2, [r3, #12]
 80017da:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a17      	ldr	r2, [pc, #92]	@ (8001840 <HAL_ADC_MspInit+0x7c>)
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d127      	bne.n	8001836 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80017e6:	2300      	movs	r3, #0
 80017e8:	613b      	str	r3, [r7, #16]
 80017ea:	4b16      	ldr	r3, [pc, #88]	@ (8001844 <HAL_ADC_MspInit+0x80>)
 80017ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017ee:	4a15      	ldr	r2, [pc, #84]	@ (8001844 <HAL_ADC_MspInit+0x80>)
 80017f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80017f4:	6453      	str	r3, [r2, #68]	@ 0x44
 80017f6:	4b13      	ldr	r3, [pc, #76]	@ (8001844 <HAL_ADC_MspInit+0x80>)
 80017f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017fe:	613b      	str	r3, [r7, #16]
 8001800:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001802:	2300      	movs	r3, #0
 8001804:	60fb      	str	r3, [r7, #12]
 8001806:	4b0f      	ldr	r3, [pc, #60]	@ (8001844 <HAL_ADC_MspInit+0x80>)
 8001808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800180a:	4a0e      	ldr	r2, [pc, #56]	@ (8001844 <HAL_ADC_MspInit+0x80>)
 800180c:	f043 0301 	orr.w	r3, r3, #1
 8001810:	6313      	str	r3, [r2, #48]	@ 0x30
 8001812:	4b0c      	ldr	r3, [pc, #48]	@ (8001844 <HAL_ADC_MspInit+0x80>)
 8001814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001816:	f003 0301 	and.w	r3, r3, #1
 800181a:	60fb      	str	r3, [r7, #12]
 800181c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800181e:	2302      	movs	r3, #2
 8001820:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001822:	2303      	movs	r3, #3
 8001824:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001826:	2300      	movs	r3, #0
 8001828:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800182a:	f107 0314 	add.w	r3, r7, #20
 800182e:	4619      	mov	r1, r3
 8001830:	4805      	ldr	r0, [pc, #20]	@ (8001848 <HAL_ADC_MspInit+0x84>)
 8001832:	f001 f8a5 	bl	8002980 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001836:	bf00      	nop
 8001838:	3728      	adds	r7, #40	@ 0x28
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	40012000 	.word	0x40012000
 8001844:	40023800 	.word	0x40023800
 8001848:	40020000 	.word	0x40020000

0800184c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b08a      	sub	sp, #40	@ 0x28
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001854:	f107 0314 	add.w	r3, r7, #20
 8001858:	2200      	movs	r2, #0
 800185a:	601a      	str	r2, [r3, #0]
 800185c:	605a      	str	r2, [r3, #4]
 800185e:	609a      	str	r2, [r3, #8]
 8001860:	60da      	str	r2, [r3, #12]
 8001862:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a19      	ldr	r2, [pc, #100]	@ (80018d0 <HAL_CAN_MspInit+0x84>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d12b      	bne.n	80018c6 <HAL_CAN_MspInit+0x7a>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800186e:	2300      	movs	r3, #0
 8001870:	613b      	str	r3, [r7, #16]
 8001872:	4b18      	ldr	r3, [pc, #96]	@ (80018d4 <HAL_CAN_MspInit+0x88>)
 8001874:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001876:	4a17      	ldr	r2, [pc, #92]	@ (80018d4 <HAL_CAN_MspInit+0x88>)
 8001878:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800187c:	6413      	str	r3, [r2, #64]	@ 0x40
 800187e:	4b15      	ldr	r3, [pc, #84]	@ (80018d4 <HAL_CAN_MspInit+0x88>)
 8001880:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001882:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001886:	613b      	str	r3, [r7, #16]
 8001888:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 800188a:	2300      	movs	r3, #0
 800188c:	60fb      	str	r3, [r7, #12]
 800188e:	4b11      	ldr	r3, [pc, #68]	@ (80018d4 <HAL_CAN_MspInit+0x88>)
 8001890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001892:	4a10      	ldr	r2, [pc, #64]	@ (80018d4 <HAL_CAN_MspInit+0x88>)
 8001894:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001898:	6313      	str	r3, [r2, #48]	@ 0x30
 800189a:	4b0e      	ldr	r3, [pc, #56]	@ (80018d4 <HAL_CAN_MspInit+0x88>)
 800189c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800189e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80018a2:	60fb      	str	r3, [r7, #12]
 80018a4:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PG0     ------> CAN1_RX
    PG1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80018a6:	2303      	movs	r3, #3
 80018a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018aa:	2302      	movs	r3, #2
 80018ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ae:	2300      	movs	r3, #0
 80018b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018b2:	2303      	movs	r3, #3
 80018b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80018b6:	2309      	movs	r3, #9
 80018b8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80018ba:	f107 0314 	add.w	r3, r7, #20
 80018be:	4619      	mov	r1, r3
 80018c0:	4805      	ldr	r0, [pc, #20]	@ (80018d8 <HAL_CAN_MspInit+0x8c>)
 80018c2:	f001 f85d 	bl	8002980 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80018c6:	bf00      	nop
 80018c8:	3728      	adds	r7, #40	@ 0x28
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	40006400 	.word	0x40006400
 80018d4:	40023800 	.word	0x40023800
 80018d8:	40021800 	.word	0x40021800

080018dc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b08a      	sub	sp, #40	@ 0x28
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018e4:	f107 0314 	add.w	r3, r7, #20
 80018e8:	2200      	movs	r2, #0
 80018ea:	601a      	str	r2, [r3, #0]
 80018ec:	605a      	str	r2, [r3, #4]
 80018ee:	609a      	str	r2, [r3, #8]
 80018f0:	60da      	str	r2, [r3, #12]
 80018f2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4a19      	ldr	r2, [pc, #100]	@ (8001960 <HAL_I2C_MspInit+0x84>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d12c      	bne.n	8001958 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018fe:	2300      	movs	r3, #0
 8001900:	613b      	str	r3, [r7, #16]
 8001902:	4b18      	ldr	r3, [pc, #96]	@ (8001964 <HAL_I2C_MspInit+0x88>)
 8001904:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001906:	4a17      	ldr	r2, [pc, #92]	@ (8001964 <HAL_I2C_MspInit+0x88>)
 8001908:	f043 0302 	orr.w	r3, r3, #2
 800190c:	6313      	str	r3, [r2, #48]	@ 0x30
 800190e:	4b15      	ldr	r3, [pc, #84]	@ (8001964 <HAL_I2C_MspInit+0x88>)
 8001910:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001912:	f003 0302 	and.w	r3, r3, #2
 8001916:	613b      	str	r3, [r7, #16]
 8001918:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 800191a:	f44f 7310 	mov.w	r3, #576	@ 0x240
 800191e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001920:	2312      	movs	r3, #18
 8001922:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001924:	2300      	movs	r3, #0
 8001926:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001928:	2303      	movs	r3, #3
 800192a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800192c:	2304      	movs	r3, #4
 800192e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001930:	f107 0314 	add.w	r3, r7, #20
 8001934:	4619      	mov	r1, r3
 8001936:	480c      	ldr	r0, [pc, #48]	@ (8001968 <HAL_I2C_MspInit+0x8c>)
 8001938:	f001 f822 	bl	8002980 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800193c:	2300      	movs	r3, #0
 800193e:	60fb      	str	r3, [r7, #12]
 8001940:	4b08      	ldr	r3, [pc, #32]	@ (8001964 <HAL_I2C_MspInit+0x88>)
 8001942:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001944:	4a07      	ldr	r2, [pc, #28]	@ (8001964 <HAL_I2C_MspInit+0x88>)
 8001946:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800194a:	6413      	str	r3, [r2, #64]	@ 0x40
 800194c:	4b05      	ldr	r3, [pc, #20]	@ (8001964 <HAL_I2C_MspInit+0x88>)
 800194e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001950:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001954:	60fb      	str	r3, [r7, #12]
 8001956:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001958:	bf00      	nop
 800195a:	3728      	adds	r7, #40	@ 0x28
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}
 8001960:	40005400 	.word	0x40005400
 8001964:	40023800 	.word	0x40023800
 8001968:	40020400 	.word	0x40020400

0800196c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b08e      	sub	sp, #56	@ 0x38
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001974:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001978:	2200      	movs	r2, #0
 800197a:	601a      	str	r2, [r3, #0]
 800197c:	605a      	str	r2, [r3, #4]
 800197e:	609a      	str	r2, [r3, #8]
 8001980:	60da      	str	r2, [r3, #12]
 8001982:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a51      	ldr	r2, [pc, #324]	@ (8001ad0 <HAL_SPI_MspInit+0x164>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d14b      	bne.n	8001a26 <HAL_SPI_MspInit+0xba>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800198e:	2300      	movs	r3, #0
 8001990:	623b      	str	r3, [r7, #32]
 8001992:	4b50      	ldr	r3, [pc, #320]	@ (8001ad4 <HAL_SPI_MspInit+0x168>)
 8001994:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001996:	4a4f      	ldr	r2, [pc, #316]	@ (8001ad4 <HAL_SPI_MspInit+0x168>)
 8001998:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800199c:	6413      	str	r3, [r2, #64]	@ 0x40
 800199e:	4b4d      	ldr	r3, [pc, #308]	@ (8001ad4 <HAL_SPI_MspInit+0x168>)
 80019a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80019a6:	623b      	str	r3, [r7, #32]
 80019a8:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80019aa:	2300      	movs	r3, #0
 80019ac:	61fb      	str	r3, [r7, #28]
 80019ae:	4b49      	ldr	r3, [pc, #292]	@ (8001ad4 <HAL_SPI_MspInit+0x168>)
 80019b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019b2:	4a48      	ldr	r2, [pc, #288]	@ (8001ad4 <HAL_SPI_MspInit+0x168>)
 80019b4:	f043 0304 	orr.w	r3, r3, #4
 80019b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80019ba:	4b46      	ldr	r3, [pc, #280]	@ (8001ad4 <HAL_SPI_MspInit+0x168>)
 80019bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019be:	f003 0304 	and.w	r3, r3, #4
 80019c2:	61fb      	str	r3, [r7, #28]
 80019c4:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019c6:	2300      	movs	r3, #0
 80019c8:	61bb      	str	r3, [r7, #24]
 80019ca:	4b42      	ldr	r3, [pc, #264]	@ (8001ad4 <HAL_SPI_MspInit+0x168>)
 80019cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ce:	4a41      	ldr	r2, [pc, #260]	@ (8001ad4 <HAL_SPI_MspInit+0x168>)
 80019d0:	f043 0302 	orr.w	r3, r3, #2
 80019d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80019d6:	4b3f      	ldr	r3, [pc, #252]	@ (8001ad4 <HAL_SPI_MspInit+0x168>)
 80019d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019da:	f003 0302 	and.w	r3, r3, #2
 80019de:	61bb      	str	r3, [r7, #24]
 80019e0:	69bb      	ldr	r3, [r7, #24]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80019e2:	230c      	movs	r3, #12
 80019e4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019e6:	2302      	movs	r3, #2
 80019e8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ea:	2300      	movs	r3, #0
 80019ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019ee:	2303      	movs	r3, #3
 80019f0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80019f2:	2305      	movs	r3, #5
 80019f4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019f6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80019fa:	4619      	mov	r1, r3
 80019fc:	4836      	ldr	r0, [pc, #216]	@ (8001ad8 <HAL_SPI_MspInit+0x16c>)
 80019fe:	f000 ffbf 	bl	8002980 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001a02:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001a06:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a08:	2302      	movs	r3, #2
 8001a0a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a10:	2303      	movs	r3, #3
 8001a12:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001a14:	2305      	movs	r3, #5
 8001a16:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a18:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	482f      	ldr	r0, [pc, #188]	@ (8001adc <HAL_SPI_MspInit+0x170>)
 8001a20:	f000 ffae 	bl	8002980 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001a24:	e050      	b.n	8001ac8 <HAL_SPI_MspInit+0x15c>
  else if(hspi->Instance==SPI3)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4a2d      	ldr	r2, [pc, #180]	@ (8001ae0 <HAL_SPI_MspInit+0x174>)
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	d14b      	bne.n	8001ac8 <HAL_SPI_MspInit+0x15c>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001a30:	2300      	movs	r3, #0
 8001a32:	617b      	str	r3, [r7, #20]
 8001a34:	4b27      	ldr	r3, [pc, #156]	@ (8001ad4 <HAL_SPI_MspInit+0x168>)
 8001a36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a38:	4a26      	ldr	r2, [pc, #152]	@ (8001ad4 <HAL_SPI_MspInit+0x168>)
 8001a3a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001a3e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a40:	4b24      	ldr	r3, [pc, #144]	@ (8001ad4 <HAL_SPI_MspInit+0x168>)
 8001a42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a44:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001a48:	617b      	str	r3, [r7, #20]
 8001a4a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	613b      	str	r3, [r7, #16]
 8001a50:	4b20      	ldr	r3, [pc, #128]	@ (8001ad4 <HAL_SPI_MspInit+0x168>)
 8001a52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a54:	4a1f      	ldr	r2, [pc, #124]	@ (8001ad4 <HAL_SPI_MspInit+0x168>)
 8001a56:	f043 0302 	orr.w	r3, r3, #2
 8001a5a:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a5c:	4b1d      	ldr	r3, [pc, #116]	@ (8001ad4 <HAL_SPI_MspInit+0x168>)
 8001a5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a60:	f003 0302 	and.w	r3, r3, #2
 8001a64:	613b      	str	r3, [r7, #16]
 8001a66:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a68:	2300      	movs	r3, #0
 8001a6a:	60fb      	str	r3, [r7, #12]
 8001a6c:	4b19      	ldr	r3, [pc, #100]	@ (8001ad4 <HAL_SPI_MspInit+0x168>)
 8001a6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a70:	4a18      	ldr	r2, [pc, #96]	@ (8001ad4 <HAL_SPI_MspInit+0x168>)
 8001a72:	f043 0304 	orr.w	r3, r3, #4
 8001a76:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a78:	4b16      	ldr	r3, [pc, #88]	@ (8001ad4 <HAL_SPI_MspInit+0x168>)
 8001a7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a7c:	f003 0304 	and.w	r3, r3, #4
 8001a80:	60fb      	str	r3, [r7, #12]
 8001a82:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001a84:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001a88:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a8a:	2302      	movs	r3, #2
 8001a8c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a92:	2303      	movs	r3, #3
 8001a94:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8001a96:	2307      	movs	r3, #7
 8001a98:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a9a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a9e:	4619      	mov	r1, r3
 8001aa0:	480e      	ldr	r0, [pc, #56]	@ (8001adc <HAL_SPI_MspInit+0x170>)
 8001aa2:	f000 ff6d 	bl	8002980 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001aa6:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001aaa:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aac:	2302      	movs	r3, #2
 8001aae:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ab4:	2303      	movs	r3, #3
 8001ab6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001ab8:	2306      	movs	r3, #6
 8001aba:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001abc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	4805      	ldr	r0, [pc, #20]	@ (8001ad8 <HAL_SPI_MspInit+0x16c>)
 8001ac4:	f000 ff5c 	bl	8002980 <HAL_GPIO_Init>
}
 8001ac8:	bf00      	nop
 8001aca:	3738      	adds	r7, #56	@ 0x38
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd80      	pop	{r7, pc}
 8001ad0:	40003800 	.word	0x40003800
 8001ad4:	40023800 	.word	0x40023800
 8001ad8:	40020800 	.word	0x40020800
 8001adc:	40020400 	.word	0x40020400
 8001ae0:	40003c00 	.word	0x40003c00

08001ae4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b08a      	sub	sp, #40	@ 0x28
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aec:	f107 0314 	add.w	r3, r7, #20
 8001af0:	2200      	movs	r2, #0
 8001af2:	601a      	str	r2, [r3, #0]
 8001af4:	605a      	str	r2, [r3, #4]
 8001af6:	609a      	str	r2, [r3, #8]
 8001af8:	60da      	str	r2, [r3, #12]
 8001afa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a19      	ldr	r2, [pc, #100]	@ (8001b68 <HAL_UART_MspInit+0x84>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d12c      	bne.n	8001b60 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001b06:	2300      	movs	r3, #0
 8001b08:	613b      	str	r3, [r7, #16]
 8001b0a:	4b18      	ldr	r3, [pc, #96]	@ (8001b6c <HAL_UART_MspInit+0x88>)
 8001b0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b0e:	4a17      	ldr	r2, [pc, #92]	@ (8001b6c <HAL_UART_MspInit+0x88>)
 8001b10:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001b14:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b16:	4b15      	ldr	r3, [pc, #84]	@ (8001b6c <HAL_UART_MspInit+0x88>)
 8001b18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b1a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001b1e:	613b      	str	r3, [r7, #16]
 8001b20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b22:	2300      	movs	r3, #0
 8001b24:	60fb      	str	r3, [r7, #12]
 8001b26:	4b11      	ldr	r3, [pc, #68]	@ (8001b6c <HAL_UART_MspInit+0x88>)
 8001b28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b2a:	4a10      	ldr	r2, [pc, #64]	@ (8001b6c <HAL_UART_MspInit+0x88>)
 8001b2c:	f043 0308 	orr.w	r3, r3, #8
 8001b30:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b32:	4b0e      	ldr	r3, [pc, #56]	@ (8001b6c <HAL_UART_MspInit+0x88>)
 8001b34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b36:	f003 0308 	and.w	r3, r3, #8
 8001b3a:	60fb      	str	r3, [r7, #12]
 8001b3c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001b3e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001b42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b44:	2302      	movs	r3, #2
 8001b46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b4c:	2303      	movs	r3, #3
 8001b4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001b50:	2307      	movs	r3, #7
 8001b52:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b54:	f107 0314 	add.w	r3, r7, #20
 8001b58:	4619      	mov	r1, r3
 8001b5a:	4805      	ldr	r0, [pc, #20]	@ (8001b70 <HAL_UART_MspInit+0x8c>)
 8001b5c:	f000 ff10 	bl	8002980 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001b60:	bf00      	nop
 8001b62:	3728      	adds	r7, #40	@ 0x28
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	40004800 	.word	0x40004800
 8001b6c:	40023800 	.word	0x40023800
 8001b70:	40020c00 	.word	0x40020c00

08001b74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b74:	b480      	push	{r7}
 8001b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b78:	bf00      	nop
 8001b7a:	e7fd      	b.n	8001b78 <NMI_Handler+0x4>

08001b7c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b80:	bf00      	nop
 8001b82:	e7fd      	b.n	8001b80 <HardFault_Handler+0x4>

08001b84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b84:	b480      	push	{r7}
 8001b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b88:	bf00      	nop
 8001b8a:	e7fd      	b.n	8001b88 <MemManage_Handler+0x4>

08001b8c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b90:	bf00      	nop
 8001b92:	e7fd      	b.n	8001b90 <BusFault_Handler+0x4>

08001b94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b94:	b480      	push	{r7}
 8001b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b98:	bf00      	nop
 8001b9a:	e7fd      	b.n	8001b98 <UsageFault_Handler+0x4>

08001b9c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ba0:	bf00      	nop
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba8:	4770      	bx	lr

08001baa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001baa:	b480      	push	{r7}
 8001bac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bae:	bf00      	nop
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb6:	4770      	bx	lr

08001bb8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bbc:	bf00      	nop
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc4:	4770      	bx	lr

08001bc6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bc6:	b580      	push	{r7, lr}
 8001bc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bca:	f000 f961 	bl	8001e90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bce:	bf00      	nop
 8001bd0:	bd80      	pop	{r7, pc}
	...

08001bd4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001bd8:	4802      	ldr	r0, [pc, #8]	@ (8001be4 <OTG_FS_IRQHandler+0x10>)
 8001bda:	f002 fc9c 	bl	8004516 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001bde:	bf00      	nop
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	20000a60 	.word	0x20000a60

08001be8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001be8:	b480      	push	{r7}
 8001bea:	af00      	add	r7, sp, #0
	return 1;
 8001bec:	2301      	movs	r3, #1
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf6:	4770      	bx	lr

08001bf8 <_kill>:

int _kill(int pid, int sig)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b082      	sub	sp, #8
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
 8001c00:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001c02:	f009 fe0b 	bl	800b81c <__errno>
 8001c06:	4603      	mov	r3, r0
 8001c08:	2216      	movs	r2, #22
 8001c0a:	601a      	str	r2, [r3, #0]
	return -1;
 8001c0c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c10:	4618      	mov	r0, r3
 8001c12:	3708      	adds	r7, #8
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bd80      	pop	{r7, pc}

08001c18 <_exit>:

void _exit (int status)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b082      	sub	sp, #8
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001c20:	f04f 31ff 	mov.w	r1, #4294967295
 8001c24:	6878      	ldr	r0, [r7, #4]
 8001c26:	f7ff ffe7 	bl	8001bf8 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001c2a:	bf00      	nop
 8001c2c:	e7fd      	b.n	8001c2a <_exit+0x12>

08001c2e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c2e:	b580      	push	{r7, lr}
 8001c30:	b086      	sub	sp, #24
 8001c32:	af00      	add	r7, sp, #0
 8001c34:	60f8      	str	r0, [r7, #12]
 8001c36:	60b9      	str	r1, [r7, #8]
 8001c38:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	617b      	str	r3, [r7, #20]
 8001c3e:	e00a      	b.n	8001c56 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001c40:	f3af 8000 	nop.w
 8001c44:	4601      	mov	r1, r0
 8001c46:	68bb      	ldr	r3, [r7, #8]
 8001c48:	1c5a      	adds	r2, r3, #1
 8001c4a:	60ba      	str	r2, [r7, #8]
 8001c4c:	b2ca      	uxtb	r2, r1
 8001c4e:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c50:	697b      	ldr	r3, [r7, #20]
 8001c52:	3301      	adds	r3, #1
 8001c54:	617b      	str	r3, [r7, #20]
 8001c56:	697a      	ldr	r2, [r7, #20]
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	429a      	cmp	r2, r3
 8001c5c:	dbf0      	blt.n	8001c40 <_read+0x12>
	}

return len;
 8001c5e:	687b      	ldr	r3, [r7, #4]
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	3718      	adds	r7, #24
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}

08001c68 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b086      	sub	sp, #24
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	60f8      	str	r0, [r7, #12]
 8001c70:	60b9      	str	r1, [r7, #8]
 8001c72:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c74:	2300      	movs	r3, #0
 8001c76:	617b      	str	r3, [r7, #20]
 8001c78:	e009      	b.n	8001c8e <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001c7a:	68bb      	ldr	r3, [r7, #8]
 8001c7c:	1c5a      	adds	r2, r3, #1
 8001c7e:	60ba      	str	r2, [r7, #8]
 8001c80:	781b      	ldrb	r3, [r3, #0]
 8001c82:	4618      	mov	r0, r3
 8001c84:	f7ff fcd2 	bl	800162c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c88:	697b      	ldr	r3, [r7, #20]
 8001c8a:	3301      	adds	r3, #1
 8001c8c:	617b      	str	r3, [r7, #20]
 8001c8e:	697a      	ldr	r2, [r7, #20]
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	429a      	cmp	r2, r3
 8001c94:	dbf1      	blt.n	8001c7a <_write+0x12>
	}
	return len;
 8001c96:	687b      	ldr	r3, [r7, #4]
}
 8001c98:	4618      	mov	r0, r3
 8001c9a:	3718      	adds	r7, #24
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}

08001ca0 <_close>:

int _close(int file)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b083      	sub	sp, #12
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
	return -1;
 8001ca8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	370c      	adds	r7, #12
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb6:	4770      	bx	lr

08001cb8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b083      	sub	sp, #12
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
 8001cc0:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001cc8:	605a      	str	r2, [r3, #4]
	return 0;
 8001cca:	2300      	movs	r3, #0
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	370c      	adds	r7, #12
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd6:	4770      	bx	lr

08001cd8 <_isatty>:

int _isatty(int file)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b083      	sub	sp, #12
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
	return 1;
 8001ce0:	2301      	movs	r3, #1
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	370c      	adds	r7, #12
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cec:	4770      	bx	lr

08001cee <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001cee:	b480      	push	{r7}
 8001cf0:	b085      	sub	sp, #20
 8001cf2:	af00      	add	r7, sp, #0
 8001cf4:	60f8      	str	r0, [r7, #12]
 8001cf6:	60b9      	str	r1, [r7, #8]
 8001cf8:	607a      	str	r2, [r7, #4]
	return 0;
 8001cfa:	2300      	movs	r3, #0
}
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	3714      	adds	r7, #20
 8001d00:	46bd      	mov	sp, r7
 8001d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d06:	4770      	bx	lr

08001d08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b086      	sub	sp, #24
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d10:	4a14      	ldr	r2, [pc, #80]	@ (8001d64 <_sbrk+0x5c>)
 8001d12:	4b15      	ldr	r3, [pc, #84]	@ (8001d68 <_sbrk+0x60>)
 8001d14:	1ad3      	subs	r3, r2, r3
 8001d16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d18:	697b      	ldr	r3, [r7, #20]
 8001d1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d1c:	4b13      	ldr	r3, [pc, #76]	@ (8001d6c <_sbrk+0x64>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d102      	bne.n	8001d2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d24:	4b11      	ldr	r3, [pc, #68]	@ (8001d6c <_sbrk+0x64>)
 8001d26:	4a12      	ldr	r2, [pc, #72]	@ (8001d70 <_sbrk+0x68>)
 8001d28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d2a:	4b10      	ldr	r3, [pc, #64]	@ (8001d6c <_sbrk+0x64>)
 8001d2c:	681a      	ldr	r2, [r3, #0]
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	4413      	add	r3, r2
 8001d32:	693a      	ldr	r2, [r7, #16]
 8001d34:	429a      	cmp	r2, r3
 8001d36:	d207      	bcs.n	8001d48 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d38:	f009 fd70 	bl	800b81c <__errno>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	220c      	movs	r2, #12
 8001d40:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d42:	f04f 33ff 	mov.w	r3, #4294967295
 8001d46:	e009      	b.n	8001d5c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d48:	4b08      	ldr	r3, [pc, #32]	@ (8001d6c <_sbrk+0x64>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d4e:	4b07      	ldr	r3, [pc, #28]	@ (8001d6c <_sbrk+0x64>)
 8001d50:	681a      	ldr	r2, [r3, #0]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	4413      	add	r3, r2
 8001d56:	4a05      	ldr	r2, [pc, #20]	@ (8001d6c <_sbrk+0x64>)
 8001d58:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d5a:	68fb      	ldr	r3, [r7, #12]
}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	3718      	adds	r7, #24
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}
 8001d64:	20050000 	.word	0x20050000
 8001d68:	00000400 	.word	0x00000400
 8001d6c:	20000488 	.word	0x20000488
 8001d70:	200013d8 	.word	0x200013d8

08001d74 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d74:	b480      	push	{r7}
 8001d76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d78:	4b06      	ldr	r3, [pc, #24]	@ (8001d94 <SystemInit+0x20>)
 8001d7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001d7e:	4a05      	ldr	r2, [pc, #20]	@ (8001d94 <SystemInit+0x20>)
 8001d80:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001d84:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d88:	bf00      	nop
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d90:	4770      	bx	lr
 8001d92:	bf00      	nop
 8001d94:	e000ed00 	.word	0xe000ed00

08001d98 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8001d98:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001dd0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d9c:	480d      	ldr	r0, [pc, #52]	@ (8001dd4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001d9e:	490e      	ldr	r1, [pc, #56]	@ (8001dd8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001da0:	4a0e      	ldr	r2, [pc, #56]	@ (8001ddc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001da2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001da4:	e002      	b.n	8001dac <LoopCopyDataInit>

08001da6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001da6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001da8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001daa:	3304      	adds	r3, #4

08001dac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001dac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001dae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001db0:	d3f9      	bcc.n	8001da6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001db2:	4a0b      	ldr	r2, [pc, #44]	@ (8001de0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001db4:	4c0b      	ldr	r4, [pc, #44]	@ (8001de4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001db6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001db8:	e001      	b.n	8001dbe <LoopFillZerobss>

08001dba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001dba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001dbc:	3204      	adds	r2, #4

08001dbe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001dbe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001dc0:	d3fb      	bcc.n	8001dba <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001dc2:	f7ff ffd7 	bl	8001d74 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001dc6:	f009 fd2f 	bl	800b828 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001dca:	f7ff f8c1 	bl	8000f50 <main>
  bx  lr    
 8001dce:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001dd0:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001dd4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001dd8:	200002a4 	.word	0x200002a4
  ldr r2, =_sidata
 8001ddc:	0800d97c 	.word	0x0800d97c
  ldr r2, =_sbss
 8001de0:	200002a4 	.word	0x200002a4
  ldr r4, =_ebss
 8001de4:	200013d4 	.word	0x200013d4

08001de8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001de8:	e7fe      	b.n	8001de8 <ADC_IRQHandler>
	...

08001dec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001df0:	4b0e      	ldr	r3, [pc, #56]	@ (8001e2c <HAL_Init+0x40>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a0d      	ldr	r2, [pc, #52]	@ (8001e2c <HAL_Init+0x40>)
 8001df6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001dfa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001dfc:	4b0b      	ldr	r3, [pc, #44]	@ (8001e2c <HAL_Init+0x40>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a0a      	ldr	r2, [pc, #40]	@ (8001e2c <HAL_Init+0x40>)
 8001e02:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001e06:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e08:	4b08      	ldr	r3, [pc, #32]	@ (8001e2c <HAL_Init+0x40>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a07      	ldr	r2, [pc, #28]	@ (8001e2c <HAL_Init+0x40>)
 8001e0e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e12:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e14:	2003      	movs	r0, #3
 8001e16:	f000 fcbd 	bl	8002794 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e1a:	2000      	movs	r0, #0
 8001e1c:	f000 f808 	bl	8001e30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e20:	f7ff fca8 	bl	8001774 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e24:	2300      	movs	r3, #0
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	bf00      	nop
 8001e2c:	40023c00 	.word	0x40023c00

08001e30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b082      	sub	sp, #8
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e38:	4b12      	ldr	r3, [pc, #72]	@ (8001e84 <HAL_InitTick+0x54>)
 8001e3a:	681a      	ldr	r2, [r3, #0]
 8001e3c:	4b12      	ldr	r3, [pc, #72]	@ (8001e88 <HAL_InitTick+0x58>)
 8001e3e:	781b      	ldrb	r3, [r3, #0]
 8001e40:	4619      	mov	r1, r3
 8001e42:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e46:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f000 fcd5 	bl	80027fe <HAL_SYSTICK_Config>
 8001e54:	4603      	mov	r3, r0
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d001      	beq.n	8001e5e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	e00e      	b.n	8001e7c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2b0f      	cmp	r3, #15
 8001e62:	d80a      	bhi.n	8001e7a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e64:	2200      	movs	r2, #0
 8001e66:	6879      	ldr	r1, [r7, #4]
 8001e68:	f04f 30ff 	mov.w	r0, #4294967295
 8001e6c:	f000 fc9d 	bl	80027aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e70:	4a06      	ldr	r2, [pc, #24]	@ (8001e8c <HAL_InitTick+0x5c>)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e76:	2300      	movs	r3, #0
 8001e78:	e000      	b.n	8001e7c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e7a:	2301      	movs	r3, #1
}
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	3708      	adds	r7, #8
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}
 8001e84:	20000000 	.word	0x20000000
 8001e88:	20000008 	.word	0x20000008
 8001e8c:	20000004 	.word	0x20000004

08001e90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e90:	b480      	push	{r7}
 8001e92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e94:	4b06      	ldr	r3, [pc, #24]	@ (8001eb0 <HAL_IncTick+0x20>)
 8001e96:	781b      	ldrb	r3, [r3, #0]
 8001e98:	461a      	mov	r2, r3
 8001e9a:	4b06      	ldr	r3, [pc, #24]	@ (8001eb4 <HAL_IncTick+0x24>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4413      	add	r3, r2
 8001ea0:	4a04      	ldr	r2, [pc, #16]	@ (8001eb4 <HAL_IncTick+0x24>)
 8001ea2:	6013      	str	r3, [r2, #0]
}
 8001ea4:	bf00      	nop
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eac:	4770      	bx	lr
 8001eae:	bf00      	nop
 8001eb0:	20000008 	.word	0x20000008
 8001eb4:	2000048c 	.word	0x2000048c

08001eb8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	af00      	add	r7, sp, #0
  return uwTick;
 8001ebc:	4b03      	ldr	r3, [pc, #12]	@ (8001ecc <HAL_GetTick+0x14>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec8:	4770      	bx	lr
 8001eca:	bf00      	nop
 8001ecc:	2000048c 	.word	0x2000048c

08001ed0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b084      	sub	sp, #16
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ed8:	f7ff ffee 	bl	8001eb8 <HAL_GetTick>
 8001edc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ee8:	d005      	beq.n	8001ef6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001eea:	4b0a      	ldr	r3, [pc, #40]	@ (8001f14 <HAL_Delay+0x44>)
 8001eec:	781b      	ldrb	r3, [r3, #0]
 8001eee:	461a      	mov	r2, r3
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	4413      	add	r3, r2
 8001ef4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001ef6:	bf00      	nop
 8001ef8:	f7ff ffde 	bl	8001eb8 <HAL_GetTick>
 8001efc:	4602      	mov	r2, r0
 8001efe:	68bb      	ldr	r3, [r7, #8]
 8001f00:	1ad3      	subs	r3, r2, r3
 8001f02:	68fa      	ldr	r2, [r7, #12]
 8001f04:	429a      	cmp	r2, r3
 8001f06:	d8f7      	bhi.n	8001ef8 <HAL_Delay+0x28>
  {
  }
}
 8001f08:	bf00      	nop
 8001f0a:	bf00      	nop
 8001f0c:	3710      	adds	r7, #16
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	20000008 	.word	0x20000008

08001f18 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b084      	sub	sp, #16
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f20:	2300      	movs	r3, #0
 8001f22:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d101      	bne.n	8001f2e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	e033      	b.n	8001f96 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d109      	bne.n	8001f4a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001f36:	6878      	ldr	r0, [r7, #4]
 8001f38:	f7ff fc44 	bl	80017c4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2200      	movs	r2, #0
 8001f40:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2200      	movs	r2, #0
 8001f46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f4e:	f003 0310 	and.w	r3, r3, #16
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d118      	bne.n	8001f88 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f5a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001f5e:	f023 0302 	bic.w	r3, r3, #2
 8001f62:	f043 0202 	orr.w	r2, r3, #2
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001f6a:	6878      	ldr	r0, [r7, #4]
 8001f6c:	f000 f94a 	bl	8002204 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2200      	movs	r2, #0
 8001f74:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f7a:	f023 0303 	bic.w	r3, r3, #3
 8001f7e:	f043 0201 	orr.w	r2, r3, #1
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	641a      	str	r2, [r3, #64]	@ 0x40
 8001f86:	e001      	b.n	8001f8c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001f88:	2301      	movs	r3, #1
 8001f8a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2200      	movs	r2, #0
 8001f90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001f94:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f96:	4618      	mov	r0, r3
 8001f98:	3710      	adds	r7, #16
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}
	...

08001fa0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b085      	sub	sp, #20
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
 8001fa8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001faa:	2300      	movs	r3, #0
 8001fac:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001fb4:	2b01      	cmp	r3, #1
 8001fb6:	d101      	bne.n	8001fbc <HAL_ADC_ConfigChannel+0x1c>
 8001fb8:	2302      	movs	r3, #2
 8001fba:	e113      	b.n	80021e4 <HAL_ADC_ConfigChannel+0x244>
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2201      	movs	r2, #1
 8001fc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	2b09      	cmp	r3, #9
 8001fca:	d925      	bls.n	8002018 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	68d9      	ldr	r1, [r3, #12]
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	b29b      	uxth	r3, r3
 8001fd8:	461a      	mov	r2, r3
 8001fda:	4613      	mov	r3, r2
 8001fdc:	005b      	lsls	r3, r3, #1
 8001fde:	4413      	add	r3, r2
 8001fe0:	3b1e      	subs	r3, #30
 8001fe2:	2207      	movs	r2, #7
 8001fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe8:	43da      	mvns	r2, r3
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	400a      	ands	r2, r1
 8001ff0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	68d9      	ldr	r1, [r3, #12]
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	689a      	ldr	r2, [r3, #8]
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	b29b      	uxth	r3, r3
 8002002:	4618      	mov	r0, r3
 8002004:	4603      	mov	r3, r0
 8002006:	005b      	lsls	r3, r3, #1
 8002008:	4403      	add	r3, r0
 800200a:	3b1e      	subs	r3, #30
 800200c:	409a      	lsls	r2, r3
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	430a      	orrs	r2, r1
 8002014:	60da      	str	r2, [r3, #12]
 8002016:	e022      	b.n	800205e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	6919      	ldr	r1, [r3, #16]
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	b29b      	uxth	r3, r3
 8002024:	461a      	mov	r2, r3
 8002026:	4613      	mov	r3, r2
 8002028:	005b      	lsls	r3, r3, #1
 800202a:	4413      	add	r3, r2
 800202c:	2207      	movs	r2, #7
 800202e:	fa02 f303 	lsl.w	r3, r2, r3
 8002032:	43da      	mvns	r2, r3
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	400a      	ands	r2, r1
 800203a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	6919      	ldr	r1, [r3, #16]
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	689a      	ldr	r2, [r3, #8]
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	b29b      	uxth	r3, r3
 800204c:	4618      	mov	r0, r3
 800204e:	4603      	mov	r3, r0
 8002050:	005b      	lsls	r3, r3, #1
 8002052:	4403      	add	r3, r0
 8002054:	409a      	lsls	r2, r3
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	430a      	orrs	r2, r1
 800205c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	2b06      	cmp	r3, #6
 8002064:	d824      	bhi.n	80020b0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	685a      	ldr	r2, [r3, #4]
 8002070:	4613      	mov	r3, r2
 8002072:	009b      	lsls	r3, r3, #2
 8002074:	4413      	add	r3, r2
 8002076:	3b05      	subs	r3, #5
 8002078:	221f      	movs	r2, #31
 800207a:	fa02 f303 	lsl.w	r3, r2, r3
 800207e:	43da      	mvns	r2, r3
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	400a      	ands	r2, r1
 8002086:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	b29b      	uxth	r3, r3
 8002094:	4618      	mov	r0, r3
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	685a      	ldr	r2, [r3, #4]
 800209a:	4613      	mov	r3, r2
 800209c:	009b      	lsls	r3, r3, #2
 800209e:	4413      	add	r3, r2
 80020a0:	3b05      	subs	r3, #5
 80020a2:	fa00 f203 	lsl.w	r2, r0, r3
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	430a      	orrs	r2, r1
 80020ac:	635a      	str	r2, [r3, #52]	@ 0x34
 80020ae:	e04c      	b.n	800214a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	2b0c      	cmp	r3, #12
 80020b6:	d824      	bhi.n	8002102 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	685a      	ldr	r2, [r3, #4]
 80020c2:	4613      	mov	r3, r2
 80020c4:	009b      	lsls	r3, r3, #2
 80020c6:	4413      	add	r3, r2
 80020c8:	3b23      	subs	r3, #35	@ 0x23
 80020ca:	221f      	movs	r2, #31
 80020cc:	fa02 f303 	lsl.w	r3, r2, r3
 80020d0:	43da      	mvns	r2, r3
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	400a      	ands	r2, r1
 80020d8:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	b29b      	uxth	r3, r3
 80020e6:	4618      	mov	r0, r3
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	685a      	ldr	r2, [r3, #4]
 80020ec:	4613      	mov	r3, r2
 80020ee:	009b      	lsls	r3, r3, #2
 80020f0:	4413      	add	r3, r2
 80020f2:	3b23      	subs	r3, #35	@ 0x23
 80020f4:	fa00 f203 	lsl.w	r2, r0, r3
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	430a      	orrs	r2, r1
 80020fe:	631a      	str	r2, [r3, #48]	@ 0x30
 8002100:	e023      	b.n	800214a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	685a      	ldr	r2, [r3, #4]
 800210c:	4613      	mov	r3, r2
 800210e:	009b      	lsls	r3, r3, #2
 8002110:	4413      	add	r3, r2
 8002112:	3b41      	subs	r3, #65	@ 0x41
 8002114:	221f      	movs	r2, #31
 8002116:	fa02 f303 	lsl.w	r3, r2, r3
 800211a:	43da      	mvns	r2, r3
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	400a      	ands	r2, r1
 8002122:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	b29b      	uxth	r3, r3
 8002130:	4618      	mov	r0, r3
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	685a      	ldr	r2, [r3, #4]
 8002136:	4613      	mov	r3, r2
 8002138:	009b      	lsls	r3, r3, #2
 800213a:	4413      	add	r3, r2
 800213c:	3b41      	subs	r3, #65	@ 0x41
 800213e:	fa00 f203 	lsl.w	r2, r0, r3
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	430a      	orrs	r2, r1
 8002148:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800214a:	4b29      	ldr	r3, [pc, #164]	@ (80021f0 <HAL_ADC_ConfigChannel+0x250>)
 800214c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4a28      	ldr	r2, [pc, #160]	@ (80021f4 <HAL_ADC_ConfigChannel+0x254>)
 8002154:	4293      	cmp	r3, r2
 8002156:	d10f      	bne.n	8002178 <HAL_ADC_ConfigChannel+0x1d8>
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	2b12      	cmp	r3, #18
 800215e:	d10b      	bne.n	8002178 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a1d      	ldr	r2, [pc, #116]	@ (80021f4 <HAL_ADC_ConfigChannel+0x254>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d12b      	bne.n	80021da <HAL_ADC_ConfigChannel+0x23a>
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4a1c      	ldr	r2, [pc, #112]	@ (80021f8 <HAL_ADC_ConfigChannel+0x258>)
 8002188:	4293      	cmp	r3, r2
 800218a:	d003      	beq.n	8002194 <HAL_ADC_ConfigChannel+0x1f4>
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	2b11      	cmp	r3, #17
 8002192:	d122      	bne.n	80021da <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a11      	ldr	r2, [pc, #68]	@ (80021f8 <HAL_ADC_ConfigChannel+0x258>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d111      	bne.n	80021da <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80021b6:	4b11      	ldr	r3, [pc, #68]	@ (80021fc <HAL_ADC_ConfigChannel+0x25c>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4a11      	ldr	r2, [pc, #68]	@ (8002200 <HAL_ADC_ConfigChannel+0x260>)
 80021bc:	fba2 2303 	umull	r2, r3, r2, r3
 80021c0:	0c9a      	lsrs	r2, r3, #18
 80021c2:	4613      	mov	r3, r2
 80021c4:	009b      	lsls	r3, r3, #2
 80021c6:	4413      	add	r3, r2
 80021c8:	005b      	lsls	r3, r3, #1
 80021ca:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80021cc:	e002      	b.n	80021d4 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80021ce:	68bb      	ldr	r3, [r7, #8]
 80021d0:	3b01      	subs	r3, #1
 80021d2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80021d4:	68bb      	ldr	r3, [r7, #8]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d1f9      	bne.n	80021ce <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2200      	movs	r2, #0
 80021de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 80021e2:	2300      	movs	r3, #0
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	3714      	adds	r7, #20
 80021e8:	46bd      	mov	sp, r7
 80021ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ee:	4770      	bx	lr
 80021f0:	40012300 	.word	0x40012300
 80021f4:	40012000 	.word	0x40012000
 80021f8:	10000012 	.word	0x10000012
 80021fc:	20000000 	.word	0x20000000
 8002200:	431bde83 	.word	0x431bde83

08002204 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002204:	b480      	push	{r7}
 8002206:	b085      	sub	sp, #20
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800220c:	4b79      	ldr	r3, [pc, #484]	@ (80023f4 <ADC_Init+0x1f0>)
 800220e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	685a      	ldr	r2, [r3, #4]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	431a      	orrs	r2, r3
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	685a      	ldr	r2, [r3, #4]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002238:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	6859      	ldr	r1, [r3, #4]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	691b      	ldr	r3, [r3, #16]
 8002244:	021a      	lsls	r2, r3, #8
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	430a      	orrs	r2, r1
 800224c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	685a      	ldr	r2, [r3, #4]
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 800225c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	6859      	ldr	r1, [r3, #4]
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	689a      	ldr	r2, [r3, #8]
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	430a      	orrs	r2, r1
 800226e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	689a      	ldr	r2, [r3, #8]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800227e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	6899      	ldr	r1, [r3, #8]
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	68da      	ldr	r2, [r3, #12]
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	430a      	orrs	r2, r1
 8002290:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002296:	4a58      	ldr	r2, [pc, #352]	@ (80023f8 <ADC_Init+0x1f4>)
 8002298:	4293      	cmp	r3, r2
 800229a:	d022      	beq.n	80022e2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	689a      	ldr	r2, [r3, #8]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80022aa:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	6899      	ldr	r1, [r3, #8]
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	430a      	orrs	r2, r1
 80022bc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	689a      	ldr	r2, [r3, #8]
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80022cc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	6899      	ldr	r1, [r3, #8]
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	430a      	orrs	r2, r1
 80022de:	609a      	str	r2, [r3, #8]
 80022e0:	e00f      	b.n	8002302 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	689a      	ldr	r2, [r3, #8]
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80022f0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	689a      	ldr	r2, [r3, #8]
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002300:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	689a      	ldr	r2, [r3, #8]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f022 0202 	bic.w	r2, r2, #2
 8002310:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	6899      	ldr	r1, [r3, #8]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	7e1b      	ldrb	r3, [r3, #24]
 800231c:	005a      	lsls	r2, r3, #1
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	430a      	orrs	r2, r1
 8002324:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	f893 3020 	ldrb.w	r3, [r3, #32]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d01b      	beq.n	8002368 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	685a      	ldr	r2, [r3, #4]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800233e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	685a      	ldr	r2, [r3, #4]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800234e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	6859      	ldr	r1, [r3, #4]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800235a:	3b01      	subs	r3, #1
 800235c:	035a      	lsls	r2, r3, #13
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	430a      	orrs	r2, r1
 8002364:	605a      	str	r2, [r3, #4]
 8002366:	e007      	b.n	8002378 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	685a      	ldr	r2, [r3, #4]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002376:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002386:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	69db      	ldr	r3, [r3, #28]
 8002392:	3b01      	subs	r3, #1
 8002394:	051a      	lsls	r2, r3, #20
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	430a      	orrs	r2, r1
 800239c:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	689a      	ldr	r2, [r3, #8]
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80023ac:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	6899      	ldr	r1, [r3, #8]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80023ba:	025a      	lsls	r2, r3, #9
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	430a      	orrs	r2, r1
 80023c2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	689a      	ldr	r2, [r3, #8]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80023d2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	6899      	ldr	r1, [r3, #8]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	695b      	ldr	r3, [r3, #20]
 80023de:	029a      	lsls	r2, r3, #10
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	430a      	orrs	r2, r1
 80023e6:	609a      	str	r2, [r3, #8]
}
 80023e8:	bf00      	nop
 80023ea:	3714      	adds	r7, #20
 80023ec:	46bd      	mov	sp, r7
 80023ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f2:	4770      	bx	lr
 80023f4:	40012300 	.word	0x40012300
 80023f8:	0f000001 	.word	0x0f000001

080023fc <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b084      	sub	sp, #16
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d101      	bne.n	800240e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800240a:	2301      	movs	r3, #1
 800240c:	e0ed      	b.n	80025ea <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002414:	b2db      	uxtb	r3, r3
 8002416:	2b00      	cmp	r3, #0
 8002418:	d102      	bne.n	8002420 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800241a:	6878      	ldr	r0, [r7, #4]
 800241c:	f7ff fa16 	bl	800184c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	681a      	ldr	r2, [r3, #0]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f042 0201 	orr.w	r2, r2, #1
 800242e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002430:	f7ff fd42 	bl	8001eb8 <HAL_GetTick>
 8002434:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002436:	e012      	b.n	800245e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002438:	f7ff fd3e 	bl	8001eb8 <HAL_GetTick>
 800243c:	4602      	mov	r2, r0
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	1ad3      	subs	r3, r2, r3
 8002442:	2b0a      	cmp	r3, #10
 8002444:	d90b      	bls.n	800245e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800244a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2205      	movs	r2, #5
 8002456:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	e0c5      	b.n	80025ea <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	f003 0301 	and.w	r3, r3, #1
 8002468:	2b00      	cmp	r3, #0
 800246a:	d0e5      	beq.n	8002438 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	681a      	ldr	r2, [r3, #0]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f022 0202 	bic.w	r2, r2, #2
 800247a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800247c:	f7ff fd1c 	bl	8001eb8 <HAL_GetTick>
 8002480:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002482:	e012      	b.n	80024aa <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002484:	f7ff fd18 	bl	8001eb8 <HAL_GetTick>
 8002488:	4602      	mov	r2, r0
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	1ad3      	subs	r3, r2, r3
 800248e:	2b0a      	cmp	r3, #10
 8002490:	d90b      	bls.n	80024aa <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002496:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2205      	movs	r2, #5
 80024a2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80024a6:	2301      	movs	r3, #1
 80024a8:	e09f      	b.n	80025ea <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	f003 0302 	and.w	r3, r3, #2
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d1e5      	bne.n	8002484 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	7e1b      	ldrb	r3, [r3, #24]
 80024bc:	2b01      	cmp	r3, #1
 80024be:	d108      	bne.n	80024d2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	681a      	ldr	r2, [r3, #0]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80024ce:	601a      	str	r2, [r3, #0]
 80024d0:	e007      	b.n	80024e2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	681a      	ldr	r2, [r3, #0]
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80024e0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	7e5b      	ldrb	r3, [r3, #25]
 80024e6:	2b01      	cmp	r3, #1
 80024e8:	d108      	bne.n	80024fc <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	681a      	ldr	r2, [r3, #0]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80024f8:	601a      	str	r2, [r3, #0]
 80024fa:	e007      	b.n	800250c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	681a      	ldr	r2, [r3, #0]
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800250a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	7e9b      	ldrb	r3, [r3, #26]
 8002510:	2b01      	cmp	r3, #1
 8002512:	d108      	bne.n	8002526 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	681a      	ldr	r2, [r3, #0]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f042 0220 	orr.w	r2, r2, #32
 8002522:	601a      	str	r2, [r3, #0]
 8002524:	e007      	b.n	8002536 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	681a      	ldr	r2, [r3, #0]
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f022 0220 	bic.w	r2, r2, #32
 8002534:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	7edb      	ldrb	r3, [r3, #27]
 800253a:	2b01      	cmp	r3, #1
 800253c:	d108      	bne.n	8002550 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	681a      	ldr	r2, [r3, #0]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f022 0210 	bic.w	r2, r2, #16
 800254c:	601a      	str	r2, [r3, #0]
 800254e:	e007      	b.n	8002560 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	681a      	ldr	r2, [r3, #0]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f042 0210 	orr.w	r2, r2, #16
 800255e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	7f1b      	ldrb	r3, [r3, #28]
 8002564:	2b01      	cmp	r3, #1
 8002566:	d108      	bne.n	800257a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	681a      	ldr	r2, [r3, #0]
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f042 0208 	orr.w	r2, r2, #8
 8002576:	601a      	str	r2, [r3, #0]
 8002578:	e007      	b.n	800258a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	681a      	ldr	r2, [r3, #0]
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f022 0208 	bic.w	r2, r2, #8
 8002588:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	7f5b      	ldrb	r3, [r3, #29]
 800258e:	2b01      	cmp	r3, #1
 8002590:	d108      	bne.n	80025a4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	681a      	ldr	r2, [r3, #0]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f042 0204 	orr.w	r2, r2, #4
 80025a0:	601a      	str	r2, [r3, #0]
 80025a2:	e007      	b.n	80025b4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	681a      	ldr	r2, [r3, #0]
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f022 0204 	bic.w	r2, r2, #4
 80025b2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	689a      	ldr	r2, [r3, #8]
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	68db      	ldr	r3, [r3, #12]
 80025bc:	431a      	orrs	r2, r3
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	691b      	ldr	r3, [r3, #16]
 80025c2:	431a      	orrs	r2, r3
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	695b      	ldr	r3, [r3, #20]
 80025c8:	ea42 0103 	orr.w	r1, r2, r3
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	1e5a      	subs	r2, r3, #1
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	430a      	orrs	r2, r1
 80025d8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2200      	movs	r2, #0
 80025de:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2201      	movs	r2, #1
 80025e4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80025e8:	2300      	movs	r3, #0
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	3710      	adds	r7, #16
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}
	...

080025f4 <__NVIC_SetPriorityGrouping>:
{
 80025f4:	b480      	push	{r7}
 80025f6:	b085      	sub	sp, #20
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	f003 0307 	and.w	r3, r3, #7
 8002602:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002604:	4b0c      	ldr	r3, [pc, #48]	@ (8002638 <__NVIC_SetPriorityGrouping+0x44>)
 8002606:	68db      	ldr	r3, [r3, #12]
 8002608:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800260a:	68ba      	ldr	r2, [r7, #8]
 800260c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002610:	4013      	ands	r3, r2
 8002612:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002618:	68bb      	ldr	r3, [r7, #8]
 800261a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800261c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002620:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002624:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002626:	4a04      	ldr	r2, [pc, #16]	@ (8002638 <__NVIC_SetPriorityGrouping+0x44>)
 8002628:	68bb      	ldr	r3, [r7, #8]
 800262a:	60d3      	str	r3, [r2, #12]
}
 800262c:	bf00      	nop
 800262e:	3714      	adds	r7, #20
 8002630:	46bd      	mov	sp, r7
 8002632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002636:	4770      	bx	lr
 8002638:	e000ed00 	.word	0xe000ed00

0800263c <__NVIC_GetPriorityGrouping>:
{
 800263c:	b480      	push	{r7}
 800263e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002640:	4b04      	ldr	r3, [pc, #16]	@ (8002654 <__NVIC_GetPriorityGrouping+0x18>)
 8002642:	68db      	ldr	r3, [r3, #12]
 8002644:	0a1b      	lsrs	r3, r3, #8
 8002646:	f003 0307 	and.w	r3, r3, #7
}
 800264a:	4618      	mov	r0, r3
 800264c:	46bd      	mov	sp, r7
 800264e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002652:	4770      	bx	lr
 8002654:	e000ed00 	.word	0xe000ed00

08002658 <__NVIC_EnableIRQ>:
{
 8002658:	b480      	push	{r7}
 800265a:	b083      	sub	sp, #12
 800265c:	af00      	add	r7, sp, #0
 800265e:	4603      	mov	r3, r0
 8002660:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002662:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002666:	2b00      	cmp	r3, #0
 8002668:	db0b      	blt.n	8002682 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800266a:	79fb      	ldrb	r3, [r7, #7]
 800266c:	f003 021f 	and.w	r2, r3, #31
 8002670:	4907      	ldr	r1, [pc, #28]	@ (8002690 <__NVIC_EnableIRQ+0x38>)
 8002672:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002676:	095b      	lsrs	r3, r3, #5
 8002678:	2001      	movs	r0, #1
 800267a:	fa00 f202 	lsl.w	r2, r0, r2
 800267e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002682:	bf00      	nop
 8002684:	370c      	adds	r7, #12
 8002686:	46bd      	mov	sp, r7
 8002688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268c:	4770      	bx	lr
 800268e:	bf00      	nop
 8002690:	e000e100 	.word	0xe000e100

08002694 <__NVIC_SetPriority>:
{
 8002694:	b480      	push	{r7}
 8002696:	b083      	sub	sp, #12
 8002698:	af00      	add	r7, sp, #0
 800269a:	4603      	mov	r3, r0
 800269c:	6039      	str	r1, [r7, #0]
 800269e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	db0a      	blt.n	80026be <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	b2da      	uxtb	r2, r3
 80026ac:	490c      	ldr	r1, [pc, #48]	@ (80026e0 <__NVIC_SetPriority+0x4c>)
 80026ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026b2:	0112      	lsls	r2, r2, #4
 80026b4:	b2d2      	uxtb	r2, r2
 80026b6:	440b      	add	r3, r1
 80026b8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80026bc:	e00a      	b.n	80026d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	b2da      	uxtb	r2, r3
 80026c2:	4908      	ldr	r1, [pc, #32]	@ (80026e4 <__NVIC_SetPriority+0x50>)
 80026c4:	79fb      	ldrb	r3, [r7, #7]
 80026c6:	f003 030f 	and.w	r3, r3, #15
 80026ca:	3b04      	subs	r3, #4
 80026cc:	0112      	lsls	r2, r2, #4
 80026ce:	b2d2      	uxtb	r2, r2
 80026d0:	440b      	add	r3, r1
 80026d2:	761a      	strb	r2, [r3, #24]
}
 80026d4:	bf00      	nop
 80026d6:	370c      	adds	r7, #12
 80026d8:	46bd      	mov	sp, r7
 80026da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026de:	4770      	bx	lr
 80026e0:	e000e100 	.word	0xe000e100
 80026e4:	e000ed00 	.word	0xe000ed00

080026e8 <NVIC_EncodePriority>:
{
 80026e8:	b480      	push	{r7}
 80026ea:	b089      	sub	sp, #36	@ 0x24
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	60f8      	str	r0, [r7, #12]
 80026f0:	60b9      	str	r1, [r7, #8]
 80026f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	f003 0307 	and.w	r3, r3, #7
 80026fa:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026fc:	69fb      	ldr	r3, [r7, #28]
 80026fe:	f1c3 0307 	rsb	r3, r3, #7
 8002702:	2b04      	cmp	r3, #4
 8002704:	bf28      	it	cs
 8002706:	2304      	movcs	r3, #4
 8002708:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800270a:	69fb      	ldr	r3, [r7, #28]
 800270c:	3304      	adds	r3, #4
 800270e:	2b06      	cmp	r3, #6
 8002710:	d902      	bls.n	8002718 <NVIC_EncodePriority+0x30>
 8002712:	69fb      	ldr	r3, [r7, #28]
 8002714:	3b03      	subs	r3, #3
 8002716:	e000      	b.n	800271a <NVIC_EncodePriority+0x32>
 8002718:	2300      	movs	r3, #0
 800271a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800271c:	f04f 32ff 	mov.w	r2, #4294967295
 8002720:	69bb      	ldr	r3, [r7, #24]
 8002722:	fa02 f303 	lsl.w	r3, r2, r3
 8002726:	43da      	mvns	r2, r3
 8002728:	68bb      	ldr	r3, [r7, #8]
 800272a:	401a      	ands	r2, r3
 800272c:	697b      	ldr	r3, [r7, #20]
 800272e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002730:	f04f 31ff 	mov.w	r1, #4294967295
 8002734:	697b      	ldr	r3, [r7, #20]
 8002736:	fa01 f303 	lsl.w	r3, r1, r3
 800273a:	43d9      	mvns	r1, r3
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002740:	4313      	orrs	r3, r2
}
 8002742:	4618      	mov	r0, r3
 8002744:	3724      	adds	r7, #36	@ 0x24
 8002746:	46bd      	mov	sp, r7
 8002748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274c:	4770      	bx	lr
	...

08002750 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b082      	sub	sp, #8
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	3b01      	subs	r3, #1
 800275c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002760:	d301      	bcc.n	8002766 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002762:	2301      	movs	r3, #1
 8002764:	e00f      	b.n	8002786 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002766:	4a0a      	ldr	r2, [pc, #40]	@ (8002790 <SysTick_Config+0x40>)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	3b01      	subs	r3, #1
 800276c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800276e:	210f      	movs	r1, #15
 8002770:	f04f 30ff 	mov.w	r0, #4294967295
 8002774:	f7ff ff8e 	bl	8002694 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002778:	4b05      	ldr	r3, [pc, #20]	@ (8002790 <SysTick_Config+0x40>)
 800277a:	2200      	movs	r2, #0
 800277c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800277e:	4b04      	ldr	r3, [pc, #16]	@ (8002790 <SysTick_Config+0x40>)
 8002780:	2207      	movs	r2, #7
 8002782:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002784:	2300      	movs	r3, #0
}
 8002786:	4618      	mov	r0, r3
 8002788:	3708      	adds	r7, #8
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}
 800278e:	bf00      	nop
 8002790:	e000e010 	.word	0xe000e010

08002794 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b082      	sub	sp, #8
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800279c:	6878      	ldr	r0, [r7, #4]
 800279e:	f7ff ff29 	bl	80025f4 <__NVIC_SetPriorityGrouping>
}
 80027a2:	bf00      	nop
 80027a4:	3708      	adds	r7, #8
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}

080027aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80027aa:	b580      	push	{r7, lr}
 80027ac:	b086      	sub	sp, #24
 80027ae:	af00      	add	r7, sp, #0
 80027b0:	4603      	mov	r3, r0
 80027b2:	60b9      	str	r1, [r7, #8]
 80027b4:	607a      	str	r2, [r7, #4]
 80027b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80027b8:	2300      	movs	r3, #0
 80027ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80027bc:	f7ff ff3e 	bl	800263c <__NVIC_GetPriorityGrouping>
 80027c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027c2:	687a      	ldr	r2, [r7, #4]
 80027c4:	68b9      	ldr	r1, [r7, #8]
 80027c6:	6978      	ldr	r0, [r7, #20]
 80027c8:	f7ff ff8e 	bl	80026e8 <NVIC_EncodePriority>
 80027cc:	4602      	mov	r2, r0
 80027ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027d2:	4611      	mov	r1, r2
 80027d4:	4618      	mov	r0, r3
 80027d6:	f7ff ff5d 	bl	8002694 <__NVIC_SetPriority>
}
 80027da:	bf00      	nop
 80027dc:	3718      	adds	r7, #24
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}

080027e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027e2:	b580      	push	{r7, lr}
 80027e4:	b082      	sub	sp, #8
 80027e6:	af00      	add	r7, sp, #0
 80027e8:	4603      	mov	r3, r0
 80027ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027f0:	4618      	mov	r0, r3
 80027f2:	f7ff ff31 	bl	8002658 <__NVIC_EnableIRQ>
}
 80027f6:	bf00      	nop
 80027f8:	3708      	adds	r7, #8
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}

080027fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027fe:	b580      	push	{r7, lr}
 8002800:	b082      	sub	sp, #8
 8002802:	af00      	add	r7, sp, #0
 8002804:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002806:	6878      	ldr	r0, [r7, #4]
 8002808:	f7ff ffa2 	bl	8002750 <SysTick_Config>
 800280c:	4603      	mov	r3, r0
}
 800280e:	4618      	mov	r0, r3
 8002810:	3708      	adds	r7, #8
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}

08002816 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002816:	b580      	push	{r7, lr}
 8002818:	b086      	sub	sp, #24
 800281a:	af00      	add	r7, sp, #0
 800281c:	60f8      	str	r0, [r7, #12]
 800281e:	60b9      	str	r1, [r7, #8]
 8002820:	607a      	str	r2, [r7, #4]
 8002822:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002824:	2300      	movs	r3, #0
 8002826:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800282c:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002834:	2b01      	cmp	r3, #1
 8002836:	d101      	bne.n	800283c <HAL_DMA_Start_IT+0x26>
 8002838:	2302      	movs	r3, #2
 800283a:	e040      	b.n	80028be <HAL_DMA_Start_IT+0xa8>
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	2201      	movs	r2, #1
 8002840:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800284a:	b2db      	uxtb	r3, r3
 800284c:	2b01      	cmp	r3, #1
 800284e:	d12f      	bne.n	80028b0 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	2202      	movs	r2, #2
 8002854:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	2200      	movs	r2, #0
 800285c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	687a      	ldr	r2, [r7, #4]
 8002862:	68b9      	ldr	r1, [r7, #8]
 8002864:	68f8      	ldr	r0, [r7, #12]
 8002866:	f000 f85c 	bl	8002922 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800286e:	223f      	movs	r2, #63	@ 0x3f
 8002870:	409a      	lsls	r2, r3
 8002872:	693b      	ldr	r3, [r7, #16]
 8002874:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	681a      	ldr	r2, [r3, #0]
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f042 0216 	orr.w	r2, r2, #22
 8002884:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800288a:	2b00      	cmp	r3, #0
 800288c:	d007      	beq.n	800289e <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	681a      	ldr	r2, [r3, #0]
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f042 0208 	orr.w	r2, r2, #8
 800289c:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	681a      	ldr	r2, [r3, #0]
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f042 0201 	orr.w	r2, r2, #1
 80028ac:	601a      	str	r2, [r3, #0]
 80028ae:	e005      	b.n	80028bc <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	2200      	movs	r2, #0
 80028b4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80028b8:	2302      	movs	r3, #2
 80028ba:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80028bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80028be:	4618      	mov	r0, r3
 80028c0:	3718      	adds	r7, #24
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}

080028c6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80028c6:	b480      	push	{r7}
 80028c8:	b083      	sub	sp, #12
 80028ca:	af00      	add	r7, sp, #0
 80028cc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80028d4:	b2db      	uxtb	r3, r3
 80028d6:	2b02      	cmp	r3, #2
 80028d8:	d004      	beq.n	80028e4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2280      	movs	r2, #128	@ 0x80
 80028de:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80028e0:	2301      	movs	r3, #1
 80028e2:	e00c      	b.n	80028fe <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2205      	movs	r2, #5
 80028e8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	681a      	ldr	r2, [r3, #0]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f022 0201 	bic.w	r2, r2, #1
 80028fa:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80028fc:	2300      	movs	r3, #0
}
 80028fe:	4618      	mov	r0, r3
 8002900:	370c      	adds	r7, #12
 8002902:	46bd      	mov	sp, r7
 8002904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002908:	4770      	bx	lr

0800290a <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800290a:	b480      	push	{r7}
 800290c:	b083      	sub	sp, #12
 800290e:	af00      	add	r7, sp, #0
 8002910:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8002916:	4618      	mov	r0, r3
 8002918:	370c      	adds	r7, #12
 800291a:	46bd      	mov	sp, r7
 800291c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002920:	4770      	bx	lr

08002922 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002922:	b480      	push	{r7}
 8002924:	b085      	sub	sp, #20
 8002926:	af00      	add	r7, sp, #0
 8002928:	60f8      	str	r0, [r7, #12]
 800292a:	60b9      	str	r1, [r7, #8]
 800292c:	607a      	str	r2, [r7, #4]
 800292e:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	681a      	ldr	r2, [r3, #0]
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800293e:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	683a      	ldr	r2, [r7, #0]
 8002946:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	689b      	ldr	r3, [r3, #8]
 800294c:	2b40      	cmp	r3, #64	@ 0x40
 800294e:	d108      	bne.n	8002962 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	687a      	ldr	r2, [r7, #4]
 8002956:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	68ba      	ldr	r2, [r7, #8]
 800295e:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002960:	e007      	b.n	8002972 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	68ba      	ldr	r2, [r7, #8]
 8002968:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	687a      	ldr	r2, [r7, #4]
 8002970:	60da      	str	r2, [r3, #12]
}
 8002972:	bf00      	nop
 8002974:	3714      	adds	r7, #20
 8002976:	46bd      	mov	sp, r7
 8002978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297c:	4770      	bx	lr
	...

08002980 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002980:	b480      	push	{r7}
 8002982:	b089      	sub	sp, #36	@ 0x24
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
 8002988:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800298a:	2300      	movs	r3, #0
 800298c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800298e:	2300      	movs	r3, #0
 8002990:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002992:	2300      	movs	r3, #0
 8002994:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002996:	2300      	movs	r3, #0
 8002998:	61fb      	str	r3, [r7, #28]
 800299a:	e165      	b.n	8002c68 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800299c:	2201      	movs	r2, #1
 800299e:	69fb      	ldr	r3, [r7, #28]
 80029a0:	fa02 f303 	lsl.w	r3, r2, r3
 80029a4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	697a      	ldr	r2, [r7, #20]
 80029ac:	4013      	ands	r3, r2
 80029ae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80029b0:	693a      	ldr	r2, [r7, #16]
 80029b2:	697b      	ldr	r3, [r7, #20]
 80029b4:	429a      	cmp	r2, r3
 80029b6:	f040 8154 	bne.w	8002c62 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	f003 0303 	and.w	r3, r3, #3
 80029c2:	2b01      	cmp	r3, #1
 80029c4:	d005      	beq.n	80029d2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80029ce:	2b02      	cmp	r3, #2
 80029d0:	d130      	bne.n	8002a34 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	689b      	ldr	r3, [r3, #8]
 80029d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80029d8:	69fb      	ldr	r3, [r7, #28]
 80029da:	005b      	lsls	r3, r3, #1
 80029dc:	2203      	movs	r2, #3
 80029de:	fa02 f303 	lsl.w	r3, r2, r3
 80029e2:	43db      	mvns	r3, r3
 80029e4:	69ba      	ldr	r2, [r7, #24]
 80029e6:	4013      	ands	r3, r2
 80029e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	68da      	ldr	r2, [r3, #12]
 80029ee:	69fb      	ldr	r3, [r7, #28]
 80029f0:	005b      	lsls	r3, r3, #1
 80029f2:	fa02 f303 	lsl.w	r3, r2, r3
 80029f6:	69ba      	ldr	r2, [r7, #24]
 80029f8:	4313      	orrs	r3, r2
 80029fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	69ba      	ldr	r2, [r7, #24]
 8002a00:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a08:	2201      	movs	r2, #1
 8002a0a:	69fb      	ldr	r3, [r7, #28]
 8002a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a10:	43db      	mvns	r3, r3
 8002a12:	69ba      	ldr	r2, [r7, #24]
 8002a14:	4013      	ands	r3, r2
 8002a16:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	091b      	lsrs	r3, r3, #4
 8002a1e:	f003 0201 	and.w	r2, r3, #1
 8002a22:	69fb      	ldr	r3, [r7, #28]
 8002a24:	fa02 f303 	lsl.w	r3, r2, r3
 8002a28:	69ba      	ldr	r2, [r7, #24]
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	69ba      	ldr	r2, [r7, #24]
 8002a32:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	f003 0303 	and.w	r3, r3, #3
 8002a3c:	2b03      	cmp	r3, #3
 8002a3e:	d017      	beq.n	8002a70 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	68db      	ldr	r3, [r3, #12]
 8002a44:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002a46:	69fb      	ldr	r3, [r7, #28]
 8002a48:	005b      	lsls	r3, r3, #1
 8002a4a:	2203      	movs	r2, #3
 8002a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a50:	43db      	mvns	r3, r3
 8002a52:	69ba      	ldr	r2, [r7, #24]
 8002a54:	4013      	ands	r3, r2
 8002a56:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	689a      	ldr	r2, [r3, #8]
 8002a5c:	69fb      	ldr	r3, [r7, #28]
 8002a5e:	005b      	lsls	r3, r3, #1
 8002a60:	fa02 f303 	lsl.w	r3, r2, r3
 8002a64:	69ba      	ldr	r2, [r7, #24]
 8002a66:	4313      	orrs	r3, r2
 8002a68:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	69ba      	ldr	r2, [r7, #24]
 8002a6e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	f003 0303 	and.w	r3, r3, #3
 8002a78:	2b02      	cmp	r3, #2
 8002a7a:	d123      	bne.n	8002ac4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002a7c:	69fb      	ldr	r3, [r7, #28]
 8002a7e:	08da      	lsrs	r2, r3, #3
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	3208      	adds	r2, #8
 8002a84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a88:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002a8a:	69fb      	ldr	r3, [r7, #28]
 8002a8c:	f003 0307 	and.w	r3, r3, #7
 8002a90:	009b      	lsls	r3, r3, #2
 8002a92:	220f      	movs	r2, #15
 8002a94:	fa02 f303 	lsl.w	r3, r2, r3
 8002a98:	43db      	mvns	r3, r3
 8002a9a:	69ba      	ldr	r2, [r7, #24]
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	691a      	ldr	r2, [r3, #16]
 8002aa4:	69fb      	ldr	r3, [r7, #28]
 8002aa6:	f003 0307 	and.w	r3, r3, #7
 8002aaa:	009b      	lsls	r3, r3, #2
 8002aac:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab0:	69ba      	ldr	r2, [r7, #24]
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002ab6:	69fb      	ldr	r3, [r7, #28]
 8002ab8:	08da      	lsrs	r2, r3, #3
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	3208      	adds	r2, #8
 8002abe:	69b9      	ldr	r1, [r7, #24]
 8002ac0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002aca:	69fb      	ldr	r3, [r7, #28]
 8002acc:	005b      	lsls	r3, r3, #1
 8002ace:	2203      	movs	r2, #3
 8002ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad4:	43db      	mvns	r3, r3
 8002ad6:	69ba      	ldr	r2, [r7, #24]
 8002ad8:	4013      	ands	r3, r2
 8002ada:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	f003 0203 	and.w	r2, r3, #3
 8002ae4:	69fb      	ldr	r3, [r7, #28]
 8002ae6:	005b      	lsls	r3, r3, #1
 8002ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8002aec:	69ba      	ldr	r2, [r7, #24]
 8002aee:	4313      	orrs	r3, r2
 8002af0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	69ba      	ldr	r2, [r7, #24]
 8002af6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	f000 80ae 	beq.w	8002c62 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b06:	2300      	movs	r3, #0
 8002b08:	60fb      	str	r3, [r7, #12]
 8002b0a:	4b5d      	ldr	r3, [pc, #372]	@ (8002c80 <HAL_GPIO_Init+0x300>)
 8002b0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b0e:	4a5c      	ldr	r2, [pc, #368]	@ (8002c80 <HAL_GPIO_Init+0x300>)
 8002b10:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002b14:	6453      	str	r3, [r2, #68]	@ 0x44
 8002b16:	4b5a      	ldr	r3, [pc, #360]	@ (8002c80 <HAL_GPIO_Init+0x300>)
 8002b18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b1a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b1e:	60fb      	str	r3, [r7, #12]
 8002b20:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002b22:	4a58      	ldr	r2, [pc, #352]	@ (8002c84 <HAL_GPIO_Init+0x304>)
 8002b24:	69fb      	ldr	r3, [r7, #28]
 8002b26:	089b      	lsrs	r3, r3, #2
 8002b28:	3302      	adds	r3, #2
 8002b2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002b30:	69fb      	ldr	r3, [r7, #28]
 8002b32:	f003 0303 	and.w	r3, r3, #3
 8002b36:	009b      	lsls	r3, r3, #2
 8002b38:	220f      	movs	r2, #15
 8002b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b3e:	43db      	mvns	r3, r3
 8002b40:	69ba      	ldr	r2, [r7, #24]
 8002b42:	4013      	ands	r3, r2
 8002b44:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	4a4f      	ldr	r2, [pc, #316]	@ (8002c88 <HAL_GPIO_Init+0x308>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d025      	beq.n	8002b9a <HAL_GPIO_Init+0x21a>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	4a4e      	ldr	r2, [pc, #312]	@ (8002c8c <HAL_GPIO_Init+0x30c>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d01f      	beq.n	8002b96 <HAL_GPIO_Init+0x216>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	4a4d      	ldr	r2, [pc, #308]	@ (8002c90 <HAL_GPIO_Init+0x310>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d019      	beq.n	8002b92 <HAL_GPIO_Init+0x212>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	4a4c      	ldr	r2, [pc, #304]	@ (8002c94 <HAL_GPIO_Init+0x314>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d013      	beq.n	8002b8e <HAL_GPIO_Init+0x20e>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	4a4b      	ldr	r2, [pc, #300]	@ (8002c98 <HAL_GPIO_Init+0x318>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d00d      	beq.n	8002b8a <HAL_GPIO_Init+0x20a>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	4a4a      	ldr	r2, [pc, #296]	@ (8002c9c <HAL_GPIO_Init+0x31c>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d007      	beq.n	8002b86 <HAL_GPIO_Init+0x206>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	4a49      	ldr	r2, [pc, #292]	@ (8002ca0 <HAL_GPIO_Init+0x320>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d101      	bne.n	8002b82 <HAL_GPIO_Init+0x202>
 8002b7e:	2306      	movs	r3, #6
 8002b80:	e00c      	b.n	8002b9c <HAL_GPIO_Init+0x21c>
 8002b82:	2307      	movs	r3, #7
 8002b84:	e00a      	b.n	8002b9c <HAL_GPIO_Init+0x21c>
 8002b86:	2305      	movs	r3, #5
 8002b88:	e008      	b.n	8002b9c <HAL_GPIO_Init+0x21c>
 8002b8a:	2304      	movs	r3, #4
 8002b8c:	e006      	b.n	8002b9c <HAL_GPIO_Init+0x21c>
 8002b8e:	2303      	movs	r3, #3
 8002b90:	e004      	b.n	8002b9c <HAL_GPIO_Init+0x21c>
 8002b92:	2302      	movs	r3, #2
 8002b94:	e002      	b.n	8002b9c <HAL_GPIO_Init+0x21c>
 8002b96:	2301      	movs	r3, #1
 8002b98:	e000      	b.n	8002b9c <HAL_GPIO_Init+0x21c>
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	69fa      	ldr	r2, [r7, #28]
 8002b9e:	f002 0203 	and.w	r2, r2, #3
 8002ba2:	0092      	lsls	r2, r2, #2
 8002ba4:	4093      	lsls	r3, r2
 8002ba6:	69ba      	ldr	r2, [r7, #24]
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002bac:	4935      	ldr	r1, [pc, #212]	@ (8002c84 <HAL_GPIO_Init+0x304>)
 8002bae:	69fb      	ldr	r3, [r7, #28]
 8002bb0:	089b      	lsrs	r3, r3, #2
 8002bb2:	3302      	adds	r3, #2
 8002bb4:	69ba      	ldr	r2, [r7, #24]
 8002bb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002bba:	4b3a      	ldr	r3, [pc, #232]	@ (8002ca4 <HAL_GPIO_Init+0x324>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bc0:	693b      	ldr	r3, [r7, #16]
 8002bc2:	43db      	mvns	r3, r3
 8002bc4:	69ba      	ldr	r2, [r7, #24]
 8002bc6:	4013      	ands	r3, r2
 8002bc8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d003      	beq.n	8002bde <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002bd6:	69ba      	ldr	r2, [r7, #24]
 8002bd8:	693b      	ldr	r3, [r7, #16]
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002bde:	4a31      	ldr	r2, [pc, #196]	@ (8002ca4 <HAL_GPIO_Init+0x324>)
 8002be0:	69bb      	ldr	r3, [r7, #24]
 8002be2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002be4:	4b2f      	ldr	r3, [pc, #188]	@ (8002ca4 <HAL_GPIO_Init+0x324>)
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bea:	693b      	ldr	r3, [r7, #16]
 8002bec:	43db      	mvns	r3, r3
 8002bee:	69ba      	ldr	r2, [r7, #24]
 8002bf0:	4013      	ands	r3, r2
 8002bf2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d003      	beq.n	8002c08 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002c00:	69ba      	ldr	r2, [r7, #24]
 8002c02:	693b      	ldr	r3, [r7, #16]
 8002c04:	4313      	orrs	r3, r2
 8002c06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002c08:	4a26      	ldr	r2, [pc, #152]	@ (8002ca4 <HAL_GPIO_Init+0x324>)
 8002c0a:	69bb      	ldr	r3, [r7, #24]
 8002c0c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c0e:	4b25      	ldr	r3, [pc, #148]	@ (8002ca4 <HAL_GPIO_Init+0x324>)
 8002c10:	689b      	ldr	r3, [r3, #8]
 8002c12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c14:	693b      	ldr	r3, [r7, #16]
 8002c16:	43db      	mvns	r3, r3
 8002c18:	69ba      	ldr	r2, [r7, #24]
 8002c1a:	4013      	ands	r3, r2
 8002c1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d003      	beq.n	8002c32 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002c2a:	69ba      	ldr	r2, [r7, #24]
 8002c2c:	693b      	ldr	r3, [r7, #16]
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002c32:	4a1c      	ldr	r2, [pc, #112]	@ (8002ca4 <HAL_GPIO_Init+0x324>)
 8002c34:	69bb      	ldr	r3, [r7, #24]
 8002c36:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002c38:	4b1a      	ldr	r3, [pc, #104]	@ (8002ca4 <HAL_GPIO_Init+0x324>)
 8002c3a:	68db      	ldr	r3, [r3, #12]
 8002c3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	43db      	mvns	r3, r3
 8002c42:	69ba      	ldr	r2, [r7, #24]
 8002c44:	4013      	ands	r3, r2
 8002c46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d003      	beq.n	8002c5c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002c54:	69ba      	ldr	r2, [r7, #24]
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002c5c:	4a11      	ldr	r2, [pc, #68]	@ (8002ca4 <HAL_GPIO_Init+0x324>)
 8002c5e:	69bb      	ldr	r3, [r7, #24]
 8002c60:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c62:	69fb      	ldr	r3, [r7, #28]
 8002c64:	3301      	adds	r3, #1
 8002c66:	61fb      	str	r3, [r7, #28]
 8002c68:	69fb      	ldr	r3, [r7, #28]
 8002c6a:	2b0f      	cmp	r3, #15
 8002c6c:	f67f ae96 	bls.w	800299c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002c70:	bf00      	nop
 8002c72:	bf00      	nop
 8002c74:	3724      	adds	r7, #36	@ 0x24
 8002c76:	46bd      	mov	sp, r7
 8002c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7c:	4770      	bx	lr
 8002c7e:	bf00      	nop
 8002c80:	40023800 	.word	0x40023800
 8002c84:	40013800 	.word	0x40013800
 8002c88:	40020000 	.word	0x40020000
 8002c8c:	40020400 	.word	0x40020400
 8002c90:	40020800 	.word	0x40020800
 8002c94:	40020c00 	.word	0x40020c00
 8002c98:	40021000 	.word	0x40021000
 8002c9c:	40021400 	.word	0x40021400
 8002ca0:	40021800 	.word	0x40021800
 8002ca4:	40013c00 	.word	0x40013c00

08002ca8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	b083      	sub	sp, #12
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
 8002cb0:	460b      	mov	r3, r1
 8002cb2:	807b      	strh	r3, [r7, #2]
 8002cb4:	4613      	mov	r3, r2
 8002cb6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002cb8:	787b      	ldrb	r3, [r7, #1]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d003      	beq.n	8002cc6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002cbe:	887a      	ldrh	r2, [r7, #2]
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002cc4:	e003      	b.n	8002cce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002cc6:	887b      	ldrh	r3, [r7, #2]
 8002cc8:	041a      	lsls	r2, r3, #16
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	619a      	str	r2, [r3, #24]
}
 8002cce:	bf00      	nop
 8002cd0:	370c      	adds	r7, #12
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd8:	4770      	bx	lr
	...

08002cdc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b084      	sub	sp, #16
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d101      	bne.n	8002cee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
 8002cec:	e12b      	b.n	8002f46 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002cf4:	b2db      	uxtb	r3, r3
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d106      	bne.n	8002d08 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002d02:	6878      	ldr	r0, [r7, #4]
 8002d04:	f7fe fdea 	bl	80018dc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2224      	movs	r2, #36	@ 0x24
 8002d0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	681a      	ldr	r2, [r3, #0]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f022 0201 	bic.w	r2, r2, #1
 8002d1e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	681a      	ldr	r2, [r3, #0]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002d2e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	681a      	ldr	r2, [r3, #0]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002d3e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002d40:	f002 fe04 	bl	800594c <HAL_RCC_GetPCLK1Freq>
 8002d44:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	4a81      	ldr	r2, [pc, #516]	@ (8002f50 <HAL_I2C_Init+0x274>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d807      	bhi.n	8002d60 <HAL_I2C_Init+0x84>
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	4a80      	ldr	r2, [pc, #512]	@ (8002f54 <HAL_I2C_Init+0x278>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	bf94      	ite	ls
 8002d58:	2301      	movls	r3, #1
 8002d5a:	2300      	movhi	r3, #0
 8002d5c:	b2db      	uxtb	r3, r3
 8002d5e:	e006      	b.n	8002d6e <HAL_I2C_Init+0x92>
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	4a7d      	ldr	r2, [pc, #500]	@ (8002f58 <HAL_I2C_Init+0x27c>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	bf94      	ite	ls
 8002d68:	2301      	movls	r3, #1
 8002d6a:	2300      	movhi	r3, #0
 8002d6c:	b2db      	uxtb	r3, r3
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d001      	beq.n	8002d76 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002d72:	2301      	movs	r3, #1
 8002d74:	e0e7      	b.n	8002f46 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	4a78      	ldr	r2, [pc, #480]	@ (8002f5c <HAL_I2C_Init+0x280>)
 8002d7a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d7e:	0c9b      	lsrs	r3, r3, #18
 8002d80:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	68ba      	ldr	r2, [r7, #8]
 8002d92:	430a      	orrs	r2, r1
 8002d94:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	6a1b      	ldr	r3, [r3, #32]
 8002d9c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	4a6a      	ldr	r2, [pc, #424]	@ (8002f50 <HAL_I2C_Init+0x274>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d802      	bhi.n	8002db0 <HAL_I2C_Init+0xd4>
 8002daa:	68bb      	ldr	r3, [r7, #8]
 8002dac:	3301      	adds	r3, #1
 8002dae:	e009      	b.n	8002dc4 <HAL_I2C_Init+0xe8>
 8002db0:	68bb      	ldr	r3, [r7, #8]
 8002db2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002db6:	fb02 f303 	mul.w	r3, r2, r3
 8002dba:	4a69      	ldr	r2, [pc, #420]	@ (8002f60 <HAL_I2C_Init+0x284>)
 8002dbc:	fba2 2303 	umull	r2, r3, r2, r3
 8002dc0:	099b      	lsrs	r3, r3, #6
 8002dc2:	3301      	adds	r3, #1
 8002dc4:	687a      	ldr	r2, [r7, #4]
 8002dc6:	6812      	ldr	r2, [r2, #0]
 8002dc8:	430b      	orrs	r3, r1
 8002dca:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	69db      	ldr	r3, [r3, #28]
 8002dd2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002dd6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	495c      	ldr	r1, [pc, #368]	@ (8002f50 <HAL_I2C_Init+0x274>)
 8002de0:	428b      	cmp	r3, r1
 8002de2:	d819      	bhi.n	8002e18 <HAL_I2C_Init+0x13c>
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	1e59      	subs	r1, r3, #1
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	005b      	lsls	r3, r3, #1
 8002dee:	fbb1 f3f3 	udiv	r3, r1, r3
 8002df2:	1c59      	adds	r1, r3, #1
 8002df4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002df8:	400b      	ands	r3, r1
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d00a      	beq.n	8002e14 <HAL_I2C_Init+0x138>
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	1e59      	subs	r1, r3, #1
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	005b      	lsls	r3, r3, #1
 8002e08:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e0c:	3301      	adds	r3, #1
 8002e0e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e12:	e051      	b.n	8002eb8 <HAL_I2C_Init+0x1dc>
 8002e14:	2304      	movs	r3, #4
 8002e16:	e04f      	b.n	8002eb8 <HAL_I2C_Init+0x1dc>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	689b      	ldr	r3, [r3, #8]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d111      	bne.n	8002e44 <HAL_I2C_Init+0x168>
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	1e58      	subs	r0, r3, #1
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6859      	ldr	r1, [r3, #4]
 8002e28:	460b      	mov	r3, r1
 8002e2a:	005b      	lsls	r3, r3, #1
 8002e2c:	440b      	add	r3, r1
 8002e2e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e32:	3301      	adds	r3, #1
 8002e34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	bf0c      	ite	eq
 8002e3c:	2301      	moveq	r3, #1
 8002e3e:	2300      	movne	r3, #0
 8002e40:	b2db      	uxtb	r3, r3
 8002e42:	e012      	b.n	8002e6a <HAL_I2C_Init+0x18e>
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	1e58      	subs	r0, r3, #1
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6859      	ldr	r1, [r3, #4]
 8002e4c:	460b      	mov	r3, r1
 8002e4e:	009b      	lsls	r3, r3, #2
 8002e50:	440b      	add	r3, r1
 8002e52:	0099      	lsls	r1, r3, #2
 8002e54:	440b      	add	r3, r1
 8002e56:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e5a:	3301      	adds	r3, #1
 8002e5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	bf0c      	ite	eq
 8002e64:	2301      	moveq	r3, #1
 8002e66:	2300      	movne	r3, #0
 8002e68:	b2db      	uxtb	r3, r3
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d001      	beq.n	8002e72 <HAL_I2C_Init+0x196>
 8002e6e:	2301      	movs	r3, #1
 8002e70:	e022      	b.n	8002eb8 <HAL_I2C_Init+0x1dc>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	689b      	ldr	r3, [r3, #8]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d10e      	bne.n	8002e98 <HAL_I2C_Init+0x1bc>
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	1e58      	subs	r0, r3, #1
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6859      	ldr	r1, [r3, #4]
 8002e82:	460b      	mov	r3, r1
 8002e84:	005b      	lsls	r3, r3, #1
 8002e86:	440b      	add	r3, r1
 8002e88:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e8c:	3301      	adds	r3, #1
 8002e8e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e92:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002e96:	e00f      	b.n	8002eb8 <HAL_I2C_Init+0x1dc>
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	1e58      	subs	r0, r3, #1
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6859      	ldr	r1, [r3, #4]
 8002ea0:	460b      	mov	r3, r1
 8002ea2:	009b      	lsls	r3, r3, #2
 8002ea4:	440b      	add	r3, r1
 8002ea6:	0099      	lsls	r1, r3, #2
 8002ea8:	440b      	add	r3, r1
 8002eaa:	fbb0 f3f3 	udiv	r3, r0, r3
 8002eae:	3301      	adds	r3, #1
 8002eb0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002eb4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002eb8:	6879      	ldr	r1, [r7, #4]
 8002eba:	6809      	ldr	r1, [r1, #0]
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	69da      	ldr	r2, [r3, #28]
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6a1b      	ldr	r3, [r3, #32]
 8002ed2:	431a      	orrs	r2, r3
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	430a      	orrs	r2, r1
 8002eda:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	689b      	ldr	r3, [r3, #8]
 8002ee2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002ee6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002eea:	687a      	ldr	r2, [r7, #4]
 8002eec:	6911      	ldr	r1, [r2, #16]
 8002eee:	687a      	ldr	r2, [r7, #4]
 8002ef0:	68d2      	ldr	r2, [r2, #12]
 8002ef2:	4311      	orrs	r1, r2
 8002ef4:	687a      	ldr	r2, [r7, #4]
 8002ef6:	6812      	ldr	r2, [r2, #0]
 8002ef8:	430b      	orrs	r3, r1
 8002efa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	68db      	ldr	r3, [r3, #12]
 8002f02:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	695a      	ldr	r2, [r3, #20]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	699b      	ldr	r3, [r3, #24]
 8002f0e:	431a      	orrs	r2, r3
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	430a      	orrs	r2, r1
 8002f16:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	681a      	ldr	r2, [r3, #0]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f042 0201 	orr.w	r2, r2, #1
 8002f26:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2220      	movs	r2, #32
 8002f32:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2200      	movs	r2, #0
 8002f3a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2200      	movs	r2, #0
 8002f40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002f44:	2300      	movs	r3, #0
}
 8002f46:	4618      	mov	r0, r3
 8002f48:	3710      	adds	r7, #16
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bd80      	pop	{r7, pc}
 8002f4e:	bf00      	nop
 8002f50:	000186a0 	.word	0x000186a0
 8002f54:	001e847f 	.word	0x001e847f
 8002f58:	003d08ff 	.word	0x003d08ff
 8002f5c:	431bde83 	.word	0x431bde83
 8002f60:	10624dd3 	.word	0x10624dd3

08002f64 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b088      	sub	sp, #32
 8002f68:	af02      	add	r7, sp, #8
 8002f6a:	60f8      	str	r0, [r7, #12]
 8002f6c:	4608      	mov	r0, r1
 8002f6e:	4611      	mov	r1, r2
 8002f70:	461a      	mov	r2, r3
 8002f72:	4603      	mov	r3, r0
 8002f74:	817b      	strh	r3, [r7, #10]
 8002f76:	460b      	mov	r3, r1
 8002f78:	813b      	strh	r3, [r7, #8]
 8002f7a:	4613      	mov	r3, r2
 8002f7c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002f7e:	f7fe ff9b 	bl	8001eb8 <HAL_GetTick>
 8002f82:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f8a:	b2db      	uxtb	r3, r3
 8002f8c:	2b20      	cmp	r3, #32
 8002f8e:	f040 80d9 	bne.w	8003144 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002f92:	697b      	ldr	r3, [r7, #20]
 8002f94:	9300      	str	r3, [sp, #0]
 8002f96:	2319      	movs	r3, #25
 8002f98:	2201      	movs	r2, #1
 8002f9a:	496d      	ldr	r1, [pc, #436]	@ (8003150 <HAL_I2C_Mem_Write+0x1ec>)
 8002f9c:	68f8      	ldr	r0, [r7, #12]
 8002f9e:	f000 ff4d 	bl	8003e3c <I2C_WaitOnFlagUntilTimeout>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d001      	beq.n	8002fac <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002fa8:	2302      	movs	r3, #2
 8002faa:	e0cc      	b.n	8003146 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002fb2:	2b01      	cmp	r3, #1
 8002fb4:	d101      	bne.n	8002fba <HAL_I2C_Mem_Write+0x56>
 8002fb6:	2302      	movs	r3, #2
 8002fb8:	e0c5      	b.n	8003146 <HAL_I2C_Mem_Write+0x1e2>
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	2201      	movs	r2, #1
 8002fbe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f003 0301 	and.w	r3, r3, #1
 8002fcc:	2b01      	cmp	r3, #1
 8002fce:	d007      	beq.n	8002fe0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	681a      	ldr	r2, [r3, #0]
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f042 0201 	orr.w	r2, r2, #1
 8002fde:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	681a      	ldr	r2, [r3, #0]
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002fee:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	2221      	movs	r2, #33	@ 0x21
 8002ff4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	2240      	movs	r2, #64	@ 0x40
 8002ffc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	2200      	movs	r2, #0
 8003004:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	6a3a      	ldr	r2, [r7, #32]
 800300a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003010:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003016:	b29a      	uxth	r2, r3
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	4a4d      	ldr	r2, [pc, #308]	@ (8003154 <HAL_I2C_Mem_Write+0x1f0>)
 8003020:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003022:	88f8      	ldrh	r0, [r7, #6]
 8003024:	893a      	ldrh	r2, [r7, #8]
 8003026:	8979      	ldrh	r1, [r7, #10]
 8003028:	697b      	ldr	r3, [r7, #20]
 800302a:	9301      	str	r3, [sp, #4]
 800302c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800302e:	9300      	str	r3, [sp, #0]
 8003030:	4603      	mov	r3, r0
 8003032:	68f8      	ldr	r0, [r7, #12]
 8003034:	f000 fc72 	bl	800391c <I2C_RequestMemoryWrite>
 8003038:	4603      	mov	r3, r0
 800303a:	2b00      	cmp	r3, #0
 800303c:	d052      	beq.n	80030e4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800303e:	2301      	movs	r3, #1
 8003040:	e081      	b.n	8003146 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003042:	697a      	ldr	r2, [r7, #20]
 8003044:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003046:	68f8      	ldr	r0, [r7, #12]
 8003048:	f000 ffce 	bl	8003fe8 <I2C_WaitOnTXEFlagUntilTimeout>
 800304c:	4603      	mov	r3, r0
 800304e:	2b00      	cmp	r3, #0
 8003050:	d00d      	beq.n	800306e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003056:	2b04      	cmp	r3, #4
 8003058:	d107      	bne.n	800306a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	681a      	ldr	r2, [r3, #0]
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003068:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800306a:	2301      	movs	r3, #1
 800306c:	e06b      	b.n	8003146 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003072:	781a      	ldrb	r2, [r3, #0]
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800307e:	1c5a      	adds	r2, r3, #1
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003088:	3b01      	subs	r3, #1
 800308a:	b29a      	uxth	r2, r3
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003094:	b29b      	uxth	r3, r3
 8003096:	3b01      	subs	r3, #1
 8003098:	b29a      	uxth	r2, r3
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	695b      	ldr	r3, [r3, #20]
 80030a4:	f003 0304 	and.w	r3, r3, #4
 80030a8:	2b04      	cmp	r3, #4
 80030aa:	d11b      	bne.n	80030e4 <HAL_I2C_Mem_Write+0x180>
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d017      	beq.n	80030e4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030b8:	781a      	ldrb	r2, [r3, #0]
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030c4:	1c5a      	adds	r2, r3, #1
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030ce:	3b01      	subs	r3, #1
 80030d0:	b29a      	uxth	r2, r3
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030da:	b29b      	uxth	r3, r3
 80030dc:	3b01      	subs	r3, #1
 80030de:	b29a      	uxth	r2, r3
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d1aa      	bne.n	8003042 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030ec:	697a      	ldr	r2, [r7, #20]
 80030ee:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80030f0:	68f8      	ldr	r0, [r7, #12]
 80030f2:	f000 ffba 	bl	800406a <I2C_WaitOnBTFFlagUntilTimeout>
 80030f6:	4603      	mov	r3, r0
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d00d      	beq.n	8003118 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003100:	2b04      	cmp	r3, #4
 8003102:	d107      	bne.n	8003114 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	681a      	ldr	r2, [r3, #0]
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003112:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003114:	2301      	movs	r3, #1
 8003116:	e016      	b.n	8003146 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	681a      	ldr	r2, [r3, #0]
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003126:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	2220      	movs	r2, #32
 800312c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	2200      	movs	r2, #0
 8003134:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	2200      	movs	r2, #0
 800313c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003140:	2300      	movs	r3, #0
 8003142:	e000      	b.n	8003146 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003144:	2302      	movs	r3, #2
  }
}
 8003146:	4618      	mov	r0, r3
 8003148:	3718      	adds	r7, #24
 800314a:	46bd      	mov	sp, r7
 800314c:	bd80      	pop	{r7, pc}
 800314e:	bf00      	nop
 8003150:	00100002 	.word	0x00100002
 8003154:	ffff0000 	.word	0xffff0000

08003158 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b08c      	sub	sp, #48	@ 0x30
 800315c:	af02      	add	r7, sp, #8
 800315e:	60f8      	str	r0, [r7, #12]
 8003160:	4608      	mov	r0, r1
 8003162:	4611      	mov	r1, r2
 8003164:	461a      	mov	r2, r3
 8003166:	4603      	mov	r3, r0
 8003168:	817b      	strh	r3, [r7, #10]
 800316a:	460b      	mov	r3, r1
 800316c:	813b      	strh	r3, [r7, #8]
 800316e:	4613      	mov	r3, r2
 8003170:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003172:	f7fe fea1 	bl	8001eb8 <HAL_GetTick>
 8003176:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800317e:	b2db      	uxtb	r3, r3
 8003180:	2b20      	cmp	r3, #32
 8003182:	f040 8208 	bne.w	8003596 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003186:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003188:	9300      	str	r3, [sp, #0]
 800318a:	2319      	movs	r3, #25
 800318c:	2201      	movs	r2, #1
 800318e:	497b      	ldr	r1, [pc, #492]	@ (800337c <HAL_I2C_Mem_Read+0x224>)
 8003190:	68f8      	ldr	r0, [r7, #12]
 8003192:	f000 fe53 	bl	8003e3c <I2C_WaitOnFlagUntilTimeout>
 8003196:	4603      	mov	r3, r0
 8003198:	2b00      	cmp	r3, #0
 800319a:	d001      	beq.n	80031a0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800319c:	2302      	movs	r3, #2
 800319e:	e1fb      	b.n	8003598 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80031a6:	2b01      	cmp	r3, #1
 80031a8:	d101      	bne.n	80031ae <HAL_I2C_Mem_Read+0x56>
 80031aa:	2302      	movs	r3, #2
 80031ac:	e1f4      	b.n	8003598 <HAL_I2C_Mem_Read+0x440>
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	2201      	movs	r2, #1
 80031b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f003 0301 	and.w	r3, r3, #1
 80031c0:	2b01      	cmp	r3, #1
 80031c2:	d007      	beq.n	80031d4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	681a      	ldr	r2, [r3, #0]
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f042 0201 	orr.w	r2, r2, #1
 80031d2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	681a      	ldr	r2, [r3, #0]
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80031e2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	2222      	movs	r2, #34	@ 0x22
 80031e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	2240      	movs	r2, #64	@ 0x40
 80031f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	2200      	movs	r2, #0
 80031f8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80031fe:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003204:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800320a:	b29a      	uxth	r2, r3
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	4a5b      	ldr	r2, [pc, #364]	@ (8003380 <HAL_I2C_Mem_Read+0x228>)
 8003214:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003216:	88f8      	ldrh	r0, [r7, #6]
 8003218:	893a      	ldrh	r2, [r7, #8]
 800321a:	8979      	ldrh	r1, [r7, #10]
 800321c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800321e:	9301      	str	r3, [sp, #4]
 8003220:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003222:	9300      	str	r3, [sp, #0]
 8003224:	4603      	mov	r3, r0
 8003226:	68f8      	ldr	r0, [r7, #12]
 8003228:	f000 fc0e 	bl	8003a48 <I2C_RequestMemoryRead>
 800322c:	4603      	mov	r3, r0
 800322e:	2b00      	cmp	r3, #0
 8003230:	d001      	beq.n	8003236 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003232:	2301      	movs	r3, #1
 8003234:	e1b0      	b.n	8003598 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800323a:	2b00      	cmp	r3, #0
 800323c:	d113      	bne.n	8003266 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800323e:	2300      	movs	r3, #0
 8003240:	623b      	str	r3, [r7, #32]
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	695b      	ldr	r3, [r3, #20]
 8003248:	623b      	str	r3, [r7, #32]
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	699b      	ldr	r3, [r3, #24]
 8003250:	623b      	str	r3, [r7, #32]
 8003252:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	681a      	ldr	r2, [r3, #0]
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003262:	601a      	str	r2, [r3, #0]
 8003264:	e184      	b.n	8003570 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800326a:	2b01      	cmp	r3, #1
 800326c:	d11b      	bne.n	80032a6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	681a      	ldr	r2, [r3, #0]
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800327c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800327e:	2300      	movs	r3, #0
 8003280:	61fb      	str	r3, [r7, #28]
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	695b      	ldr	r3, [r3, #20]
 8003288:	61fb      	str	r3, [r7, #28]
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	699b      	ldr	r3, [r3, #24]
 8003290:	61fb      	str	r3, [r7, #28]
 8003292:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	681a      	ldr	r2, [r3, #0]
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80032a2:	601a      	str	r2, [r3, #0]
 80032a4:	e164      	b.n	8003570 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032aa:	2b02      	cmp	r3, #2
 80032ac:	d11b      	bne.n	80032e6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	681a      	ldr	r2, [r3, #0]
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80032bc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	681a      	ldr	r2, [r3, #0]
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80032cc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032ce:	2300      	movs	r3, #0
 80032d0:	61bb      	str	r3, [r7, #24]
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	695b      	ldr	r3, [r3, #20]
 80032d8:	61bb      	str	r3, [r7, #24]
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	699b      	ldr	r3, [r3, #24]
 80032e0:	61bb      	str	r3, [r7, #24]
 80032e2:	69bb      	ldr	r3, [r7, #24]
 80032e4:	e144      	b.n	8003570 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032e6:	2300      	movs	r3, #0
 80032e8:	617b      	str	r3, [r7, #20]
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	695b      	ldr	r3, [r3, #20]
 80032f0:	617b      	str	r3, [r7, #20]
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	699b      	ldr	r3, [r3, #24]
 80032f8:	617b      	str	r3, [r7, #20]
 80032fa:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80032fc:	e138      	b.n	8003570 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003302:	2b03      	cmp	r3, #3
 8003304:	f200 80f1 	bhi.w	80034ea <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800330c:	2b01      	cmp	r3, #1
 800330e:	d123      	bne.n	8003358 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003310:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003312:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003314:	68f8      	ldr	r0, [r7, #12]
 8003316:	f000 fee9 	bl	80040ec <I2C_WaitOnRXNEFlagUntilTimeout>
 800331a:	4603      	mov	r3, r0
 800331c:	2b00      	cmp	r3, #0
 800331e:	d001      	beq.n	8003324 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003320:	2301      	movs	r3, #1
 8003322:	e139      	b.n	8003598 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	691a      	ldr	r2, [r3, #16]
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800332e:	b2d2      	uxtb	r2, r2
 8003330:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003336:	1c5a      	adds	r2, r3, #1
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003340:	3b01      	subs	r3, #1
 8003342:	b29a      	uxth	r2, r3
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800334c:	b29b      	uxth	r3, r3
 800334e:	3b01      	subs	r3, #1
 8003350:	b29a      	uxth	r2, r3
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003356:	e10b      	b.n	8003570 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800335c:	2b02      	cmp	r3, #2
 800335e:	d14e      	bne.n	80033fe <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003360:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003362:	9300      	str	r3, [sp, #0]
 8003364:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003366:	2200      	movs	r2, #0
 8003368:	4906      	ldr	r1, [pc, #24]	@ (8003384 <HAL_I2C_Mem_Read+0x22c>)
 800336a:	68f8      	ldr	r0, [r7, #12]
 800336c:	f000 fd66 	bl	8003e3c <I2C_WaitOnFlagUntilTimeout>
 8003370:	4603      	mov	r3, r0
 8003372:	2b00      	cmp	r3, #0
 8003374:	d008      	beq.n	8003388 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003376:	2301      	movs	r3, #1
 8003378:	e10e      	b.n	8003598 <HAL_I2C_Mem_Read+0x440>
 800337a:	bf00      	nop
 800337c:	00100002 	.word	0x00100002
 8003380:	ffff0000 	.word	0xffff0000
 8003384:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	681a      	ldr	r2, [r3, #0]
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003396:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	691a      	ldr	r2, [r3, #16]
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033a2:	b2d2      	uxtb	r2, r2
 80033a4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033aa:	1c5a      	adds	r2, r3, #1
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033b4:	3b01      	subs	r3, #1
 80033b6:	b29a      	uxth	r2, r3
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033c0:	b29b      	uxth	r3, r3
 80033c2:	3b01      	subs	r3, #1
 80033c4:	b29a      	uxth	r2, r3
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	691a      	ldr	r2, [r3, #16]
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033d4:	b2d2      	uxtb	r2, r2
 80033d6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033dc:	1c5a      	adds	r2, r3, #1
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033e6:	3b01      	subs	r3, #1
 80033e8:	b29a      	uxth	r2, r3
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033f2:	b29b      	uxth	r3, r3
 80033f4:	3b01      	subs	r3, #1
 80033f6:	b29a      	uxth	r2, r3
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80033fc:	e0b8      	b.n	8003570 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80033fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003400:	9300      	str	r3, [sp, #0]
 8003402:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003404:	2200      	movs	r2, #0
 8003406:	4966      	ldr	r1, [pc, #408]	@ (80035a0 <HAL_I2C_Mem_Read+0x448>)
 8003408:	68f8      	ldr	r0, [r7, #12]
 800340a:	f000 fd17 	bl	8003e3c <I2C_WaitOnFlagUntilTimeout>
 800340e:	4603      	mov	r3, r0
 8003410:	2b00      	cmp	r3, #0
 8003412:	d001      	beq.n	8003418 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003414:	2301      	movs	r3, #1
 8003416:	e0bf      	b.n	8003598 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	681a      	ldr	r2, [r3, #0]
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003426:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	691a      	ldr	r2, [r3, #16]
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003432:	b2d2      	uxtb	r2, r2
 8003434:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800343a:	1c5a      	adds	r2, r3, #1
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003444:	3b01      	subs	r3, #1
 8003446:	b29a      	uxth	r2, r3
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003450:	b29b      	uxth	r3, r3
 8003452:	3b01      	subs	r3, #1
 8003454:	b29a      	uxth	r2, r3
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800345a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800345c:	9300      	str	r3, [sp, #0]
 800345e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003460:	2200      	movs	r2, #0
 8003462:	494f      	ldr	r1, [pc, #316]	@ (80035a0 <HAL_I2C_Mem_Read+0x448>)
 8003464:	68f8      	ldr	r0, [r7, #12]
 8003466:	f000 fce9 	bl	8003e3c <I2C_WaitOnFlagUntilTimeout>
 800346a:	4603      	mov	r3, r0
 800346c:	2b00      	cmp	r3, #0
 800346e:	d001      	beq.n	8003474 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003470:	2301      	movs	r3, #1
 8003472:	e091      	b.n	8003598 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	681a      	ldr	r2, [r3, #0]
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003482:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	691a      	ldr	r2, [r3, #16]
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800348e:	b2d2      	uxtb	r2, r2
 8003490:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003496:	1c5a      	adds	r2, r3, #1
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034a0:	3b01      	subs	r3, #1
 80034a2:	b29a      	uxth	r2, r3
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034ac:	b29b      	uxth	r3, r3
 80034ae:	3b01      	subs	r3, #1
 80034b0:	b29a      	uxth	r2, r3
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	691a      	ldr	r2, [r3, #16]
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034c0:	b2d2      	uxtb	r2, r2
 80034c2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034c8:	1c5a      	adds	r2, r3, #1
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034d2:	3b01      	subs	r3, #1
 80034d4:	b29a      	uxth	r2, r3
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034de:	b29b      	uxth	r3, r3
 80034e0:	3b01      	subs	r3, #1
 80034e2:	b29a      	uxth	r2, r3
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80034e8:	e042      	b.n	8003570 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80034ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80034ec:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80034ee:	68f8      	ldr	r0, [r7, #12]
 80034f0:	f000 fdfc 	bl	80040ec <I2C_WaitOnRXNEFlagUntilTimeout>
 80034f4:	4603      	mov	r3, r0
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d001      	beq.n	80034fe <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80034fa:	2301      	movs	r3, #1
 80034fc:	e04c      	b.n	8003598 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	691a      	ldr	r2, [r3, #16]
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003508:	b2d2      	uxtb	r2, r2
 800350a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003510:	1c5a      	adds	r2, r3, #1
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800351a:	3b01      	subs	r3, #1
 800351c:	b29a      	uxth	r2, r3
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003526:	b29b      	uxth	r3, r3
 8003528:	3b01      	subs	r3, #1
 800352a:	b29a      	uxth	r2, r3
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	695b      	ldr	r3, [r3, #20]
 8003536:	f003 0304 	and.w	r3, r3, #4
 800353a:	2b04      	cmp	r3, #4
 800353c:	d118      	bne.n	8003570 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	691a      	ldr	r2, [r3, #16]
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003548:	b2d2      	uxtb	r2, r2
 800354a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003550:	1c5a      	adds	r2, r3, #1
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800355a:	3b01      	subs	r3, #1
 800355c:	b29a      	uxth	r2, r3
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003566:	b29b      	uxth	r3, r3
 8003568:	3b01      	subs	r3, #1
 800356a:	b29a      	uxth	r2, r3
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003574:	2b00      	cmp	r3, #0
 8003576:	f47f aec2 	bne.w	80032fe <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	2220      	movs	r2, #32
 800357e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	2200      	movs	r2, #0
 8003586:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	2200      	movs	r2, #0
 800358e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003592:	2300      	movs	r3, #0
 8003594:	e000      	b.n	8003598 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003596:	2302      	movs	r3, #2
  }
}
 8003598:	4618      	mov	r0, r3
 800359a:	3728      	adds	r7, #40	@ 0x28
 800359c:	46bd      	mov	sp, r7
 800359e:	bd80      	pop	{r7, pc}
 80035a0:	00010004 	.word	0x00010004

080035a4 <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b08c      	sub	sp, #48	@ 0x30
 80035a8:	af02      	add	r7, sp, #8
 80035aa:	60f8      	str	r0, [r7, #12]
 80035ac:	4608      	mov	r0, r1
 80035ae:	4611      	mov	r1, r2
 80035b0:	461a      	mov	r2, r3
 80035b2:	4603      	mov	r3, r0
 80035b4:	817b      	strh	r3, [r7, #10]
 80035b6:	460b      	mov	r3, r1
 80035b8:	813b      	strh	r3, [r7, #8]
 80035ba:	4613      	mov	r3, r2
 80035bc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80035be:	f7fe fc7b 	bl	8001eb8 <HAL_GetTick>
 80035c2:	6278      	str	r0, [r7, #36]	@ 0x24
  __IO uint32_t count = 0U;
 80035c4:	2300      	movs	r3, #0
 80035c6:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80035ce:	b2db      	uxtb	r3, r3
 80035d0:	2b20      	cmp	r3, #32
 80035d2:	f040 8176 	bne.w	80038c2 <HAL_I2C_Mem_Read_DMA+0x31e>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 80035d6:	4b95      	ldr	r3, [pc, #596]	@ (800382c <HAL_I2C_Mem_Read_DMA+0x288>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	08db      	lsrs	r3, r3, #3
 80035dc:	4a94      	ldr	r2, [pc, #592]	@ (8003830 <HAL_I2C_Mem_Read_DMA+0x28c>)
 80035de:	fba2 2303 	umull	r2, r3, r2, r3
 80035e2:	0a1a      	lsrs	r2, r3, #8
 80035e4:	4613      	mov	r3, r2
 80035e6:	009b      	lsls	r3, r3, #2
 80035e8:	4413      	add	r3, r2
 80035ea:	009a      	lsls	r2, r3, #2
 80035ec:	4413      	add	r3, r2
 80035ee:	61fb      	str	r3, [r7, #28]
    do
    {
      count--;
 80035f0:	69fb      	ldr	r3, [r7, #28]
 80035f2:	3b01      	subs	r3, #1
 80035f4:	61fb      	str	r3, [r7, #28]
      if (count == 0U)
 80035f6:	69fb      	ldr	r3, [r7, #28]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d116      	bne.n	800362a <HAL_I2C_Mem_Read_DMA+0x86>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	2200      	movs	r2, #0
 8003600:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	2220      	movs	r2, #32
 8003606:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	2200      	movs	r2, #0
 800360e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003616:	f043 0220 	orr.w	r2, r3, #32
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	2200      	movs	r2, #0
 8003622:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003626:	2301      	movs	r3, #1
 8003628:	e14c      	b.n	80038c4 <HAL_I2C_Mem_Read_DMA+0x320>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	699b      	ldr	r3, [r3, #24]
 8003630:	f003 0302 	and.w	r3, r3, #2
 8003634:	2b02      	cmp	r3, #2
 8003636:	d0db      	beq.n	80035f0 <HAL_I2C_Mem_Read_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800363e:	2b01      	cmp	r3, #1
 8003640:	d101      	bne.n	8003646 <HAL_I2C_Mem_Read_DMA+0xa2>
 8003642:	2302      	movs	r3, #2
 8003644:	e13e      	b.n	80038c4 <HAL_I2C_Mem_Read_DMA+0x320>
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	2201      	movs	r2, #1
 800364a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f003 0301 	and.w	r3, r3, #1
 8003658:	2b01      	cmp	r3, #1
 800365a:	d007      	beq.n	800366c <HAL_I2C_Mem_Read_DMA+0xc8>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	681a      	ldr	r2, [r3, #0]
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f042 0201 	orr.w	r2, r2, #1
 800366a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	681a      	ldr	r2, [r3, #0]
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800367a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	2222      	movs	r2, #34	@ 0x22
 8003680:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	2240      	movs	r2, #64	@ 0x40
 8003688:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	2200      	movs	r2, #0
 8003690:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003696:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800369c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036a2:	b29a      	uxth	r2, r3
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	4a62      	ldr	r2, [pc, #392]	@ (8003834 <HAL_I2C_Mem_Read_DMA+0x290>)
 80036ac:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 80036ae:	897a      	ldrh	r2, [r7, #10]
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->Memaddress  = MemAddress;
 80036b4:	893a      	ldrh	r2, [r7, #8]
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	649a      	str	r2, [r3, #72]	@ 0x48
    hi2c->MemaddSize  = MemAddSize;
 80036ba:	88fa      	ldrh	r2, [r7, #6]
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	64da      	str	r2, [r3, #76]	@ 0x4c
    hi2c->EventCount  = 0U;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	2200      	movs	r2, #0
 80036c4:	651a      	str	r2, [r3, #80]	@ 0x50

    if (hi2c->XferSize > 0U)
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	f000 80cc 	beq.w	8003868 <HAL_I2C_Mem_Read_DMA+0x2c4>
    {
      if (hi2c->hdmarx != NULL)
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d02d      	beq.n	8003734 <HAL_I2C_Mem_Read_DMA+0x190>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036dc:	4a56      	ldr	r2, [pc, #344]	@ (8003838 <HAL_I2C_Mem_Read_DMA+0x294>)
 80036de:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036e4:	4a55      	ldr	r2, [pc, #340]	@ (800383c <HAL_I2C_Mem_Read_DMA+0x298>)
 80036e6:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036ec:	2200      	movs	r2, #0
 80036ee:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmarx->XferM1CpltCallback = NULL;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036f4:	2200      	movs	r2, #0
 80036f6:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036fc:	2200      	movs	r2, #0
 80036fe:	649a      	str	r2, [r3, #72]	@ 0x48
        hi2c->hdmarx->XferAbortCallback = NULL;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003704:	2200      	movs	r2, #0
 8003706:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	3310      	adds	r3, #16
 8003712:	4619      	mov	r1, r3
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003718:	461a      	mov	r2, r3
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800371e:	f7ff f87a 	bl	8002816 <HAL_DMA_Start_IT>
 8003722:	4603      	mov	r3, r0
 8003724:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8003728:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800372c:	2b00      	cmp	r3, #0
 800372e:	f040 8087 	bne.w	8003840 <HAL_I2C_Mem_Read_DMA+0x29c>
 8003732:	e013      	b.n	800375c <HAL_I2C_Mem_Read_DMA+0x1b8>
        hi2c->State     = HAL_I2C_STATE_READY;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	2220      	movs	r2, #32
 8003738:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	2200      	movs	r2, #0
 8003740:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003748:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	2200      	movs	r2, #0
 8003754:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 8003758:	2301      	movs	r3, #1
 800375a:	e0b3      	b.n	80038c4 <HAL_I2C_Mem_Read_DMA+0x320>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 800375c:	88f8      	ldrh	r0, [r7, #6]
 800375e:	893a      	ldrh	r2, [r7, #8]
 8003760:	8979      	ldrh	r1, [r7, #10]
 8003762:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003764:	9301      	str	r3, [sp, #4]
 8003766:	2323      	movs	r3, #35	@ 0x23
 8003768:	9300      	str	r3, [sp, #0]
 800376a:	4603      	mov	r3, r0
 800376c:	68f8      	ldr	r0, [r7, #12]
 800376e:	f000 f96b 	bl	8003a48 <I2C_RequestMemoryRead>
 8003772:	4603      	mov	r3, r0
 8003774:	2b00      	cmp	r3, #0
 8003776:	d023      	beq.n	80037c0 <HAL_I2C_Mem_Read_DMA+0x21c>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmarx);
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800377c:	4618      	mov	r0, r3
 800377e:	f7ff f8a2 	bl	80028c6 <HAL_DMA_Abort_IT>
 8003782:	4603      	mov	r3, r0
 8003784:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmarx->XferCpltCallback = NULL;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800378c:	2200      	movs	r2, #0
 800378e:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	681a      	ldr	r2, [r3, #0]
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800379e:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	2200      	movs	r2, #0
 80037a4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount = 0U;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	2200      	movs	r2, #0
 80037aa:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	681a      	ldr	r2, [r3, #0]
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f022 0201 	bic.w	r2, r2, #1
 80037ba:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 80037bc:	2301      	movs	r3, #1
 80037be:	e081      	b.n	80038c4 <HAL_I2C_Mem_Read_DMA+0x320>
        }

        if (hi2c->XferSize == 1U)
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037c4:	2b01      	cmp	r3, #1
 80037c6:	d108      	bne.n	80037da <HAL_I2C_Mem_Read_DMA+0x236>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	681a      	ldr	r2, [r3, #0]
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80037d6:	601a      	str	r2, [r3, #0]
 80037d8:	e007      	b.n	80037ea <HAL_I2C_Mem_Read_DMA+0x246>
        }
        else
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	685a      	ldr	r2, [r3, #4]
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80037e8:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037ea:	2300      	movs	r3, #0
 80037ec:	61bb      	str	r3, [r7, #24]
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	695b      	ldr	r3, [r3, #20]
 80037f4:	61bb      	str	r3, [r7, #24]
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	699b      	ldr	r3, [r3, #24]
 80037fc:	61bb      	str	r3, [r7, #24]
 80037fe:	69bb      	ldr	r3, [r7, #24]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	2200      	movs	r2, #0
 8003804:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	685a      	ldr	r2, [r3, #4]
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003816:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	685a      	ldr	r2, [r3, #4]
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003826:	605a      	str	r2, [r3, #4]
 8003828:	e049      	b.n	80038be <HAL_I2C_Mem_Read_DMA+0x31a>
 800382a:	bf00      	nop
 800382c:	20000000 	.word	0x20000000
 8003830:	14f8b589 	.word	0x14f8b589
 8003834:	ffff0000 	.word	0xffff0000
 8003838:	08003c19 	.word	0x08003c19
 800383c:	08003dc3 	.word	0x08003dc3
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	2220      	movs	r2, #32
 8003844:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	2200      	movs	r2, #0
 800384c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003854:	f043 0210 	orr.w	r2, r3, #16
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	2200      	movs	r2, #0
 8003860:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003864:	2301      	movs	r3, #1
 8003866:	e02d      	b.n	80038c4 <HAL_I2C_Mem_Read_DMA+0x320>
      }
    }
    else
    {
      /* Send Slave Address and Memory Address */
      if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8003868:	88f8      	ldrh	r0, [r7, #6]
 800386a:	893a      	ldrh	r2, [r7, #8]
 800386c:	8979      	ldrh	r1, [r7, #10]
 800386e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003870:	9301      	str	r3, [sp, #4]
 8003872:	2323      	movs	r3, #35	@ 0x23
 8003874:	9300      	str	r3, [sp, #0]
 8003876:	4603      	mov	r3, r0
 8003878:	68f8      	ldr	r0, [r7, #12]
 800387a:	f000 f8e5 	bl	8003a48 <I2C_RequestMemoryRead>
 800387e:	4603      	mov	r3, r0
 8003880:	2b00      	cmp	r3, #0
 8003882:	d001      	beq.n	8003888 <HAL_I2C_Mem_Read_DMA+0x2e4>
      {
        return HAL_ERROR;
 8003884:	2301      	movs	r3, #1
 8003886:	e01d      	b.n	80038c4 <HAL_I2C_Mem_Read_DMA+0x320>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003888:	2300      	movs	r3, #0
 800388a:	617b      	str	r3, [r7, #20]
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	695b      	ldr	r3, [r3, #20]
 8003892:	617b      	str	r3, [r7, #20]
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	699b      	ldr	r3, [r3, #24]
 800389a:	617b      	str	r3, [r7, #20]
 800389c:	697b      	ldr	r3, [r7, #20]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	681a      	ldr	r2, [r3, #0]
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80038ac:	601a      	str	r2, [r3, #0]

      hi2c->State = HAL_I2C_STATE_READY;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	2220      	movs	r2, #32
 80038b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	2200      	movs	r2, #0
 80038ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }

    return HAL_OK;
 80038be:	2300      	movs	r3, #0
 80038c0:	e000      	b.n	80038c4 <HAL_I2C_Mem_Read_DMA+0x320>
  }
  else
  {
    return HAL_BUSY;
 80038c2:	2302      	movs	r3, #2
  }
}
 80038c4:	4618      	mov	r0, r3
 80038c6:	3728      	adds	r7, #40	@ 0x28
 80038c8:	46bd      	mov	sp, r7
 80038ca:	bd80      	pop	{r7, pc}

080038cc <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80038cc:	b480      	push	{r7}
 80038ce:	b083      	sub	sp, #12
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80038d4:	bf00      	nop
 80038d6:	370c      	adds	r7, #12
 80038d8:	46bd      	mov	sp, r7
 80038da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038de:	4770      	bx	lr

080038e0 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80038e0:	b480      	push	{r7}
 80038e2:	b083      	sub	sp, #12
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80038e8:	bf00      	nop
 80038ea:	370c      	adds	r7, #12
 80038ec:	46bd      	mov	sp, r7
 80038ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f2:	4770      	bx	lr

080038f4 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80038f4:	b480      	push	{r7}
 80038f6:	b083      	sub	sp, #12
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80038fc:	bf00      	nop
 80038fe:	370c      	adds	r7, #12
 8003900:	46bd      	mov	sp, r7
 8003902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003906:	4770      	bx	lr

08003908 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003908:	b480      	push	{r7}
 800390a:	b083      	sub	sp, #12
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003910:	bf00      	nop
 8003912:	370c      	adds	r7, #12
 8003914:	46bd      	mov	sp, r7
 8003916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391a:	4770      	bx	lr

0800391c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b088      	sub	sp, #32
 8003920:	af02      	add	r7, sp, #8
 8003922:	60f8      	str	r0, [r7, #12]
 8003924:	4608      	mov	r0, r1
 8003926:	4611      	mov	r1, r2
 8003928:	461a      	mov	r2, r3
 800392a:	4603      	mov	r3, r0
 800392c:	817b      	strh	r3, [r7, #10]
 800392e:	460b      	mov	r3, r1
 8003930:	813b      	strh	r3, [r7, #8]
 8003932:	4613      	mov	r3, r2
 8003934:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	681a      	ldr	r2, [r3, #0]
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003944:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003946:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003948:	9300      	str	r3, [sp, #0]
 800394a:	6a3b      	ldr	r3, [r7, #32]
 800394c:	2200      	movs	r2, #0
 800394e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003952:	68f8      	ldr	r0, [r7, #12]
 8003954:	f000 fa72 	bl	8003e3c <I2C_WaitOnFlagUntilTimeout>
 8003958:	4603      	mov	r3, r0
 800395a:	2b00      	cmp	r3, #0
 800395c:	d00d      	beq.n	800397a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003968:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800396c:	d103      	bne.n	8003976 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003974:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003976:	2303      	movs	r3, #3
 8003978:	e05f      	b.n	8003a3a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800397a:	897b      	ldrh	r3, [r7, #10]
 800397c:	b2db      	uxtb	r3, r3
 800397e:	461a      	mov	r2, r3
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003988:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800398a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800398c:	6a3a      	ldr	r2, [r7, #32]
 800398e:	492d      	ldr	r1, [pc, #180]	@ (8003a44 <I2C_RequestMemoryWrite+0x128>)
 8003990:	68f8      	ldr	r0, [r7, #12]
 8003992:	f000 faaa 	bl	8003eea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003996:	4603      	mov	r3, r0
 8003998:	2b00      	cmp	r3, #0
 800399a:	d001      	beq.n	80039a0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800399c:	2301      	movs	r3, #1
 800399e:	e04c      	b.n	8003a3a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039a0:	2300      	movs	r3, #0
 80039a2:	617b      	str	r3, [r7, #20]
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	695b      	ldr	r3, [r3, #20]
 80039aa:	617b      	str	r3, [r7, #20]
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	699b      	ldr	r3, [r3, #24]
 80039b2:	617b      	str	r3, [r7, #20]
 80039b4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80039b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039b8:	6a39      	ldr	r1, [r7, #32]
 80039ba:	68f8      	ldr	r0, [r7, #12]
 80039bc:	f000 fb14 	bl	8003fe8 <I2C_WaitOnTXEFlagUntilTimeout>
 80039c0:	4603      	mov	r3, r0
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d00d      	beq.n	80039e2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039ca:	2b04      	cmp	r3, #4
 80039cc:	d107      	bne.n	80039de <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	681a      	ldr	r2, [r3, #0]
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80039dc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80039de:	2301      	movs	r3, #1
 80039e0:	e02b      	b.n	8003a3a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80039e2:	88fb      	ldrh	r3, [r7, #6]
 80039e4:	2b01      	cmp	r3, #1
 80039e6:	d105      	bne.n	80039f4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80039e8:	893b      	ldrh	r3, [r7, #8]
 80039ea:	b2da      	uxtb	r2, r3
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	611a      	str	r2, [r3, #16]
 80039f2:	e021      	b.n	8003a38 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80039f4:	893b      	ldrh	r3, [r7, #8]
 80039f6:	0a1b      	lsrs	r3, r3, #8
 80039f8:	b29b      	uxth	r3, r3
 80039fa:	b2da      	uxtb	r2, r3
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a04:	6a39      	ldr	r1, [r7, #32]
 8003a06:	68f8      	ldr	r0, [r7, #12]
 8003a08:	f000 faee 	bl	8003fe8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d00d      	beq.n	8003a2e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a16:	2b04      	cmp	r3, #4
 8003a18:	d107      	bne.n	8003a2a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	681a      	ldr	r2, [r3, #0]
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a28:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	e005      	b.n	8003a3a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003a2e:	893b      	ldrh	r3, [r7, #8]
 8003a30:	b2da      	uxtb	r2, r3
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003a38:	2300      	movs	r3, #0
}
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	3718      	adds	r7, #24
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bd80      	pop	{r7, pc}
 8003a42:	bf00      	nop
 8003a44:	00010002 	.word	0x00010002

08003a48 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b088      	sub	sp, #32
 8003a4c:	af02      	add	r7, sp, #8
 8003a4e:	60f8      	str	r0, [r7, #12]
 8003a50:	4608      	mov	r0, r1
 8003a52:	4611      	mov	r1, r2
 8003a54:	461a      	mov	r2, r3
 8003a56:	4603      	mov	r3, r0
 8003a58:	817b      	strh	r3, [r7, #10]
 8003a5a:	460b      	mov	r3, r1
 8003a5c:	813b      	strh	r3, [r7, #8]
 8003a5e:	4613      	mov	r3, r2
 8003a60:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	681a      	ldr	r2, [r3, #0]
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003a70:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	681a      	ldr	r2, [r3, #0]
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003a80:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003a82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a84:	9300      	str	r3, [sp, #0]
 8003a86:	6a3b      	ldr	r3, [r7, #32]
 8003a88:	2200      	movs	r2, #0
 8003a8a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003a8e:	68f8      	ldr	r0, [r7, #12]
 8003a90:	f000 f9d4 	bl	8003e3c <I2C_WaitOnFlagUntilTimeout>
 8003a94:	4603      	mov	r3, r0
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d00d      	beq.n	8003ab6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003aa4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003aa8:	d103      	bne.n	8003ab2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003ab0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003ab2:	2303      	movs	r3, #3
 8003ab4:	e0aa      	b.n	8003c0c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003ab6:	897b      	ldrh	r3, [r7, #10]
 8003ab8:	b2db      	uxtb	r3, r3
 8003aba:	461a      	mov	r2, r3
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003ac4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003ac6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ac8:	6a3a      	ldr	r2, [r7, #32]
 8003aca:	4952      	ldr	r1, [pc, #328]	@ (8003c14 <I2C_RequestMemoryRead+0x1cc>)
 8003acc:	68f8      	ldr	r0, [r7, #12]
 8003ace:	f000 fa0c 	bl	8003eea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d001      	beq.n	8003adc <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003ad8:	2301      	movs	r3, #1
 8003ada:	e097      	b.n	8003c0c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003adc:	2300      	movs	r3, #0
 8003ade:	617b      	str	r3, [r7, #20]
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	695b      	ldr	r3, [r3, #20]
 8003ae6:	617b      	str	r3, [r7, #20]
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	699b      	ldr	r3, [r3, #24]
 8003aee:	617b      	str	r3, [r7, #20]
 8003af0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003af2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003af4:	6a39      	ldr	r1, [r7, #32]
 8003af6:	68f8      	ldr	r0, [r7, #12]
 8003af8:	f000 fa76 	bl	8003fe8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003afc:	4603      	mov	r3, r0
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d00d      	beq.n	8003b1e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b06:	2b04      	cmp	r3, #4
 8003b08:	d107      	bne.n	8003b1a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	681a      	ldr	r2, [r3, #0]
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b18:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	e076      	b.n	8003c0c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003b1e:	88fb      	ldrh	r3, [r7, #6]
 8003b20:	2b01      	cmp	r3, #1
 8003b22:	d105      	bne.n	8003b30 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003b24:	893b      	ldrh	r3, [r7, #8]
 8003b26:	b2da      	uxtb	r2, r3
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	611a      	str	r2, [r3, #16]
 8003b2e:	e021      	b.n	8003b74 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003b30:	893b      	ldrh	r3, [r7, #8]
 8003b32:	0a1b      	lsrs	r3, r3, #8
 8003b34:	b29b      	uxth	r3, r3
 8003b36:	b2da      	uxtb	r2, r3
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b40:	6a39      	ldr	r1, [r7, #32]
 8003b42:	68f8      	ldr	r0, [r7, #12]
 8003b44:	f000 fa50 	bl	8003fe8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003b48:	4603      	mov	r3, r0
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d00d      	beq.n	8003b6a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b52:	2b04      	cmp	r3, #4
 8003b54:	d107      	bne.n	8003b66 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	681a      	ldr	r2, [r3, #0]
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b64:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003b66:	2301      	movs	r3, #1
 8003b68:	e050      	b.n	8003c0c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003b6a:	893b      	ldrh	r3, [r7, #8]
 8003b6c:	b2da      	uxtb	r2, r3
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b74:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b76:	6a39      	ldr	r1, [r7, #32]
 8003b78:	68f8      	ldr	r0, [r7, #12]
 8003b7a:	f000 fa35 	bl	8003fe8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003b7e:	4603      	mov	r3, r0
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d00d      	beq.n	8003ba0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b88:	2b04      	cmp	r3, #4
 8003b8a:	d107      	bne.n	8003b9c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	681a      	ldr	r2, [r3, #0]
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b9a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	e035      	b.n	8003c0c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	681a      	ldr	r2, [r3, #0]
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003bae:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003bb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bb2:	9300      	str	r3, [sp, #0]
 8003bb4:	6a3b      	ldr	r3, [r7, #32]
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003bbc:	68f8      	ldr	r0, [r7, #12]
 8003bbe:	f000 f93d 	bl	8003e3c <I2C_WaitOnFlagUntilTimeout>
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d00d      	beq.n	8003be4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bd2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003bd6:	d103      	bne.n	8003be0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003bde:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003be0:	2303      	movs	r3, #3
 8003be2:	e013      	b.n	8003c0c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003be4:	897b      	ldrh	r3, [r7, #10]
 8003be6:	b2db      	uxtb	r3, r3
 8003be8:	f043 0301 	orr.w	r3, r3, #1
 8003bec:	b2da      	uxtb	r2, r3
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003bf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bf6:	6a3a      	ldr	r2, [r7, #32]
 8003bf8:	4906      	ldr	r1, [pc, #24]	@ (8003c14 <I2C_RequestMemoryRead+0x1cc>)
 8003bfa:	68f8      	ldr	r0, [r7, #12]
 8003bfc:	f000 f975 	bl	8003eea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003c00:	4603      	mov	r3, r0
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d001      	beq.n	8003c0a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003c06:	2301      	movs	r3, #1
 8003c08:	e000      	b.n	8003c0c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003c0a:	2300      	movs	r3, #0
}
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	3718      	adds	r7, #24
 8003c10:	46bd      	mov	sp, r7
 8003c12:	bd80      	pop	{r7, pc}
 8003c14:	00010002 	.word	0x00010002

08003c18 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b086      	sub	sp, #24
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c24:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003c26:	697b      	ldr	r3, [r7, #20]
 8003c28:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c2c:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003c2e:	697b      	ldr	r3, [r7, #20]
 8003c30:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003c34:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003c36:	697b      	ldr	r3, [r7, #20]
 8003c38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c3a:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003c3c:	697b      	ldr	r3, [r7, #20]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	685a      	ldr	r2, [r3, #4]
 8003c42:	697b      	ldr	r3, [r7, #20]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8003c4a:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8003c4c:	697b      	ldr	r3, [r7, #20]
 8003c4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d003      	beq.n	8003c5c <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8003c54:	697b      	ldr	r3, [r7, #20]
 8003c56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c58:	2200      	movs	r2, #0
 8003c5a:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8003c5c:	697b      	ldr	r3, [r7, #20]
 8003c5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d003      	beq.n	8003c6c <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8003c64:	697b      	ldr	r3, [r7, #20]
 8003c66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c68:	2200      	movs	r2, #0
 8003c6a:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8003c6c:	7cfb      	ldrb	r3, [r7, #19]
 8003c6e:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 8003c72:	2b21      	cmp	r3, #33	@ 0x21
 8003c74:	d007      	beq.n	8003c86 <I2C_DMAXferCplt+0x6e>
 8003c76:	7cfb      	ldrb	r3, [r7, #19]
 8003c78:	f003 0322 	and.w	r3, r3, #34	@ 0x22
 8003c7c:	2b22      	cmp	r3, #34	@ 0x22
 8003c7e:	d131      	bne.n	8003ce4 <I2C_DMAXferCplt+0xcc>
 8003c80:	7cbb      	ldrb	r3, [r7, #18]
 8003c82:	2b20      	cmp	r3, #32
 8003c84:	d12e      	bne.n	8003ce4 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003c86:	697b      	ldr	r3, [r7, #20]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	685a      	ldr	r2, [r3, #4]
 8003c8c:	697b      	ldr	r3, [r7, #20]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003c94:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 8003c96:	697b      	ldr	r3, [r7, #20]
 8003c98:	2200      	movs	r2, #0
 8003c9a:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8003c9c:	7cfb      	ldrb	r3, [r7, #19]
 8003c9e:	2b29      	cmp	r3, #41	@ 0x29
 8003ca0:	d10a      	bne.n	8003cb8 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003ca2:	697b      	ldr	r3, [r7, #20]
 8003ca4:	2221      	movs	r2, #33	@ 0x21
 8003ca6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003ca8:	697b      	ldr	r3, [r7, #20]
 8003caa:	2228      	movs	r2, #40	@ 0x28
 8003cac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003cb0:	6978      	ldr	r0, [r7, #20]
 8003cb2:	f7ff fe15 	bl	80038e0 <HAL_I2C_SlaveTxCpltCallback>
 8003cb6:	e00c      	b.n	8003cd2 <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003cb8:	7cfb      	ldrb	r3, [r7, #19]
 8003cba:	2b2a      	cmp	r3, #42	@ 0x2a
 8003cbc:	d109      	bne.n	8003cd2 <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003cbe:	697b      	ldr	r3, [r7, #20]
 8003cc0:	2222      	movs	r2, #34	@ 0x22
 8003cc2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003cc4:	697b      	ldr	r3, [r7, #20]
 8003cc6:	2228      	movs	r2, #40	@ 0x28
 8003cc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003ccc:	6978      	ldr	r0, [r7, #20]
 8003cce:	f7ff fe11 	bl	80038f4 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003cd2:	697b      	ldr	r3, [r7, #20]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	685a      	ldr	r2, [r3, #4]
 8003cd8:	697b      	ldr	r3, [r7, #20]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8003ce0:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8003ce2:	e06a      	b.n	8003dba <I2C_DMAXferCplt+0x1a2>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 8003ce4:	697b      	ldr	r3, [r7, #20]
 8003ce6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003cea:	b2db      	uxtb	r3, r3
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d064      	beq.n	8003dba <I2C_DMAXferCplt+0x1a2>
    if (hi2c->XferCount == (uint16_t)1)
 8003cf0:	697b      	ldr	r3, [r7, #20]
 8003cf2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cf4:	b29b      	uxth	r3, r3
 8003cf6:	2b01      	cmp	r3, #1
 8003cf8:	d107      	bne.n	8003d0a <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cfa:	697b      	ldr	r3, [r7, #20]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	681a      	ldr	r2, [r3, #0]
 8003d00:	697b      	ldr	r3, [r7, #20]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d08:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003d0a:	697b      	ldr	r3, [r7, #20]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	685a      	ldr	r2, [r3, #4]
 8003d10:	697b      	ldr	r3, [r7, #20]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8003d18:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003d20:	d009      	beq.n	8003d36 <I2C_DMAXferCplt+0x11e>
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	2b08      	cmp	r3, #8
 8003d26:	d006      	beq.n	8003d36 <I2C_DMAXferCplt+0x11e>
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8003d2e:	d002      	beq.n	8003d36 <I2C_DMAXferCplt+0x11e>
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	2b20      	cmp	r3, #32
 8003d34:	d107      	bne.n	8003d46 <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d36:	697b      	ldr	r3, [r7, #20]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	681a      	ldr	r2, [r3, #0]
 8003d3c:	697b      	ldr	r3, [r7, #20]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d44:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003d46:	697b      	ldr	r3, [r7, #20]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	685a      	ldr	r2, [r3, #4]
 8003d4c:	697b      	ldr	r3, [r7, #20]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003d54:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003d56:	697b      	ldr	r3, [r7, #20]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	685a      	ldr	r2, [r3, #4]
 8003d5c:	697b      	ldr	r3, [r7, #20]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003d64:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 8003d66:	697b      	ldr	r3, [r7, #20]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003d6c:	697b      	ldr	r3, [r7, #20]
 8003d6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d003      	beq.n	8003d7c <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 8003d74:	6978      	ldr	r0, [r7, #20]
 8003d76:	f7ff fdc7 	bl	8003908 <HAL_I2C_ErrorCallback>
}
 8003d7a:	e01e      	b.n	8003dba <I2C_DMAXferCplt+0x1a2>
      hi2c->State = HAL_I2C_STATE_READY;
 8003d7c:	697b      	ldr	r3, [r7, #20]
 8003d7e:	2220      	movs	r2, #32
 8003d80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003d84:	697b      	ldr	r3, [r7, #20]
 8003d86:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003d8a:	b2db      	uxtb	r3, r3
 8003d8c:	2b40      	cmp	r3, #64	@ 0x40
 8003d8e:	d10a      	bne.n	8003da6 <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d90:	697b      	ldr	r3, [r7, #20]
 8003d92:	2200      	movs	r2, #0
 8003d94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8003d98:	697b      	ldr	r3, [r7, #20]
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8003d9e:	6978      	ldr	r0, [r7, #20]
 8003da0:	f7fd fc70 	bl	8001684 <HAL_I2C_MemRxCpltCallback>
}
 8003da4:	e009      	b.n	8003dba <I2C_DMAXferCplt+0x1a2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003da6:	697b      	ldr	r3, [r7, #20]
 8003da8:	2200      	movs	r2, #0
 8003daa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003dae:	697b      	ldr	r3, [r7, #20]
 8003db0:	2212      	movs	r2, #18
 8003db2:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8003db4:	6978      	ldr	r0, [r7, #20]
 8003db6:	f7ff fd89 	bl	80038cc <HAL_I2C_MasterRxCpltCallback>
}
 8003dba:	bf00      	nop
 8003dbc:	3718      	adds	r7, #24
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	bd80      	pop	{r7, pc}

08003dc2 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8003dc2:	b580      	push	{r7, lr}
 8003dc4:	b084      	sub	sp, #16
 8003dc6:	af00      	add	r7, sp, #0
 8003dc8:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dce:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d003      	beq.n	8003de0 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ddc:	2200      	movs	r2, #0
 8003dde:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d003      	beq.n	8003df0 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dec:	2200      	movs	r2, #0
 8003dee:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8003df0:	6878      	ldr	r0, [r7, #4]
 8003df2:	f7fe fd8a 	bl	800290a <HAL_DMA_GetError>
 8003df6:	4603      	mov	r3, r0
 8003df8:	2b02      	cmp	r3, #2
 8003dfa:	d01b      	beq.n	8003e34 <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	681a      	ldr	r2, [r3, #0]
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e0a:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	855a      	strh	r2, [r3, #42]	@ 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	2220      	movs	r2, #32
 8003e16:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e26:	f043 0210 	orr.w	r2, r3, #16
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	641a      	str	r2, [r3, #64]	@ 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8003e2e:	68f8      	ldr	r0, [r7, #12]
 8003e30:	f7ff fd6a 	bl	8003908 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003e34:	bf00      	nop
 8003e36:	3710      	adds	r7, #16
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	bd80      	pop	{r7, pc}

08003e3c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b084      	sub	sp, #16
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	60f8      	str	r0, [r7, #12]
 8003e44:	60b9      	str	r1, [r7, #8]
 8003e46:	603b      	str	r3, [r7, #0]
 8003e48:	4613      	mov	r3, r2
 8003e4a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e4c:	e025      	b.n	8003e9a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e54:	d021      	beq.n	8003e9a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e56:	f7fe f82f 	bl	8001eb8 <HAL_GetTick>
 8003e5a:	4602      	mov	r2, r0
 8003e5c:	69bb      	ldr	r3, [r7, #24]
 8003e5e:	1ad3      	subs	r3, r2, r3
 8003e60:	683a      	ldr	r2, [r7, #0]
 8003e62:	429a      	cmp	r2, r3
 8003e64:	d302      	bcc.n	8003e6c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d116      	bne.n	8003e9a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	2200      	movs	r2, #0
 8003e70:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	2220      	movs	r2, #32
 8003e76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e86:	f043 0220 	orr.w	r2, r3, #32
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	2200      	movs	r2, #0
 8003e92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003e96:	2301      	movs	r3, #1
 8003e98:	e023      	b.n	8003ee2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e9a:	68bb      	ldr	r3, [r7, #8]
 8003e9c:	0c1b      	lsrs	r3, r3, #16
 8003e9e:	b2db      	uxtb	r3, r3
 8003ea0:	2b01      	cmp	r3, #1
 8003ea2:	d10d      	bne.n	8003ec0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	695b      	ldr	r3, [r3, #20]
 8003eaa:	43da      	mvns	r2, r3
 8003eac:	68bb      	ldr	r3, [r7, #8]
 8003eae:	4013      	ands	r3, r2
 8003eb0:	b29b      	uxth	r3, r3
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	bf0c      	ite	eq
 8003eb6:	2301      	moveq	r3, #1
 8003eb8:	2300      	movne	r3, #0
 8003eba:	b2db      	uxtb	r3, r3
 8003ebc:	461a      	mov	r2, r3
 8003ebe:	e00c      	b.n	8003eda <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	699b      	ldr	r3, [r3, #24]
 8003ec6:	43da      	mvns	r2, r3
 8003ec8:	68bb      	ldr	r3, [r7, #8]
 8003eca:	4013      	ands	r3, r2
 8003ecc:	b29b      	uxth	r3, r3
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	bf0c      	ite	eq
 8003ed2:	2301      	moveq	r3, #1
 8003ed4:	2300      	movne	r3, #0
 8003ed6:	b2db      	uxtb	r3, r3
 8003ed8:	461a      	mov	r2, r3
 8003eda:	79fb      	ldrb	r3, [r7, #7]
 8003edc:	429a      	cmp	r2, r3
 8003ede:	d0b6      	beq.n	8003e4e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003ee0:	2300      	movs	r3, #0
}
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	3710      	adds	r7, #16
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	bd80      	pop	{r7, pc}

08003eea <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003eea:	b580      	push	{r7, lr}
 8003eec:	b084      	sub	sp, #16
 8003eee:	af00      	add	r7, sp, #0
 8003ef0:	60f8      	str	r0, [r7, #12]
 8003ef2:	60b9      	str	r1, [r7, #8]
 8003ef4:	607a      	str	r2, [r7, #4]
 8003ef6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003ef8:	e051      	b.n	8003f9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	695b      	ldr	r3, [r3, #20]
 8003f00:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f04:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f08:	d123      	bne.n	8003f52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	681a      	ldr	r2, [r3, #0]
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f18:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003f22:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	2200      	movs	r2, #0
 8003f28:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	2220      	movs	r2, #32
 8003f2e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	2200      	movs	r2, #0
 8003f36:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f3e:	f043 0204 	orr.w	r2, r3, #4
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003f4e:	2301      	movs	r3, #1
 8003f50:	e046      	b.n	8003fe0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f58:	d021      	beq.n	8003f9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f5a:	f7fd ffad 	bl	8001eb8 <HAL_GetTick>
 8003f5e:	4602      	mov	r2, r0
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	1ad3      	subs	r3, r2, r3
 8003f64:	687a      	ldr	r2, [r7, #4]
 8003f66:	429a      	cmp	r2, r3
 8003f68:	d302      	bcc.n	8003f70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d116      	bne.n	8003f9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	2200      	movs	r2, #0
 8003f74:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	2220      	movs	r2, #32
 8003f7a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	2200      	movs	r2, #0
 8003f82:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f8a:	f043 0220 	orr.w	r2, r3, #32
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	2200      	movs	r2, #0
 8003f96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	e020      	b.n	8003fe0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003f9e:	68bb      	ldr	r3, [r7, #8]
 8003fa0:	0c1b      	lsrs	r3, r3, #16
 8003fa2:	b2db      	uxtb	r3, r3
 8003fa4:	2b01      	cmp	r3, #1
 8003fa6:	d10c      	bne.n	8003fc2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	695b      	ldr	r3, [r3, #20]
 8003fae:	43da      	mvns	r2, r3
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	4013      	ands	r3, r2
 8003fb4:	b29b      	uxth	r3, r3
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	bf14      	ite	ne
 8003fba:	2301      	movne	r3, #1
 8003fbc:	2300      	moveq	r3, #0
 8003fbe:	b2db      	uxtb	r3, r3
 8003fc0:	e00b      	b.n	8003fda <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	699b      	ldr	r3, [r3, #24]
 8003fc8:	43da      	mvns	r2, r3
 8003fca:	68bb      	ldr	r3, [r7, #8]
 8003fcc:	4013      	ands	r3, r2
 8003fce:	b29b      	uxth	r3, r3
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	bf14      	ite	ne
 8003fd4:	2301      	movne	r3, #1
 8003fd6:	2300      	moveq	r3, #0
 8003fd8:	b2db      	uxtb	r3, r3
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d18d      	bne.n	8003efa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003fde:	2300      	movs	r3, #0
}
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	3710      	adds	r7, #16
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	bd80      	pop	{r7, pc}

08003fe8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b084      	sub	sp, #16
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	60f8      	str	r0, [r7, #12]
 8003ff0:	60b9      	str	r1, [r7, #8]
 8003ff2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003ff4:	e02d      	b.n	8004052 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003ff6:	68f8      	ldr	r0, [r7, #12]
 8003ff8:	f000 f8ce 	bl	8004198 <I2C_IsAcknowledgeFailed>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d001      	beq.n	8004006 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004002:	2301      	movs	r3, #1
 8004004:	e02d      	b.n	8004062 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004006:	68bb      	ldr	r3, [r7, #8]
 8004008:	f1b3 3fff 	cmp.w	r3, #4294967295
 800400c:	d021      	beq.n	8004052 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800400e:	f7fd ff53 	bl	8001eb8 <HAL_GetTick>
 8004012:	4602      	mov	r2, r0
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	1ad3      	subs	r3, r2, r3
 8004018:	68ba      	ldr	r2, [r7, #8]
 800401a:	429a      	cmp	r2, r3
 800401c:	d302      	bcc.n	8004024 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800401e:	68bb      	ldr	r3, [r7, #8]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d116      	bne.n	8004052 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	2200      	movs	r2, #0
 8004028:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	2220      	movs	r2, #32
 800402e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	2200      	movs	r2, #0
 8004036:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800403e:	f043 0220 	orr.w	r2, r3, #32
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	2200      	movs	r2, #0
 800404a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800404e:	2301      	movs	r3, #1
 8004050:	e007      	b.n	8004062 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	695b      	ldr	r3, [r3, #20]
 8004058:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800405c:	2b80      	cmp	r3, #128	@ 0x80
 800405e:	d1ca      	bne.n	8003ff6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004060:	2300      	movs	r3, #0
}
 8004062:	4618      	mov	r0, r3
 8004064:	3710      	adds	r7, #16
 8004066:	46bd      	mov	sp, r7
 8004068:	bd80      	pop	{r7, pc}

0800406a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800406a:	b580      	push	{r7, lr}
 800406c:	b084      	sub	sp, #16
 800406e:	af00      	add	r7, sp, #0
 8004070:	60f8      	str	r0, [r7, #12]
 8004072:	60b9      	str	r1, [r7, #8]
 8004074:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004076:	e02d      	b.n	80040d4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004078:	68f8      	ldr	r0, [r7, #12]
 800407a:	f000 f88d 	bl	8004198 <I2C_IsAcknowledgeFailed>
 800407e:	4603      	mov	r3, r0
 8004080:	2b00      	cmp	r3, #0
 8004082:	d001      	beq.n	8004088 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004084:	2301      	movs	r3, #1
 8004086:	e02d      	b.n	80040e4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004088:	68bb      	ldr	r3, [r7, #8]
 800408a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800408e:	d021      	beq.n	80040d4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004090:	f7fd ff12 	bl	8001eb8 <HAL_GetTick>
 8004094:	4602      	mov	r2, r0
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	1ad3      	subs	r3, r2, r3
 800409a:	68ba      	ldr	r2, [r7, #8]
 800409c:	429a      	cmp	r2, r3
 800409e:	d302      	bcc.n	80040a6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80040a0:	68bb      	ldr	r3, [r7, #8]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d116      	bne.n	80040d4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	2200      	movs	r2, #0
 80040aa:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	2220      	movs	r2, #32
 80040b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	2200      	movs	r2, #0
 80040b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040c0:	f043 0220 	orr.w	r2, r3, #32
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	2200      	movs	r2, #0
 80040cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80040d0:	2301      	movs	r3, #1
 80040d2:	e007      	b.n	80040e4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	695b      	ldr	r3, [r3, #20]
 80040da:	f003 0304 	and.w	r3, r3, #4
 80040de:	2b04      	cmp	r3, #4
 80040e0:	d1ca      	bne.n	8004078 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80040e2:	2300      	movs	r3, #0
}
 80040e4:	4618      	mov	r0, r3
 80040e6:	3710      	adds	r7, #16
 80040e8:	46bd      	mov	sp, r7
 80040ea:	bd80      	pop	{r7, pc}

080040ec <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b084      	sub	sp, #16
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	60f8      	str	r0, [r7, #12]
 80040f4:	60b9      	str	r1, [r7, #8]
 80040f6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80040f8:	e042      	b.n	8004180 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	695b      	ldr	r3, [r3, #20]
 8004100:	f003 0310 	and.w	r3, r3, #16
 8004104:	2b10      	cmp	r3, #16
 8004106:	d119      	bne.n	800413c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f06f 0210 	mvn.w	r2, #16
 8004110:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	2200      	movs	r2, #0
 8004116:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	2220      	movs	r2, #32
 800411c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	2200      	movs	r2, #0
 8004124:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	2200      	movs	r2, #0
 8004134:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004138:	2301      	movs	r3, #1
 800413a:	e029      	b.n	8004190 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800413c:	f7fd febc 	bl	8001eb8 <HAL_GetTick>
 8004140:	4602      	mov	r2, r0
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	1ad3      	subs	r3, r2, r3
 8004146:	68ba      	ldr	r2, [r7, #8]
 8004148:	429a      	cmp	r2, r3
 800414a:	d302      	bcc.n	8004152 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800414c:	68bb      	ldr	r3, [r7, #8]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d116      	bne.n	8004180 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	2200      	movs	r2, #0
 8004156:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	2220      	movs	r2, #32
 800415c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	2200      	movs	r2, #0
 8004164:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800416c:	f043 0220 	orr.w	r2, r3, #32
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	2200      	movs	r2, #0
 8004178:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800417c:	2301      	movs	r3, #1
 800417e:	e007      	b.n	8004190 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	695b      	ldr	r3, [r3, #20]
 8004186:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800418a:	2b40      	cmp	r3, #64	@ 0x40
 800418c:	d1b5      	bne.n	80040fa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800418e:	2300      	movs	r3, #0
}
 8004190:	4618      	mov	r0, r3
 8004192:	3710      	adds	r7, #16
 8004194:	46bd      	mov	sp, r7
 8004196:	bd80      	pop	{r7, pc}

08004198 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004198:	b480      	push	{r7}
 800419a:	b083      	sub	sp, #12
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	695b      	ldr	r3, [r3, #20]
 80041a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80041aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80041ae:	d11b      	bne.n	80041e8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80041b8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2200      	movs	r2, #0
 80041be:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2220      	movs	r2, #32
 80041c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2200      	movs	r2, #0
 80041cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041d4:	f043 0204 	orr.w	r2, r3, #4
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2200      	movs	r2, #0
 80041e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80041e4:	2301      	movs	r3, #1
 80041e6:	e000      	b.n	80041ea <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80041e8:	2300      	movs	r3, #0
}
 80041ea:	4618      	mov	r0, r3
 80041ec:	370c      	adds	r7, #12
 80041ee:	46bd      	mov	sp, r7
 80041f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f4:	4770      	bx	lr

080041f6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80041f6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80041f8:	b08f      	sub	sp, #60	@ 0x3c
 80041fa:	af0a      	add	r7, sp, #40	@ 0x28
 80041fc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d101      	bne.n	8004208 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004204:	2301      	movs	r3, #1
 8004206:	e116      	b.n	8004436 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	f893 33bd 	ldrb.w	r3, [r3, #957]	@ 0x3bd
 8004214:	b2db      	uxtb	r3, r3
 8004216:	2b00      	cmp	r3, #0
 8004218:	d106      	bne.n	8004228 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2200      	movs	r2, #0
 800421e:	f883 23bc 	strb.w	r2, [r3, #956]	@ 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004222:	6878      	ldr	r0, [r7, #4]
 8004224:	f006 f92e 	bl	800a484 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2203      	movs	r2, #3
 800422c:	f883 23bd 	strb.w	r2, [r3, #957]	@ 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004230:	68bb      	ldr	r3, [r7, #8]
 8004232:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004234:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004238:	2b00      	cmp	r3, #0
 800423a:	d102      	bne.n	8004242 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2200      	movs	r2, #0
 8004240:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4618      	mov	r0, r3
 8004248:	f002 fe27 	bl	8006e9a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	603b      	str	r3, [r7, #0]
 8004252:	687e      	ldr	r6, [r7, #4]
 8004254:	466d      	mov	r5, sp
 8004256:	f106 0410 	add.w	r4, r6, #16
 800425a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800425c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800425e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004260:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004262:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004266:	e885 0003 	stmia.w	r5, {r0, r1}
 800426a:	1d33      	adds	r3, r6, #4
 800426c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800426e:	6838      	ldr	r0, [r7, #0]
 8004270:	f002 fcfe 	bl	8006c70 <USB_CoreInit>
 8004274:	4603      	mov	r3, r0
 8004276:	2b00      	cmp	r3, #0
 8004278:	d005      	beq.n	8004286 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2202      	movs	r2, #2
 800427e:	f883 23bd 	strb.w	r2, [r3, #957]	@ 0x3bd
    return HAL_ERROR;
 8004282:	2301      	movs	r3, #1
 8004284:	e0d7      	b.n	8004436 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	2100      	movs	r1, #0
 800428c:	4618      	mov	r0, r3
 800428e:	f002 fe15 	bl	8006ebc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004292:	2300      	movs	r3, #0
 8004294:	73fb      	strb	r3, [r7, #15]
 8004296:	e04a      	b.n	800432e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004298:	7bfa      	ldrb	r2, [r7, #15]
 800429a:	6879      	ldr	r1, [r7, #4]
 800429c:	4613      	mov	r3, r2
 800429e:	00db      	lsls	r3, r3, #3
 80042a0:	1a9b      	subs	r3, r3, r2
 80042a2:	009b      	lsls	r3, r3, #2
 80042a4:	440b      	add	r3, r1
 80042a6:	333d      	adds	r3, #61	@ 0x3d
 80042a8:	2201      	movs	r2, #1
 80042aa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80042ac:	7bfa      	ldrb	r2, [r7, #15]
 80042ae:	6879      	ldr	r1, [r7, #4]
 80042b0:	4613      	mov	r3, r2
 80042b2:	00db      	lsls	r3, r3, #3
 80042b4:	1a9b      	subs	r3, r3, r2
 80042b6:	009b      	lsls	r3, r3, #2
 80042b8:	440b      	add	r3, r1
 80042ba:	333c      	adds	r3, #60	@ 0x3c
 80042bc:	7bfa      	ldrb	r2, [r7, #15]
 80042be:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80042c0:	7bfa      	ldrb	r2, [r7, #15]
 80042c2:	7bfb      	ldrb	r3, [r7, #15]
 80042c4:	b298      	uxth	r0, r3
 80042c6:	6879      	ldr	r1, [r7, #4]
 80042c8:	4613      	mov	r3, r2
 80042ca:	00db      	lsls	r3, r3, #3
 80042cc:	1a9b      	subs	r3, r3, r2
 80042ce:	009b      	lsls	r3, r3, #2
 80042d0:	440b      	add	r3, r1
 80042d2:	3342      	adds	r3, #66	@ 0x42
 80042d4:	4602      	mov	r2, r0
 80042d6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80042d8:	7bfa      	ldrb	r2, [r7, #15]
 80042da:	6879      	ldr	r1, [r7, #4]
 80042dc:	4613      	mov	r3, r2
 80042de:	00db      	lsls	r3, r3, #3
 80042e0:	1a9b      	subs	r3, r3, r2
 80042e2:	009b      	lsls	r3, r3, #2
 80042e4:	440b      	add	r3, r1
 80042e6:	333f      	adds	r3, #63	@ 0x3f
 80042e8:	2200      	movs	r2, #0
 80042ea:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80042ec:	7bfa      	ldrb	r2, [r7, #15]
 80042ee:	6879      	ldr	r1, [r7, #4]
 80042f0:	4613      	mov	r3, r2
 80042f2:	00db      	lsls	r3, r3, #3
 80042f4:	1a9b      	subs	r3, r3, r2
 80042f6:	009b      	lsls	r3, r3, #2
 80042f8:	440b      	add	r3, r1
 80042fa:	3344      	adds	r3, #68	@ 0x44
 80042fc:	2200      	movs	r2, #0
 80042fe:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004300:	7bfa      	ldrb	r2, [r7, #15]
 8004302:	6879      	ldr	r1, [r7, #4]
 8004304:	4613      	mov	r3, r2
 8004306:	00db      	lsls	r3, r3, #3
 8004308:	1a9b      	subs	r3, r3, r2
 800430a:	009b      	lsls	r3, r3, #2
 800430c:	440b      	add	r3, r1
 800430e:	3348      	adds	r3, #72	@ 0x48
 8004310:	2200      	movs	r2, #0
 8004312:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004314:	7bfa      	ldrb	r2, [r7, #15]
 8004316:	6879      	ldr	r1, [r7, #4]
 8004318:	4613      	mov	r3, r2
 800431a:	00db      	lsls	r3, r3, #3
 800431c:	1a9b      	subs	r3, r3, r2
 800431e:	009b      	lsls	r3, r3, #2
 8004320:	440b      	add	r3, r1
 8004322:	3350      	adds	r3, #80	@ 0x50
 8004324:	2200      	movs	r2, #0
 8004326:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004328:	7bfb      	ldrb	r3, [r7, #15]
 800432a:	3301      	adds	r3, #1
 800432c:	73fb      	strb	r3, [r7, #15]
 800432e:	7bfa      	ldrb	r2, [r7, #15]
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	685b      	ldr	r3, [r3, #4]
 8004334:	429a      	cmp	r2, r3
 8004336:	d3af      	bcc.n	8004298 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004338:	2300      	movs	r3, #0
 800433a:	73fb      	strb	r3, [r7, #15]
 800433c:	e044      	b.n	80043c8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800433e:	7bfa      	ldrb	r2, [r7, #15]
 8004340:	6879      	ldr	r1, [r7, #4]
 8004342:	4613      	mov	r3, r2
 8004344:	00db      	lsls	r3, r3, #3
 8004346:	1a9b      	subs	r3, r3, r2
 8004348:	009b      	lsls	r3, r3, #2
 800434a:	440b      	add	r3, r1
 800434c:	f203 13fd 	addw	r3, r3, #509	@ 0x1fd
 8004350:	2200      	movs	r2, #0
 8004352:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004354:	7bfa      	ldrb	r2, [r7, #15]
 8004356:	6879      	ldr	r1, [r7, #4]
 8004358:	4613      	mov	r3, r2
 800435a:	00db      	lsls	r3, r3, #3
 800435c:	1a9b      	subs	r3, r3, r2
 800435e:	009b      	lsls	r3, r3, #2
 8004360:	440b      	add	r3, r1
 8004362:	f503 73fe 	add.w	r3, r3, #508	@ 0x1fc
 8004366:	7bfa      	ldrb	r2, [r7, #15]
 8004368:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800436a:	7bfa      	ldrb	r2, [r7, #15]
 800436c:	6879      	ldr	r1, [r7, #4]
 800436e:	4613      	mov	r3, r2
 8004370:	00db      	lsls	r3, r3, #3
 8004372:	1a9b      	subs	r3, r3, r2
 8004374:	009b      	lsls	r3, r3, #2
 8004376:	440b      	add	r3, r1
 8004378:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800437c:	2200      	movs	r2, #0
 800437e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004380:	7bfa      	ldrb	r2, [r7, #15]
 8004382:	6879      	ldr	r1, [r7, #4]
 8004384:	4613      	mov	r3, r2
 8004386:	00db      	lsls	r3, r3, #3
 8004388:	1a9b      	subs	r3, r3, r2
 800438a:	009b      	lsls	r3, r3, #2
 800438c:	440b      	add	r3, r1
 800438e:	f503 7301 	add.w	r3, r3, #516	@ 0x204
 8004392:	2200      	movs	r2, #0
 8004394:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004396:	7bfa      	ldrb	r2, [r7, #15]
 8004398:	6879      	ldr	r1, [r7, #4]
 800439a:	4613      	mov	r3, r2
 800439c:	00db      	lsls	r3, r3, #3
 800439e:	1a9b      	subs	r3, r3, r2
 80043a0:	009b      	lsls	r3, r3, #2
 80043a2:	440b      	add	r3, r1
 80043a4:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 80043a8:	2200      	movs	r2, #0
 80043aa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80043ac:	7bfa      	ldrb	r2, [r7, #15]
 80043ae:	6879      	ldr	r1, [r7, #4]
 80043b0:	4613      	mov	r3, r2
 80043b2:	00db      	lsls	r3, r3, #3
 80043b4:	1a9b      	subs	r3, r3, r2
 80043b6:	009b      	lsls	r3, r3, #2
 80043b8:	440b      	add	r3, r1
 80043ba:	f503 7304 	add.w	r3, r3, #528	@ 0x210
 80043be:	2200      	movs	r2, #0
 80043c0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80043c2:	7bfb      	ldrb	r3, [r7, #15]
 80043c4:	3301      	adds	r3, #1
 80043c6:	73fb      	strb	r3, [r7, #15]
 80043c8:	7bfa      	ldrb	r2, [r7, #15]
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	685b      	ldr	r3, [r3, #4]
 80043ce:	429a      	cmp	r2, r3
 80043d0:	d3b5      	bcc.n	800433e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	603b      	str	r3, [r7, #0]
 80043d8:	687e      	ldr	r6, [r7, #4]
 80043da:	466d      	mov	r5, sp
 80043dc:	f106 0410 	add.w	r4, r6, #16
 80043e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80043e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80043e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80043e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80043e8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80043ec:	e885 0003 	stmia.w	r5, {r0, r1}
 80043f0:	1d33      	adds	r3, r6, #4
 80043f2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80043f4:	6838      	ldr	r0, [r7, #0]
 80043f6:	f002 fdad 	bl	8006f54 <USB_DevInit>
 80043fa:	4603      	mov	r3, r0
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d005      	beq.n	800440c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2202      	movs	r2, #2
 8004404:	f883 23bd 	strb.w	r2, [r3, #957]	@ 0x3bd
    return HAL_ERROR;
 8004408:	2301      	movs	r3, #1
 800440a:	e014      	b.n	8004436 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2200      	movs	r2, #0
 8004410:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2201      	movs	r2, #1
 8004418:	f883 23bd 	strb.w	r2, [r3, #957]	@ 0x3bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004420:	2b01      	cmp	r3, #1
 8004422:	d102      	bne.n	800442a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004424:	6878      	ldr	r0, [r7, #4]
 8004426:	f001 f869 	bl	80054fc <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4618      	mov	r0, r3
 8004430:	f003 fd40 	bl	8007eb4 <USB_DevDisconnect>

  return HAL_OK;
 8004434:	2300      	movs	r3, #0
}
 8004436:	4618      	mov	r0, r3
 8004438:	3714      	adds	r7, #20
 800443a:	46bd      	mov	sp, r7
 800443c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800443e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800443e:	b580      	push	{r7, lr}
 8004440:	b084      	sub	sp, #16
 8004442:	af00      	add	r7, sp, #0
 8004444:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	f893 33bc 	ldrb.w	r3, [r3, #956]	@ 0x3bc
 8004452:	2b01      	cmp	r3, #1
 8004454:	d101      	bne.n	800445a <HAL_PCD_Start+0x1c>
 8004456:	2302      	movs	r3, #2
 8004458:	e020      	b.n	800449c <HAL_PCD_Start+0x5e>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2201      	movs	r2, #1
 800445e:	f883 23bc 	strb.w	r2, [r3, #956]	@ 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004466:	2b01      	cmp	r3, #1
 8004468:	d109      	bne.n	800447e <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800446e:	2b01      	cmp	r3, #1
 8004470:	d005      	beq.n	800447e <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004476:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4618      	mov	r0, r3
 8004484:	f002 fcf8 	bl	8006e78 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4618      	mov	r0, r3
 800448e:	f003 fcf0 	bl	8007e72 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2200      	movs	r2, #0
 8004496:	f883 23bc 	strb.w	r2, [r3, #956]	@ 0x3bc

  return HAL_OK;
 800449a:	2300      	movs	r3, #0
}
 800449c:	4618      	mov	r0, r3
 800449e:	3710      	adds	r7, #16
 80044a0:	46bd      	mov	sp, r7
 80044a2:	bd80      	pop	{r7, pc}

080044a4 <HAL_PCD_Stop>:
  * @brief  Stop the USB device.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Stop(PCD_HandleTypeDef *hpcd)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b084      	sub	sp, #16
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	f893 33bc 	ldrb.w	r3, [r3, #956]	@ 0x3bc
 80044b8:	2b01      	cmp	r3, #1
 80044ba:	d101      	bne.n	80044c0 <HAL_PCD_Stop+0x1c>
 80044bc:	2302      	movs	r3, #2
 80044be:	e026      	b.n	800450e <HAL_PCD_Stop+0x6a>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2201      	movs	r2, #1
 80044c4:	f883 23bc 	strb.w	r2, [r3, #956]	@ 0x3bc
  __HAL_PCD_DISABLE(hpcd);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4618      	mov	r0, r3
 80044ce:	f002 fce4 	bl	8006e9a <USB_DisableGlobalInt>
  (void)USB_DevDisconnect(hpcd->Instance);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4618      	mov	r0, r3
 80044d8:	f003 fcec 	bl	8007eb4 <USB_DevDisconnect>

  (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	2110      	movs	r1, #16
 80044e2:	4618      	mov	r0, r3
 80044e4:	f002 fe94 	bl	8007210 <USB_FlushTxFifo>

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044ec:	2b01      	cmp	r3, #1
 80044ee:	d109      	bne.n	8004504 <HAL_PCD_Stop+0x60>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80044f4:	2b01      	cmp	r3, #1
 80044f6:	d005      	beq.n	8004504 <HAL_PCD_Stop+0x60>
  {
    /* Disable USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044fc:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_UNLOCK(hpcd);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2200      	movs	r2, #0
 8004508:	f883 23bc 	strb.w	r2, [r3, #956]	@ 0x3bc

  return HAL_OK;
 800450c:	2300      	movs	r3, #0
}
 800450e:	4618      	mov	r0, r3
 8004510:	3710      	adds	r7, #16
 8004512:	46bd      	mov	sp, r7
 8004514:	bd80      	pop	{r7, pc}

08004516 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004516:	b590      	push	{r4, r7, lr}
 8004518:	b08d      	sub	sp, #52	@ 0x34
 800451a:	af00      	add	r7, sp, #0
 800451c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004524:	6a3b      	ldr	r3, [r7, #32]
 8004526:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4618      	mov	r0, r3
 800452e:	f003 fd75 	bl	800801c <USB_GetMode>
 8004532:	4603      	mov	r3, r0
 8004534:	2b00      	cmp	r3, #0
 8004536:	f040 83ca 	bne.w	8004cce <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4618      	mov	r0, r3
 8004540:	f003 fcd9 	bl	8007ef6 <USB_ReadInterrupts>
 8004544:	4603      	mov	r3, r0
 8004546:	2b00      	cmp	r3, #0
 8004548:	f000 83c0 	beq.w	8004ccc <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4618      	mov	r0, r3
 8004552:	f003 fcd0 	bl	8007ef6 <USB_ReadInterrupts>
 8004556:	4603      	mov	r3, r0
 8004558:	f003 0302 	and.w	r3, r3, #2
 800455c:	2b02      	cmp	r3, #2
 800455e:	d107      	bne.n	8004570 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	695a      	ldr	r2, [r3, #20]
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f002 0202 	and.w	r2, r2, #2
 800456e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4618      	mov	r0, r3
 8004576:	f003 fcbe 	bl	8007ef6 <USB_ReadInterrupts>
 800457a:	4603      	mov	r3, r0
 800457c:	f003 0310 	and.w	r3, r3, #16
 8004580:	2b10      	cmp	r3, #16
 8004582:	d161      	bne.n	8004648 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	699a      	ldr	r2, [r3, #24]
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f022 0210 	bic.w	r2, r2, #16
 8004592:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8004594:	6a3b      	ldr	r3, [r7, #32]
 8004596:	6a1b      	ldr	r3, [r3, #32]
 8004598:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800459a:	69bb      	ldr	r3, [r7, #24]
 800459c:	f003 020f 	and.w	r2, r3, #15
 80045a0:	4613      	mov	r3, r2
 80045a2:	00db      	lsls	r3, r3, #3
 80045a4:	1a9b      	subs	r3, r3, r2
 80045a6:	009b      	lsls	r3, r3, #2
 80045a8:	f503 73fc 	add.w	r3, r3, #504	@ 0x1f8
 80045ac:	687a      	ldr	r2, [r7, #4]
 80045ae:	4413      	add	r3, r2
 80045b0:	3304      	adds	r3, #4
 80045b2:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80045b4:	69bb      	ldr	r3, [r7, #24]
 80045b6:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 80045ba:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80045be:	d124      	bne.n	800460a <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80045c0:	69ba      	ldr	r2, [r7, #24]
 80045c2:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80045c6:	4013      	ands	r3, r2
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d035      	beq.n	8004638 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80045cc:	697b      	ldr	r3, [r7, #20]
 80045ce:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80045d0:	69bb      	ldr	r3, [r7, #24]
 80045d2:	091b      	lsrs	r3, r3, #4
 80045d4:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80045d6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80045da:	b29b      	uxth	r3, r3
 80045dc:	461a      	mov	r2, r3
 80045de:	6a38      	ldr	r0, [r7, #32]
 80045e0:	f003 faf5 	bl	8007bce <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80045e4:	697b      	ldr	r3, [r7, #20]
 80045e6:	68da      	ldr	r2, [r3, #12]
 80045e8:	69bb      	ldr	r3, [r7, #24]
 80045ea:	091b      	lsrs	r3, r3, #4
 80045ec:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80045f0:	441a      	add	r2, r3
 80045f2:	697b      	ldr	r3, [r7, #20]
 80045f4:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80045f6:	697b      	ldr	r3, [r7, #20]
 80045f8:	699a      	ldr	r2, [r3, #24]
 80045fa:	69bb      	ldr	r3, [r7, #24]
 80045fc:	091b      	lsrs	r3, r3, #4
 80045fe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004602:	441a      	add	r2, r3
 8004604:	697b      	ldr	r3, [r7, #20]
 8004606:	619a      	str	r2, [r3, #24]
 8004608:	e016      	b.n	8004638 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800460a:	69bb      	ldr	r3, [r7, #24]
 800460c:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8004610:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004614:	d110      	bne.n	8004638 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	f503 7371 	add.w	r3, r3, #964	@ 0x3c4
 800461c:	2208      	movs	r2, #8
 800461e:	4619      	mov	r1, r3
 8004620:	6a38      	ldr	r0, [r7, #32]
 8004622:	f003 fad4 	bl	8007bce <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004626:	697b      	ldr	r3, [r7, #20]
 8004628:	699a      	ldr	r2, [r3, #24]
 800462a:	69bb      	ldr	r3, [r7, #24]
 800462c:	091b      	lsrs	r3, r3, #4
 800462e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004632:	441a      	add	r2, r3
 8004634:	697b      	ldr	r3, [r7, #20]
 8004636:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	699a      	ldr	r2, [r3, #24]
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f042 0210 	orr.w	r2, r2, #16
 8004646:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4618      	mov	r0, r3
 800464e:	f003 fc52 	bl	8007ef6 <USB_ReadInterrupts>
 8004652:	4603      	mov	r3, r0
 8004654:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004658:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800465c:	d16e      	bne.n	800473c <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 800465e:	2300      	movs	r3, #0
 8004660:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4618      	mov	r0, r3
 8004668:	f003 fc58 	bl	8007f1c <USB_ReadDevAllOutEpInterrupt>
 800466c:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800466e:	e062      	b.n	8004736 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8004670:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004672:	f003 0301 	and.w	r3, r3, #1
 8004676:	2b00      	cmp	r3, #0
 8004678:	d057      	beq.n	800472a <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004680:	b2d2      	uxtb	r2, r2
 8004682:	4611      	mov	r1, r2
 8004684:	4618      	mov	r0, r3
 8004686:	f003 fc7d 	bl	8007f84 <USB_ReadDevOutEPInterrupt>
 800468a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800468c:	693b      	ldr	r3, [r7, #16]
 800468e:	f003 0301 	and.w	r3, r3, #1
 8004692:	2b00      	cmp	r3, #0
 8004694:	d00c      	beq.n	80046b0 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8004696:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004698:	015a      	lsls	r2, r3, #5
 800469a:	69fb      	ldr	r3, [r7, #28]
 800469c:	4413      	add	r3, r2
 800469e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80046a2:	461a      	mov	r2, r3
 80046a4:	2301      	movs	r3, #1
 80046a6:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80046a8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80046aa:	6878      	ldr	r0, [r7, #4]
 80046ac:	f000 fd7c 	bl	80051a8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80046b0:	693b      	ldr	r3, [r7, #16]
 80046b2:	f003 0308 	and.w	r3, r3, #8
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d00c      	beq.n	80046d4 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80046ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046bc:	015a      	lsls	r2, r3, #5
 80046be:	69fb      	ldr	r3, [r7, #28]
 80046c0:	4413      	add	r3, r2
 80046c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80046c6:	461a      	mov	r2, r3
 80046c8:	2308      	movs	r3, #8
 80046ca:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80046cc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80046ce:	6878      	ldr	r0, [r7, #4]
 80046d0:	f000 fe76 	bl	80053c0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80046d4:	693b      	ldr	r3, [r7, #16]
 80046d6:	f003 0310 	and.w	r3, r3, #16
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d008      	beq.n	80046f0 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80046de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046e0:	015a      	lsls	r2, r3, #5
 80046e2:	69fb      	ldr	r3, [r7, #28]
 80046e4:	4413      	add	r3, r2
 80046e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80046ea:	461a      	mov	r2, r3
 80046ec:	2310      	movs	r3, #16
 80046ee:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80046f0:	693b      	ldr	r3, [r7, #16]
 80046f2:	f003 0320 	and.w	r3, r3, #32
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d008      	beq.n	800470c <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80046fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046fc:	015a      	lsls	r2, r3, #5
 80046fe:	69fb      	ldr	r3, [r7, #28]
 8004700:	4413      	add	r3, r2
 8004702:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004706:	461a      	mov	r2, r3
 8004708:	2320      	movs	r3, #32
 800470a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800470c:	693b      	ldr	r3, [r7, #16]
 800470e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004712:	2b00      	cmp	r3, #0
 8004714:	d009      	beq.n	800472a <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8004716:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004718:	015a      	lsls	r2, r3, #5
 800471a:	69fb      	ldr	r3, [r7, #28]
 800471c:	4413      	add	r3, r2
 800471e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004722:	461a      	mov	r2, r3
 8004724:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004728:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800472a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800472c:	3301      	adds	r3, #1
 800472e:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8004730:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004732:	085b      	lsrs	r3, r3, #1
 8004734:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8004736:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004738:	2b00      	cmp	r3, #0
 800473a:	d199      	bne.n	8004670 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4618      	mov	r0, r3
 8004742:	f003 fbd8 	bl	8007ef6 <USB_ReadInterrupts>
 8004746:	4603      	mov	r3, r0
 8004748:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800474c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004750:	f040 80c0 	bne.w	80048d4 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4618      	mov	r0, r3
 800475a:	f003 fbf9 	bl	8007f50 <USB_ReadDevAllInEpInterrupt>
 800475e:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8004760:	2300      	movs	r3, #0
 8004762:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8004764:	e0b2      	b.n	80048cc <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8004766:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004768:	f003 0301 	and.w	r3, r3, #1
 800476c:	2b00      	cmp	r3, #0
 800476e:	f000 80a7 	beq.w	80048c0 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004778:	b2d2      	uxtb	r2, r2
 800477a:	4611      	mov	r1, r2
 800477c:	4618      	mov	r0, r3
 800477e:	f003 fc1f 	bl	8007fc0 <USB_ReadDevInEPInterrupt>
 8004782:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004784:	693b      	ldr	r3, [r7, #16]
 8004786:	f003 0301 	and.w	r3, r3, #1
 800478a:	2b00      	cmp	r3, #0
 800478c:	d057      	beq.n	800483e <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800478e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004790:	f003 030f 	and.w	r3, r3, #15
 8004794:	2201      	movs	r2, #1
 8004796:	fa02 f303 	lsl.w	r3, r2, r3
 800479a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800479c:	69fb      	ldr	r3, [r7, #28]
 800479e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80047a2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	43db      	mvns	r3, r3
 80047a8:	69f9      	ldr	r1, [r7, #28]
 80047aa:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80047ae:	4013      	ands	r3, r2
 80047b0:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80047b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047b4:	015a      	lsls	r2, r3, #5
 80047b6:	69fb      	ldr	r3, [r7, #28]
 80047b8:	4413      	add	r3, r2
 80047ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80047be:	461a      	mov	r2, r3
 80047c0:	2301      	movs	r3, #1
 80047c2:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	691b      	ldr	r3, [r3, #16]
 80047c8:	2b01      	cmp	r3, #1
 80047ca:	d132      	bne.n	8004832 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80047cc:	6879      	ldr	r1, [r7, #4]
 80047ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80047d0:	4613      	mov	r3, r2
 80047d2:	00db      	lsls	r3, r3, #3
 80047d4:	1a9b      	subs	r3, r3, r2
 80047d6:	009b      	lsls	r3, r3, #2
 80047d8:	440b      	add	r3, r1
 80047da:	3348      	adds	r3, #72	@ 0x48
 80047dc:	6819      	ldr	r1, [r3, #0]
 80047de:	6878      	ldr	r0, [r7, #4]
 80047e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80047e2:	4613      	mov	r3, r2
 80047e4:	00db      	lsls	r3, r3, #3
 80047e6:	1a9b      	subs	r3, r3, r2
 80047e8:	009b      	lsls	r3, r3, #2
 80047ea:	4403      	add	r3, r0
 80047ec:	3344      	adds	r3, #68	@ 0x44
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	4419      	add	r1, r3
 80047f2:	6878      	ldr	r0, [r7, #4]
 80047f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80047f6:	4613      	mov	r3, r2
 80047f8:	00db      	lsls	r3, r3, #3
 80047fa:	1a9b      	subs	r3, r3, r2
 80047fc:	009b      	lsls	r3, r3, #2
 80047fe:	4403      	add	r3, r0
 8004800:	3348      	adds	r3, #72	@ 0x48
 8004802:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8004804:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004806:	2b00      	cmp	r3, #0
 8004808:	d113      	bne.n	8004832 <HAL_PCD_IRQHandler+0x31c>
 800480a:	6879      	ldr	r1, [r7, #4]
 800480c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800480e:	4613      	mov	r3, r2
 8004810:	00db      	lsls	r3, r3, #3
 8004812:	1a9b      	subs	r3, r3, r2
 8004814:	009b      	lsls	r3, r3, #2
 8004816:	440b      	add	r3, r1
 8004818:	3350      	adds	r3, #80	@ 0x50
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d108      	bne.n	8004832 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6818      	ldr	r0, [r3, #0]
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	f503 7371 	add.w	r3, r3, #964	@ 0x3c4
 800482a:	461a      	mov	r2, r3
 800482c:	2101      	movs	r1, #1
 800482e:	f003 fc27 	bl	8008080 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8004832:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004834:	b2db      	uxtb	r3, r3
 8004836:	4619      	mov	r1, r3
 8004838:	6878      	ldr	r0, [r7, #4]
 800483a:	f005 fec6 	bl	800a5ca <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800483e:	693b      	ldr	r3, [r7, #16]
 8004840:	f003 0308 	and.w	r3, r3, #8
 8004844:	2b00      	cmp	r3, #0
 8004846:	d008      	beq.n	800485a <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8004848:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800484a:	015a      	lsls	r2, r3, #5
 800484c:	69fb      	ldr	r3, [r7, #28]
 800484e:	4413      	add	r3, r2
 8004850:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004854:	461a      	mov	r2, r3
 8004856:	2308      	movs	r3, #8
 8004858:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800485a:	693b      	ldr	r3, [r7, #16]
 800485c:	f003 0310 	and.w	r3, r3, #16
 8004860:	2b00      	cmp	r3, #0
 8004862:	d008      	beq.n	8004876 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004864:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004866:	015a      	lsls	r2, r3, #5
 8004868:	69fb      	ldr	r3, [r7, #28]
 800486a:	4413      	add	r3, r2
 800486c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004870:	461a      	mov	r2, r3
 8004872:	2310      	movs	r3, #16
 8004874:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8004876:	693b      	ldr	r3, [r7, #16]
 8004878:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800487c:	2b00      	cmp	r3, #0
 800487e:	d008      	beq.n	8004892 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004880:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004882:	015a      	lsls	r2, r3, #5
 8004884:	69fb      	ldr	r3, [r7, #28]
 8004886:	4413      	add	r3, r2
 8004888:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800488c:	461a      	mov	r2, r3
 800488e:	2340      	movs	r3, #64	@ 0x40
 8004890:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004892:	693b      	ldr	r3, [r7, #16]
 8004894:	f003 0302 	and.w	r3, r3, #2
 8004898:	2b00      	cmp	r3, #0
 800489a:	d008      	beq.n	80048ae <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800489c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800489e:	015a      	lsls	r2, r3, #5
 80048a0:	69fb      	ldr	r3, [r7, #28]
 80048a2:	4413      	add	r3, r2
 80048a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80048a8:	461a      	mov	r2, r3
 80048aa:	2302      	movs	r3, #2
 80048ac:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80048ae:	693b      	ldr	r3, [r7, #16]
 80048b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d003      	beq.n	80048c0 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80048b8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80048ba:	6878      	ldr	r0, [r7, #4]
 80048bc:	f000 fbe6 	bl	800508c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80048c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048c2:	3301      	adds	r3, #1
 80048c4:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80048c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048c8:	085b      	lsrs	r3, r3, #1
 80048ca:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80048cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	f47f af49 	bne.w	8004766 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4618      	mov	r0, r3
 80048da:	f003 fb0c 	bl	8007ef6 <USB_ReadInterrupts>
 80048de:	4603      	mov	r3, r0
 80048e0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80048e4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80048e8:	d122      	bne.n	8004930 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80048ea:	69fb      	ldr	r3, [r7, #28]
 80048ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80048f0:	685b      	ldr	r3, [r3, #4]
 80048f2:	69fa      	ldr	r2, [r7, #28]
 80048f4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80048f8:	f023 0301 	bic.w	r3, r3, #1
 80048fc:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	f893 33f4 	ldrb.w	r3, [r3, #1012]	@ 0x3f4
 8004904:	2b01      	cmp	r3, #1
 8004906:	d108      	bne.n	800491a <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2200      	movs	r2, #0
 800490c:	f883 23f4 	strb.w	r2, [r3, #1012]	@ 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004910:	2100      	movs	r1, #0
 8004912:	6878      	ldr	r0, [r7, #4]
 8004914:	f000 fe16 	bl	8005544 <HAL_PCDEx_LPM_Callback>
 8004918:	e002      	b.n	8004920 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800491a:	6878      	ldr	r0, [r7, #4]
 800491c:	f005 fec2 	bl	800a6a4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	695a      	ldr	r2, [r3, #20]
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 800492e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	4618      	mov	r0, r3
 8004936:	f003 fade 	bl	8007ef6 <USB_ReadInterrupts>
 800493a:	4603      	mov	r3, r0
 800493c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004940:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004944:	d112      	bne.n	800496c <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8004946:	69fb      	ldr	r3, [r7, #28]
 8004948:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800494c:	689b      	ldr	r3, [r3, #8]
 800494e:	f003 0301 	and.w	r3, r3, #1
 8004952:	2b01      	cmp	r3, #1
 8004954:	d102      	bne.n	800495c <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004956:	6878      	ldr	r0, [r7, #4]
 8004958:	f005 fe7e 	bl	800a658 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	695a      	ldr	r2, [r3, #20]
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 800496a:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	4618      	mov	r0, r3
 8004972:	f003 fac0 	bl	8007ef6 <USB_ReadInterrupts>
 8004976:	4603      	mov	r3, r0
 8004978:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800497c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004980:	d121      	bne.n	80049c6 <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	695a      	ldr	r2, [r3, #20]
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8004990:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	f893 33f4 	ldrb.w	r3, [r3, #1012]	@ 0x3f4
 8004998:	2b00      	cmp	r3, #0
 800499a:	d111      	bne.n	80049c0 <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2201      	movs	r2, #1
 80049a0:	f883 23f4 	strb.w	r2, [r3, #1012]	@ 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049aa:	089b      	lsrs	r3, r3, #2
 80049ac:	f003 020f 	and.w	r2, r3, #15
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	f8c3 23f8 	str.w	r2, [r3, #1016]	@ 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80049b6:	2101      	movs	r1, #1
 80049b8:	6878      	ldr	r0, [r7, #4]
 80049ba:	f000 fdc3 	bl	8005544 <HAL_PCDEx_LPM_Callback>
 80049be:	e002      	b.n	80049c6 <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80049c0:	6878      	ldr	r0, [r7, #4]
 80049c2:	f005 fe49 	bl	800a658 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	4618      	mov	r0, r3
 80049cc:	f003 fa93 	bl	8007ef6 <USB_ReadInterrupts>
 80049d0:	4603      	mov	r3, r0
 80049d2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80049d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80049da:	f040 80c7 	bne.w	8004b6c <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80049de:	69fb      	ldr	r3, [r7, #28]
 80049e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80049e4:	685b      	ldr	r3, [r3, #4]
 80049e6:	69fa      	ldr	r2, [r7, #28]
 80049e8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80049ec:	f023 0301 	bic.w	r3, r3, #1
 80049f0:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	2110      	movs	r1, #16
 80049f8:	4618      	mov	r0, r3
 80049fa:	f002 fc09 	bl	8007210 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80049fe:	2300      	movs	r3, #0
 8004a00:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004a02:	e056      	b.n	8004ab2 <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004a04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a06:	015a      	lsls	r2, r3, #5
 8004a08:	69fb      	ldr	r3, [r7, #28]
 8004a0a:	4413      	add	r3, r2
 8004a0c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004a10:	461a      	mov	r2, r3
 8004a12:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004a16:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004a18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a1a:	015a      	lsls	r2, r3, #5
 8004a1c:	69fb      	ldr	r3, [r7, #28]
 8004a1e:	4413      	add	r3, r2
 8004a20:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004a28:	0151      	lsls	r1, r2, #5
 8004a2a:	69fa      	ldr	r2, [r7, #28]
 8004a2c:	440a      	add	r2, r1
 8004a2e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004a32:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004a36:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004a38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a3a:	015a      	lsls	r2, r3, #5
 8004a3c:	69fb      	ldr	r3, [r7, #28]
 8004a3e:	4413      	add	r3, r2
 8004a40:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004a48:	0151      	lsls	r1, r2, #5
 8004a4a:	69fa      	ldr	r2, [r7, #28]
 8004a4c:	440a      	add	r2, r1
 8004a4e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004a52:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004a56:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8004a58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a5a:	015a      	lsls	r2, r3, #5
 8004a5c:	69fb      	ldr	r3, [r7, #28]
 8004a5e:	4413      	add	r3, r2
 8004a60:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a64:	461a      	mov	r2, r3
 8004a66:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004a6a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004a6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a6e:	015a      	lsls	r2, r3, #5
 8004a70:	69fb      	ldr	r3, [r7, #28]
 8004a72:	4413      	add	r3, r2
 8004a74:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004a7c:	0151      	lsls	r1, r2, #5
 8004a7e:	69fa      	ldr	r2, [r7, #28]
 8004a80:	440a      	add	r2, r1
 8004a82:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004a86:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004a8a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004a8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a8e:	015a      	lsls	r2, r3, #5
 8004a90:	69fb      	ldr	r3, [r7, #28]
 8004a92:	4413      	add	r3, r2
 8004a94:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004a9c:	0151      	lsls	r1, r2, #5
 8004a9e:	69fa      	ldr	r2, [r7, #28]
 8004aa0:	440a      	add	r2, r1
 8004aa2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004aa6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004aaa:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004aac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004aae:	3301      	adds	r3, #1
 8004ab0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	685b      	ldr	r3, [r3, #4]
 8004ab6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004ab8:	429a      	cmp	r2, r3
 8004aba:	d3a3      	bcc.n	8004a04 <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004abc:	69fb      	ldr	r3, [r7, #28]
 8004abe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004ac2:	69db      	ldr	r3, [r3, #28]
 8004ac4:	69fa      	ldr	r2, [r7, #28]
 8004ac6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004aca:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8004ace:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d016      	beq.n	8004b06 <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004ad8:	69fb      	ldr	r3, [r7, #28]
 8004ada:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004ade:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004ae2:	69fa      	ldr	r2, [r7, #28]
 8004ae4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004ae8:	f043 030b 	orr.w	r3, r3, #11
 8004aec:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8004af0:	69fb      	ldr	r3, [r7, #28]
 8004af2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004af6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004af8:	69fa      	ldr	r2, [r7, #28]
 8004afa:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004afe:	f043 030b 	orr.w	r3, r3, #11
 8004b02:	6453      	str	r3, [r2, #68]	@ 0x44
 8004b04:	e015      	b.n	8004b32 <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004b06:	69fb      	ldr	r3, [r7, #28]
 8004b08:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004b0c:	695b      	ldr	r3, [r3, #20]
 8004b0e:	69fa      	ldr	r2, [r7, #28]
 8004b10:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004b14:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004b18:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8004b1c:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004b1e:	69fb      	ldr	r3, [r7, #28]
 8004b20:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004b24:	691b      	ldr	r3, [r3, #16]
 8004b26:	69fa      	ldr	r2, [r7, #28]
 8004b28:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004b2c:	f043 030b 	orr.w	r3, r3, #11
 8004b30:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004b32:	69fb      	ldr	r3, [r7, #28]
 8004b34:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	69fa      	ldr	r2, [r7, #28]
 8004b3c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004b40:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8004b44:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6818      	ldr	r0, [r3, #0]
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	691b      	ldr	r3, [r3, #16]
 8004b4e:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	f503 7371 	add.w	r3, r3, #964	@ 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004b56:	461a      	mov	r2, r3
 8004b58:	f003 fa92 	bl	8008080 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	695a      	ldr	r2, [r3, #20]
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8004b6a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4618      	mov	r0, r3
 8004b72:	f003 f9c0 	bl	8007ef6 <USB_ReadInterrupts>
 8004b76:	4603      	mov	r3, r0
 8004b78:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004b7c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004b80:	d124      	bne.n	8004bcc <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4618      	mov	r0, r3
 8004b88:	f003 fa56 	bl	8008038 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4618      	mov	r0, r3
 8004b92:	f002 fb9a 	bl	80072ca <USB_GetDevSpeed>
 8004b96:	4603      	mov	r3, r0
 8004b98:	461a      	mov	r2, r3
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681c      	ldr	r4, [r3, #0]
 8004ba2:	f000 fec7 	bl	8005934 <HAL_RCC_GetHCLKFreq>
 8004ba6:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004bac:	b2db      	uxtb	r3, r3
 8004bae:	461a      	mov	r2, r3
 8004bb0:	4620      	mov	r0, r4
 8004bb2:	f002 f8bf 	bl	8006d34 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004bb6:	6878      	ldr	r0, [r7, #4]
 8004bb8:	f005 fd2f 	bl	800a61a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	695a      	ldr	r2, [r3, #20]
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8004bca:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	f003 f990 	bl	8007ef6 <USB_ReadInterrupts>
 8004bd6:	4603      	mov	r3, r0
 8004bd8:	f003 0308 	and.w	r3, r3, #8
 8004bdc:	2b08      	cmp	r3, #8
 8004bde:	d10a      	bne.n	8004bf6 <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004be0:	6878      	ldr	r0, [r7, #4]
 8004be2:	f005 fd0c 	bl	800a5fe <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	695a      	ldr	r2, [r3, #20]
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f002 0208 	and.w	r2, r2, #8
 8004bf4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	f003 f97b 	bl	8007ef6 <USB_ReadInterrupts>
 8004c00:	4603      	mov	r3, r0
 8004c02:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004c06:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004c0a:	d10f      	bne.n	8004c2c <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	627b      	str	r3, [r7, #36]	@ 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8004c10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c12:	b2db      	uxtb	r3, r3
 8004c14:	4619      	mov	r1, r3
 8004c16:	6878      	ldr	r0, [r7, #4]
 8004c18:	f005 fd64 	bl	800a6e4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	695a      	ldr	r2, [r3, #20]
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8004c2a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4618      	mov	r0, r3
 8004c32:	f003 f960 	bl	8007ef6 <USB_ReadInterrupts>
 8004c36:	4603      	mov	r3, r0
 8004c38:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004c3c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004c40:	d10f      	bne.n	8004c62 <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8004c42:	2300      	movs	r3, #0
 8004c44:	627b      	str	r3, [r7, #36]	@ 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8004c46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c48:	b2db      	uxtb	r3, r3
 8004c4a:	4619      	mov	r1, r3
 8004c4c:	6878      	ldr	r0, [r7, #4]
 8004c4e:	f005 fd37 	bl	800a6c0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	695a      	ldr	r2, [r3, #20]
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8004c60:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	4618      	mov	r0, r3
 8004c68:	f003 f945 	bl	8007ef6 <USB_ReadInterrupts>
 8004c6c:	4603      	mov	r3, r0
 8004c6e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004c72:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c76:	d10a      	bne.n	8004c8e <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004c78:	6878      	ldr	r0, [r7, #4]
 8004c7a:	f005 fd45 	bl	800a708 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	695a      	ldr	r2, [r3, #20]
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8004c8c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4618      	mov	r0, r3
 8004c94:	f003 f92f 	bl	8007ef6 <USB_ReadInterrupts>
 8004c98:	4603      	mov	r3, r0
 8004c9a:	f003 0304 	and.w	r3, r3, #4
 8004c9e:	2b04      	cmp	r3, #4
 8004ca0:	d115      	bne.n	8004cce <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	685b      	ldr	r3, [r3, #4]
 8004ca8:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004caa:	69bb      	ldr	r3, [r7, #24]
 8004cac:	f003 0304 	and.w	r3, r3, #4
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d002      	beq.n	8004cba <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004cb4:	6878      	ldr	r0, [r7, #4]
 8004cb6:	f005 fd35 	bl	800a724 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	6859      	ldr	r1, [r3, #4]
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	69ba      	ldr	r2, [r7, #24]
 8004cc6:	430a      	orrs	r2, r1
 8004cc8:	605a      	str	r2, [r3, #4]
 8004cca:	e000      	b.n	8004cce <HAL_PCD_IRQHandler+0x7b8>
      return;
 8004ccc:	bf00      	nop
    }
  }
}
 8004cce:	3734      	adds	r7, #52	@ 0x34
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	bd90      	pop	{r4, r7, pc}

08004cd4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b082      	sub	sp, #8
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
 8004cdc:	460b      	mov	r3, r1
 8004cde:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	f893 33bc 	ldrb.w	r3, [r3, #956]	@ 0x3bc
 8004ce6:	2b01      	cmp	r3, #1
 8004ce8:	d101      	bne.n	8004cee <HAL_PCD_SetAddress+0x1a>
 8004cea:	2302      	movs	r3, #2
 8004cec:	e013      	b.n	8004d16 <HAL_PCD_SetAddress+0x42>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2201      	movs	r2, #1
 8004cf2:	f883 23bc 	strb.w	r2, [r3, #956]	@ 0x3bc
  hpcd->USB_Address = address;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	78fa      	ldrb	r2, [r7, #3]
 8004cfa:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	78fa      	ldrb	r2, [r7, #3]
 8004d04:	4611      	mov	r1, r2
 8004d06:	4618      	mov	r0, r3
 8004d08:	f003 f88d 	bl	8007e26 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2200      	movs	r2, #0
 8004d10:	f883 23bc 	strb.w	r2, [r3, #956]	@ 0x3bc

  return HAL_OK;
 8004d14:	2300      	movs	r3, #0
}
 8004d16:	4618      	mov	r0, r3
 8004d18:	3708      	adds	r7, #8
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	bd80      	pop	{r7, pc}

08004d1e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004d1e:	b580      	push	{r7, lr}
 8004d20:	b084      	sub	sp, #16
 8004d22:	af00      	add	r7, sp, #0
 8004d24:	6078      	str	r0, [r7, #4]
 8004d26:	4608      	mov	r0, r1
 8004d28:	4611      	mov	r1, r2
 8004d2a:	461a      	mov	r2, r3
 8004d2c:	4603      	mov	r3, r0
 8004d2e:	70fb      	strb	r3, [r7, #3]
 8004d30:	460b      	mov	r3, r1
 8004d32:	803b      	strh	r3, [r7, #0]
 8004d34:	4613      	mov	r3, r2
 8004d36:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004d38:	2300      	movs	r3, #0
 8004d3a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004d3c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	da0f      	bge.n	8004d64 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004d44:	78fb      	ldrb	r3, [r7, #3]
 8004d46:	f003 020f 	and.w	r2, r3, #15
 8004d4a:	4613      	mov	r3, r2
 8004d4c:	00db      	lsls	r3, r3, #3
 8004d4e:	1a9b      	subs	r3, r3, r2
 8004d50:	009b      	lsls	r3, r3, #2
 8004d52:	3338      	adds	r3, #56	@ 0x38
 8004d54:	687a      	ldr	r2, [r7, #4]
 8004d56:	4413      	add	r3, r2
 8004d58:	3304      	adds	r3, #4
 8004d5a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	2201      	movs	r2, #1
 8004d60:	705a      	strb	r2, [r3, #1]
 8004d62:	e00f      	b.n	8004d84 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004d64:	78fb      	ldrb	r3, [r7, #3]
 8004d66:	f003 020f 	and.w	r2, r3, #15
 8004d6a:	4613      	mov	r3, r2
 8004d6c:	00db      	lsls	r3, r3, #3
 8004d6e:	1a9b      	subs	r3, r3, r2
 8004d70:	009b      	lsls	r3, r3, #2
 8004d72:	f503 73fc 	add.w	r3, r3, #504	@ 0x1f8
 8004d76:	687a      	ldr	r2, [r7, #4]
 8004d78:	4413      	add	r3, r2
 8004d7a:	3304      	adds	r3, #4
 8004d7c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	2200      	movs	r2, #0
 8004d82:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004d84:	78fb      	ldrb	r3, [r7, #3]
 8004d86:	f003 030f 	and.w	r3, r3, #15
 8004d8a:	b2da      	uxtb	r2, r3
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004d90:	883a      	ldrh	r2, [r7, #0]
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	78ba      	ldrb	r2, [r7, #2]
 8004d9a:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	785b      	ldrb	r3, [r3, #1]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d004      	beq.n	8004dae <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	781b      	ldrb	r3, [r3, #0]
 8004da8:	461a      	mov	r2, r3
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004dae:	78bb      	ldrb	r3, [r7, #2]
 8004db0:	2b02      	cmp	r3, #2
 8004db2:	d102      	bne.n	8004dba <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	2200      	movs	r2, #0
 8004db8:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	f893 33bc 	ldrb.w	r3, [r3, #956]	@ 0x3bc
 8004dc0:	2b01      	cmp	r3, #1
 8004dc2:	d101      	bne.n	8004dc8 <HAL_PCD_EP_Open+0xaa>
 8004dc4:	2302      	movs	r3, #2
 8004dc6:	e00e      	b.n	8004de6 <HAL_PCD_EP_Open+0xc8>
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2201      	movs	r2, #1
 8004dcc:	f883 23bc 	strb.w	r2, [r3, #956]	@ 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	68f9      	ldr	r1, [r7, #12]
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	f002 fa9c 	bl	8007314 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2200      	movs	r2, #0
 8004de0:	f883 23bc 	strb.w	r2, [r3, #956]	@ 0x3bc

  return ret;
 8004de4:	7afb      	ldrb	r3, [r7, #11]
}
 8004de6:	4618      	mov	r0, r3
 8004de8:	3710      	adds	r7, #16
 8004dea:	46bd      	mov	sp, r7
 8004dec:	bd80      	pop	{r7, pc}

08004dee <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004dee:	b580      	push	{r7, lr}
 8004df0:	b086      	sub	sp, #24
 8004df2:	af00      	add	r7, sp, #0
 8004df4:	60f8      	str	r0, [r7, #12]
 8004df6:	607a      	str	r2, [r7, #4]
 8004df8:	603b      	str	r3, [r7, #0]
 8004dfa:	460b      	mov	r3, r1
 8004dfc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004dfe:	7afb      	ldrb	r3, [r7, #11]
 8004e00:	f003 020f 	and.w	r2, r3, #15
 8004e04:	4613      	mov	r3, r2
 8004e06:	00db      	lsls	r3, r3, #3
 8004e08:	1a9b      	subs	r3, r3, r2
 8004e0a:	009b      	lsls	r3, r3, #2
 8004e0c:	f503 73fc 	add.w	r3, r3, #504	@ 0x1f8
 8004e10:	68fa      	ldr	r2, [r7, #12]
 8004e12:	4413      	add	r3, r2
 8004e14:	3304      	adds	r3, #4
 8004e16:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004e18:	697b      	ldr	r3, [r7, #20]
 8004e1a:	687a      	ldr	r2, [r7, #4]
 8004e1c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004e1e:	697b      	ldr	r3, [r7, #20]
 8004e20:	683a      	ldr	r2, [r7, #0]
 8004e22:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8004e24:	697b      	ldr	r3, [r7, #20]
 8004e26:	2200      	movs	r2, #0
 8004e28:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8004e2a:	697b      	ldr	r3, [r7, #20]
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004e30:	7afb      	ldrb	r3, [r7, #11]
 8004e32:	f003 030f 	and.w	r3, r3, #15
 8004e36:	b2da      	uxtb	r2, r3
 8004e38:	697b      	ldr	r3, [r7, #20]
 8004e3a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	691b      	ldr	r3, [r3, #16]
 8004e40:	2b01      	cmp	r3, #1
 8004e42:	d102      	bne.n	8004e4a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004e44:	687a      	ldr	r2, [r7, #4]
 8004e46:	697b      	ldr	r3, [r7, #20]
 8004e48:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004e4a:	7afb      	ldrb	r3, [r7, #11]
 8004e4c:	f003 030f 	and.w	r3, r3, #15
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d109      	bne.n	8004e68 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	6818      	ldr	r0, [r3, #0]
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	691b      	ldr	r3, [r3, #16]
 8004e5c:	b2db      	uxtb	r3, r3
 8004e5e:	461a      	mov	r2, r3
 8004e60:	6979      	ldr	r1, [r7, #20]
 8004e62:	f002 fd23 	bl	80078ac <USB_EP0StartXfer>
 8004e66:	e008      	b.n	8004e7a <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	6818      	ldr	r0, [r3, #0]
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	691b      	ldr	r3, [r3, #16]
 8004e70:	b2db      	uxtb	r3, r3
 8004e72:	461a      	mov	r2, r3
 8004e74:	6979      	ldr	r1, [r7, #20]
 8004e76:	f002 fad5 	bl	8007424 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004e7a:	2300      	movs	r3, #0
}
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	3718      	adds	r7, #24
 8004e80:	46bd      	mov	sp, r7
 8004e82:	bd80      	pop	{r7, pc}

08004e84 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b086      	sub	sp, #24
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	60f8      	str	r0, [r7, #12]
 8004e8c:	607a      	str	r2, [r7, #4]
 8004e8e:	603b      	str	r3, [r7, #0]
 8004e90:	460b      	mov	r3, r1
 8004e92:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004e94:	7afb      	ldrb	r3, [r7, #11]
 8004e96:	f003 020f 	and.w	r2, r3, #15
 8004e9a:	4613      	mov	r3, r2
 8004e9c:	00db      	lsls	r3, r3, #3
 8004e9e:	1a9b      	subs	r3, r3, r2
 8004ea0:	009b      	lsls	r3, r3, #2
 8004ea2:	3338      	adds	r3, #56	@ 0x38
 8004ea4:	68fa      	ldr	r2, [r7, #12]
 8004ea6:	4413      	add	r3, r2
 8004ea8:	3304      	adds	r3, #4
 8004eaa:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004eac:	697b      	ldr	r3, [r7, #20]
 8004eae:	687a      	ldr	r2, [r7, #4]
 8004eb0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004eb2:	697b      	ldr	r3, [r7, #20]
 8004eb4:	683a      	ldr	r2, [r7, #0]
 8004eb6:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8004eb8:	697b      	ldr	r3, [r7, #20]
 8004eba:	2200      	movs	r2, #0
 8004ebc:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8004ebe:	697b      	ldr	r3, [r7, #20]
 8004ec0:	2201      	movs	r2, #1
 8004ec2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004ec4:	7afb      	ldrb	r3, [r7, #11]
 8004ec6:	f003 030f 	and.w	r3, r3, #15
 8004eca:	b2da      	uxtb	r2, r3
 8004ecc:	697b      	ldr	r3, [r7, #20]
 8004ece:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	691b      	ldr	r3, [r3, #16]
 8004ed4:	2b01      	cmp	r3, #1
 8004ed6:	d102      	bne.n	8004ede <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004ed8:	687a      	ldr	r2, [r7, #4]
 8004eda:	697b      	ldr	r3, [r7, #20]
 8004edc:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004ede:	7afb      	ldrb	r3, [r7, #11]
 8004ee0:	f003 030f 	and.w	r3, r3, #15
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d109      	bne.n	8004efc <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	6818      	ldr	r0, [r3, #0]
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	691b      	ldr	r3, [r3, #16]
 8004ef0:	b2db      	uxtb	r3, r3
 8004ef2:	461a      	mov	r2, r3
 8004ef4:	6979      	ldr	r1, [r7, #20]
 8004ef6:	f002 fcd9 	bl	80078ac <USB_EP0StartXfer>
 8004efa:	e008      	b.n	8004f0e <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	6818      	ldr	r0, [r3, #0]
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	691b      	ldr	r3, [r3, #16]
 8004f04:	b2db      	uxtb	r3, r3
 8004f06:	461a      	mov	r2, r3
 8004f08:	6979      	ldr	r1, [r7, #20]
 8004f0a:	f002 fa8b 	bl	8007424 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004f0e:	2300      	movs	r3, #0
}
 8004f10:	4618      	mov	r0, r3
 8004f12:	3718      	adds	r7, #24
 8004f14:	46bd      	mov	sp, r7
 8004f16:	bd80      	pop	{r7, pc}

08004f18 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b084      	sub	sp, #16
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
 8004f20:	460b      	mov	r3, r1
 8004f22:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004f24:	78fb      	ldrb	r3, [r7, #3]
 8004f26:	f003 020f 	and.w	r2, r3, #15
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	685b      	ldr	r3, [r3, #4]
 8004f2e:	429a      	cmp	r2, r3
 8004f30:	d901      	bls.n	8004f36 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004f32:	2301      	movs	r3, #1
 8004f34:	e050      	b.n	8004fd8 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004f36:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	da0f      	bge.n	8004f5e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004f3e:	78fb      	ldrb	r3, [r7, #3]
 8004f40:	f003 020f 	and.w	r2, r3, #15
 8004f44:	4613      	mov	r3, r2
 8004f46:	00db      	lsls	r3, r3, #3
 8004f48:	1a9b      	subs	r3, r3, r2
 8004f4a:	009b      	lsls	r3, r3, #2
 8004f4c:	3338      	adds	r3, #56	@ 0x38
 8004f4e:	687a      	ldr	r2, [r7, #4]
 8004f50:	4413      	add	r3, r2
 8004f52:	3304      	adds	r3, #4
 8004f54:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	2201      	movs	r2, #1
 8004f5a:	705a      	strb	r2, [r3, #1]
 8004f5c:	e00d      	b.n	8004f7a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004f5e:	78fa      	ldrb	r2, [r7, #3]
 8004f60:	4613      	mov	r3, r2
 8004f62:	00db      	lsls	r3, r3, #3
 8004f64:	1a9b      	subs	r3, r3, r2
 8004f66:	009b      	lsls	r3, r3, #2
 8004f68:	f503 73fc 	add.w	r3, r3, #504	@ 0x1f8
 8004f6c:	687a      	ldr	r2, [r7, #4]
 8004f6e:	4413      	add	r3, r2
 8004f70:	3304      	adds	r3, #4
 8004f72:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	2200      	movs	r2, #0
 8004f78:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	2201      	movs	r2, #1
 8004f7e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004f80:	78fb      	ldrb	r3, [r7, #3]
 8004f82:	f003 030f 	and.w	r3, r3, #15
 8004f86:	b2da      	uxtb	r2, r3
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	f893 33bc 	ldrb.w	r3, [r3, #956]	@ 0x3bc
 8004f92:	2b01      	cmp	r3, #1
 8004f94:	d101      	bne.n	8004f9a <HAL_PCD_EP_SetStall+0x82>
 8004f96:	2302      	movs	r3, #2
 8004f98:	e01e      	b.n	8004fd8 <HAL_PCD_EP_SetStall+0xc0>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	2201      	movs	r2, #1
 8004f9e:	f883 23bc 	strb.w	r2, [r3, #956]	@ 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	68f9      	ldr	r1, [r7, #12]
 8004fa8:	4618      	mov	r0, r3
 8004faa:	f002 fe68 	bl	8007c7e <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004fae:	78fb      	ldrb	r3, [r7, #3]
 8004fb0:	f003 030f 	and.w	r3, r3, #15
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d10a      	bne.n	8004fce <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6818      	ldr	r0, [r3, #0]
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	691b      	ldr	r3, [r3, #16]
 8004fc0:	b2d9      	uxtb	r1, r3
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	f503 7371 	add.w	r3, r3, #964	@ 0x3c4
 8004fc8:	461a      	mov	r2, r3
 8004fca:	f003 f859 	bl	8008080 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	f883 23bc 	strb.w	r2, [r3, #956]	@ 0x3bc

  return HAL_OK;
 8004fd6:	2300      	movs	r3, #0
}
 8004fd8:	4618      	mov	r0, r3
 8004fda:	3710      	adds	r7, #16
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	bd80      	pop	{r7, pc}

08004fe0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b084      	sub	sp, #16
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
 8004fe8:	460b      	mov	r3, r1
 8004fea:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004fec:	78fb      	ldrb	r3, [r7, #3]
 8004fee:	f003 020f 	and.w	r2, r3, #15
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	685b      	ldr	r3, [r3, #4]
 8004ff6:	429a      	cmp	r2, r3
 8004ff8:	d901      	bls.n	8004ffe <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	e042      	b.n	8005084 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004ffe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005002:	2b00      	cmp	r3, #0
 8005004:	da0f      	bge.n	8005026 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005006:	78fb      	ldrb	r3, [r7, #3]
 8005008:	f003 020f 	and.w	r2, r3, #15
 800500c:	4613      	mov	r3, r2
 800500e:	00db      	lsls	r3, r3, #3
 8005010:	1a9b      	subs	r3, r3, r2
 8005012:	009b      	lsls	r3, r3, #2
 8005014:	3338      	adds	r3, #56	@ 0x38
 8005016:	687a      	ldr	r2, [r7, #4]
 8005018:	4413      	add	r3, r2
 800501a:	3304      	adds	r3, #4
 800501c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	2201      	movs	r2, #1
 8005022:	705a      	strb	r2, [r3, #1]
 8005024:	e00f      	b.n	8005046 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005026:	78fb      	ldrb	r3, [r7, #3]
 8005028:	f003 020f 	and.w	r2, r3, #15
 800502c:	4613      	mov	r3, r2
 800502e:	00db      	lsls	r3, r3, #3
 8005030:	1a9b      	subs	r3, r3, r2
 8005032:	009b      	lsls	r3, r3, #2
 8005034:	f503 73fc 	add.w	r3, r3, #504	@ 0x1f8
 8005038:	687a      	ldr	r2, [r7, #4]
 800503a:	4413      	add	r3, r2
 800503c:	3304      	adds	r3, #4
 800503e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	2200      	movs	r2, #0
 8005044:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	2200      	movs	r2, #0
 800504a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800504c:	78fb      	ldrb	r3, [r7, #3]
 800504e:	f003 030f 	and.w	r3, r3, #15
 8005052:	b2da      	uxtb	r2, r3
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	f893 33bc 	ldrb.w	r3, [r3, #956]	@ 0x3bc
 800505e:	2b01      	cmp	r3, #1
 8005060:	d101      	bne.n	8005066 <HAL_PCD_EP_ClrStall+0x86>
 8005062:	2302      	movs	r3, #2
 8005064:	e00e      	b.n	8005084 <HAL_PCD_EP_ClrStall+0xa4>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2201      	movs	r2, #1
 800506a:	f883 23bc 	strb.w	r2, [r3, #956]	@ 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	68f9      	ldr	r1, [r7, #12]
 8005074:	4618      	mov	r0, r3
 8005076:	f002 fe70 	bl	8007d5a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2200      	movs	r2, #0
 800507e:	f883 23bc 	strb.w	r2, [r3, #956]	@ 0x3bc

  return HAL_OK;
 8005082:	2300      	movs	r3, #0
}
 8005084:	4618      	mov	r0, r3
 8005086:	3710      	adds	r7, #16
 8005088:	46bd      	mov	sp, r7
 800508a:	bd80      	pop	{r7, pc}

0800508c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b08a      	sub	sp, #40	@ 0x28
 8005090:	af02      	add	r7, sp, #8
 8005092:	6078      	str	r0, [r7, #4]
 8005094:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800509c:	697b      	ldr	r3, [r7, #20]
 800509e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80050a0:	683a      	ldr	r2, [r7, #0]
 80050a2:	4613      	mov	r3, r2
 80050a4:	00db      	lsls	r3, r3, #3
 80050a6:	1a9b      	subs	r3, r3, r2
 80050a8:	009b      	lsls	r3, r3, #2
 80050aa:	3338      	adds	r3, #56	@ 0x38
 80050ac:	687a      	ldr	r2, [r7, #4]
 80050ae:	4413      	add	r3, r2
 80050b0:	3304      	adds	r3, #4
 80050b2:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	699a      	ldr	r2, [r3, #24]
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	695b      	ldr	r3, [r3, #20]
 80050bc:	429a      	cmp	r2, r3
 80050be:	d901      	bls.n	80050c4 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80050c0:	2301      	movs	r3, #1
 80050c2:	e06c      	b.n	800519e <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	695a      	ldr	r2, [r3, #20]
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	699b      	ldr	r3, [r3, #24]
 80050cc:	1ad3      	subs	r3, r2, r3
 80050ce:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	689b      	ldr	r3, [r3, #8]
 80050d4:	69fa      	ldr	r2, [r7, #28]
 80050d6:	429a      	cmp	r2, r3
 80050d8:	d902      	bls.n	80050e0 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	689b      	ldr	r3, [r3, #8]
 80050de:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80050e0:	69fb      	ldr	r3, [r7, #28]
 80050e2:	3303      	adds	r3, #3
 80050e4:	089b      	lsrs	r3, r3, #2
 80050e6:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80050e8:	e02b      	b.n	8005142 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	695a      	ldr	r2, [r3, #20]
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	699b      	ldr	r3, [r3, #24]
 80050f2:	1ad3      	subs	r3, r2, r3
 80050f4:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	689b      	ldr	r3, [r3, #8]
 80050fa:	69fa      	ldr	r2, [r7, #28]
 80050fc:	429a      	cmp	r2, r3
 80050fe:	d902      	bls.n	8005106 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	689b      	ldr	r3, [r3, #8]
 8005104:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8005106:	69fb      	ldr	r3, [r7, #28]
 8005108:	3303      	adds	r3, #3
 800510a:	089b      	lsrs	r3, r3, #2
 800510c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	68d9      	ldr	r1, [r3, #12]
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	b2da      	uxtb	r2, r3
 8005116:	69fb      	ldr	r3, [r7, #28]
 8005118:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800511e:	b2db      	uxtb	r3, r3
 8005120:	9300      	str	r3, [sp, #0]
 8005122:	4603      	mov	r3, r0
 8005124:	6978      	ldr	r0, [r7, #20]
 8005126:	f002 fd14 	bl	8007b52 <USB_WritePacket>

    ep->xfer_buff  += len;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	68da      	ldr	r2, [r3, #12]
 800512e:	69fb      	ldr	r3, [r7, #28]
 8005130:	441a      	add	r2, r3
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	699a      	ldr	r2, [r3, #24]
 800513a:	69fb      	ldr	r3, [r7, #28]
 800513c:	441a      	add	r2, r3
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	015a      	lsls	r2, r3, #5
 8005146:	693b      	ldr	r3, [r7, #16]
 8005148:	4413      	add	r3, r2
 800514a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800514e:	699b      	ldr	r3, [r3, #24]
 8005150:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005152:	69ba      	ldr	r2, [r7, #24]
 8005154:	429a      	cmp	r2, r3
 8005156:	d809      	bhi.n	800516c <PCD_WriteEmptyTxFifo+0xe0>
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	699a      	ldr	r2, [r3, #24]
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005160:	429a      	cmp	r2, r3
 8005162:	d203      	bcs.n	800516c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	695b      	ldr	r3, [r3, #20]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d1be      	bne.n	80050ea <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	695a      	ldr	r2, [r3, #20]
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	699b      	ldr	r3, [r3, #24]
 8005174:	429a      	cmp	r2, r3
 8005176:	d811      	bhi.n	800519c <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	f003 030f 	and.w	r3, r3, #15
 800517e:	2201      	movs	r2, #1
 8005180:	fa02 f303 	lsl.w	r3, r2, r3
 8005184:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005186:	693b      	ldr	r3, [r7, #16]
 8005188:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800518c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800518e:	68bb      	ldr	r3, [r7, #8]
 8005190:	43db      	mvns	r3, r3
 8005192:	6939      	ldr	r1, [r7, #16]
 8005194:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005198:	4013      	ands	r3, r2
 800519a:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 800519c:	2300      	movs	r3, #0
}
 800519e:	4618      	mov	r0, r3
 80051a0:	3720      	adds	r7, #32
 80051a2:	46bd      	mov	sp, r7
 80051a4:	bd80      	pop	{r7, pc}
	...

080051a8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b086      	sub	sp, #24
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
 80051b0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051b8:	697b      	ldr	r3, [r7, #20]
 80051ba:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80051bc:	697b      	ldr	r3, [r7, #20]
 80051be:	333c      	adds	r3, #60	@ 0x3c
 80051c0:	3304      	adds	r3, #4
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	015a      	lsls	r2, r3, #5
 80051ca:	693b      	ldr	r3, [r7, #16]
 80051cc:	4413      	add	r3, r2
 80051ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80051d2:	689b      	ldr	r3, [r3, #8]
 80051d4:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	691b      	ldr	r3, [r3, #16]
 80051da:	2b01      	cmp	r3, #1
 80051dc:	f040 80a0 	bne.w	8005320 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80051e0:	68bb      	ldr	r3, [r7, #8]
 80051e2:	f003 0308 	and.w	r3, r3, #8
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d015      	beq.n	8005216 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	4a72      	ldr	r2, [pc, #456]	@ (80053b8 <PCD_EP_OutXfrComplete_int+0x210>)
 80051ee:	4293      	cmp	r3, r2
 80051f0:	f240 80dd 	bls.w	80053ae <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80051f4:	68bb      	ldr	r3, [r7, #8]
 80051f6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	f000 80d7 	beq.w	80053ae <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	015a      	lsls	r2, r3, #5
 8005204:	693b      	ldr	r3, [r7, #16]
 8005206:	4413      	add	r3, r2
 8005208:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800520c:	461a      	mov	r2, r3
 800520e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005212:	6093      	str	r3, [r2, #8]
 8005214:	e0cb      	b.n	80053ae <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8005216:	68bb      	ldr	r3, [r7, #8]
 8005218:	f003 0320 	and.w	r3, r3, #32
 800521c:	2b00      	cmp	r3, #0
 800521e:	d009      	beq.n	8005234 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	015a      	lsls	r2, r3, #5
 8005224:	693b      	ldr	r3, [r7, #16]
 8005226:	4413      	add	r3, r2
 8005228:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800522c:	461a      	mov	r2, r3
 800522e:	2320      	movs	r3, #32
 8005230:	6093      	str	r3, [r2, #8]
 8005232:	e0bc      	b.n	80053ae <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8005234:	68bb      	ldr	r3, [r7, #8]
 8005236:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800523a:	2b00      	cmp	r3, #0
 800523c:	f040 80b7 	bne.w	80053ae <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	4a5d      	ldr	r2, [pc, #372]	@ (80053b8 <PCD_EP_OutXfrComplete_int+0x210>)
 8005244:	4293      	cmp	r3, r2
 8005246:	d90f      	bls.n	8005268 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005248:	68bb      	ldr	r3, [r7, #8]
 800524a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800524e:	2b00      	cmp	r3, #0
 8005250:	d00a      	beq.n	8005268 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	015a      	lsls	r2, r3, #5
 8005256:	693b      	ldr	r3, [r7, #16]
 8005258:	4413      	add	r3, r2
 800525a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800525e:	461a      	mov	r2, r3
 8005260:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005264:	6093      	str	r3, [r2, #8]
 8005266:	e0a2      	b.n	80053ae <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8005268:	6879      	ldr	r1, [r7, #4]
 800526a:	683a      	ldr	r2, [r7, #0]
 800526c:	4613      	mov	r3, r2
 800526e:	00db      	lsls	r3, r3, #3
 8005270:	1a9b      	subs	r3, r3, r2
 8005272:	009b      	lsls	r3, r3, #2
 8005274:	440b      	add	r3, r1
 8005276:	f503 7301 	add.w	r3, r3, #516	@ 0x204
 800527a:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	0159      	lsls	r1, r3, #5
 8005280:	693b      	ldr	r3, [r7, #16]
 8005282:	440b      	add	r3, r1
 8005284:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005288:	691b      	ldr	r3, [r3, #16]
 800528a:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800528e:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8005290:	6878      	ldr	r0, [r7, #4]
 8005292:	683a      	ldr	r2, [r7, #0]
 8005294:	4613      	mov	r3, r2
 8005296:	00db      	lsls	r3, r3, #3
 8005298:	1a9b      	subs	r3, r3, r2
 800529a:	009b      	lsls	r3, r3, #2
 800529c:	4403      	add	r3, r0
 800529e:	f503 7305 	add.w	r3, r3, #532	@ 0x214
 80052a2:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80052a4:	6879      	ldr	r1, [r7, #4]
 80052a6:	683a      	ldr	r2, [r7, #0]
 80052a8:	4613      	mov	r3, r2
 80052aa:	00db      	lsls	r3, r3, #3
 80052ac:	1a9b      	subs	r3, r3, r2
 80052ae:	009b      	lsls	r3, r3, #2
 80052b0:	440b      	add	r3, r1
 80052b2:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 80052b6:	6819      	ldr	r1, [r3, #0]
 80052b8:	6878      	ldr	r0, [r7, #4]
 80052ba:	683a      	ldr	r2, [r7, #0]
 80052bc:	4613      	mov	r3, r2
 80052be:	00db      	lsls	r3, r3, #3
 80052c0:	1a9b      	subs	r3, r3, r2
 80052c2:	009b      	lsls	r3, r3, #2
 80052c4:	4403      	add	r3, r0
 80052c6:	f503 7301 	add.w	r3, r3, #516	@ 0x204
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	4419      	add	r1, r3
 80052ce:	6878      	ldr	r0, [r7, #4]
 80052d0:	683a      	ldr	r2, [r7, #0]
 80052d2:	4613      	mov	r3, r2
 80052d4:	00db      	lsls	r3, r3, #3
 80052d6:	1a9b      	subs	r3, r3, r2
 80052d8:	009b      	lsls	r3, r3, #2
 80052da:	4403      	add	r3, r0
 80052dc:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 80052e0:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d114      	bne.n	8005312 <PCD_EP_OutXfrComplete_int+0x16a>
 80052e8:	6879      	ldr	r1, [r7, #4]
 80052ea:	683a      	ldr	r2, [r7, #0]
 80052ec:	4613      	mov	r3, r2
 80052ee:	00db      	lsls	r3, r3, #3
 80052f0:	1a9b      	subs	r3, r3, r2
 80052f2:	009b      	lsls	r3, r3, #2
 80052f4:	440b      	add	r3, r1
 80052f6:	f503 7304 	add.w	r3, r3, #528	@ 0x210
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d108      	bne.n	8005312 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6818      	ldr	r0, [r3, #0]
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	f503 7371 	add.w	r3, r3, #964	@ 0x3c4
 800530a:	461a      	mov	r2, r3
 800530c:	2101      	movs	r1, #1
 800530e:	f002 feb7 	bl	8008080 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	b2db      	uxtb	r3, r3
 8005316:	4619      	mov	r1, r3
 8005318:	6878      	ldr	r0, [r7, #4]
 800531a:	f005 f93b 	bl	800a594 <HAL_PCD_DataOutStageCallback>
 800531e:	e046      	b.n	80053ae <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	4a26      	ldr	r2, [pc, #152]	@ (80053bc <PCD_EP_OutXfrComplete_int+0x214>)
 8005324:	4293      	cmp	r3, r2
 8005326:	d124      	bne.n	8005372 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8005328:	68bb      	ldr	r3, [r7, #8]
 800532a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800532e:	2b00      	cmp	r3, #0
 8005330:	d00a      	beq.n	8005348 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	015a      	lsls	r2, r3, #5
 8005336:	693b      	ldr	r3, [r7, #16]
 8005338:	4413      	add	r3, r2
 800533a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800533e:	461a      	mov	r2, r3
 8005340:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005344:	6093      	str	r3, [r2, #8]
 8005346:	e032      	b.n	80053ae <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005348:	68bb      	ldr	r3, [r7, #8]
 800534a:	f003 0320 	and.w	r3, r3, #32
 800534e:	2b00      	cmp	r3, #0
 8005350:	d008      	beq.n	8005364 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	015a      	lsls	r2, r3, #5
 8005356:	693b      	ldr	r3, [r7, #16]
 8005358:	4413      	add	r3, r2
 800535a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800535e:	461a      	mov	r2, r3
 8005360:	2320      	movs	r3, #32
 8005362:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	b2db      	uxtb	r3, r3
 8005368:	4619      	mov	r1, r3
 800536a:	6878      	ldr	r0, [r7, #4]
 800536c:	f005 f912 	bl	800a594 <HAL_PCD_DataOutStageCallback>
 8005370:	e01d      	b.n	80053ae <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d114      	bne.n	80053a2 <PCD_EP_OutXfrComplete_int+0x1fa>
 8005378:	6879      	ldr	r1, [r7, #4]
 800537a:	683a      	ldr	r2, [r7, #0]
 800537c:	4613      	mov	r3, r2
 800537e:	00db      	lsls	r3, r3, #3
 8005380:	1a9b      	subs	r3, r3, r2
 8005382:	009b      	lsls	r3, r3, #2
 8005384:	440b      	add	r3, r1
 8005386:	f503 7304 	add.w	r3, r3, #528	@ 0x210
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d108      	bne.n	80053a2 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6818      	ldr	r0, [r3, #0]
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	f503 7371 	add.w	r3, r3, #964	@ 0x3c4
 800539a:	461a      	mov	r2, r3
 800539c:	2100      	movs	r1, #0
 800539e:	f002 fe6f 	bl	8008080 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	b2db      	uxtb	r3, r3
 80053a6:	4619      	mov	r1, r3
 80053a8:	6878      	ldr	r0, [r7, #4]
 80053aa:	f005 f8f3 	bl	800a594 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80053ae:	2300      	movs	r3, #0
}
 80053b0:	4618      	mov	r0, r3
 80053b2:	3718      	adds	r7, #24
 80053b4:	46bd      	mov	sp, r7
 80053b6:	bd80      	pop	{r7, pc}
 80053b8:	4f54300a 	.word	0x4f54300a
 80053bc:	4f54310a 	.word	0x4f54310a

080053c0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b086      	sub	sp, #24
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
 80053c8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053d0:	697b      	ldr	r3, [r7, #20]
 80053d2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80053d4:	697b      	ldr	r3, [r7, #20]
 80053d6:	333c      	adds	r3, #60	@ 0x3c
 80053d8:	3304      	adds	r3, #4
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	015a      	lsls	r2, r3, #5
 80053e2:	693b      	ldr	r3, [r7, #16]
 80053e4:	4413      	add	r3, r2
 80053e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80053ea:	689b      	ldr	r3, [r3, #8]
 80053ec:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	4a15      	ldr	r2, [pc, #84]	@ (8005448 <PCD_EP_OutSetupPacket_int+0x88>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d90e      	bls.n	8005414 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80053f6:	68bb      	ldr	r3, [r7, #8]
 80053f8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d009      	beq.n	8005414 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	015a      	lsls	r2, r3, #5
 8005404:	693b      	ldr	r3, [r7, #16]
 8005406:	4413      	add	r3, r2
 8005408:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800540c:	461a      	mov	r2, r3
 800540e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005412:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8005414:	6878      	ldr	r0, [r7, #4]
 8005416:	f005 f8ab 	bl	800a570 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	4a0a      	ldr	r2, [pc, #40]	@ (8005448 <PCD_EP_OutSetupPacket_int+0x88>)
 800541e:	4293      	cmp	r3, r2
 8005420:	d90c      	bls.n	800543c <PCD_EP_OutSetupPacket_int+0x7c>
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	691b      	ldr	r3, [r3, #16]
 8005426:	2b01      	cmp	r3, #1
 8005428:	d108      	bne.n	800543c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6818      	ldr	r0, [r3, #0]
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	f503 7371 	add.w	r3, r3, #964	@ 0x3c4
 8005434:	461a      	mov	r2, r3
 8005436:	2101      	movs	r1, #1
 8005438:	f002 fe22 	bl	8008080 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800543c:	2300      	movs	r3, #0
}
 800543e:	4618      	mov	r0, r3
 8005440:	3718      	adds	r7, #24
 8005442:	46bd      	mov	sp, r7
 8005444:	bd80      	pop	{r7, pc}
 8005446:	bf00      	nop
 8005448:	4f54300a 	.word	0x4f54300a

0800544c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800544c:	b480      	push	{r7}
 800544e:	b085      	sub	sp, #20
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
 8005454:	460b      	mov	r3, r1
 8005456:	70fb      	strb	r3, [r7, #3]
 8005458:	4613      	mov	r3, r2
 800545a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005462:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8005464:	78fb      	ldrb	r3, [r7, #3]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d107      	bne.n	800547a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800546a:	883b      	ldrh	r3, [r7, #0]
 800546c:	0419      	lsls	r1, r3, #16
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	68ba      	ldr	r2, [r7, #8]
 8005474:	430a      	orrs	r2, r1
 8005476:	629a      	str	r2, [r3, #40]	@ 0x28
 8005478:	e028      	b.n	80054cc <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005480:	0c1b      	lsrs	r3, r3, #16
 8005482:	68ba      	ldr	r2, [r7, #8]
 8005484:	4413      	add	r3, r2
 8005486:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005488:	2300      	movs	r3, #0
 800548a:	73fb      	strb	r3, [r7, #15]
 800548c:	e00d      	b.n	80054aa <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681a      	ldr	r2, [r3, #0]
 8005492:	7bfb      	ldrb	r3, [r7, #15]
 8005494:	3340      	adds	r3, #64	@ 0x40
 8005496:	009b      	lsls	r3, r3, #2
 8005498:	4413      	add	r3, r2
 800549a:	685b      	ldr	r3, [r3, #4]
 800549c:	0c1b      	lsrs	r3, r3, #16
 800549e:	68ba      	ldr	r2, [r7, #8]
 80054a0:	4413      	add	r3, r2
 80054a2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80054a4:	7bfb      	ldrb	r3, [r7, #15]
 80054a6:	3301      	adds	r3, #1
 80054a8:	73fb      	strb	r3, [r7, #15]
 80054aa:	7bfa      	ldrb	r2, [r7, #15]
 80054ac:	78fb      	ldrb	r3, [r7, #3]
 80054ae:	3b01      	subs	r3, #1
 80054b0:	429a      	cmp	r2, r3
 80054b2:	d3ec      	bcc.n	800548e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80054b4:	883b      	ldrh	r3, [r7, #0]
 80054b6:	0418      	lsls	r0, r3, #16
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6819      	ldr	r1, [r3, #0]
 80054bc:	78fb      	ldrb	r3, [r7, #3]
 80054be:	3b01      	subs	r3, #1
 80054c0:	68ba      	ldr	r2, [r7, #8]
 80054c2:	4302      	orrs	r2, r0
 80054c4:	3340      	adds	r3, #64	@ 0x40
 80054c6:	009b      	lsls	r3, r3, #2
 80054c8:	440b      	add	r3, r1
 80054ca:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80054cc:	2300      	movs	r3, #0
}
 80054ce:	4618      	mov	r0, r3
 80054d0:	3714      	adds	r7, #20
 80054d2:	46bd      	mov	sp, r7
 80054d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d8:	4770      	bx	lr

080054da <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80054da:	b480      	push	{r7}
 80054dc:	b083      	sub	sp, #12
 80054de:	af00      	add	r7, sp, #0
 80054e0:	6078      	str	r0, [r7, #4]
 80054e2:	460b      	mov	r3, r1
 80054e4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	887a      	ldrh	r2, [r7, #2]
 80054ec:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80054ee:	2300      	movs	r3, #0
}
 80054f0:	4618      	mov	r0, r3
 80054f2:	370c      	adds	r7, #12
 80054f4:	46bd      	mov	sp, r7
 80054f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fa:	4770      	bx	lr

080054fc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80054fc:	b480      	push	{r7}
 80054fe:	b085      	sub	sp, #20
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2201      	movs	r2, #1
 800550e:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc
  hpcd->LPM_State = LPM_L0;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2200      	movs	r2, #0
 8005516:	f883 23f4 	strb.w	r2, [r3, #1012]	@ 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	699b      	ldr	r3, [r3, #24]
 800551e:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800552a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800552e:	f043 0303 	orr.w	r3, r3, #3
 8005532:	68fa      	ldr	r2, [r7, #12]
 8005534:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8005536:	2300      	movs	r3, #0
}
 8005538:	4618      	mov	r0, r3
 800553a:	3714      	adds	r7, #20
 800553c:	46bd      	mov	sp, r7
 800553e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005542:	4770      	bx	lr

08005544 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8005544:	b480      	push	{r7}
 8005546:	b083      	sub	sp, #12
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
 800554c:	460b      	mov	r3, r1
 800554e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8005550:	bf00      	nop
 8005552:	370c      	adds	r7, #12
 8005554:	46bd      	mov	sp, r7
 8005556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555a:	4770      	bx	lr

0800555c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800555c:	b580      	push	{r7, lr}
 800555e:	b084      	sub	sp, #16
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
 8005564:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d101      	bne.n	8005570 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800556c:	2301      	movs	r3, #1
 800556e:	e0cc      	b.n	800570a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005570:	4b68      	ldr	r3, [pc, #416]	@ (8005714 <HAL_RCC_ClockConfig+0x1b8>)
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f003 0307 	and.w	r3, r3, #7
 8005578:	683a      	ldr	r2, [r7, #0]
 800557a:	429a      	cmp	r2, r3
 800557c:	d90c      	bls.n	8005598 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800557e:	4b65      	ldr	r3, [pc, #404]	@ (8005714 <HAL_RCC_ClockConfig+0x1b8>)
 8005580:	683a      	ldr	r2, [r7, #0]
 8005582:	b2d2      	uxtb	r2, r2
 8005584:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005586:	4b63      	ldr	r3, [pc, #396]	@ (8005714 <HAL_RCC_ClockConfig+0x1b8>)
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f003 0307 	and.w	r3, r3, #7
 800558e:	683a      	ldr	r2, [r7, #0]
 8005590:	429a      	cmp	r2, r3
 8005592:	d001      	beq.n	8005598 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005594:	2301      	movs	r3, #1
 8005596:	e0b8      	b.n	800570a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f003 0302 	and.w	r3, r3, #2
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d020      	beq.n	80055e6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f003 0304 	and.w	r3, r3, #4
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d005      	beq.n	80055bc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80055b0:	4b59      	ldr	r3, [pc, #356]	@ (8005718 <HAL_RCC_ClockConfig+0x1bc>)
 80055b2:	689b      	ldr	r3, [r3, #8]
 80055b4:	4a58      	ldr	r2, [pc, #352]	@ (8005718 <HAL_RCC_ClockConfig+0x1bc>)
 80055b6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80055ba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f003 0308 	and.w	r3, r3, #8
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d005      	beq.n	80055d4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80055c8:	4b53      	ldr	r3, [pc, #332]	@ (8005718 <HAL_RCC_ClockConfig+0x1bc>)
 80055ca:	689b      	ldr	r3, [r3, #8]
 80055cc:	4a52      	ldr	r2, [pc, #328]	@ (8005718 <HAL_RCC_ClockConfig+0x1bc>)
 80055ce:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80055d2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80055d4:	4b50      	ldr	r3, [pc, #320]	@ (8005718 <HAL_RCC_ClockConfig+0x1bc>)
 80055d6:	689b      	ldr	r3, [r3, #8]
 80055d8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	689b      	ldr	r3, [r3, #8]
 80055e0:	494d      	ldr	r1, [pc, #308]	@ (8005718 <HAL_RCC_ClockConfig+0x1bc>)
 80055e2:	4313      	orrs	r3, r2
 80055e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f003 0301 	and.w	r3, r3, #1
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d044      	beq.n	800567c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	685b      	ldr	r3, [r3, #4]
 80055f6:	2b01      	cmp	r3, #1
 80055f8:	d107      	bne.n	800560a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80055fa:	4b47      	ldr	r3, [pc, #284]	@ (8005718 <HAL_RCC_ClockConfig+0x1bc>)
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005602:	2b00      	cmp	r3, #0
 8005604:	d119      	bne.n	800563a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005606:	2301      	movs	r3, #1
 8005608:	e07f      	b.n	800570a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	685b      	ldr	r3, [r3, #4]
 800560e:	2b02      	cmp	r3, #2
 8005610:	d003      	beq.n	800561a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005616:	2b03      	cmp	r3, #3
 8005618:	d107      	bne.n	800562a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800561a:	4b3f      	ldr	r3, [pc, #252]	@ (8005718 <HAL_RCC_ClockConfig+0x1bc>)
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005622:	2b00      	cmp	r3, #0
 8005624:	d109      	bne.n	800563a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005626:	2301      	movs	r3, #1
 8005628:	e06f      	b.n	800570a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800562a:	4b3b      	ldr	r3, [pc, #236]	@ (8005718 <HAL_RCC_ClockConfig+0x1bc>)
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f003 0302 	and.w	r3, r3, #2
 8005632:	2b00      	cmp	r3, #0
 8005634:	d101      	bne.n	800563a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005636:	2301      	movs	r3, #1
 8005638:	e067      	b.n	800570a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800563a:	4b37      	ldr	r3, [pc, #220]	@ (8005718 <HAL_RCC_ClockConfig+0x1bc>)
 800563c:	689b      	ldr	r3, [r3, #8]
 800563e:	f023 0203 	bic.w	r2, r3, #3
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	685b      	ldr	r3, [r3, #4]
 8005646:	4934      	ldr	r1, [pc, #208]	@ (8005718 <HAL_RCC_ClockConfig+0x1bc>)
 8005648:	4313      	orrs	r3, r2
 800564a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800564c:	f7fc fc34 	bl	8001eb8 <HAL_GetTick>
 8005650:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005652:	e00a      	b.n	800566a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005654:	f7fc fc30 	bl	8001eb8 <HAL_GetTick>
 8005658:	4602      	mov	r2, r0
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	1ad3      	subs	r3, r2, r3
 800565e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005662:	4293      	cmp	r3, r2
 8005664:	d901      	bls.n	800566a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005666:	2303      	movs	r3, #3
 8005668:	e04f      	b.n	800570a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800566a:	4b2b      	ldr	r3, [pc, #172]	@ (8005718 <HAL_RCC_ClockConfig+0x1bc>)
 800566c:	689b      	ldr	r3, [r3, #8]
 800566e:	f003 020c 	and.w	r2, r3, #12
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	685b      	ldr	r3, [r3, #4]
 8005676:	009b      	lsls	r3, r3, #2
 8005678:	429a      	cmp	r2, r3
 800567a:	d1eb      	bne.n	8005654 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800567c:	4b25      	ldr	r3, [pc, #148]	@ (8005714 <HAL_RCC_ClockConfig+0x1b8>)
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f003 0307 	and.w	r3, r3, #7
 8005684:	683a      	ldr	r2, [r7, #0]
 8005686:	429a      	cmp	r2, r3
 8005688:	d20c      	bcs.n	80056a4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800568a:	4b22      	ldr	r3, [pc, #136]	@ (8005714 <HAL_RCC_ClockConfig+0x1b8>)
 800568c:	683a      	ldr	r2, [r7, #0]
 800568e:	b2d2      	uxtb	r2, r2
 8005690:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005692:	4b20      	ldr	r3, [pc, #128]	@ (8005714 <HAL_RCC_ClockConfig+0x1b8>)
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f003 0307 	and.w	r3, r3, #7
 800569a:	683a      	ldr	r2, [r7, #0]
 800569c:	429a      	cmp	r2, r3
 800569e:	d001      	beq.n	80056a4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80056a0:	2301      	movs	r3, #1
 80056a2:	e032      	b.n	800570a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f003 0304 	and.w	r3, r3, #4
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d008      	beq.n	80056c2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80056b0:	4b19      	ldr	r3, [pc, #100]	@ (8005718 <HAL_RCC_ClockConfig+0x1bc>)
 80056b2:	689b      	ldr	r3, [r3, #8]
 80056b4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	68db      	ldr	r3, [r3, #12]
 80056bc:	4916      	ldr	r1, [pc, #88]	@ (8005718 <HAL_RCC_ClockConfig+0x1bc>)
 80056be:	4313      	orrs	r3, r2
 80056c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f003 0308 	and.w	r3, r3, #8
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d009      	beq.n	80056e2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80056ce:	4b12      	ldr	r3, [pc, #72]	@ (8005718 <HAL_RCC_ClockConfig+0x1bc>)
 80056d0:	689b      	ldr	r3, [r3, #8]
 80056d2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	691b      	ldr	r3, [r3, #16]
 80056da:	00db      	lsls	r3, r3, #3
 80056dc:	490e      	ldr	r1, [pc, #56]	@ (8005718 <HAL_RCC_ClockConfig+0x1bc>)
 80056de:	4313      	orrs	r3, r2
 80056e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80056e2:	f000 f821 	bl	8005728 <HAL_RCC_GetSysClockFreq>
 80056e6:	4602      	mov	r2, r0
 80056e8:	4b0b      	ldr	r3, [pc, #44]	@ (8005718 <HAL_RCC_ClockConfig+0x1bc>)
 80056ea:	689b      	ldr	r3, [r3, #8]
 80056ec:	091b      	lsrs	r3, r3, #4
 80056ee:	f003 030f 	and.w	r3, r3, #15
 80056f2:	490a      	ldr	r1, [pc, #40]	@ (800571c <HAL_RCC_ClockConfig+0x1c0>)
 80056f4:	5ccb      	ldrb	r3, [r1, r3]
 80056f6:	fa22 f303 	lsr.w	r3, r2, r3
 80056fa:	4a09      	ldr	r2, [pc, #36]	@ (8005720 <HAL_RCC_ClockConfig+0x1c4>)
 80056fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80056fe:	4b09      	ldr	r3, [pc, #36]	@ (8005724 <HAL_RCC_ClockConfig+0x1c8>)
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	4618      	mov	r0, r3
 8005704:	f7fc fb94 	bl	8001e30 <HAL_InitTick>

  return HAL_OK;
 8005708:	2300      	movs	r3, #0
}
 800570a:	4618      	mov	r0, r3
 800570c:	3710      	adds	r7, #16
 800570e:	46bd      	mov	sp, r7
 8005710:	bd80      	pop	{r7, pc}
 8005712:	bf00      	nop
 8005714:	40023c00 	.word	0x40023c00
 8005718:	40023800 	.word	0x40023800
 800571c:	0800d5dc 	.word	0x0800d5dc
 8005720:	20000000 	.word	0x20000000
 8005724:	20000004 	.word	0x20000004

08005728 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005728:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800572c:	b094      	sub	sp, #80	@ 0x50
 800572e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005730:	2300      	movs	r3, #0
 8005732:	647b      	str	r3, [r7, #68]	@ 0x44
 8005734:	2300      	movs	r3, #0
 8005736:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005738:	2300      	movs	r3, #0
 800573a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800573c:	2300      	movs	r3, #0
 800573e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005740:	4b79      	ldr	r3, [pc, #484]	@ (8005928 <HAL_RCC_GetSysClockFreq+0x200>)
 8005742:	689b      	ldr	r3, [r3, #8]
 8005744:	f003 030c 	and.w	r3, r3, #12
 8005748:	2b08      	cmp	r3, #8
 800574a:	d00d      	beq.n	8005768 <HAL_RCC_GetSysClockFreq+0x40>
 800574c:	2b08      	cmp	r3, #8
 800574e:	f200 80e1 	bhi.w	8005914 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005752:	2b00      	cmp	r3, #0
 8005754:	d002      	beq.n	800575c <HAL_RCC_GetSysClockFreq+0x34>
 8005756:	2b04      	cmp	r3, #4
 8005758:	d003      	beq.n	8005762 <HAL_RCC_GetSysClockFreq+0x3a>
 800575a:	e0db      	b.n	8005914 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800575c:	4b73      	ldr	r3, [pc, #460]	@ (800592c <HAL_RCC_GetSysClockFreq+0x204>)
 800575e:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8005760:	e0db      	b.n	800591a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005762:	4b73      	ldr	r3, [pc, #460]	@ (8005930 <HAL_RCC_GetSysClockFreq+0x208>)
 8005764:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005766:	e0d8      	b.n	800591a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005768:	4b6f      	ldr	r3, [pc, #444]	@ (8005928 <HAL_RCC_GetSysClockFreq+0x200>)
 800576a:	685b      	ldr	r3, [r3, #4]
 800576c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005770:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005772:	4b6d      	ldr	r3, [pc, #436]	@ (8005928 <HAL_RCC_GetSysClockFreq+0x200>)
 8005774:	685b      	ldr	r3, [r3, #4]
 8005776:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800577a:	2b00      	cmp	r3, #0
 800577c:	d063      	beq.n	8005846 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800577e:	4b6a      	ldr	r3, [pc, #424]	@ (8005928 <HAL_RCC_GetSysClockFreq+0x200>)
 8005780:	685b      	ldr	r3, [r3, #4]
 8005782:	099b      	lsrs	r3, r3, #6
 8005784:	2200      	movs	r2, #0
 8005786:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005788:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800578a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800578c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005790:	633b      	str	r3, [r7, #48]	@ 0x30
 8005792:	2300      	movs	r3, #0
 8005794:	637b      	str	r3, [r7, #52]	@ 0x34
 8005796:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800579a:	4622      	mov	r2, r4
 800579c:	462b      	mov	r3, r5
 800579e:	f04f 0000 	mov.w	r0, #0
 80057a2:	f04f 0100 	mov.w	r1, #0
 80057a6:	0159      	lsls	r1, r3, #5
 80057a8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80057ac:	0150      	lsls	r0, r2, #5
 80057ae:	4602      	mov	r2, r0
 80057b0:	460b      	mov	r3, r1
 80057b2:	4621      	mov	r1, r4
 80057b4:	1a51      	subs	r1, r2, r1
 80057b6:	6139      	str	r1, [r7, #16]
 80057b8:	4629      	mov	r1, r5
 80057ba:	eb63 0301 	sbc.w	r3, r3, r1
 80057be:	617b      	str	r3, [r7, #20]
 80057c0:	f04f 0200 	mov.w	r2, #0
 80057c4:	f04f 0300 	mov.w	r3, #0
 80057c8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80057cc:	4659      	mov	r1, fp
 80057ce:	018b      	lsls	r3, r1, #6
 80057d0:	4651      	mov	r1, sl
 80057d2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80057d6:	4651      	mov	r1, sl
 80057d8:	018a      	lsls	r2, r1, #6
 80057da:	4651      	mov	r1, sl
 80057dc:	ebb2 0801 	subs.w	r8, r2, r1
 80057e0:	4659      	mov	r1, fp
 80057e2:	eb63 0901 	sbc.w	r9, r3, r1
 80057e6:	f04f 0200 	mov.w	r2, #0
 80057ea:	f04f 0300 	mov.w	r3, #0
 80057ee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80057f2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80057f6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80057fa:	4690      	mov	r8, r2
 80057fc:	4699      	mov	r9, r3
 80057fe:	4623      	mov	r3, r4
 8005800:	eb18 0303 	adds.w	r3, r8, r3
 8005804:	60bb      	str	r3, [r7, #8]
 8005806:	462b      	mov	r3, r5
 8005808:	eb49 0303 	adc.w	r3, r9, r3
 800580c:	60fb      	str	r3, [r7, #12]
 800580e:	f04f 0200 	mov.w	r2, #0
 8005812:	f04f 0300 	mov.w	r3, #0
 8005816:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800581a:	4629      	mov	r1, r5
 800581c:	024b      	lsls	r3, r1, #9
 800581e:	4621      	mov	r1, r4
 8005820:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005824:	4621      	mov	r1, r4
 8005826:	024a      	lsls	r2, r1, #9
 8005828:	4610      	mov	r0, r2
 800582a:	4619      	mov	r1, r3
 800582c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800582e:	2200      	movs	r2, #0
 8005830:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005832:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005834:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005838:	f7fb f9de 	bl	8000bf8 <__aeabi_uldivmod>
 800583c:	4602      	mov	r2, r0
 800583e:	460b      	mov	r3, r1
 8005840:	4613      	mov	r3, r2
 8005842:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005844:	e058      	b.n	80058f8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005846:	4b38      	ldr	r3, [pc, #224]	@ (8005928 <HAL_RCC_GetSysClockFreq+0x200>)
 8005848:	685b      	ldr	r3, [r3, #4]
 800584a:	099b      	lsrs	r3, r3, #6
 800584c:	2200      	movs	r2, #0
 800584e:	4618      	mov	r0, r3
 8005850:	4611      	mov	r1, r2
 8005852:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005856:	623b      	str	r3, [r7, #32]
 8005858:	2300      	movs	r3, #0
 800585a:	627b      	str	r3, [r7, #36]	@ 0x24
 800585c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005860:	4642      	mov	r2, r8
 8005862:	464b      	mov	r3, r9
 8005864:	f04f 0000 	mov.w	r0, #0
 8005868:	f04f 0100 	mov.w	r1, #0
 800586c:	0159      	lsls	r1, r3, #5
 800586e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005872:	0150      	lsls	r0, r2, #5
 8005874:	4602      	mov	r2, r0
 8005876:	460b      	mov	r3, r1
 8005878:	4641      	mov	r1, r8
 800587a:	ebb2 0a01 	subs.w	sl, r2, r1
 800587e:	4649      	mov	r1, r9
 8005880:	eb63 0b01 	sbc.w	fp, r3, r1
 8005884:	f04f 0200 	mov.w	r2, #0
 8005888:	f04f 0300 	mov.w	r3, #0
 800588c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005890:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005894:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005898:	ebb2 040a 	subs.w	r4, r2, sl
 800589c:	eb63 050b 	sbc.w	r5, r3, fp
 80058a0:	f04f 0200 	mov.w	r2, #0
 80058a4:	f04f 0300 	mov.w	r3, #0
 80058a8:	00eb      	lsls	r3, r5, #3
 80058aa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80058ae:	00e2      	lsls	r2, r4, #3
 80058b0:	4614      	mov	r4, r2
 80058b2:	461d      	mov	r5, r3
 80058b4:	4643      	mov	r3, r8
 80058b6:	18e3      	adds	r3, r4, r3
 80058b8:	603b      	str	r3, [r7, #0]
 80058ba:	464b      	mov	r3, r9
 80058bc:	eb45 0303 	adc.w	r3, r5, r3
 80058c0:	607b      	str	r3, [r7, #4]
 80058c2:	f04f 0200 	mov.w	r2, #0
 80058c6:	f04f 0300 	mov.w	r3, #0
 80058ca:	e9d7 4500 	ldrd	r4, r5, [r7]
 80058ce:	4629      	mov	r1, r5
 80058d0:	028b      	lsls	r3, r1, #10
 80058d2:	4621      	mov	r1, r4
 80058d4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80058d8:	4621      	mov	r1, r4
 80058da:	028a      	lsls	r2, r1, #10
 80058dc:	4610      	mov	r0, r2
 80058de:	4619      	mov	r1, r3
 80058e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80058e2:	2200      	movs	r2, #0
 80058e4:	61bb      	str	r3, [r7, #24]
 80058e6:	61fa      	str	r2, [r7, #28]
 80058e8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80058ec:	f7fb f984 	bl	8000bf8 <__aeabi_uldivmod>
 80058f0:	4602      	mov	r2, r0
 80058f2:	460b      	mov	r3, r1
 80058f4:	4613      	mov	r3, r2
 80058f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80058f8:	4b0b      	ldr	r3, [pc, #44]	@ (8005928 <HAL_RCC_GetSysClockFreq+0x200>)
 80058fa:	685b      	ldr	r3, [r3, #4]
 80058fc:	0c1b      	lsrs	r3, r3, #16
 80058fe:	f003 0303 	and.w	r3, r3, #3
 8005902:	3301      	adds	r3, #1
 8005904:	005b      	lsls	r3, r3, #1
 8005906:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8005908:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800590a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800590c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005910:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005912:	e002      	b.n	800591a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005914:	4b05      	ldr	r3, [pc, #20]	@ (800592c <HAL_RCC_GetSysClockFreq+0x204>)
 8005916:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005918:	bf00      	nop
    }
  }
  return sysclockfreq;
 800591a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800591c:	4618      	mov	r0, r3
 800591e:	3750      	adds	r7, #80	@ 0x50
 8005920:	46bd      	mov	sp, r7
 8005922:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005926:	bf00      	nop
 8005928:	40023800 	.word	0x40023800
 800592c:	00f42400 	.word	0x00f42400
 8005930:	007a1200 	.word	0x007a1200

08005934 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005934:	b480      	push	{r7}
 8005936:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005938:	4b03      	ldr	r3, [pc, #12]	@ (8005948 <HAL_RCC_GetHCLKFreq+0x14>)
 800593a:	681b      	ldr	r3, [r3, #0]
}
 800593c:	4618      	mov	r0, r3
 800593e:	46bd      	mov	sp, r7
 8005940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005944:	4770      	bx	lr
 8005946:	bf00      	nop
 8005948:	20000000 	.word	0x20000000

0800594c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800594c:	b580      	push	{r7, lr}
 800594e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005950:	f7ff fff0 	bl	8005934 <HAL_RCC_GetHCLKFreq>
 8005954:	4602      	mov	r2, r0
 8005956:	4b05      	ldr	r3, [pc, #20]	@ (800596c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005958:	689b      	ldr	r3, [r3, #8]
 800595a:	0a9b      	lsrs	r3, r3, #10
 800595c:	f003 0307 	and.w	r3, r3, #7
 8005960:	4903      	ldr	r1, [pc, #12]	@ (8005970 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005962:	5ccb      	ldrb	r3, [r1, r3]
 8005964:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005968:	4618      	mov	r0, r3
 800596a:	bd80      	pop	{r7, pc}
 800596c:	40023800 	.word	0x40023800
 8005970:	0800d5ec 	.word	0x0800d5ec

08005974 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005974:	b580      	push	{r7, lr}
 8005976:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005978:	f7ff ffdc 	bl	8005934 <HAL_RCC_GetHCLKFreq>
 800597c:	4602      	mov	r2, r0
 800597e:	4b05      	ldr	r3, [pc, #20]	@ (8005994 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005980:	689b      	ldr	r3, [r3, #8]
 8005982:	0b5b      	lsrs	r3, r3, #13
 8005984:	f003 0307 	and.w	r3, r3, #7
 8005988:	4903      	ldr	r1, [pc, #12]	@ (8005998 <HAL_RCC_GetPCLK2Freq+0x24>)
 800598a:	5ccb      	ldrb	r3, [r1, r3]
 800598c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005990:	4618      	mov	r0, r3
 8005992:	bd80      	pop	{r7, pc}
 8005994:	40023800 	.word	0x40023800
 8005998:	0800d5ec 	.word	0x0800d5ec

0800599c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800599c:	b580      	push	{r7, lr}
 800599e:	b088      	sub	sp, #32
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80059a4:	2300      	movs	r3, #0
 80059a6:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg1 = 0U;
 80059a8:	2300      	movs	r3, #0
 80059aa:	617b      	str	r3, [r7, #20]
#if defined(STM32F413xx) || defined(STM32F423xx)
  uint32_t plli2sq = 0U;
 80059ac:	2300      	movs	r3, #0
 80059ae:	613b      	str	r3, [r7, #16]
#endif /* STM32F413xx || STM32F423xx */
  uint32_t plli2sused = 0U;
 80059b0:	2300      	movs	r3, #0
 80059b2:	61fb      	str	r3, [r7, #28]

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S APB1 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f003 0301 	and.w	r3, r3, #1
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d010      	beq.n	80059e2 <HAL_RCCEx_PeriphCLKConfig+0x46>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 80059c0:	4b7a      	ldr	r3, [pc, #488]	@ (8005bac <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80059c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80059c6:	f023 62c0 	bic.w	r2, r3, #100663296	@ 0x6000000
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	69db      	ldr	r3, [r3, #28]
 80059ce:	4977      	ldr	r1, [pc, #476]	@ (8005bac <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80059d0:	4313      	orrs	r3, r2
 80059d2:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	69db      	ldr	r3, [r3, #28]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d101      	bne.n	80059e2 <HAL_RCCEx_PeriphCLKConfig+0x46>
    {
      plli2sused = 1U;
 80059de:	2301      	movs	r3, #1
 80059e0:	61fb      	str	r3, [r7, #28]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------------- I2S APB2 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f003 0302 	and.w	r3, r3, #2
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d010      	beq.n	8005a10 <HAL_RCCEx_PeriphCLKConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 80059ee:	4b6f      	ldr	r3, [pc, #444]	@ (8005bac <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80059f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80059f4:	f023 52c0 	bic.w	r2, r3, #402653184	@ 0x18000000
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	6a1b      	ldr	r3, [r3, #32]
 80059fc:	496b      	ldr	r1, [pc, #428]	@ (8005bac <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80059fe:	4313      	orrs	r3, r2
 8005a00:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	6a1b      	ldr	r3, [r3, #32]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d101      	bne.n	8005a10 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      plli2sused = 1U;
 8005a0c:	2301      	movs	r3, #1
 8005a0e:	61fb      	str	r3, [r7, #28]
  }
  /*--------------------------------------------------------------------------*/

#if defined(STM32F413xx) || defined(STM32F423xx)
  /*----------------------- SAI1 Block A configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == (RCC_PERIPHCLK_SAIA))
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d022      	beq.n	8005a62 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAIACLKSOURCE(PeriphClkInit->SaiAClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI_BLOCKACLKSOURCE_CONFIG(PeriphClkInit->SaiAClockSelection);
 8005a1c:	4b63      	ldr	r3, [pc, #396]	@ (8005bac <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005a1e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005a22:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005a2a:	4960      	ldr	r1, [pc, #384]	@ (8005bac <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005a2c:	4313      	orrs	r3, r2
 8005a2e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d101      	bne.n	8005a3e <HAL_RCCEx_PeriphCLKConfig+0xa2>
    {
      plli2sused = 1U;
 8005a3a:	2301      	movs	r3, #1
 8005a3c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLR)
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005a42:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005a46:	d10c      	bne.n	8005a62 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      /* Check for PLL/DIVR parameters */
      assert_param(IS_RCC_PLL_DIVR_VALUE(PeriphClkInit->PLLDivR));

      /* SAI_CLK_x = SAI_CLK(first level)/PLLDIVR */
      __HAL_RCC_PLL_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLDivR);
 8005a48:	4b58      	ldr	r3, [pc, #352]	@ (8005bac <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005a4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005a4e:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	695b      	ldr	r3, [r3, #20]
 8005a56:	3b01      	subs	r3, #1
 8005a58:	021b      	lsls	r3, r3, #8
 8005a5a:	4954      	ldr	r1, [pc, #336]	@ (8005bac <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005a5c:	4313      	orrs	r3, r2
 8005a5e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------- SAI1 Block B configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == (RCC_PERIPHCLK_SAIB))
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d022      	beq.n	8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAIBCLKSOURCE(PeriphClkInit->SaiBClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI_BLOCKBCLKSOURCE_CONFIG(PeriphClkInit->SaiBClockSelection);
 8005a6e:	4b4f      	ldr	r3, [pc, #316]	@ (8005bac <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005a70:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005a74:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a7c:	494b      	ldr	r1, [pc, #300]	@ (8005bac <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005a7e:	4313      	orrs	r3, r2
 8005a80:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d101      	bne.n	8005a90 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8005a8c:	2301      	movs	r3, #1
 8005a8e:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLR)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a94:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005a98:	d10c      	bne.n	8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      /* Check for PLL/DIVR parameters */
      assert_param(IS_RCC_PLL_DIVR_VALUE(PeriphClkInit->PLLDivR));

      /* SAI_CLK_x = SAI_CLK(first level)/PLLDIVR */
      __HAL_RCC_PLL_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLDivR);
 8005a9a:	4b44      	ldr	r3, [pc, #272]	@ (8005bac <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005a9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005aa0:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	695b      	ldr	r3, [r3, #20]
 8005aa8:	3b01      	subs	r3, #1
 8005aaa:	021b      	lsls	r3, r3, #8
 8005aac:	493f      	ldr	r1, [pc, #252]	@ (8005bac <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005aae:	4313      	orrs	r3, r2
 8005ab0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  /*------------------------------------ RTC configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f003 0308 	and.w	r3, r3, #8
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	f000 808a 	beq.w	8005bd6 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	60fb      	str	r3, [r7, #12]
 8005ac6:	4b39      	ldr	r3, [pc, #228]	@ (8005bac <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005ac8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005aca:	4a38      	ldr	r2, [pc, #224]	@ (8005bac <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005acc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005ad0:	6413      	str	r3, [r2, #64]	@ 0x40
 8005ad2:	4b36      	ldr	r3, [pc, #216]	@ (8005bac <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005ad4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ad6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005ada:	60fb      	str	r3, [r7, #12]
 8005adc:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005ade:	4b34      	ldr	r3, [pc, #208]	@ (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	4a33      	ldr	r2, [pc, #204]	@ (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 8005ae4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005ae8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005aea:	f7fc f9e5 	bl	8001eb8 <HAL_GetTick>
 8005aee:	61b8      	str	r0, [r7, #24]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005af0:	e008      	b.n	8005b04 <HAL_RCCEx_PeriphCLKConfig+0x168>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005af2:	f7fc f9e1 	bl	8001eb8 <HAL_GetTick>
 8005af6:	4602      	mov	r2, r0
 8005af8:	69bb      	ldr	r3, [r7, #24]
 8005afa:	1ad3      	subs	r3, r2, r3
 8005afc:	2b02      	cmp	r3, #2
 8005afe:	d901      	bls.n	8005b04 <HAL_RCCEx_PeriphCLKConfig+0x168>
      {
        return HAL_TIMEOUT;
 8005b00:	2303      	movs	r3, #3
 8005b02:	e1d1      	b.n	8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005b04:	4b2a      	ldr	r3, [pc, #168]	@ (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d0f0      	beq.n	8005af2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005b10:	4b26      	ldr	r3, [pc, #152]	@ (8005bac <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005b12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b14:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005b18:	617b      	str	r3, [r7, #20]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005b1a:	697b      	ldr	r3, [r7, #20]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d02f      	beq.n	8005b80 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b24:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005b28:	697a      	ldr	r2, [r7, #20]
 8005b2a:	429a      	cmp	r2, r3
 8005b2c:	d028      	beq.n	8005b80 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005b2e:	4b1f      	ldr	r3, [pc, #124]	@ (8005bac <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005b30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b32:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005b36:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005b38:	4b1e      	ldr	r3, [pc, #120]	@ (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x218>)
 8005b3a:	2201      	movs	r2, #1
 8005b3c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005b3e:	4b1d      	ldr	r3, [pc, #116]	@ (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x218>)
 8005b40:	2200      	movs	r2, #0
 8005b42:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005b44:	4a19      	ldr	r2, [pc, #100]	@ (8005bac <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005b46:	697b      	ldr	r3, [r7, #20]
 8005b48:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005b4a:	4b18      	ldr	r3, [pc, #96]	@ (8005bac <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005b4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b4e:	f003 0301 	and.w	r3, r3, #1
 8005b52:	2b01      	cmp	r3, #1
 8005b54:	d114      	bne.n	8005b80 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005b56:	f7fc f9af 	bl	8001eb8 <HAL_GetTick>
 8005b5a:	61b8      	str	r0, [r7, #24]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b5c:	e00a      	b.n	8005b74 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005b5e:	f7fc f9ab 	bl	8001eb8 <HAL_GetTick>
 8005b62:	4602      	mov	r2, r0
 8005b64:	69bb      	ldr	r3, [r7, #24]
 8005b66:	1ad3      	subs	r3, r2, r3
 8005b68:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005b6c:	4293      	cmp	r3, r2
 8005b6e:	d901      	bls.n	8005b74 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
          {
            return HAL_TIMEOUT;
 8005b70:	2303      	movs	r3, #3
 8005b72:	e199      	b.n	8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b74:	4b0d      	ldr	r3, [pc, #52]	@ (8005bac <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005b76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b78:	f003 0302 	and.w	r3, r3, #2
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d0ee      	beq.n	8005b5e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b84:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005b88:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005b8c:	d114      	bne.n	8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x21c>
 8005b8e:	4b07      	ldr	r3, [pc, #28]	@ (8005bac <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005b90:	689b      	ldr	r3, [r3, #8]
 8005b92:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b9a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8005b9e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005ba2:	4902      	ldr	r1, [pc, #8]	@ (8005bac <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005ba4:	4313      	orrs	r3, r2
 8005ba6:	608b      	str	r3, [r1, #8]
 8005ba8:	e00c      	b.n	8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x228>
 8005baa:	bf00      	nop
 8005bac:	40023800 	.word	0x40023800
 8005bb0:	40007000 	.word	0x40007000
 8005bb4:	42470e40 	.word	0x42470e40
 8005bb8:	4b89      	ldr	r3, [pc, #548]	@ (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8005bba:	689b      	ldr	r3, [r3, #8]
 8005bbc:	4a88      	ldr	r2, [pc, #544]	@ (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8005bbe:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8005bc2:	6093      	str	r3, [r2, #8]
 8005bc4:	4b86      	ldr	r3, [pc, #536]	@ (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8005bc6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bcc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005bd0:	4983      	ldr	r1, [pc, #524]	@ (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8005bd2:	4313      	orrs	r3, r2
 8005bd4:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------ TIM configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f003 0304 	and.w	r3, r3, #4
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d004      	beq.n	8005bec <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	f893 2054 	ldrb.w	r2, [r3, #84]	@ 0x54
 8005be8:	4b7e      	ldr	r3, [pc, #504]	@ (8005de4 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 8005bea:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- FMPI2C1 Configuration --------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f003 0310 	and.w	r3, r3, #16
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d00a      	beq.n	8005c0e <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8005bf8:	4b79      	ldr	r3, [pc, #484]	@ (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8005bfa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005bfe:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c06:	4976      	ldr	r1, [pc, #472]	@ (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8005c08:	4313      	orrs	r3, r2
 8005c0a:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- CLK48 Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f003 0320 	and.w	r3, r3, #32
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d011      	beq.n	8005c3e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005c1a:	4b71      	ldr	r3, [pc, #452]	@ (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8005c1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005c20:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c28:	496d      	ldr	r1, [pc, #436]	@ (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8005c2a:	4313      	orrs	r3, r2
 8005c2c:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94

    /* Enable the PLLI2S when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c34:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005c38:	d101      	bne.n	8005c3e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
    {
      plli2sused = 1U;
 8005c3a:	2301      	movs	r3, #1
 8005c3c:	61fb      	str	r3, [r7, #28]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- SDIO Configuration -----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d00a      	beq.n	8005c60 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8005c4a:	4b65      	ldr	r3, [pc, #404]	@ (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8005c4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005c50:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c58:	4961      	ldr	r1, [pc, #388]	@ (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8005c5a:	4313      	orrs	r3, r2
 8005c5c:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  /*--------------------------------------------------------------------------*/

  /*-------------------------------------- PLLI2S Configuration --------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : I2S on APB1 or
     I2S on APB2*/
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8005c60:	69fb      	ldr	r3, [r7, #28]
 8005c62:	2b01      	cmp	r3, #1
 8005c64:	d004      	beq.n	8005c70 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	2b80      	cmp	r3, #128	@ 0x80
 8005c6c:	f040 80c6 	bne.w	8005dfc <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005c70:	4b5d      	ldr	r3, [pc, #372]	@ (8005de8 <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 8005c72:	2200      	movs	r2, #0
 8005c74:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005c76:	f7fc f91f 	bl	8001eb8 <HAL_GetTick>
 8005c7a:	61b8      	str	r0, [r7, #24]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005c7c:	e008      	b.n	8005c90 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005c7e:	f7fc f91b 	bl	8001eb8 <HAL_GetTick>
 8005c82:	4602      	mov	r2, r0
 8005c84:	69bb      	ldr	r3, [r7, #24]
 8005c86:	1ad3      	subs	r3, r2, r3
 8005c88:	2b02      	cmp	r3, #2
 8005c8a:	d901      	bls.n	8005c90 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005c8c:	2303      	movs	r3, #3
 8005c8e:	e10b      	b.n	8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005c90:	4b53      	ldr	r3, [pc, #332]	@ (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d1f0      	bne.n	8005c7e <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SCLKSOURCE(PeriphClkInit->PLLI2SSelection));
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
    /*-------------------- Set the PLL I2S clock -----------------------------*/
    __HAL_RCC_PLL_I2S_CONFIG(PeriphClkInit->PLLI2SSelection);
 8005c9c:	4a53      	ldr	r2, [pc, #332]	@ (8005dec <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ca2:	6013      	str	r3, [r2, #0]

    /*------- In Case of PLLI2S is selected as source clock for I2S ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f003 0301 	and.w	r3, r3, #1
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d003      	beq.n	8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x31c>
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	69db      	ldr	r3, [r3, #28]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d023      	beq.n	8005d00 <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d003      	beq.n	8005ccc <HAL_RCCEx_PeriphCLKConfig+0x330>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	6a1b      	ldr	r3, [r3, #32]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d019      	beq.n	8005d00 <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f003 0320 	and.w	r3, r3, #32
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d004      	beq.n	8005ce2 <HAL_RCCEx_PeriphCLKConfig+0x346>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005cdc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005ce0:	d00e      	beq.n	8005d00 <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d019      	beq.n	8005d22 <HAL_RCCEx_PeriphCLKConfig+0x386>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d115      	bne.n	8005d22 <HAL_RCCEx_PeriphCLKConfig+0x386>
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005cfa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005cfe:	d110      	bne.n	8005d22 <HAL_RCCEx_PeriphCLKConfig+0x386>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	685a      	ldr	r2, [r3, #4]
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	689b      	ldr	r3, [r3, #8]
 8005d08:	019b      	lsls	r3, r3, #6
 8005d0a:	431a      	orrs	r2, r3
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	68db      	ldr	r3, [r3, #12]
 8005d10:	061b      	lsls	r3, r3, #24
 8005d12:	431a      	orrs	r2, r3
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	691b      	ldr	r3, [r3, #16]
 8005d18:	071b      	lsls	r3, r3, #28
 8005d1a:	4931      	ldr	r1, [pc, #196]	@ (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8005d1c:	4313      	orrs	r3, r2
 8005d1e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

#if defined(STM32F413xx) || defined(STM32F423xx)
    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == RCC_PERIPHCLK_SAIA) && (PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)) ||
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d003      	beq.n	8005d36 <HAL_RCCEx_PeriphCLKConfig+0x39a>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d009      	beq.n	8005d4a <HAL_RCCEx_PeriphCLKConfig+0x3ae>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == RCC_PERIPHCLK_SAIB) && (PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)))
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == RCC_PERIPHCLK_SAIA) && (PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)) ||
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d026      	beq.n	8005d90 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == RCC_PERIPHCLK_SAIB) && (PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)))
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d122      	bne.n	8005d90 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Check for PLLI2S/DIVR parameters */
      assert_param(IS_RCC_PLLI2S_DIVR_VALUE(PeriphClkInit->PLLI2SDivR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005d4a:	4b25      	ldr	r3, [pc, #148]	@ (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8005d4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005d50:	0e1b      	lsrs	r3, r3, #24
 8005d52:	f003 030f 	and.w	r3, r3, #15
 8005d56:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	685a      	ldr	r2, [r3, #4]
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	689b      	ldr	r3, [r3, #8]
 8005d60:	019b      	lsls	r3, r3, #6
 8005d62:	431a      	orrs	r2, r3
 8005d64:	693b      	ldr	r3, [r7, #16]
 8005d66:	061b      	lsls	r3, r3, #24
 8005d68:	431a      	orrs	r2, r3
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	691b      	ldr	r3, [r3, #16]
 8005d6e:	071b      	lsls	r3, r3, #28
 8005d70:	491b      	ldr	r1, [pc, #108]	@ (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8005d72:	4313      	orrs	r3, r2
 8005d74:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVR */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLI2SDivR);
 8005d78:	4b19      	ldr	r3, [pc, #100]	@ (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8005d7a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005d7e:	f023 021f 	bic.w	r2, r3, #31
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	699b      	ldr	r3, [r3, #24]
 8005d86:	3b01      	subs	r3, #1
 8005d88:	4915      	ldr	r1, [pc, #84]	@ (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8005d8a:	4313      	orrs	r3, r2
 8005d8c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F413xx || STM32F423xx */

    /*----------------- In Case of PLLI2S is just selected  ------------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d010      	beq.n	8005dbe <HAL_RCCEx_PeriphCLKConfig+0x422>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	685a      	ldr	r2, [r3, #4]
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	689b      	ldr	r3, [r3, #8]
 8005da4:	019b      	lsls	r3, r3, #6
 8005da6:	431a      	orrs	r2, r3
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	68db      	ldr	r3, [r3, #12]
 8005dac:	061b      	lsls	r3, r3, #24
 8005dae:	431a      	orrs	r2, r3
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	691b      	ldr	r3, [r3, #16]
 8005db4:	071b      	lsls	r3, r3, #28
 8005db6:	490a      	ldr	r1, [pc, #40]	@ (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8005db8:	4313      	orrs	r3, r2
 8005dba:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005dbe:	4b0a      	ldr	r3, [pc, #40]	@ (8005de8 <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 8005dc0:	2201      	movs	r2, #1
 8005dc2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005dc4:	f7fc f878 	bl	8001eb8 <HAL_GetTick>
 8005dc8:	61b8      	str	r0, [r7, #24]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005dca:	e011      	b.n	8005df0 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005dcc:	f7fc f874 	bl	8001eb8 <HAL_GetTick>
 8005dd0:	4602      	mov	r2, r0
 8005dd2:	69bb      	ldr	r3, [r7, #24]
 8005dd4:	1ad3      	subs	r3, r2, r3
 8005dd6:	2b02      	cmp	r3, #2
 8005dd8:	d90a      	bls.n	8005df0 <HAL_RCCEx_PeriphCLKConfig+0x454>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005dda:	2303      	movs	r3, #3
 8005ddc:	e064      	b.n	8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8005dde:	bf00      	nop
 8005de0:	40023800 	.word	0x40023800
 8005de4:	424711e0 	.word	0x424711e0
 8005de8:	42470068 	.word	0x42470068
 8005dec:	424710d8 	.word	0x424710d8
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005df0:	4b2f      	ldr	r3, [pc, #188]	@ (8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d0e7      	beq.n	8005dcc <HAL_RCCEx_PeriphCLKConfig+0x430>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d00a      	beq.n	8005e1e <HAL_RCCEx_PeriphCLKConfig+0x482>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005e08:	4b29      	ldr	r3, [pc, #164]	@ (8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8005e0a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005e0e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e16:	4926      	ldr	r1, [pc, #152]	@ (8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8005e18:	4313      	orrs	r3, r2
 8005e1a:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d00a      	beq.n	8005e40 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005e2a:	4b21      	ldr	r3, [pc, #132]	@ (8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8005e2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005e30:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e38:	491d      	ldr	r1, [pc, #116]	@ (8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8005e3a:	4313      	orrs	r3, r2
 8005e3c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
  /*--------------------------------------------------------------------------*/

#if defined(STM32F413xx) || defined(STM32F423xx)
  /*-------------------- DFSDM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d00a      	beq.n	8005e62 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8005e4c:	4b18      	ldr	r3, [pc, #96]	@ (8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8005e4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005e52:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e5a:	4915      	ldr	r1, [pc, #84]	@ (8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8005e5c:	4313      	orrs	r3, r2
 8005e5e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM2 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2_AUDIO) == RCC_PERIPHCLK_DFSDM2_AUDIO)
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d00a      	beq.n	8005e84 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2AUDIOCLKSOURCE(PeriphClkInit->Dfsdm2AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM2AUDIO_CONFIG(PeriphClkInit->Dfsdm2AudioClockSelection);
 8005e6e:	4b10      	ldr	r3, [pc, #64]	@ (8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8005e70:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005e74:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e7c:	490c      	ldr	r1, [pc, #48]	@ (8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8005e7e:	4313      	orrs	r3, r2
 8005e80:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- LPTIM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d00a      	beq.n	8005ea6 <HAL_RCCEx_PeriphCLKConfig+0x50a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005e90:	4b07      	ldr	r3, [pc, #28]	@ (8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8005e92:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005e96:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e9e:	4904      	ldr	r1, [pc, #16]	@ (8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8005ea0:	4313      	orrs	r3, r2
 8005ea2:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  return HAL_OK;
 8005ea6:	2300      	movs	r3, #0
}
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	3720      	adds	r7, #32
 8005eac:	46bd      	mov	sp, r7
 8005eae:	bd80      	pop	{r7, pc}
 8005eb0:	40023800 	.word	0x40023800

08005eb4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	b086      	sub	sp, #24
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d101      	bne.n	8005ec6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005ec2:	2301      	movs	r3, #1
 8005ec4:	e273      	b.n	80063ae <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f003 0301 	and.w	r3, r3, #1
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d075      	beq.n	8005fbe <HAL_RCC_OscConfig+0x10a>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005ed2:	4b88      	ldr	r3, [pc, #544]	@ (80060f4 <HAL_RCC_OscConfig+0x240>)
 8005ed4:	689b      	ldr	r3, [r3, #8]
 8005ed6:	f003 030c 	and.w	r3, r3, #12
 8005eda:	2b04      	cmp	r3, #4
 8005edc:	d00c      	beq.n	8005ef8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005ede:	4b85      	ldr	r3, [pc, #532]	@ (80060f4 <HAL_RCC_OscConfig+0x240>)
 8005ee0:	689b      	ldr	r3, [r3, #8]
 8005ee2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005ee6:	2b08      	cmp	r3, #8
 8005ee8:	d112      	bne.n	8005f10 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005eea:	4b82      	ldr	r3, [pc, #520]	@ (80060f4 <HAL_RCC_OscConfig+0x240>)
 8005eec:	685b      	ldr	r3, [r3, #4]
 8005eee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005ef2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005ef6:	d10b      	bne.n	8005f10 <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ef8:	4b7e      	ldr	r3, [pc, #504]	@ (80060f4 <HAL_RCC_OscConfig+0x240>)
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d05b      	beq.n	8005fbc <HAL_RCC_OscConfig+0x108>
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	685b      	ldr	r3, [r3, #4]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d157      	bne.n	8005fbc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005f0c:	2301      	movs	r3, #1
 8005f0e:	e24e      	b.n	80063ae <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	685b      	ldr	r3, [r3, #4]
 8005f14:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005f18:	d106      	bne.n	8005f28 <HAL_RCC_OscConfig+0x74>
 8005f1a:	4b76      	ldr	r3, [pc, #472]	@ (80060f4 <HAL_RCC_OscConfig+0x240>)
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	4a75      	ldr	r2, [pc, #468]	@ (80060f4 <HAL_RCC_OscConfig+0x240>)
 8005f20:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005f24:	6013      	str	r3, [r2, #0]
 8005f26:	e01d      	b.n	8005f64 <HAL_RCC_OscConfig+0xb0>
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	685b      	ldr	r3, [r3, #4]
 8005f2c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005f30:	d10c      	bne.n	8005f4c <HAL_RCC_OscConfig+0x98>
 8005f32:	4b70      	ldr	r3, [pc, #448]	@ (80060f4 <HAL_RCC_OscConfig+0x240>)
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	4a6f      	ldr	r2, [pc, #444]	@ (80060f4 <HAL_RCC_OscConfig+0x240>)
 8005f38:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005f3c:	6013      	str	r3, [r2, #0]
 8005f3e:	4b6d      	ldr	r3, [pc, #436]	@ (80060f4 <HAL_RCC_OscConfig+0x240>)
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	4a6c      	ldr	r2, [pc, #432]	@ (80060f4 <HAL_RCC_OscConfig+0x240>)
 8005f44:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005f48:	6013      	str	r3, [r2, #0]
 8005f4a:	e00b      	b.n	8005f64 <HAL_RCC_OscConfig+0xb0>
 8005f4c:	4b69      	ldr	r3, [pc, #420]	@ (80060f4 <HAL_RCC_OscConfig+0x240>)
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	4a68      	ldr	r2, [pc, #416]	@ (80060f4 <HAL_RCC_OscConfig+0x240>)
 8005f52:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005f56:	6013      	str	r3, [r2, #0]
 8005f58:	4b66      	ldr	r3, [pc, #408]	@ (80060f4 <HAL_RCC_OscConfig+0x240>)
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	4a65      	ldr	r2, [pc, #404]	@ (80060f4 <HAL_RCC_OscConfig+0x240>)
 8005f5e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005f62:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	685b      	ldr	r3, [r3, #4]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d013      	beq.n	8005f94 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f6c:	f7fb ffa4 	bl	8001eb8 <HAL_GetTick>
 8005f70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005f72:	e008      	b.n	8005f86 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005f74:	f7fb ffa0 	bl	8001eb8 <HAL_GetTick>
 8005f78:	4602      	mov	r2, r0
 8005f7a:	693b      	ldr	r3, [r7, #16]
 8005f7c:	1ad3      	subs	r3, r2, r3
 8005f7e:	2b64      	cmp	r3, #100	@ 0x64
 8005f80:	d901      	bls.n	8005f86 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005f82:	2303      	movs	r3, #3
 8005f84:	e213      	b.n	80063ae <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005f86:	4b5b      	ldr	r3, [pc, #364]	@ (80060f4 <HAL_RCC_OscConfig+0x240>)
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d0f0      	beq.n	8005f74 <HAL_RCC_OscConfig+0xc0>
 8005f92:	e014      	b.n	8005fbe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f94:	f7fb ff90 	bl	8001eb8 <HAL_GetTick>
 8005f98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005f9a:	e008      	b.n	8005fae <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005f9c:	f7fb ff8c 	bl	8001eb8 <HAL_GetTick>
 8005fa0:	4602      	mov	r2, r0
 8005fa2:	693b      	ldr	r3, [r7, #16]
 8005fa4:	1ad3      	subs	r3, r2, r3
 8005fa6:	2b64      	cmp	r3, #100	@ 0x64
 8005fa8:	d901      	bls.n	8005fae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005faa:	2303      	movs	r3, #3
 8005fac:	e1ff      	b.n	80063ae <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005fae:	4b51      	ldr	r3, [pc, #324]	@ (80060f4 <HAL_RCC_OscConfig+0x240>)
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d1f0      	bne.n	8005f9c <HAL_RCC_OscConfig+0xe8>
 8005fba:	e000      	b.n	8005fbe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005fbc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f003 0302 	and.w	r3, r3, #2
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d063      	beq.n	8006092 <HAL_RCC_OscConfig+0x1de>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005fca:	4b4a      	ldr	r3, [pc, #296]	@ (80060f4 <HAL_RCC_OscConfig+0x240>)
 8005fcc:	689b      	ldr	r3, [r3, #8]
 8005fce:	f003 030c 	and.w	r3, r3, #12
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d00b      	beq.n	8005fee <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005fd6:	4b47      	ldr	r3, [pc, #284]	@ (80060f4 <HAL_RCC_OscConfig+0x240>)
 8005fd8:	689b      	ldr	r3, [r3, #8]
 8005fda:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005fde:	2b08      	cmp	r3, #8
 8005fe0:	d11c      	bne.n	800601c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005fe2:	4b44      	ldr	r3, [pc, #272]	@ (80060f4 <HAL_RCC_OscConfig+0x240>)
 8005fe4:	685b      	ldr	r3, [r3, #4]
 8005fe6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d116      	bne.n	800601c <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005fee:	4b41      	ldr	r3, [pc, #260]	@ (80060f4 <HAL_RCC_OscConfig+0x240>)
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f003 0302 	and.w	r3, r3, #2
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d005      	beq.n	8006006 <HAL_RCC_OscConfig+0x152>
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	68db      	ldr	r3, [r3, #12]
 8005ffe:	2b01      	cmp	r3, #1
 8006000:	d001      	beq.n	8006006 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006002:	2301      	movs	r3, #1
 8006004:	e1d3      	b.n	80063ae <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006006:	4b3b      	ldr	r3, [pc, #236]	@ (80060f4 <HAL_RCC_OscConfig+0x240>)
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	691b      	ldr	r3, [r3, #16]
 8006012:	00db      	lsls	r3, r3, #3
 8006014:	4937      	ldr	r1, [pc, #220]	@ (80060f4 <HAL_RCC_OscConfig+0x240>)
 8006016:	4313      	orrs	r3, r2
 8006018:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800601a:	e03a      	b.n	8006092 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	68db      	ldr	r3, [r3, #12]
 8006020:	2b00      	cmp	r3, #0
 8006022:	d020      	beq.n	8006066 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006024:	4b34      	ldr	r3, [pc, #208]	@ (80060f8 <HAL_RCC_OscConfig+0x244>)
 8006026:	2201      	movs	r2, #1
 8006028:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800602a:	f7fb ff45 	bl	8001eb8 <HAL_GetTick>
 800602e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006030:	e008      	b.n	8006044 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006032:	f7fb ff41 	bl	8001eb8 <HAL_GetTick>
 8006036:	4602      	mov	r2, r0
 8006038:	693b      	ldr	r3, [r7, #16]
 800603a:	1ad3      	subs	r3, r2, r3
 800603c:	2b02      	cmp	r3, #2
 800603e:	d901      	bls.n	8006044 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006040:	2303      	movs	r3, #3
 8006042:	e1b4      	b.n	80063ae <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006044:	4b2b      	ldr	r3, [pc, #172]	@ (80060f4 <HAL_RCC_OscConfig+0x240>)
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f003 0302 	and.w	r3, r3, #2
 800604c:	2b00      	cmp	r3, #0
 800604e:	d0f0      	beq.n	8006032 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006050:	4b28      	ldr	r3, [pc, #160]	@ (80060f4 <HAL_RCC_OscConfig+0x240>)
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	691b      	ldr	r3, [r3, #16]
 800605c:	00db      	lsls	r3, r3, #3
 800605e:	4925      	ldr	r1, [pc, #148]	@ (80060f4 <HAL_RCC_OscConfig+0x240>)
 8006060:	4313      	orrs	r3, r2
 8006062:	600b      	str	r3, [r1, #0]
 8006064:	e015      	b.n	8006092 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006066:	4b24      	ldr	r3, [pc, #144]	@ (80060f8 <HAL_RCC_OscConfig+0x244>)
 8006068:	2200      	movs	r2, #0
 800606a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800606c:	f7fb ff24 	bl	8001eb8 <HAL_GetTick>
 8006070:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006072:	e008      	b.n	8006086 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006074:	f7fb ff20 	bl	8001eb8 <HAL_GetTick>
 8006078:	4602      	mov	r2, r0
 800607a:	693b      	ldr	r3, [r7, #16]
 800607c:	1ad3      	subs	r3, r2, r3
 800607e:	2b02      	cmp	r3, #2
 8006080:	d901      	bls.n	8006086 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006082:	2303      	movs	r3, #3
 8006084:	e193      	b.n	80063ae <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006086:	4b1b      	ldr	r3, [pc, #108]	@ (80060f4 <HAL_RCC_OscConfig+0x240>)
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f003 0302 	and.w	r3, r3, #2
 800608e:	2b00      	cmp	r3, #0
 8006090:	d1f0      	bne.n	8006074 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f003 0308 	and.w	r3, r3, #8
 800609a:	2b00      	cmp	r3, #0
 800609c:	d036      	beq.n	800610c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	695b      	ldr	r3, [r3, #20]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d016      	beq.n	80060d4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80060a6:	4b15      	ldr	r3, [pc, #84]	@ (80060fc <HAL_RCC_OscConfig+0x248>)
 80060a8:	2201      	movs	r2, #1
 80060aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060ac:	f7fb ff04 	bl	8001eb8 <HAL_GetTick>
 80060b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80060b2:	e008      	b.n	80060c6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80060b4:	f7fb ff00 	bl	8001eb8 <HAL_GetTick>
 80060b8:	4602      	mov	r2, r0
 80060ba:	693b      	ldr	r3, [r7, #16]
 80060bc:	1ad3      	subs	r3, r2, r3
 80060be:	2b02      	cmp	r3, #2
 80060c0:	d901      	bls.n	80060c6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80060c2:	2303      	movs	r3, #3
 80060c4:	e173      	b.n	80063ae <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80060c6:	4b0b      	ldr	r3, [pc, #44]	@ (80060f4 <HAL_RCC_OscConfig+0x240>)
 80060c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80060ca:	f003 0302 	and.w	r3, r3, #2
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d0f0      	beq.n	80060b4 <HAL_RCC_OscConfig+0x200>
 80060d2:	e01b      	b.n	800610c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80060d4:	4b09      	ldr	r3, [pc, #36]	@ (80060fc <HAL_RCC_OscConfig+0x248>)
 80060d6:	2200      	movs	r2, #0
 80060d8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060da:	f7fb feed 	bl	8001eb8 <HAL_GetTick>
 80060de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80060e0:	e00e      	b.n	8006100 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80060e2:	f7fb fee9 	bl	8001eb8 <HAL_GetTick>
 80060e6:	4602      	mov	r2, r0
 80060e8:	693b      	ldr	r3, [r7, #16]
 80060ea:	1ad3      	subs	r3, r2, r3
 80060ec:	2b02      	cmp	r3, #2
 80060ee:	d907      	bls.n	8006100 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80060f0:	2303      	movs	r3, #3
 80060f2:	e15c      	b.n	80063ae <HAL_RCC_OscConfig+0x4fa>
 80060f4:	40023800 	.word	0x40023800
 80060f8:	42470000 	.word	0x42470000
 80060fc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006100:	4b8a      	ldr	r3, [pc, #552]	@ (800632c <HAL_RCC_OscConfig+0x478>)
 8006102:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006104:	f003 0302 	and.w	r3, r3, #2
 8006108:	2b00      	cmp	r3, #0
 800610a:	d1ea      	bne.n	80060e2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f003 0304 	and.w	r3, r3, #4
 8006114:	2b00      	cmp	r3, #0
 8006116:	f000 8097 	beq.w	8006248 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800611a:	2300      	movs	r3, #0
 800611c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800611e:	4b83      	ldr	r3, [pc, #524]	@ (800632c <HAL_RCC_OscConfig+0x478>)
 8006120:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006122:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006126:	2b00      	cmp	r3, #0
 8006128:	d10f      	bne.n	800614a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800612a:	2300      	movs	r3, #0
 800612c:	60bb      	str	r3, [r7, #8]
 800612e:	4b7f      	ldr	r3, [pc, #508]	@ (800632c <HAL_RCC_OscConfig+0x478>)
 8006130:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006132:	4a7e      	ldr	r2, [pc, #504]	@ (800632c <HAL_RCC_OscConfig+0x478>)
 8006134:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006138:	6413      	str	r3, [r2, #64]	@ 0x40
 800613a:	4b7c      	ldr	r3, [pc, #496]	@ (800632c <HAL_RCC_OscConfig+0x478>)
 800613c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800613e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006142:	60bb      	str	r3, [r7, #8]
 8006144:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006146:	2301      	movs	r3, #1
 8006148:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800614a:	4b79      	ldr	r3, [pc, #484]	@ (8006330 <HAL_RCC_OscConfig+0x47c>)
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006152:	2b00      	cmp	r3, #0
 8006154:	d118      	bne.n	8006188 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006156:	4b76      	ldr	r3, [pc, #472]	@ (8006330 <HAL_RCC_OscConfig+0x47c>)
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	4a75      	ldr	r2, [pc, #468]	@ (8006330 <HAL_RCC_OscConfig+0x47c>)
 800615c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006160:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006162:	f7fb fea9 	bl	8001eb8 <HAL_GetTick>
 8006166:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006168:	e008      	b.n	800617c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800616a:	f7fb fea5 	bl	8001eb8 <HAL_GetTick>
 800616e:	4602      	mov	r2, r0
 8006170:	693b      	ldr	r3, [r7, #16]
 8006172:	1ad3      	subs	r3, r2, r3
 8006174:	2b02      	cmp	r3, #2
 8006176:	d901      	bls.n	800617c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006178:	2303      	movs	r3, #3
 800617a:	e118      	b.n	80063ae <HAL_RCC_OscConfig+0x4fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800617c:	4b6c      	ldr	r3, [pc, #432]	@ (8006330 <HAL_RCC_OscConfig+0x47c>)
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006184:	2b00      	cmp	r3, #0
 8006186:	d0f0      	beq.n	800616a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	689b      	ldr	r3, [r3, #8]
 800618c:	2b01      	cmp	r3, #1
 800618e:	d106      	bne.n	800619e <HAL_RCC_OscConfig+0x2ea>
 8006190:	4b66      	ldr	r3, [pc, #408]	@ (800632c <HAL_RCC_OscConfig+0x478>)
 8006192:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006194:	4a65      	ldr	r2, [pc, #404]	@ (800632c <HAL_RCC_OscConfig+0x478>)
 8006196:	f043 0301 	orr.w	r3, r3, #1
 800619a:	6713      	str	r3, [r2, #112]	@ 0x70
 800619c:	e01c      	b.n	80061d8 <HAL_RCC_OscConfig+0x324>
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	689b      	ldr	r3, [r3, #8]
 80061a2:	2b05      	cmp	r3, #5
 80061a4:	d10c      	bne.n	80061c0 <HAL_RCC_OscConfig+0x30c>
 80061a6:	4b61      	ldr	r3, [pc, #388]	@ (800632c <HAL_RCC_OscConfig+0x478>)
 80061a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80061aa:	4a60      	ldr	r2, [pc, #384]	@ (800632c <HAL_RCC_OscConfig+0x478>)
 80061ac:	f043 0304 	orr.w	r3, r3, #4
 80061b0:	6713      	str	r3, [r2, #112]	@ 0x70
 80061b2:	4b5e      	ldr	r3, [pc, #376]	@ (800632c <HAL_RCC_OscConfig+0x478>)
 80061b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80061b6:	4a5d      	ldr	r2, [pc, #372]	@ (800632c <HAL_RCC_OscConfig+0x478>)
 80061b8:	f043 0301 	orr.w	r3, r3, #1
 80061bc:	6713      	str	r3, [r2, #112]	@ 0x70
 80061be:	e00b      	b.n	80061d8 <HAL_RCC_OscConfig+0x324>
 80061c0:	4b5a      	ldr	r3, [pc, #360]	@ (800632c <HAL_RCC_OscConfig+0x478>)
 80061c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80061c4:	4a59      	ldr	r2, [pc, #356]	@ (800632c <HAL_RCC_OscConfig+0x478>)
 80061c6:	f023 0301 	bic.w	r3, r3, #1
 80061ca:	6713      	str	r3, [r2, #112]	@ 0x70
 80061cc:	4b57      	ldr	r3, [pc, #348]	@ (800632c <HAL_RCC_OscConfig+0x478>)
 80061ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80061d0:	4a56      	ldr	r2, [pc, #344]	@ (800632c <HAL_RCC_OscConfig+0x478>)
 80061d2:	f023 0304 	bic.w	r3, r3, #4
 80061d6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	689b      	ldr	r3, [r3, #8]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d015      	beq.n	800620c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061e0:	f7fb fe6a 	bl	8001eb8 <HAL_GetTick>
 80061e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80061e6:	e00a      	b.n	80061fe <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80061e8:	f7fb fe66 	bl	8001eb8 <HAL_GetTick>
 80061ec:	4602      	mov	r2, r0
 80061ee:	693b      	ldr	r3, [r7, #16]
 80061f0:	1ad3      	subs	r3, r2, r3
 80061f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80061f6:	4293      	cmp	r3, r2
 80061f8:	d901      	bls.n	80061fe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80061fa:	2303      	movs	r3, #3
 80061fc:	e0d7      	b.n	80063ae <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80061fe:	4b4b      	ldr	r3, [pc, #300]	@ (800632c <HAL_RCC_OscConfig+0x478>)
 8006200:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006202:	f003 0302 	and.w	r3, r3, #2
 8006206:	2b00      	cmp	r3, #0
 8006208:	d0ee      	beq.n	80061e8 <HAL_RCC_OscConfig+0x334>
 800620a:	e014      	b.n	8006236 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800620c:	f7fb fe54 	bl	8001eb8 <HAL_GetTick>
 8006210:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006212:	e00a      	b.n	800622a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006214:	f7fb fe50 	bl	8001eb8 <HAL_GetTick>
 8006218:	4602      	mov	r2, r0
 800621a:	693b      	ldr	r3, [r7, #16]
 800621c:	1ad3      	subs	r3, r2, r3
 800621e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006222:	4293      	cmp	r3, r2
 8006224:	d901      	bls.n	800622a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006226:	2303      	movs	r3, #3
 8006228:	e0c1      	b.n	80063ae <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800622a:	4b40      	ldr	r3, [pc, #256]	@ (800632c <HAL_RCC_OscConfig+0x478>)
 800622c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800622e:	f003 0302 	and.w	r3, r3, #2
 8006232:	2b00      	cmp	r3, #0
 8006234:	d1ee      	bne.n	8006214 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006236:	7dfb      	ldrb	r3, [r7, #23]
 8006238:	2b01      	cmp	r3, #1
 800623a:	d105      	bne.n	8006248 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800623c:	4b3b      	ldr	r3, [pc, #236]	@ (800632c <HAL_RCC_OscConfig+0x478>)
 800623e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006240:	4a3a      	ldr	r2, [pc, #232]	@ (800632c <HAL_RCC_OscConfig+0x478>)
 8006242:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006246:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	699b      	ldr	r3, [r3, #24]
 800624c:	2b00      	cmp	r3, #0
 800624e:	f000 80ad 	beq.w	80063ac <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006252:	4b36      	ldr	r3, [pc, #216]	@ (800632c <HAL_RCC_OscConfig+0x478>)
 8006254:	689b      	ldr	r3, [r3, #8]
 8006256:	f003 030c 	and.w	r3, r3, #12
 800625a:	2b08      	cmp	r3, #8
 800625c:	d060      	beq.n	8006320 <HAL_RCC_OscConfig+0x46c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	699b      	ldr	r3, [r3, #24]
 8006262:	2b02      	cmp	r3, #2
 8006264:	d145      	bne.n	80062f2 <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006266:	4b33      	ldr	r3, [pc, #204]	@ (8006334 <HAL_RCC_OscConfig+0x480>)
 8006268:	2200      	movs	r2, #0
 800626a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800626c:	f7fb fe24 	bl	8001eb8 <HAL_GetTick>
 8006270:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006272:	e008      	b.n	8006286 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006274:	f7fb fe20 	bl	8001eb8 <HAL_GetTick>
 8006278:	4602      	mov	r2, r0
 800627a:	693b      	ldr	r3, [r7, #16]
 800627c:	1ad3      	subs	r3, r2, r3
 800627e:	2b02      	cmp	r3, #2
 8006280:	d901      	bls.n	8006286 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006282:	2303      	movs	r3, #3
 8006284:	e093      	b.n	80063ae <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006286:	4b29      	ldr	r3, [pc, #164]	@ (800632c <HAL_RCC_OscConfig+0x478>)
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800628e:	2b00      	cmp	r3, #0
 8006290:	d1f0      	bne.n	8006274 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	69da      	ldr	r2, [r3, #28]
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6a1b      	ldr	r3, [r3, #32]
 800629a:	431a      	orrs	r2, r3
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062a0:	019b      	lsls	r3, r3, #6
 80062a2:	431a      	orrs	r2, r3
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062a8:	085b      	lsrs	r3, r3, #1
 80062aa:	3b01      	subs	r3, #1
 80062ac:	041b      	lsls	r3, r3, #16
 80062ae:	431a      	orrs	r2, r3
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062b4:	061b      	lsls	r3, r3, #24
 80062b6:	431a      	orrs	r2, r3
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062bc:	071b      	lsls	r3, r3, #28
 80062be:	491b      	ldr	r1, [pc, #108]	@ (800632c <HAL_RCC_OscConfig+0x478>)
 80062c0:	4313      	orrs	r3, r2
 80062c2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80062c4:	4b1b      	ldr	r3, [pc, #108]	@ (8006334 <HAL_RCC_OscConfig+0x480>)
 80062c6:	2201      	movs	r2, #1
 80062c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062ca:	f7fb fdf5 	bl	8001eb8 <HAL_GetTick>
 80062ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80062d0:	e008      	b.n	80062e4 <HAL_RCC_OscConfig+0x430>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80062d2:	f7fb fdf1 	bl	8001eb8 <HAL_GetTick>
 80062d6:	4602      	mov	r2, r0
 80062d8:	693b      	ldr	r3, [r7, #16]
 80062da:	1ad3      	subs	r3, r2, r3
 80062dc:	2b02      	cmp	r3, #2
 80062de:	d901      	bls.n	80062e4 <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 80062e0:	2303      	movs	r3, #3
 80062e2:	e064      	b.n	80063ae <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80062e4:	4b11      	ldr	r3, [pc, #68]	@ (800632c <HAL_RCC_OscConfig+0x478>)
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d0f0      	beq.n	80062d2 <HAL_RCC_OscConfig+0x41e>
 80062f0:	e05c      	b.n	80063ac <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80062f2:	4b10      	ldr	r3, [pc, #64]	@ (8006334 <HAL_RCC_OscConfig+0x480>)
 80062f4:	2200      	movs	r2, #0
 80062f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062f8:	f7fb fdde 	bl	8001eb8 <HAL_GetTick>
 80062fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80062fe:	e008      	b.n	8006312 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006300:	f7fb fdda 	bl	8001eb8 <HAL_GetTick>
 8006304:	4602      	mov	r2, r0
 8006306:	693b      	ldr	r3, [r7, #16]
 8006308:	1ad3      	subs	r3, r2, r3
 800630a:	2b02      	cmp	r3, #2
 800630c:	d901      	bls.n	8006312 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 800630e:	2303      	movs	r3, #3
 8006310:	e04d      	b.n	80063ae <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006312:	4b06      	ldr	r3, [pc, #24]	@ (800632c <HAL_RCC_OscConfig+0x478>)
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800631a:	2b00      	cmp	r3, #0
 800631c:	d1f0      	bne.n	8006300 <HAL_RCC_OscConfig+0x44c>
 800631e:	e045      	b.n	80063ac <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	699b      	ldr	r3, [r3, #24]
 8006324:	2b01      	cmp	r3, #1
 8006326:	d107      	bne.n	8006338 <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 8006328:	2301      	movs	r3, #1
 800632a:	e040      	b.n	80063ae <HAL_RCC_OscConfig+0x4fa>
 800632c:	40023800 	.word	0x40023800
 8006330:	40007000 	.word	0x40007000
 8006334:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006338:	4b1f      	ldr	r3, [pc, #124]	@ (80063b8 <HAL_RCC_OscConfig+0x504>)
 800633a:	685b      	ldr	r3, [r3, #4]
 800633c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	699b      	ldr	r3, [r3, #24]
 8006342:	2b01      	cmp	r3, #1
 8006344:	d030      	beq.n	80063a8 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006350:	429a      	cmp	r2, r3
 8006352:	d129      	bne.n	80063a8 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800635e:	429a      	cmp	r2, r3
 8006360:	d122      	bne.n	80063a8 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006362:	68fa      	ldr	r2, [r7, #12]
 8006364:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006368:	4013      	ands	r3, r2
 800636a:	687a      	ldr	r2, [r7, #4]
 800636c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800636e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006370:	4293      	cmp	r3, r2
 8006372:	d119      	bne.n	80063a8 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800637e:	085b      	lsrs	r3, r3, #1
 8006380:	3b01      	subs	r3, #1
 8006382:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006384:	429a      	cmp	r2, r3
 8006386:	d10f      	bne.n	80063a8 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006392:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006394:	429a      	cmp	r2, r3
 8006396:	d107      	bne.n	80063a8 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063a2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80063a4:	429a      	cmp	r2, r3
 80063a6:	d001      	beq.n	80063ac <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80063a8:	2301      	movs	r3, #1
 80063aa:	e000      	b.n	80063ae <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 80063ac:	2300      	movs	r3, #0
}
 80063ae:	4618      	mov	r0, r3
 80063b0:	3718      	adds	r7, #24
 80063b2:	46bd      	mov	sp, r7
 80063b4:	bd80      	pop	{r7, pc}
 80063b6:	bf00      	nop
 80063b8:	40023800 	.word	0x40023800

080063bc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80063bc:	b580      	push	{r7, lr}
 80063be:	b082      	sub	sp, #8
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d101      	bne.n	80063ce <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80063ca:	2301      	movs	r3, #1
 80063cc:	e07b      	b.n	80064c6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d108      	bne.n	80063e8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	685b      	ldr	r3, [r3, #4]
 80063da:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80063de:	d009      	beq.n	80063f4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2200      	movs	r2, #0
 80063e4:	61da      	str	r2, [r3, #28]
 80063e6:	e005      	b.n	80063f4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2200      	movs	r2, #0
 80063ec:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	2200      	movs	r2, #0
 80063f2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2200      	movs	r2, #0
 80063f8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006400:	b2db      	uxtb	r3, r3
 8006402:	2b00      	cmp	r3, #0
 8006404:	d106      	bne.n	8006414 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	2200      	movs	r2, #0
 800640a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800640e:	6878      	ldr	r0, [r7, #4]
 8006410:	f7fb faac 	bl	800196c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2202      	movs	r2, #2
 8006418:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	681a      	ldr	r2, [r3, #0]
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800642a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	685b      	ldr	r3, [r3, #4]
 8006430:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	689b      	ldr	r3, [r3, #8]
 8006438:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800643c:	431a      	orrs	r2, r3
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	68db      	ldr	r3, [r3, #12]
 8006442:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006446:	431a      	orrs	r2, r3
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	691b      	ldr	r3, [r3, #16]
 800644c:	f003 0302 	and.w	r3, r3, #2
 8006450:	431a      	orrs	r2, r3
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	695b      	ldr	r3, [r3, #20]
 8006456:	f003 0301 	and.w	r3, r3, #1
 800645a:	431a      	orrs	r2, r3
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	699b      	ldr	r3, [r3, #24]
 8006460:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006464:	431a      	orrs	r2, r3
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	69db      	ldr	r3, [r3, #28]
 800646a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800646e:	431a      	orrs	r2, r3
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	6a1b      	ldr	r3, [r3, #32]
 8006474:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006478:	ea42 0103 	orr.w	r1, r2, r3
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006480:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	430a      	orrs	r2, r1
 800648a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	699b      	ldr	r3, [r3, #24]
 8006490:	0c1b      	lsrs	r3, r3, #16
 8006492:	f003 0104 	and.w	r1, r3, #4
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800649a:	f003 0210 	and.w	r2, r3, #16
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	430a      	orrs	r2, r1
 80064a4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	69da      	ldr	r2, [r3, #28]
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80064b4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	2200      	movs	r2, #0
 80064ba:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2201      	movs	r2, #1
 80064c0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80064c4:	2300      	movs	r3, #0
}
 80064c6:	4618      	mov	r0, r3
 80064c8:	3708      	adds	r7, #8
 80064ca:	46bd      	mov	sp, r7
 80064cc:	bd80      	pop	{r7, pc}

080064ce <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80064ce:	b580      	push	{r7, lr}
 80064d0:	b082      	sub	sp, #8
 80064d2:	af00      	add	r7, sp, #0
 80064d4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d101      	bne.n	80064e0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80064dc:	2301      	movs	r3, #1
 80064de:	e03f      	b.n	8006560 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80064e6:	b2db      	uxtb	r3, r3
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d106      	bne.n	80064fa <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2200      	movs	r2, #0
 80064f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80064f4:	6878      	ldr	r0, [r7, #4]
 80064f6:	f7fb faf5 	bl	8001ae4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	2224      	movs	r2, #36	@ 0x24
 80064fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	68da      	ldr	r2, [r3, #12]
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006510:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006512:	6878      	ldr	r0, [r7, #4]
 8006514:	f000 f928 	bl	8006768 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	691a      	ldr	r2, [r3, #16]
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006526:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	695a      	ldr	r2, [r3, #20]
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006536:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	68da      	ldr	r2, [r3, #12]
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006546:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2200      	movs	r2, #0
 800654c:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	2220      	movs	r2, #32
 8006552:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	2220      	movs	r2, #32
 800655a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800655e:	2300      	movs	r3, #0
}
 8006560:	4618      	mov	r0, r3
 8006562:	3708      	adds	r7, #8
 8006564:	46bd      	mov	sp, r7
 8006566:	bd80      	pop	{r7, pc}

08006568 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006568:	b580      	push	{r7, lr}
 800656a:	b08a      	sub	sp, #40	@ 0x28
 800656c:	af02      	add	r7, sp, #8
 800656e:	60f8      	str	r0, [r7, #12]
 8006570:	60b9      	str	r1, [r7, #8]
 8006572:	603b      	str	r3, [r7, #0]
 8006574:	4613      	mov	r3, r2
 8006576:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006578:	2300      	movs	r3, #0
 800657a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006582:	b2db      	uxtb	r3, r3
 8006584:	2b20      	cmp	r3, #32
 8006586:	d17c      	bne.n	8006682 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006588:	68bb      	ldr	r3, [r7, #8]
 800658a:	2b00      	cmp	r3, #0
 800658c:	d002      	beq.n	8006594 <HAL_UART_Transmit+0x2c>
 800658e:	88fb      	ldrh	r3, [r7, #6]
 8006590:	2b00      	cmp	r3, #0
 8006592:	d101      	bne.n	8006598 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006594:	2301      	movs	r3, #1
 8006596:	e075      	b.n	8006684 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800659e:	2b01      	cmp	r3, #1
 80065a0:	d101      	bne.n	80065a6 <HAL_UART_Transmit+0x3e>
 80065a2:	2302      	movs	r3, #2
 80065a4:	e06e      	b.n	8006684 <HAL_UART_Transmit+0x11c>
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	2201      	movs	r2, #1
 80065aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	2200      	movs	r2, #0
 80065b2:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	2221      	movs	r2, #33	@ 0x21
 80065b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80065bc:	f7fb fc7c 	bl	8001eb8 <HAL_GetTick>
 80065c0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	88fa      	ldrh	r2, [r7, #6]
 80065c6:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	88fa      	ldrh	r2, [r7, #6]
 80065cc:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	689b      	ldr	r3, [r3, #8]
 80065d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80065d6:	d108      	bne.n	80065ea <HAL_UART_Transmit+0x82>
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	691b      	ldr	r3, [r3, #16]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d104      	bne.n	80065ea <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80065e0:	2300      	movs	r3, #0
 80065e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80065e4:	68bb      	ldr	r3, [r7, #8]
 80065e6:	61bb      	str	r3, [r7, #24]
 80065e8:	e003      	b.n	80065f2 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80065ea:	68bb      	ldr	r3, [r7, #8]
 80065ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80065ee:	2300      	movs	r3, #0
 80065f0:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	2200      	movs	r2, #0
 80065f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    while (huart->TxXferCount > 0U)
 80065fa:	e02a      	b.n	8006652 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	9300      	str	r3, [sp, #0]
 8006600:	697b      	ldr	r3, [r7, #20]
 8006602:	2200      	movs	r2, #0
 8006604:	2180      	movs	r1, #128	@ 0x80
 8006606:	68f8      	ldr	r0, [r7, #12]
 8006608:	f000 f840 	bl	800668c <UART_WaitOnFlagUntilTimeout>
 800660c:	4603      	mov	r3, r0
 800660e:	2b00      	cmp	r3, #0
 8006610:	d001      	beq.n	8006616 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006612:	2303      	movs	r3, #3
 8006614:	e036      	b.n	8006684 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006616:	69fb      	ldr	r3, [r7, #28]
 8006618:	2b00      	cmp	r3, #0
 800661a:	d10b      	bne.n	8006634 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800661c:	69bb      	ldr	r3, [r7, #24]
 800661e:	881b      	ldrh	r3, [r3, #0]
 8006620:	461a      	mov	r2, r3
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800662a:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800662c:	69bb      	ldr	r3, [r7, #24]
 800662e:	3302      	adds	r3, #2
 8006630:	61bb      	str	r3, [r7, #24]
 8006632:	e007      	b.n	8006644 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006634:	69fb      	ldr	r3, [r7, #28]
 8006636:	781a      	ldrb	r2, [r3, #0]
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800663e:	69fb      	ldr	r3, [r7, #28]
 8006640:	3301      	adds	r3, #1
 8006642:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006648:	b29b      	uxth	r3, r3
 800664a:	3b01      	subs	r3, #1
 800664c:	b29a      	uxth	r2, r3
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006656:	b29b      	uxth	r3, r3
 8006658:	2b00      	cmp	r3, #0
 800665a:	d1cf      	bne.n	80065fc <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	9300      	str	r3, [sp, #0]
 8006660:	697b      	ldr	r3, [r7, #20]
 8006662:	2200      	movs	r2, #0
 8006664:	2140      	movs	r1, #64	@ 0x40
 8006666:	68f8      	ldr	r0, [r7, #12]
 8006668:	f000 f810 	bl	800668c <UART_WaitOnFlagUntilTimeout>
 800666c:	4603      	mov	r3, r0
 800666e:	2b00      	cmp	r3, #0
 8006670:	d001      	beq.n	8006676 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006672:	2303      	movs	r3, #3
 8006674:	e006      	b.n	8006684 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	2220      	movs	r2, #32
 800667a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 800667e:	2300      	movs	r3, #0
 8006680:	e000      	b.n	8006684 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006682:	2302      	movs	r3, #2
  }
}
 8006684:	4618      	mov	r0, r3
 8006686:	3720      	adds	r7, #32
 8006688:	46bd      	mov	sp, r7
 800668a:	bd80      	pop	{r7, pc}

0800668c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800668c:	b580      	push	{r7, lr}
 800668e:	b090      	sub	sp, #64	@ 0x40
 8006690:	af00      	add	r7, sp, #0
 8006692:	60f8      	str	r0, [r7, #12]
 8006694:	60b9      	str	r1, [r7, #8]
 8006696:	603b      	str	r3, [r7, #0]
 8006698:	4613      	mov	r3, r2
 800669a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800669c:	e050      	b.n	8006740 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800669e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80066a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066a4:	d04c      	beq.n	8006740 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80066a6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d007      	beq.n	80066bc <UART_WaitOnFlagUntilTimeout+0x30>
 80066ac:	f7fb fc04 	bl	8001eb8 <HAL_GetTick>
 80066b0:	4602      	mov	r2, r0
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	1ad3      	subs	r3, r2, r3
 80066b6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80066b8:	429a      	cmp	r2, r3
 80066ba:	d241      	bcs.n	8006740 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	330c      	adds	r3, #12
 80066c2:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066c6:	e853 3f00 	ldrex	r3, [r3]
 80066ca:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80066cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066ce:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 80066d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	330c      	adds	r3, #12
 80066da:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80066dc:	637a      	str	r2, [r7, #52]	@ 0x34
 80066de:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066e0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80066e2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80066e4:	e841 2300 	strex	r3, r2, [r1]
 80066e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80066ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d1e5      	bne.n	80066bc <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	3314      	adds	r3, #20
 80066f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066f8:	697b      	ldr	r3, [r7, #20]
 80066fa:	e853 3f00 	ldrex	r3, [r3]
 80066fe:	613b      	str	r3, [r7, #16]
   return(result);
 8006700:	693b      	ldr	r3, [r7, #16]
 8006702:	f023 0301 	bic.w	r3, r3, #1
 8006706:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	3314      	adds	r3, #20
 800670e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006710:	623a      	str	r2, [r7, #32]
 8006712:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006714:	69f9      	ldr	r1, [r7, #28]
 8006716:	6a3a      	ldr	r2, [r7, #32]
 8006718:	e841 2300 	strex	r3, r2, [r1]
 800671c:	61bb      	str	r3, [r7, #24]
   return(result);
 800671e:	69bb      	ldr	r3, [r7, #24]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d1e5      	bne.n	80066f0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	2220      	movs	r2, #32
 8006728:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	2220      	movs	r2, #32
 8006730:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	2200      	movs	r2, #0
 8006738:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_TIMEOUT;
 800673c:	2303      	movs	r3, #3
 800673e:	e00f      	b.n	8006760 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	681a      	ldr	r2, [r3, #0]
 8006746:	68bb      	ldr	r3, [r7, #8]
 8006748:	4013      	ands	r3, r2
 800674a:	68ba      	ldr	r2, [r7, #8]
 800674c:	429a      	cmp	r2, r3
 800674e:	bf0c      	ite	eq
 8006750:	2301      	moveq	r3, #1
 8006752:	2300      	movne	r3, #0
 8006754:	b2db      	uxtb	r3, r3
 8006756:	461a      	mov	r2, r3
 8006758:	79fb      	ldrb	r3, [r7, #7]
 800675a:	429a      	cmp	r2, r3
 800675c:	d09f      	beq.n	800669e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800675e:	2300      	movs	r3, #0
}
 8006760:	4618      	mov	r0, r3
 8006762:	3740      	adds	r7, #64	@ 0x40
 8006764:	46bd      	mov	sp, r7
 8006766:	bd80      	pop	{r7, pc}

08006768 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006768:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800676c:	b0c0      	sub	sp, #256	@ 0x100
 800676e:	af00      	add	r7, sp, #0
 8006770:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006774:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	691b      	ldr	r3, [r3, #16]
 800677c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006780:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006784:	68d9      	ldr	r1, [r3, #12]
 8006786:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800678a:	681a      	ldr	r2, [r3, #0]
 800678c:	ea40 0301 	orr.w	r3, r0, r1
 8006790:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006792:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006796:	689a      	ldr	r2, [r3, #8]
 8006798:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800679c:	691b      	ldr	r3, [r3, #16]
 800679e:	431a      	orrs	r2, r3
 80067a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80067a4:	695b      	ldr	r3, [r3, #20]
 80067a6:	431a      	orrs	r2, r3
 80067a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80067ac:	69db      	ldr	r3, [r3, #28]
 80067ae:	4313      	orrs	r3, r2
 80067b0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80067b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	68db      	ldr	r3, [r3, #12]
 80067bc:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80067c0:	f021 010c 	bic.w	r1, r1, #12
 80067c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80067c8:	681a      	ldr	r2, [r3, #0]
 80067ca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80067ce:	430b      	orrs	r3, r1
 80067d0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80067d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	695b      	ldr	r3, [r3, #20]
 80067da:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80067de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80067e2:	6999      	ldr	r1, [r3, #24]
 80067e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80067e8:	681a      	ldr	r2, [r3, #0]
 80067ea:	ea40 0301 	orr.w	r3, r0, r1
 80067ee:	6153      	str	r3, [r2, #20]


#if defined(USART6) && defined(UART9) && defined(UART10)
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
 80067f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80067f4:	681a      	ldr	r2, [r3, #0]
 80067f6:	4b95      	ldr	r3, [pc, #596]	@ (8006a4c <UART_SetConfig+0x2e4>)
 80067f8:	429a      	cmp	r2, r3
 80067fa:	d011      	beq.n	8006820 <UART_SetConfig+0xb8>
 80067fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006800:	681a      	ldr	r2, [r3, #0]
 8006802:	4b93      	ldr	r3, [pc, #588]	@ (8006a50 <UART_SetConfig+0x2e8>)
 8006804:	429a      	cmp	r2, r3
 8006806:	d00b      	beq.n	8006820 <UART_SetConfig+0xb8>
 8006808:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800680c:	681a      	ldr	r2, [r3, #0]
 800680e:	4b91      	ldr	r3, [pc, #580]	@ (8006a54 <UART_SetConfig+0x2ec>)
 8006810:	429a      	cmp	r2, r3
 8006812:	d005      	beq.n	8006820 <UART_SetConfig+0xb8>
 8006814:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006818:	681a      	ldr	r2, [r3, #0]
 800681a:	4b8f      	ldr	r3, [pc, #572]	@ (8006a58 <UART_SetConfig+0x2f0>)
 800681c:	429a      	cmp	r2, r3
 800681e:	d104      	bne.n	800682a <UART_SetConfig+0xc2>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006820:	f7ff f8a8 	bl	8005974 <HAL_RCC_GetPCLK2Freq>
 8006824:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006828:	e003      	b.n	8006832 <UART_SetConfig+0xca>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800682a:	f7ff f88f 	bl	800594c <HAL_RCC_GetPCLK1Freq>
 800682e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006832:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006836:	69db      	ldr	r3, [r3, #28]
 8006838:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800683c:	f040 8110 	bne.w	8006a60 <UART_SetConfig+0x2f8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006840:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006844:	2200      	movs	r2, #0
 8006846:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800684a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800684e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006852:	4622      	mov	r2, r4
 8006854:	462b      	mov	r3, r5
 8006856:	1891      	adds	r1, r2, r2
 8006858:	65b9      	str	r1, [r7, #88]	@ 0x58
 800685a:	415b      	adcs	r3, r3
 800685c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800685e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006862:	4621      	mov	r1, r4
 8006864:	eb12 0801 	adds.w	r8, r2, r1
 8006868:	4629      	mov	r1, r5
 800686a:	eb43 0901 	adc.w	r9, r3, r1
 800686e:	f04f 0200 	mov.w	r2, #0
 8006872:	f04f 0300 	mov.w	r3, #0
 8006876:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800687a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800687e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006882:	4690      	mov	r8, r2
 8006884:	4699      	mov	r9, r3
 8006886:	4623      	mov	r3, r4
 8006888:	eb18 0303 	adds.w	r3, r8, r3
 800688c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006890:	462b      	mov	r3, r5
 8006892:	eb49 0303 	adc.w	r3, r9, r3
 8006896:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800689a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800689e:	685b      	ldr	r3, [r3, #4]
 80068a0:	2200      	movs	r2, #0
 80068a2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80068a6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80068aa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80068ae:	460b      	mov	r3, r1
 80068b0:	18db      	adds	r3, r3, r3
 80068b2:	653b      	str	r3, [r7, #80]	@ 0x50
 80068b4:	4613      	mov	r3, r2
 80068b6:	eb42 0303 	adc.w	r3, r2, r3
 80068ba:	657b      	str	r3, [r7, #84]	@ 0x54
 80068bc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80068c0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80068c4:	f7fa f998 	bl	8000bf8 <__aeabi_uldivmod>
 80068c8:	4602      	mov	r2, r0
 80068ca:	460b      	mov	r3, r1
 80068cc:	4b63      	ldr	r3, [pc, #396]	@ (8006a5c <UART_SetConfig+0x2f4>)
 80068ce:	fba3 2302 	umull	r2, r3, r3, r2
 80068d2:	095b      	lsrs	r3, r3, #5
 80068d4:	011c      	lsls	r4, r3, #4
 80068d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80068da:	2200      	movs	r2, #0
 80068dc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80068e0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80068e4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80068e8:	4642      	mov	r2, r8
 80068ea:	464b      	mov	r3, r9
 80068ec:	1891      	adds	r1, r2, r2
 80068ee:	64b9      	str	r1, [r7, #72]	@ 0x48
 80068f0:	415b      	adcs	r3, r3
 80068f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80068f4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80068f8:	4641      	mov	r1, r8
 80068fa:	eb12 0a01 	adds.w	sl, r2, r1
 80068fe:	4649      	mov	r1, r9
 8006900:	eb43 0b01 	adc.w	fp, r3, r1
 8006904:	f04f 0200 	mov.w	r2, #0
 8006908:	f04f 0300 	mov.w	r3, #0
 800690c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006910:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006914:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006918:	4692      	mov	sl, r2
 800691a:	469b      	mov	fp, r3
 800691c:	4643      	mov	r3, r8
 800691e:	eb1a 0303 	adds.w	r3, sl, r3
 8006922:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006926:	464b      	mov	r3, r9
 8006928:	eb4b 0303 	adc.w	r3, fp, r3
 800692c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006930:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006934:	685b      	ldr	r3, [r3, #4]
 8006936:	2200      	movs	r2, #0
 8006938:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800693c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006940:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006944:	460b      	mov	r3, r1
 8006946:	18db      	adds	r3, r3, r3
 8006948:	643b      	str	r3, [r7, #64]	@ 0x40
 800694a:	4613      	mov	r3, r2
 800694c:	eb42 0303 	adc.w	r3, r2, r3
 8006950:	647b      	str	r3, [r7, #68]	@ 0x44
 8006952:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006956:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800695a:	f7fa f94d 	bl	8000bf8 <__aeabi_uldivmod>
 800695e:	4602      	mov	r2, r0
 8006960:	460b      	mov	r3, r1
 8006962:	4611      	mov	r1, r2
 8006964:	4b3d      	ldr	r3, [pc, #244]	@ (8006a5c <UART_SetConfig+0x2f4>)
 8006966:	fba3 2301 	umull	r2, r3, r3, r1
 800696a:	095b      	lsrs	r3, r3, #5
 800696c:	2264      	movs	r2, #100	@ 0x64
 800696e:	fb02 f303 	mul.w	r3, r2, r3
 8006972:	1acb      	subs	r3, r1, r3
 8006974:	00db      	lsls	r3, r3, #3
 8006976:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800697a:	4b38      	ldr	r3, [pc, #224]	@ (8006a5c <UART_SetConfig+0x2f4>)
 800697c:	fba3 2302 	umull	r2, r3, r3, r2
 8006980:	095b      	lsrs	r3, r3, #5
 8006982:	005b      	lsls	r3, r3, #1
 8006984:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006988:	441c      	add	r4, r3
 800698a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800698e:	2200      	movs	r2, #0
 8006990:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006994:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006998:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800699c:	4642      	mov	r2, r8
 800699e:	464b      	mov	r3, r9
 80069a0:	1891      	adds	r1, r2, r2
 80069a2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80069a4:	415b      	adcs	r3, r3
 80069a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80069a8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80069ac:	4641      	mov	r1, r8
 80069ae:	1851      	adds	r1, r2, r1
 80069b0:	6339      	str	r1, [r7, #48]	@ 0x30
 80069b2:	4649      	mov	r1, r9
 80069b4:	414b      	adcs	r3, r1
 80069b6:	637b      	str	r3, [r7, #52]	@ 0x34
 80069b8:	f04f 0200 	mov.w	r2, #0
 80069bc:	f04f 0300 	mov.w	r3, #0
 80069c0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80069c4:	4659      	mov	r1, fp
 80069c6:	00cb      	lsls	r3, r1, #3
 80069c8:	4651      	mov	r1, sl
 80069ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80069ce:	4651      	mov	r1, sl
 80069d0:	00ca      	lsls	r2, r1, #3
 80069d2:	4610      	mov	r0, r2
 80069d4:	4619      	mov	r1, r3
 80069d6:	4603      	mov	r3, r0
 80069d8:	4642      	mov	r2, r8
 80069da:	189b      	adds	r3, r3, r2
 80069dc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80069e0:	464b      	mov	r3, r9
 80069e2:	460a      	mov	r2, r1
 80069e4:	eb42 0303 	adc.w	r3, r2, r3
 80069e8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80069ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069f0:	685b      	ldr	r3, [r3, #4]
 80069f2:	2200      	movs	r2, #0
 80069f4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80069f8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80069fc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006a00:	460b      	mov	r3, r1
 8006a02:	18db      	adds	r3, r3, r3
 8006a04:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006a06:	4613      	mov	r3, r2
 8006a08:	eb42 0303 	adc.w	r3, r2, r3
 8006a0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006a0e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006a12:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006a16:	f7fa f8ef 	bl	8000bf8 <__aeabi_uldivmod>
 8006a1a:	4602      	mov	r2, r0
 8006a1c:	460b      	mov	r3, r1
 8006a1e:	4b0f      	ldr	r3, [pc, #60]	@ (8006a5c <UART_SetConfig+0x2f4>)
 8006a20:	fba3 1302 	umull	r1, r3, r3, r2
 8006a24:	095b      	lsrs	r3, r3, #5
 8006a26:	2164      	movs	r1, #100	@ 0x64
 8006a28:	fb01 f303 	mul.w	r3, r1, r3
 8006a2c:	1ad3      	subs	r3, r2, r3
 8006a2e:	00db      	lsls	r3, r3, #3
 8006a30:	3332      	adds	r3, #50	@ 0x32
 8006a32:	4a0a      	ldr	r2, [pc, #40]	@ (8006a5c <UART_SetConfig+0x2f4>)
 8006a34:	fba2 2303 	umull	r2, r3, r2, r3
 8006a38:	095b      	lsrs	r3, r3, #5
 8006a3a:	f003 0207 	and.w	r2, r3, #7
 8006a3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	4422      	add	r2, r4
 8006a46:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006a48:	e10a      	b.n	8006c60 <UART_SetConfig+0x4f8>
 8006a4a:	bf00      	nop
 8006a4c:	40011000 	.word	0x40011000
 8006a50:	40011400 	.word	0x40011400
 8006a54:	40011800 	.word	0x40011800
 8006a58:	40011c00 	.word	0x40011c00
 8006a5c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006a60:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006a64:	2200      	movs	r2, #0
 8006a66:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006a6a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006a6e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006a72:	4642      	mov	r2, r8
 8006a74:	464b      	mov	r3, r9
 8006a76:	1891      	adds	r1, r2, r2
 8006a78:	6239      	str	r1, [r7, #32]
 8006a7a:	415b      	adcs	r3, r3
 8006a7c:	627b      	str	r3, [r7, #36]	@ 0x24
 8006a7e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006a82:	4641      	mov	r1, r8
 8006a84:	1854      	adds	r4, r2, r1
 8006a86:	4649      	mov	r1, r9
 8006a88:	eb43 0501 	adc.w	r5, r3, r1
 8006a8c:	f04f 0200 	mov.w	r2, #0
 8006a90:	f04f 0300 	mov.w	r3, #0
 8006a94:	00eb      	lsls	r3, r5, #3
 8006a96:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006a9a:	00e2      	lsls	r2, r4, #3
 8006a9c:	4614      	mov	r4, r2
 8006a9e:	461d      	mov	r5, r3
 8006aa0:	4643      	mov	r3, r8
 8006aa2:	18e3      	adds	r3, r4, r3
 8006aa4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006aa8:	464b      	mov	r3, r9
 8006aaa:	eb45 0303 	adc.w	r3, r5, r3
 8006aae:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006ab2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ab6:	685b      	ldr	r3, [r3, #4]
 8006ab8:	2200      	movs	r2, #0
 8006aba:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006abe:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006ac2:	f04f 0200 	mov.w	r2, #0
 8006ac6:	f04f 0300 	mov.w	r3, #0
 8006aca:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006ace:	4629      	mov	r1, r5
 8006ad0:	008b      	lsls	r3, r1, #2
 8006ad2:	4621      	mov	r1, r4
 8006ad4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006ad8:	4621      	mov	r1, r4
 8006ada:	008a      	lsls	r2, r1, #2
 8006adc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006ae0:	f7fa f88a 	bl	8000bf8 <__aeabi_uldivmod>
 8006ae4:	4602      	mov	r2, r0
 8006ae6:	460b      	mov	r3, r1
 8006ae8:	4b60      	ldr	r3, [pc, #384]	@ (8006c6c <UART_SetConfig+0x504>)
 8006aea:	fba3 2302 	umull	r2, r3, r3, r2
 8006aee:	095b      	lsrs	r3, r3, #5
 8006af0:	011c      	lsls	r4, r3, #4
 8006af2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006af6:	2200      	movs	r2, #0
 8006af8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006afc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006b00:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006b04:	4642      	mov	r2, r8
 8006b06:	464b      	mov	r3, r9
 8006b08:	1891      	adds	r1, r2, r2
 8006b0a:	61b9      	str	r1, [r7, #24]
 8006b0c:	415b      	adcs	r3, r3
 8006b0e:	61fb      	str	r3, [r7, #28]
 8006b10:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006b14:	4641      	mov	r1, r8
 8006b16:	1851      	adds	r1, r2, r1
 8006b18:	6139      	str	r1, [r7, #16]
 8006b1a:	4649      	mov	r1, r9
 8006b1c:	414b      	adcs	r3, r1
 8006b1e:	617b      	str	r3, [r7, #20]
 8006b20:	f04f 0200 	mov.w	r2, #0
 8006b24:	f04f 0300 	mov.w	r3, #0
 8006b28:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006b2c:	4659      	mov	r1, fp
 8006b2e:	00cb      	lsls	r3, r1, #3
 8006b30:	4651      	mov	r1, sl
 8006b32:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006b36:	4651      	mov	r1, sl
 8006b38:	00ca      	lsls	r2, r1, #3
 8006b3a:	4610      	mov	r0, r2
 8006b3c:	4619      	mov	r1, r3
 8006b3e:	4603      	mov	r3, r0
 8006b40:	4642      	mov	r2, r8
 8006b42:	189b      	adds	r3, r3, r2
 8006b44:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006b48:	464b      	mov	r3, r9
 8006b4a:	460a      	mov	r2, r1
 8006b4c:	eb42 0303 	adc.w	r3, r2, r3
 8006b50:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006b54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b58:	685b      	ldr	r3, [r3, #4]
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006b5e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006b60:	f04f 0200 	mov.w	r2, #0
 8006b64:	f04f 0300 	mov.w	r3, #0
 8006b68:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006b6c:	4649      	mov	r1, r9
 8006b6e:	008b      	lsls	r3, r1, #2
 8006b70:	4641      	mov	r1, r8
 8006b72:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006b76:	4641      	mov	r1, r8
 8006b78:	008a      	lsls	r2, r1, #2
 8006b7a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006b7e:	f7fa f83b 	bl	8000bf8 <__aeabi_uldivmod>
 8006b82:	4602      	mov	r2, r0
 8006b84:	460b      	mov	r3, r1
 8006b86:	4611      	mov	r1, r2
 8006b88:	4b38      	ldr	r3, [pc, #224]	@ (8006c6c <UART_SetConfig+0x504>)
 8006b8a:	fba3 2301 	umull	r2, r3, r3, r1
 8006b8e:	095b      	lsrs	r3, r3, #5
 8006b90:	2264      	movs	r2, #100	@ 0x64
 8006b92:	fb02 f303 	mul.w	r3, r2, r3
 8006b96:	1acb      	subs	r3, r1, r3
 8006b98:	011b      	lsls	r3, r3, #4
 8006b9a:	3332      	adds	r3, #50	@ 0x32
 8006b9c:	4a33      	ldr	r2, [pc, #204]	@ (8006c6c <UART_SetConfig+0x504>)
 8006b9e:	fba2 2303 	umull	r2, r3, r2, r3
 8006ba2:	095b      	lsrs	r3, r3, #5
 8006ba4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006ba8:	441c      	add	r4, r3
 8006baa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006bae:	2200      	movs	r2, #0
 8006bb0:	673b      	str	r3, [r7, #112]	@ 0x70
 8006bb2:	677a      	str	r2, [r7, #116]	@ 0x74
 8006bb4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006bb8:	4642      	mov	r2, r8
 8006bba:	464b      	mov	r3, r9
 8006bbc:	1891      	adds	r1, r2, r2
 8006bbe:	60b9      	str	r1, [r7, #8]
 8006bc0:	415b      	adcs	r3, r3
 8006bc2:	60fb      	str	r3, [r7, #12]
 8006bc4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006bc8:	4641      	mov	r1, r8
 8006bca:	1851      	adds	r1, r2, r1
 8006bcc:	6039      	str	r1, [r7, #0]
 8006bce:	4649      	mov	r1, r9
 8006bd0:	414b      	adcs	r3, r1
 8006bd2:	607b      	str	r3, [r7, #4]
 8006bd4:	f04f 0200 	mov.w	r2, #0
 8006bd8:	f04f 0300 	mov.w	r3, #0
 8006bdc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006be0:	4659      	mov	r1, fp
 8006be2:	00cb      	lsls	r3, r1, #3
 8006be4:	4651      	mov	r1, sl
 8006be6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006bea:	4651      	mov	r1, sl
 8006bec:	00ca      	lsls	r2, r1, #3
 8006bee:	4610      	mov	r0, r2
 8006bf0:	4619      	mov	r1, r3
 8006bf2:	4603      	mov	r3, r0
 8006bf4:	4642      	mov	r2, r8
 8006bf6:	189b      	adds	r3, r3, r2
 8006bf8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006bfa:	464b      	mov	r3, r9
 8006bfc:	460a      	mov	r2, r1
 8006bfe:	eb42 0303 	adc.w	r3, r2, r3
 8006c02:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006c04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c08:	685b      	ldr	r3, [r3, #4]
 8006c0a:	2200      	movs	r2, #0
 8006c0c:	663b      	str	r3, [r7, #96]	@ 0x60
 8006c0e:	667a      	str	r2, [r7, #100]	@ 0x64
 8006c10:	f04f 0200 	mov.w	r2, #0
 8006c14:	f04f 0300 	mov.w	r3, #0
 8006c18:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006c1c:	4649      	mov	r1, r9
 8006c1e:	008b      	lsls	r3, r1, #2
 8006c20:	4641      	mov	r1, r8
 8006c22:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006c26:	4641      	mov	r1, r8
 8006c28:	008a      	lsls	r2, r1, #2
 8006c2a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006c2e:	f7f9 ffe3 	bl	8000bf8 <__aeabi_uldivmod>
 8006c32:	4602      	mov	r2, r0
 8006c34:	460b      	mov	r3, r1
 8006c36:	4b0d      	ldr	r3, [pc, #52]	@ (8006c6c <UART_SetConfig+0x504>)
 8006c38:	fba3 1302 	umull	r1, r3, r3, r2
 8006c3c:	095b      	lsrs	r3, r3, #5
 8006c3e:	2164      	movs	r1, #100	@ 0x64
 8006c40:	fb01 f303 	mul.w	r3, r1, r3
 8006c44:	1ad3      	subs	r3, r2, r3
 8006c46:	011b      	lsls	r3, r3, #4
 8006c48:	3332      	adds	r3, #50	@ 0x32
 8006c4a:	4a08      	ldr	r2, [pc, #32]	@ (8006c6c <UART_SetConfig+0x504>)
 8006c4c:	fba2 2303 	umull	r2, r3, r2, r3
 8006c50:	095b      	lsrs	r3, r3, #5
 8006c52:	f003 020f 	and.w	r2, r3, #15
 8006c56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	4422      	add	r2, r4
 8006c5e:	609a      	str	r2, [r3, #8]
}
 8006c60:	bf00      	nop
 8006c62:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006c66:	46bd      	mov	sp, r7
 8006c68:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006c6c:	51eb851f 	.word	0x51eb851f

08006c70 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006c70:	b084      	sub	sp, #16
 8006c72:	b580      	push	{r7, lr}
 8006c74:	b084      	sub	sp, #16
 8006c76:	af00      	add	r7, sp, #0
 8006c78:	6078      	str	r0, [r7, #4]
 8006c7a:	f107 001c 	add.w	r0, r7, #28
 8006c7e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006c82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c84:	2b01      	cmp	r3, #1
 8006c86:	d122      	bne.n	8006cce <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c8c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	68db      	ldr	r3, [r3, #12]
 8006c98:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8006c9c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006ca0:	687a      	ldr	r2, [r7, #4]
 8006ca2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	68db      	ldr	r3, [r3, #12]
 8006ca8:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006cb0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006cb2:	2b01      	cmp	r3, #1
 8006cb4:	d105      	bne.n	8006cc2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	68db      	ldr	r3, [r3, #12]
 8006cba:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006cc2:	6878      	ldr	r0, [r7, #4]
 8006cc4:	f001 fa3a 	bl	800813c <USB_CoreReset>
 8006cc8:	4603      	mov	r3, r0
 8006cca:	73fb      	strb	r3, [r7, #15]
 8006ccc:	e01a      	b.n	8006d04 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	68db      	ldr	r3, [r3, #12]
 8006cd2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006cda:	6878      	ldr	r0, [r7, #4]
 8006cdc:	f001 fa2e 	bl	800813c <USB_CoreReset>
 8006ce0:	4603      	mov	r3, r0
 8006ce2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006ce4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d106      	bne.n	8006cf8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006cee:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	639a      	str	r2, [r3, #56]	@ 0x38
 8006cf6:	e005      	b.n	8006d04 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006cfc:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006d04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d06:	2b01      	cmp	r3, #1
 8006d08:	d10b      	bne.n	8006d22 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	689b      	ldr	r3, [r3, #8]
 8006d0e:	f043 0206 	orr.w	r2, r3, #6
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	689b      	ldr	r3, [r3, #8]
 8006d1a:	f043 0220 	orr.w	r2, r3, #32
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006d22:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d24:	4618      	mov	r0, r3
 8006d26:	3710      	adds	r7, #16
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006d2e:	b004      	add	sp, #16
 8006d30:	4770      	bx	lr
	...

08006d34 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006d34:	b480      	push	{r7}
 8006d36:	b087      	sub	sp, #28
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	60f8      	str	r0, [r7, #12]
 8006d3c:	60b9      	str	r1, [r7, #8]
 8006d3e:	4613      	mov	r3, r2
 8006d40:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8006d42:	79fb      	ldrb	r3, [r7, #7]
 8006d44:	2b02      	cmp	r3, #2
 8006d46:	d165      	bne.n	8006e14 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006d48:	68bb      	ldr	r3, [r7, #8]
 8006d4a:	4a41      	ldr	r2, [pc, #260]	@ (8006e50 <USB_SetTurnaroundTime+0x11c>)
 8006d4c:	4293      	cmp	r3, r2
 8006d4e:	d906      	bls.n	8006d5e <USB_SetTurnaroundTime+0x2a>
 8006d50:	68bb      	ldr	r3, [r7, #8]
 8006d52:	4a40      	ldr	r2, [pc, #256]	@ (8006e54 <USB_SetTurnaroundTime+0x120>)
 8006d54:	4293      	cmp	r3, r2
 8006d56:	d202      	bcs.n	8006d5e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006d58:	230f      	movs	r3, #15
 8006d5a:	617b      	str	r3, [r7, #20]
 8006d5c:	e062      	b.n	8006e24 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8006d5e:	68bb      	ldr	r3, [r7, #8]
 8006d60:	4a3c      	ldr	r2, [pc, #240]	@ (8006e54 <USB_SetTurnaroundTime+0x120>)
 8006d62:	4293      	cmp	r3, r2
 8006d64:	d306      	bcc.n	8006d74 <USB_SetTurnaroundTime+0x40>
 8006d66:	68bb      	ldr	r3, [r7, #8]
 8006d68:	4a3b      	ldr	r2, [pc, #236]	@ (8006e58 <USB_SetTurnaroundTime+0x124>)
 8006d6a:	4293      	cmp	r3, r2
 8006d6c:	d202      	bcs.n	8006d74 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8006d6e:	230e      	movs	r3, #14
 8006d70:	617b      	str	r3, [r7, #20]
 8006d72:	e057      	b.n	8006e24 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006d74:	68bb      	ldr	r3, [r7, #8]
 8006d76:	4a38      	ldr	r2, [pc, #224]	@ (8006e58 <USB_SetTurnaroundTime+0x124>)
 8006d78:	4293      	cmp	r3, r2
 8006d7a:	d306      	bcc.n	8006d8a <USB_SetTurnaroundTime+0x56>
 8006d7c:	68bb      	ldr	r3, [r7, #8]
 8006d7e:	4a37      	ldr	r2, [pc, #220]	@ (8006e5c <USB_SetTurnaroundTime+0x128>)
 8006d80:	4293      	cmp	r3, r2
 8006d82:	d202      	bcs.n	8006d8a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006d84:	230d      	movs	r3, #13
 8006d86:	617b      	str	r3, [r7, #20]
 8006d88:	e04c      	b.n	8006e24 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006d8a:	68bb      	ldr	r3, [r7, #8]
 8006d8c:	4a33      	ldr	r2, [pc, #204]	@ (8006e5c <USB_SetTurnaroundTime+0x128>)
 8006d8e:	4293      	cmp	r3, r2
 8006d90:	d306      	bcc.n	8006da0 <USB_SetTurnaroundTime+0x6c>
 8006d92:	68bb      	ldr	r3, [r7, #8]
 8006d94:	4a32      	ldr	r2, [pc, #200]	@ (8006e60 <USB_SetTurnaroundTime+0x12c>)
 8006d96:	4293      	cmp	r3, r2
 8006d98:	d802      	bhi.n	8006da0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8006d9a:	230c      	movs	r3, #12
 8006d9c:	617b      	str	r3, [r7, #20]
 8006d9e:	e041      	b.n	8006e24 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006da0:	68bb      	ldr	r3, [r7, #8]
 8006da2:	4a2f      	ldr	r2, [pc, #188]	@ (8006e60 <USB_SetTurnaroundTime+0x12c>)
 8006da4:	4293      	cmp	r3, r2
 8006da6:	d906      	bls.n	8006db6 <USB_SetTurnaroundTime+0x82>
 8006da8:	68bb      	ldr	r3, [r7, #8]
 8006daa:	4a2e      	ldr	r2, [pc, #184]	@ (8006e64 <USB_SetTurnaroundTime+0x130>)
 8006dac:	4293      	cmp	r3, r2
 8006dae:	d802      	bhi.n	8006db6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006db0:	230b      	movs	r3, #11
 8006db2:	617b      	str	r3, [r7, #20]
 8006db4:	e036      	b.n	8006e24 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006db6:	68bb      	ldr	r3, [r7, #8]
 8006db8:	4a2a      	ldr	r2, [pc, #168]	@ (8006e64 <USB_SetTurnaroundTime+0x130>)
 8006dba:	4293      	cmp	r3, r2
 8006dbc:	d906      	bls.n	8006dcc <USB_SetTurnaroundTime+0x98>
 8006dbe:	68bb      	ldr	r3, [r7, #8]
 8006dc0:	4a29      	ldr	r2, [pc, #164]	@ (8006e68 <USB_SetTurnaroundTime+0x134>)
 8006dc2:	4293      	cmp	r3, r2
 8006dc4:	d802      	bhi.n	8006dcc <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8006dc6:	230a      	movs	r3, #10
 8006dc8:	617b      	str	r3, [r7, #20]
 8006dca:	e02b      	b.n	8006e24 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006dcc:	68bb      	ldr	r3, [r7, #8]
 8006dce:	4a26      	ldr	r2, [pc, #152]	@ (8006e68 <USB_SetTurnaroundTime+0x134>)
 8006dd0:	4293      	cmp	r3, r2
 8006dd2:	d906      	bls.n	8006de2 <USB_SetTurnaroundTime+0xae>
 8006dd4:	68bb      	ldr	r3, [r7, #8]
 8006dd6:	4a25      	ldr	r2, [pc, #148]	@ (8006e6c <USB_SetTurnaroundTime+0x138>)
 8006dd8:	4293      	cmp	r3, r2
 8006dda:	d202      	bcs.n	8006de2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006ddc:	2309      	movs	r3, #9
 8006dde:	617b      	str	r3, [r7, #20]
 8006de0:	e020      	b.n	8006e24 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006de2:	68bb      	ldr	r3, [r7, #8]
 8006de4:	4a21      	ldr	r2, [pc, #132]	@ (8006e6c <USB_SetTurnaroundTime+0x138>)
 8006de6:	4293      	cmp	r3, r2
 8006de8:	d306      	bcc.n	8006df8 <USB_SetTurnaroundTime+0xc4>
 8006dea:	68bb      	ldr	r3, [r7, #8]
 8006dec:	4a20      	ldr	r2, [pc, #128]	@ (8006e70 <USB_SetTurnaroundTime+0x13c>)
 8006dee:	4293      	cmp	r3, r2
 8006df0:	d802      	bhi.n	8006df8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006df2:	2308      	movs	r3, #8
 8006df4:	617b      	str	r3, [r7, #20]
 8006df6:	e015      	b.n	8006e24 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006df8:	68bb      	ldr	r3, [r7, #8]
 8006dfa:	4a1d      	ldr	r2, [pc, #116]	@ (8006e70 <USB_SetTurnaroundTime+0x13c>)
 8006dfc:	4293      	cmp	r3, r2
 8006dfe:	d906      	bls.n	8006e0e <USB_SetTurnaroundTime+0xda>
 8006e00:	68bb      	ldr	r3, [r7, #8]
 8006e02:	4a1c      	ldr	r2, [pc, #112]	@ (8006e74 <USB_SetTurnaroundTime+0x140>)
 8006e04:	4293      	cmp	r3, r2
 8006e06:	d202      	bcs.n	8006e0e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006e08:	2307      	movs	r3, #7
 8006e0a:	617b      	str	r3, [r7, #20]
 8006e0c:	e00a      	b.n	8006e24 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8006e0e:	2306      	movs	r3, #6
 8006e10:	617b      	str	r3, [r7, #20]
 8006e12:	e007      	b.n	8006e24 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006e14:	79fb      	ldrb	r3, [r7, #7]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d102      	bne.n	8006e20 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8006e1a:	2309      	movs	r3, #9
 8006e1c:	617b      	str	r3, [r7, #20]
 8006e1e:	e001      	b.n	8006e24 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006e20:	2309      	movs	r3, #9
 8006e22:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	68db      	ldr	r3, [r3, #12]
 8006e28:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	68da      	ldr	r2, [r3, #12]
 8006e34:	697b      	ldr	r3, [r7, #20]
 8006e36:	029b      	lsls	r3, r3, #10
 8006e38:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8006e3c:	431a      	orrs	r2, r3
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006e42:	2300      	movs	r3, #0
}
 8006e44:	4618      	mov	r0, r3
 8006e46:	371c      	adds	r7, #28
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4e:	4770      	bx	lr
 8006e50:	00d8acbf 	.word	0x00d8acbf
 8006e54:	00e4e1c0 	.word	0x00e4e1c0
 8006e58:	00f42400 	.word	0x00f42400
 8006e5c:	01067380 	.word	0x01067380
 8006e60:	011a499f 	.word	0x011a499f
 8006e64:	01312cff 	.word	0x01312cff
 8006e68:	014ca43f 	.word	0x014ca43f
 8006e6c:	016e3600 	.word	0x016e3600
 8006e70:	01a6ab1f 	.word	0x01a6ab1f
 8006e74:	01e84800 	.word	0x01e84800

08006e78 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006e78:	b480      	push	{r7}
 8006e7a:	b083      	sub	sp, #12
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	689b      	ldr	r3, [r3, #8]
 8006e84:	f043 0201 	orr.w	r2, r3, #1
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006e8c:	2300      	movs	r3, #0
}
 8006e8e:	4618      	mov	r0, r3
 8006e90:	370c      	adds	r7, #12
 8006e92:	46bd      	mov	sp, r7
 8006e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e98:	4770      	bx	lr

08006e9a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006e9a:	b480      	push	{r7}
 8006e9c:	b083      	sub	sp, #12
 8006e9e:	af00      	add	r7, sp, #0
 8006ea0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	689b      	ldr	r3, [r3, #8]
 8006ea6:	f023 0201 	bic.w	r2, r3, #1
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006eae:	2300      	movs	r3, #0
}
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	370c      	adds	r7, #12
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eba:	4770      	bx	lr

08006ebc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	b084      	sub	sp, #16
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
 8006ec4:	460b      	mov	r3, r1
 8006ec6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006ec8:	2300      	movs	r3, #0
 8006eca:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	68db      	ldr	r3, [r3, #12]
 8006ed0:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006ed8:	78fb      	ldrb	r3, [r7, #3]
 8006eda:	2b01      	cmp	r3, #1
 8006edc:	d115      	bne.n	8006f0a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	68db      	ldr	r3, [r3, #12]
 8006ee2:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006eea:	2001      	movs	r0, #1
 8006eec:	f7fa fff0 	bl	8001ed0 <HAL_Delay>
      ms++;
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	3301      	adds	r3, #1
 8006ef4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006ef6:	6878      	ldr	r0, [r7, #4]
 8006ef8:	f001 f890 	bl	800801c <USB_GetMode>
 8006efc:	4603      	mov	r3, r0
 8006efe:	2b01      	cmp	r3, #1
 8006f00:	d01e      	beq.n	8006f40 <USB_SetCurrentMode+0x84>
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	2b31      	cmp	r3, #49	@ 0x31
 8006f06:	d9f0      	bls.n	8006eea <USB_SetCurrentMode+0x2e>
 8006f08:	e01a      	b.n	8006f40 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006f0a:	78fb      	ldrb	r3, [r7, #3]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d115      	bne.n	8006f3c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	68db      	ldr	r3, [r3, #12]
 8006f14:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006f1c:	2001      	movs	r0, #1
 8006f1e:	f7fa ffd7 	bl	8001ed0 <HAL_Delay>
      ms++;
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	3301      	adds	r3, #1
 8006f26:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006f28:	6878      	ldr	r0, [r7, #4]
 8006f2a:	f001 f877 	bl	800801c <USB_GetMode>
 8006f2e:	4603      	mov	r3, r0
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d005      	beq.n	8006f40 <USB_SetCurrentMode+0x84>
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	2b31      	cmp	r3, #49	@ 0x31
 8006f38:	d9f0      	bls.n	8006f1c <USB_SetCurrentMode+0x60>
 8006f3a:	e001      	b.n	8006f40 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006f3c:	2301      	movs	r3, #1
 8006f3e:	e005      	b.n	8006f4c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	2b32      	cmp	r3, #50	@ 0x32
 8006f44:	d101      	bne.n	8006f4a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006f46:	2301      	movs	r3, #1
 8006f48:	e000      	b.n	8006f4c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006f4a:	2300      	movs	r3, #0
}
 8006f4c:	4618      	mov	r0, r3
 8006f4e:	3710      	adds	r7, #16
 8006f50:	46bd      	mov	sp, r7
 8006f52:	bd80      	pop	{r7, pc}

08006f54 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006f54:	b084      	sub	sp, #16
 8006f56:	b580      	push	{r7, lr}
 8006f58:	b086      	sub	sp, #24
 8006f5a:	af00      	add	r7, sp, #0
 8006f5c:	6078      	str	r0, [r7, #4]
 8006f5e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8006f62:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006f66:	2300      	movs	r3, #0
 8006f68:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006f6e:	2300      	movs	r3, #0
 8006f70:	613b      	str	r3, [r7, #16]
 8006f72:	e009      	b.n	8006f88 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006f74:	687a      	ldr	r2, [r7, #4]
 8006f76:	693b      	ldr	r3, [r7, #16]
 8006f78:	3340      	adds	r3, #64	@ 0x40
 8006f7a:	009b      	lsls	r3, r3, #2
 8006f7c:	4413      	add	r3, r2
 8006f7e:	2200      	movs	r2, #0
 8006f80:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006f82:	693b      	ldr	r3, [r7, #16]
 8006f84:	3301      	adds	r3, #1
 8006f86:	613b      	str	r3, [r7, #16]
 8006f88:	693b      	ldr	r3, [r7, #16]
 8006f8a:	2b0e      	cmp	r3, #14
 8006f8c:	d9f2      	bls.n	8006f74 <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006f8e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d11c      	bne.n	8006fce <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006f9a:	685b      	ldr	r3, [r3, #4]
 8006f9c:	68fa      	ldr	r2, [r7, #12]
 8006f9e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006fa2:	f043 0302 	orr.w	r3, r3, #2
 8006fa6:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fac:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	601a      	str	r2, [r3, #0]
 8006fcc:	e005      	b.n	8006fda <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fd2:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006fe0:	461a      	mov	r2, r3
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006fec:	4619      	mov	r1, r3
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006ff4:	461a      	mov	r2, r3
 8006ff6:	680b      	ldr	r3, [r1, #0]
 8006ff8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006ffa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ffc:	2b01      	cmp	r3, #1
 8006ffe:	d10c      	bne.n	800701a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007000:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007002:	2b00      	cmp	r3, #0
 8007004:	d104      	bne.n	8007010 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007006:	2100      	movs	r1, #0
 8007008:	6878      	ldr	r0, [r7, #4]
 800700a:	f000 f945 	bl	8007298 <USB_SetDevSpeed>
 800700e:	e008      	b.n	8007022 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007010:	2101      	movs	r1, #1
 8007012:	6878      	ldr	r0, [r7, #4]
 8007014:	f000 f940 	bl	8007298 <USB_SetDevSpeed>
 8007018:	e003      	b.n	8007022 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800701a:	2103      	movs	r1, #3
 800701c:	6878      	ldr	r0, [r7, #4]
 800701e:	f000 f93b 	bl	8007298 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007022:	2110      	movs	r1, #16
 8007024:	6878      	ldr	r0, [r7, #4]
 8007026:	f000 f8f3 	bl	8007210 <USB_FlushTxFifo>
 800702a:	4603      	mov	r3, r0
 800702c:	2b00      	cmp	r3, #0
 800702e:	d001      	beq.n	8007034 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8007030:	2301      	movs	r3, #1
 8007032:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007034:	6878      	ldr	r0, [r7, #4]
 8007036:	f000 f90f 	bl	8007258 <USB_FlushRxFifo>
 800703a:	4603      	mov	r3, r0
 800703c:	2b00      	cmp	r3, #0
 800703e:	d001      	beq.n	8007044 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8007040:	2301      	movs	r3, #1
 8007042:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800704a:	461a      	mov	r2, r3
 800704c:	2300      	movs	r3, #0
 800704e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007056:	461a      	mov	r2, r3
 8007058:	2300      	movs	r3, #0
 800705a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007062:	461a      	mov	r2, r3
 8007064:	2300      	movs	r3, #0
 8007066:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007068:	2300      	movs	r3, #0
 800706a:	613b      	str	r3, [r7, #16]
 800706c:	e043      	b.n	80070f6 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800706e:	693b      	ldr	r3, [r7, #16]
 8007070:	015a      	lsls	r2, r3, #5
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	4413      	add	r3, r2
 8007076:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007080:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007084:	d118      	bne.n	80070b8 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8007086:	693b      	ldr	r3, [r7, #16]
 8007088:	2b00      	cmp	r3, #0
 800708a:	d10a      	bne.n	80070a2 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800708c:	693b      	ldr	r3, [r7, #16]
 800708e:	015a      	lsls	r2, r3, #5
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	4413      	add	r3, r2
 8007094:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007098:	461a      	mov	r2, r3
 800709a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800709e:	6013      	str	r3, [r2, #0]
 80070a0:	e013      	b.n	80070ca <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80070a2:	693b      	ldr	r3, [r7, #16]
 80070a4:	015a      	lsls	r2, r3, #5
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	4413      	add	r3, r2
 80070aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80070ae:	461a      	mov	r2, r3
 80070b0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80070b4:	6013      	str	r3, [r2, #0]
 80070b6:	e008      	b.n	80070ca <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80070b8:	693b      	ldr	r3, [r7, #16]
 80070ba:	015a      	lsls	r2, r3, #5
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	4413      	add	r3, r2
 80070c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80070c4:	461a      	mov	r2, r3
 80070c6:	2300      	movs	r3, #0
 80070c8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80070ca:	693b      	ldr	r3, [r7, #16]
 80070cc:	015a      	lsls	r2, r3, #5
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	4413      	add	r3, r2
 80070d2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80070d6:	461a      	mov	r2, r3
 80070d8:	2300      	movs	r3, #0
 80070da:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80070dc:	693b      	ldr	r3, [r7, #16]
 80070de:	015a      	lsls	r2, r3, #5
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	4413      	add	r3, r2
 80070e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80070e8:	461a      	mov	r2, r3
 80070ea:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80070ee:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80070f0:	693b      	ldr	r3, [r7, #16]
 80070f2:	3301      	adds	r3, #1
 80070f4:	613b      	str	r3, [r7, #16]
 80070f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070f8:	693a      	ldr	r2, [r7, #16]
 80070fa:	429a      	cmp	r2, r3
 80070fc:	d3b7      	bcc.n	800706e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80070fe:	2300      	movs	r3, #0
 8007100:	613b      	str	r3, [r7, #16]
 8007102:	e043      	b.n	800718c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007104:	693b      	ldr	r3, [r7, #16]
 8007106:	015a      	lsls	r2, r3, #5
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	4413      	add	r3, r2
 800710c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007116:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800711a:	d118      	bne.n	800714e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800711c:	693b      	ldr	r3, [r7, #16]
 800711e:	2b00      	cmp	r3, #0
 8007120:	d10a      	bne.n	8007138 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007122:	693b      	ldr	r3, [r7, #16]
 8007124:	015a      	lsls	r2, r3, #5
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	4413      	add	r3, r2
 800712a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800712e:	461a      	mov	r2, r3
 8007130:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007134:	6013      	str	r3, [r2, #0]
 8007136:	e013      	b.n	8007160 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007138:	693b      	ldr	r3, [r7, #16]
 800713a:	015a      	lsls	r2, r3, #5
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	4413      	add	r3, r2
 8007140:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007144:	461a      	mov	r2, r3
 8007146:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800714a:	6013      	str	r3, [r2, #0]
 800714c:	e008      	b.n	8007160 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800714e:	693b      	ldr	r3, [r7, #16]
 8007150:	015a      	lsls	r2, r3, #5
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	4413      	add	r3, r2
 8007156:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800715a:	461a      	mov	r2, r3
 800715c:	2300      	movs	r3, #0
 800715e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007160:	693b      	ldr	r3, [r7, #16]
 8007162:	015a      	lsls	r2, r3, #5
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	4413      	add	r3, r2
 8007168:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800716c:	461a      	mov	r2, r3
 800716e:	2300      	movs	r3, #0
 8007170:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007172:	693b      	ldr	r3, [r7, #16]
 8007174:	015a      	lsls	r2, r3, #5
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	4413      	add	r3, r2
 800717a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800717e:	461a      	mov	r2, r3
 8007180:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007184:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007186:	693b      	ldr	r3, [r7, #16]
 8007188:	3301      	adds	r3, #1
 800718a:	613b      	str	r3, [r7, #16]
 800718c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800718e:	693a      	ldr	r2, [r7, #16]
 8007190:	429a      	cmp	r2, r3
 8007192:	d3b7      	bcc.n	8007104 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800719a:	691b      	ldr	r3, [r3, #16]
 800719c:	68fa      	ldr	r2, [r7, #12]
 800719e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80071a2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80071a6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	2200      	movs	r2, #0
 80071ac:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80071b4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80071b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d105      	bne.n	80071c8 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	699b      	ldr	r3, [r3, #24]
 80071c0:	f043 0210 	orr.w	r2, r3, #16
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	699a      	ldr	r2, [r3, #24]
 80071cc:	4b0f      	ldr	r3, [pc, #60]	@ (800720c <USB_DevInit+0x2b8>)
 80071ce:	4313      	orrs	r3, r2
 80071d0:	687a      	ldr	r2, [r7, #4]
 80071d2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80071d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d005      	beq.n	80071e6 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	699b      	ldr	r3, [r3, #24]
 80071de:	f043 0208 	orr.w	r2, r3, #8
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80071e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80071e8:	2b01      	cmp	r3, #1
 80071ea:	d107      	bne.n	80071fc <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	699b      	ldr	r3, [r3, #24]
 80071f0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80071f4:	f043 0304 	orr.w	r3, r3, #4
 80071f8:	687a      	ldr	r2, [r7, #4]
 80071fa:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80071fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80071fe:	4618      	mov	r0, r3
 8007200:	3718      	adds	r7, #24
 8007202:	46bd      	mov	sp, r7
 8007204:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007208:	b004      	add	sp, #16
 800720a:	4770      	bx	lr
 800720c:	803c3800 	.word	0x803c3800

08007210 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007210:	b480      	push	{r7}
 8007212:	b085      	sub	sp, #20
 8007214:	af00      	add	r7, sp, #0
 8007216:	6078      	str	r0, [r7, #4]
 8007218:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800721a:	2300      	movs	r3, #0
 800721c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800721e:	683b      	ldr	r3, [r7, #0]
 8007220:	019b      	lsls	r3, r3, #6
 8007222:	f043 0220 	orr.w	r2, r3, #32
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	3301      	adds	r3, #1
 800722e:	60fb      	str	r3, [r7, #12]
 8007230:	4a08      	ldr	r2, [pc, #32]	@ (8007254 <USB_FlushTxFifo+0x44>)
 8007232:	4293      	cmp	r3, r2
 8007234:	d901      	bls.n	800723a <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8007236:	2303      	movs	r3, #3
 8007238:	e006      	b.n	8007248 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	691b      	ldr	r3, [r3, #16]
 800723e:	f003 0320 	and.w	r3, r3, #32
 8007242:	2b20      	cmp	r3, #32
 8007244:	d0f1      	beq.n	800722a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8007246:	2300      	movs	r3, #0
}
 8007248:	4618      	mov	r0, r3
 800724a:	3714      	adds	r7, #20
 800724c:	46bd      	mov	sp, r7
 800724e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007252:	4770      	bx	lr
 8007254:	00030d40 	.word	0x00030d40

08007258 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007258:	b480      	push	{r7}
 800725a:	b085      	sub	sp, #20
 800725c:	af00      	add	r7, sp, #0
 800725e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007260:	2300      	movs	r3, #0
 8007262:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	2210      	movs	r2, #16
 8007268:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	3301      	adds	r3, #1
 800726e:	60fb      	str	r3, [r7, #12]
 8007270:	4a08      	ldr	r2, [pc, #32]	@ (8007294 <USB_FlushRxFifo+0x3c>)
 8007272:	4293      	cmp	r3, r2
 8007274:	d901      	bls.n	800727a <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8007276:	2303      	movs	r3, #3
 8007278:	e006      	b.n	8007288 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	691b      	ldr	r3, [r3, #16]
 800727e:	f003 0310 	and.w	r3, r3, #16
 8007282:	2b10      	cmp	r3, #16
 8007284:	d0f1      	beq.n	800726a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8007286:	2300      	movs	r3, #0
}
 8007288:	4618      	mov	r0, r3
 800728a:	3714      	adds	r7, #20
 800728c:	46bd      	mov	sp, r7
 800728e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007292:	4770      	bx	lr
 8007294:	00030d40 	.word	0x00030d40

08007298 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007298:	b480      	push	{r7}
 800729a:	b085      	sub	sp, #20
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]
 80072a0:	460b      	mov	r3, r1
 80072a2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80072ae:	681a      	ldr	r2, [r3, #0]
 80072b0:	78fb      	ldrb	r3, [r7, #3]
 80072b2:	68f9      	ldr	r1, [r7, #12]
 80072b4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80072b8:	4313      	orrs	r3, r2
 80072ba:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80072bc:	2300      	movs	r3, #0
}
 80072be:	4618      	mov	r0, r3
 80072c0:	3714      	adds	r7, #20
 80072c2:	46bd      	mov	sp, r7
 80072c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c8:	4770      	bx	lr

080072ca <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80072ca:	b480      	push	{r7}
 80072cc:	b087      	sub	sp, #28
 80072ce:	af00      	add	r7, sp, #0
 80072d0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80072d6:	693b      	ldr	r3, [r7, #16]
 80072d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80072dc:	689b      	ldr	r3, [r3, #8]
 80072de:	f003 0306 	and.w	r3, r3, #6
 80072e2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d102      	bne.n	80072f0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80072ea:	2300      	movs	r3, #0
 80072ec:	75fb      	strb	r3, [r7, #23]
 80072ee:	e00a      	b.n	8007306 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	2b02      	cmp	r3, #2
 80072f4:	d002      	beq.n	80072fc <USB_GetDevSpeed+0x32>
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	2b06      	cmp	r3, #6
 80072fa:	d102      	bne.n	8007302 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80072fc:	2302      	movs	r3, #2
 80072fe:	75fb      	strb	r3, [r7, #23]
 8007300:	e001      	b.n	8007306 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8007302:	230f      	movs	r3, #15
 8007304:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8007306:	7dfb      	ldrb	r3, [r7, #23]
}
 8007308:	4618      	mov	r0, r3
 800730a:	371c      	adds	r7, #28
 800730c:	46bd      	mov	sp, r7
 800730e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007312:	4770      	bx	lr

08007314 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007314:	b480      	push	{r7}
 8007316:	b085      	sub	sp, #20
 8007318:	af00      	add	r7, sp, #0
 800731a:	6078      	str	r0, [r7, #4]
 800731c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007322:	683b      	ldr	r3, [r7, #0]
 8007324:	781b      	ldrb	r3, [r3, #0]
 8007326:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007328:	683b      	ldr	r3, [r7, #0]
 800732a:	785b      	ldrb	r3, [r3, #1]
 800732c:	2b01      	cmp	r3, #1
 800732e:	d13a      	bne.n	80073a6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007336:	69da      	ldr	r2, [r3, #28]
 8007338:	683b      	ldr	r3, [r7, #0]
 800733a:	781b      	ldrb	r3, [r3, #0]
 800733c:	f003 030f 	and.w	r3, r3, #15
 8007340:	2101      	movs	r1, #1
 8007342:	fa01 f303 	lsl.w	r3, r1, r3
 8007346:	b29b      	uxth	r3, r3
 8007348:	68f9      	ldr	r1, [r7, #12]
 800734a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800734e:	4313      	orrs	r3, r2
 8007350:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8007352:	68bb      	ldr	r3, [r7, #8]
 8007354:	015a      	lsls	r2, r3, #5
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	4413      	add	r3, r2
 800735a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007364:	2b00      	cmp	r3, #0
 8007366:	d155      	bne.n	8007414 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007368:	68bb      	ldr	r3, [r7, #8]
 800736a:	015a      	lsls	r2, r3, #5
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	4413      	add	r3, r2
 8007370:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007374:	681a      	ldr	r2, [r3, #0]
 8007376:	683b      	ldr	r3, [r7, #0]
 8007378:	689b      	ldr	r3, [r3, #8]
 800737a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800737e:	683b      	ldr	r3, [r7, #0]
 8007380:	78db      	ldrb	r3, [r3, #3]
 8007382:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007384:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007386:	68bb      	ldr	r3, [r7, #8]
 8007388:	059b      	lsls	r3, r3, #22
 800738a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800738c:	4313      	orrs	r3, r2
 800738e:	68ba      	ldr	r2, [r7, #8]
 8007390:	0151      	lsls	r1, r2, #5
 8007392:	68fa      	ldr	r2, [r7, #12]
 8007394:	440a      	add	r2, r1
 8007396:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800739a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800739e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80073a2:	6013      	str	r3, [r2, #0]
 80073a4:	e036      	b.n	8007414 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80073ac:	69da      	ldr	r2, [r3, #28]
 80073ae:	683b      	ldr	r3, [r7, #0]
 80073b0:	781b      	ldrb	r3, [r3, #0]
 80073b2:	f003 030f 	and.w	r3, r3, #15
 80073b6:	2101      	movs	r1, #1
 80073b8:	fa01 f303 	lsl.w	r3, r1, r3
 80073bc:	041b      	lsls	r3, r3, #16
 80073be:	68f9      	ldr	r1, [r7, #12]
 80073c0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80073c4:	4313      	orrs	r3, r2
 80073c6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80073c8:	68bb      	ldr	r3, [r7, #8]
 80073ca:	015a      	lsls	r2, r3, #5
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	4413      	add	r3, r2
 80073d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d11a      	bne.n	8007414 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80073de:	68bb      	ldr	r3, [r7, #8]
 80073e0:	015a      	lsls	r2, r3, #5
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	4413      	add	r3, r2
 80073e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80073ea:	681a      	ldr	r2, [r3, #0]
 80073ec:	683b      	ldr	r3, [r7, #0]
 80073ee:	689b      	ldr	r3, [r3, #8]
 80073f0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80073f4:	683b      	ldr	r3, [r7, #0]
 80073f6:	78db      	ldrb	r3, [r3, #3]
 80073f8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80073fa:	430b      	orrs	r3, r1
 80073fc:	4313      	orrs	r3, r2
 80073fe:	68ba      	ldr	r2, [r7, #8]
 8007400:	0151      	lsls	r1, r2, #5
 8007402:	68fa      	ldr	r2, [r7, #12]
 8007404:	440a      	add	r2, r1
 8007406:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800740a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800740e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007412:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8007414:	2300      	movs	r3, #0
}
 8007416:	4618      	mov	r0, r3
 8007418:	3714      	adds	r7, #20
 800741a:	46bd      	mov	sp, r7
 800741c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007420:	4770      	bx	lr
	...

08007424 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007424:	b580      	push	{r7, lr}
 8007426:	b08a      	sub	sp, #40	@ 0x28
 8007428:	af02      	add	r7, sp, #8
 800742a:	60f8      	str	r0, [r7, #12]
 800742c:	60b9      	str	r1, [r7, #8]
 800742e:	4613      	mov	r3, r2
 8007430:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8007436:	68bb      	ldr	r3, [r7, #8]
 8007438:	781b      	ldrb	r3, [r3, #0]
 800743a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800743c:	68bb      	ldr	r3, [r7, #8]
 800743e:	785b      	ldrb	r3, [r3, #1]
 8007440:	2b01      	cmp	r3, #1
 8007442:	f040 815c 	bne.w	80076fe <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007446:	68bb      	ldr	r3, [r7, #8]
 8007448:	695b      	ldr	r3, [r3, #20]
 800744a:	2b00      	cmp	r3, #0
 800744c:	d132      	bne.n	80074b4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800744e:	69bb      	ldr	r3, [r7, #24]
 8007450:	015a      	lsls	r2, r3, #5
 8007452:	69fb      	ldr	r3, [r7, #28]
 8007454:	4413      	add	r3, r2
 8007456:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800745a:	691b      	ldr	r3, [r3, #16]
 800745c:	69ba      	ldr	r2, [r7, #24]
 800745e:	0151      	lsls	r1, r2, #5
 8007460:	69fa      	ldr	r2, [r7, #28]
 8007462:	440a      	add	r2, r1
 8007464:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007468:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800746c:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8007470:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007472:	69bb      	ldr	r3, [r7, #24]
 8007474:	015a      	lsls	r2, r3, #5
 8007476:	69fb      	ldr	r3, [r7, #28]
 8007478:	4413      	add	r3, r2
 800747a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800747e:	691b      	ldr	r3, [r3, #16]
 8007480:	69ba      	ldr	r2, [r7, #24]
 8007482:	0151      	lsls	r1, r2, #5
 8007484:	69fa      	ldr	r2, [r7, #28]
 8007486:	440a      	add	r2, r1
 8007488:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800748c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007490:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007492:	69bb      	ldr	r3, [r7, #24]
 8007494:	015a      	lsls	r2, r3, #5
 8007496:	69fb      	ldr	r3, [r7, #28]
 8007498:	4413      	add	r3, r2
 800749a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800749e:	691b      	ldr	r3, [r3, #16]
 80074a0:	69ba      	ldr	r2, [r7, #24]
 80074a2:	0151      	lsls	r1, r2, #5
 80074a4:	69fa      	ldr	r2, [r7, #28]
 80074a6:	440a      	add	r2, r1
 80074a8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80074ac:	0cdb      	lsrs	r3, r3, #19
 80074ae:	04db      	lsls	r3, r3, #19
 80074b0:	6113      	str	r3, [r2, #16]
 80074b2:	e074      	b.n	800759e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80074b4:	69bb      	ldr	r3, [r7, #24]
 80074b6:	015a      	lsls	r2, r3, #5
 80074b8:	69fb      	ldr	r3, [r7, #28]
 80074ba:	4413      	add	r3, r2
 80074bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80074c0:	691b      	ldr	r3, [r3, #16]
 80074c2:	69ba      	ldr	r2, [r7, #24]
 80074c4:	0151      	lsls	r1, r2, #5
 80074c6:	69fa      	ldr	r2, [r7, #28]
 80074c8:	440a      	add	r2, r1
 80074ca:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80074ce:	0cdb      	lsrs	r3, r3, #19
 80074d0:	04db      	lsls	r3, r3, #19
 80074d2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80074d4:	69bb      	ldr	r3, [r7, #24]
 80074d6:	015a      	lsls	r2, r3, #5
 80074d8:	69fb      	ldr	r3, [r7, #28]
 80074da:	4413      	add	r3, r2
 80074dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80074e0:	691b      	ldr	r3, [r3, #16]
 80074e2:	69ba      	ldr	r2, [r7, #24]
 80074e4:	0151      	lsls	r1, r2, #5
 80074e6:	69fa      	ldr	r2, [r7, #28]
 80074e8:	440a      	add	r2, r1
 80074ea:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80074ee:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80074f2:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80074f6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80074f8:	69bb      	ldr	r3, [r7, #24]
 80074fa:	015a      	lsls	r2, r3, #5
 80074fc:	69fb      	ldr	r3, [r7, #28]
 80074fe:	4413      	add	r3, r2
 8007500:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007504:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8007506:	68bb      	ldr	r3, [r7, #8]
 8007508:	6959      	ldr	r1, [r3, #20]
 800750a:	68bb      	ldr	r3, [r7, #8]
 800750c:	689b      	ldr	r3, [r3, #8]
 800750e:	440b      	add	r3, r1
 8007510:	1e59      	subs	r1, r3, #1
 8007512:	68bb      	ldr	r3, [r7, #8]
 8007514:	689b      	ldr	r3, [r3, #8]
 8007516:	fbb1 f3f3 	udiv	r3, r1, r3
 800751a:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800751c:	4b9d      	ldr	r3, [pc, #628]	@ (8007794 <USB_EPStartXfer+0x370>)
 800751e:	400b      	ands	r3, r1
 8007520:	69b9      	ldr	r1, [r7, #24]
 8007522:	0148      	lsls	r0, r1, #5
 8007524:	69f9      	ldr	r1, [r7, #28]
 8007526:	4401      	add	r1, r0
 8007528:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800752c:	4313      	orrs	r3, r2
 800752e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007530:	69bb      	ldr	r3, [r7, #24]
 8007532:	015a      	lsls	r2, r3, #5
 8007534:	69fb      	ldr	r3, [r7, #28]
 8007536:	4413      	add	r3, r2
 8007538:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800753c:	691a      	ldr	r2, [r3, #16]
 800753e:	68bb      	ldr	r3, [r7, #8]
 8007540:	695b      	ldr	r3, [r3, #20]
 8007542:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007546:	69b9      	ldr	r1, [r7, #24]
 8007548:	0148      	lsls	r0, r1, #5
 800754a:	69f9      	ldr	r1, [r7, #28]
 800754c:	4401      	add	r1, r0
 800754e:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8007552:	4313      	orrs	r3, r2
 8007554:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8007556:	68bb      	ldr	r3, [r7, #8]
 8007558:	78db      	ldrb	r3, [r3, #3]
 800755a:	2b01      	cmp	r3, #1
 800755c:	d11f      	bne.n	800759e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800755e:	69bb      	ldr	r3, [r7, #24]
 8007560:	015a      	lsls	r2, r3, #5
 8007562:	69fb      	ldr	r3, [r7, #28]
 8007564:	4413      	add	r3, r2
 8007566:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800756a:	691b      	ldr	r3, [r3, #16]
 800756c:	69ba      	ldr	r2, [r7, #24]
 800756e:	0151      	lsls	r1, r2, #5
 8007570:	69fa      	ldr	r2, [r7, #28]
 8007572:	440a      	add	r2, r1
 8007574:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007578:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800757c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800757e:	69bb      	ldr	r3, [r7, #24]
 8007580:	015a      	lsls	r2, r3, #5
 8007582:	69fb      	ldr	r3, [r7, #28]
 8007584:	4413      	add	r3, r2
 8007586:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800758a:	691b      	ldr	r3, [r3, #16]
 800758c:	69ba      	ldr	r2, [r7, #24]
 800758e:	0151      	lsls	r1, r2, #5
 8007590:	69fa      	ldr	r2, [r7, #28]
 8007592:	440a      	add	r2, r1
 8007594:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007598:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800759c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800759e:	79fb      	ldrb	r3, [r7, #7]
 80075a0:	2b01      	cmp	r3, #1
 80075a2:	d14b      	bne.n	800763c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80075a4:	68bb      	ldr	r3, [r7, #8]
 80075a6:	691b      	ldr	r3, [r3, #16]
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d009      	beq.n	80075c0 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80075ac:	69bb      	ldr	r3, [r7, #24]
 80075ae:	015a      	lsls	r2, r3, #5
 80075b0:	69fb      	ldr	r3, [r7, #28]
 80075b2:	4413      	add	r3, r2
 80075b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80075b8:	461a      	mov	r2, r3
 80075ba:	68bb      	ldr	r3, [r7, #8]
 80075bc:	691b      	ldr	r3, [r3, #16]
 80075be:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80075c0:	68bb      	ldr	r3, [r7, #8]
 80075c2:	78db      	ldrb	r3, [r3, #3]
 80075c4:	2b01      	cmp	r3, #1
 80075c6:	d128      	bne.n	800761a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80075c8:	69fb      	ldr	r3, [r7, #28]
 80075ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80075ce:	689b      	ldr	r3, [r3, #8]
 80075d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d110      	bne.n	80075fa <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80075d8:	69bb      	ldr	r3, [r7, #24]
 80075da:	015a      	lsls	r2, r3, #5
 80075dc:	69fb      	ldr	r3, [r7, #28]
 80075de:	4413      	add	r3, r2
 80075e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	69ba      	ldr	r2, [r7, #24]
 80075e8:	0151      	lsls	r1, r2, #5
 80075ea:	69fa      	ldr	r2, [r7, #28]
 80075ec:	440a      	add	r2, r1
 80075ee:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80075f2:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80075f6:	6013      	str	r3, [r2, #0]
 80075f8:	e00f      	b.n	800761a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80075fa:	69bb      	ldr	r3, [r7, #24]
 80075fc:	015a      	lsls	r2, r3, #5
 80075fe:	69fb      	ldr	r3, [r7, #28]
 8007600:	4413      	add	r3, r2
 8007602:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	69ba      	ldr	r2, [r7, #24]
 800760a:	0151      	lsls	r1, r2, #5
 800760c:	69fa      	ldr	r2, [r7, #28]
 800760e:	440a      	add	r2, r1
 8007610:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007614:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007618:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800761a:	69bb      	ldr	r3, [r7, #24]
 800761c:	015a      	lsls	r2, r3, #5
 800761e:	69fb      	ldr	r3, [r7, #28]
 8007620:	4413      	add	r3, r2
 8007622:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	69ba      	ldr	r2, [r7, #24]
 800762a:	0151      	lsls	r1, r2, #5
 800762c:	69fa      	ldr	r2, [r7, #28]
 800762e:	440a      	add	r2, r1
 8007630:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007634:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8007638:	6013      	str	r3, [r2, #0]
 800763a:	e12f      	b.n	800789c <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800763c:	69bb      	ldr	r3, [r7, #24]
 800763e:	015a      	lsls	r2, r3, #5
 8007640:	69fb      	ldr	r3, [r7, #28]
 8007642:	4413      	add	r3, r2
 8007644:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	69ba      	ldr	r2, [r7, #24]
 800764c:	0151      	lsls	r1, r2, #5
 800764e:	69fa      	ldr	r2, [r7, #28]
 8007650:	440a      	add	r2, r1
 8007652:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007656:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800765a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800765c:	68bb      	ldr	r3, [r7, #8]
 800765e:	78db      	ldrb	r3, [r3, #3]
 8007660:	2b01      	cmp	r3, #1
 8007662:	d015      	beq.n	8007690 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8007664:	68bb      	ldr	r3, [r7, #8]
 8007666:	695b      	ldr	r3, [r3, #20]
 8007668:	2b00      	cmp	r3, #0
 800766a:	f000 8117 	beq.w	800789c <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800766e:	69fb      	ldr	r3, [r7, #28]
 8007670:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007674:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007676:	68bb      	ldr	r3, [r7, #8]
 8007678:	781b      	ldrb	r3, [r3, #0]
 800767a:	f003 030f 	and.w	r3, r3, #15
 800767e:	2101      	movs	r1, #1
 8007680:	fa01 f303 	lsl.w	r3, r1, r3
 8007684:	69f9      	ldr	r1, [r7, #28]
 8007686:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800768a:	4313      	orrs	r3, r2
 800768c:	634b      	str	r3, [r1, #52]	@ 0x34
 800768e:	e105      	b.n	800789c <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007690:	69fb      	ldr	r3, [r7, #28]
 8007692:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007696:	689b      	ldr	r3, [r3, #8]
 8007698:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800769c:	2b00      	cmp	r3, #0
 800769e:	d110      	bne.n	80076c2 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80076a0:	69bb      	ldr	r3, [r7, #24]
 80076a2:	015a      	lsls	r2, r3, #5
 80076a4:	69fb      	ldr	r3, [r7, #28]
 80076a6:	4413      	add	r3, r2
 80076a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	69ba      	ldr	r2, [r7, #24]
 80076b0:	0151      	lsls	r1, r2, #5
 80076b2:	69fa      	ldr	r2, [r7, #28]
 80076b4:	440a      	add	r2, r1
 80076b6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80076ba:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80076be:	6013      	str	r3, [r2, #0]
 80076c0:	e00f      	b.n	80076e2 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80076c2:	69bb      	ldr	r3, [r7, #24]
 80076c4:	015a      	lsls	r2, r3, #5
 80076c6:	69fb      	ldr	r3, [r7, #28]
 80076c8:	4413      	add	r3, r2
 80076ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	69ba      	ldr	r2, [r7, #24]
 80076d2:	0151      	lsls	r1, r2, #5
 80076d4:	69fa      	ldr	r2, [r7, #28]
 80076d6:	440a      	add	r2, r1
 80076d8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80076dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80076e0:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80076e2:	68bb      	ldr	r3, [r7, #8]
 80076e4:	68d9      	ldr	r1, [r3, #12]
 80076e6:	68bb      	ldr	r3, [r7, #8]
 80076e8:	781a      	ldrb	r2, [r3, #0]
 80076ea:	68bb      	ldr	r3, [r7, #8]
 80076ec:	695b      	ldr	r3, [r3, #20]
 80076ee:	b298      	uxth	r0, r3
 80076f0:	79fb      	ldrb	r3, [r7, #7]
 80076f2:	9300      	str	r3, [sp, #0]
 80076f4:	4603      	mov	r3, r0
 80076f6:	68f8      	ldr	r0, [r7, #12]
 80076f8:	f000 fa2b 	bl	8007b52 <USB_WritePacket>
 80076fc:	e0ce      	b.n	800789c <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80076fe:	69bb      	ldr	r3, [r7, #24]
 8007700:	015a      	lsls	r2, r3, #5
 8007702:	69fb      	ldr	r3, [r7, #28]
 8007704:	4413      	add	r3, r2
 8007706:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800770a:	691b      	ldr	r3, [r3, #16]
 800770c:	69ba      	ldr	r2, [r7, #24]
 800770e:	0151      	lsls	r1, r2, #5
 8007710:	69fa      	ldr	r2, [r7, #28]
 8007712:	440a      	add	r2, r1
 8007714:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007718:	0cdb      	lsrs	r3, r3, #19
 800771a:	04db      	lsls	r3, r3, #19
 800771c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800771e:	69bb      	ldr	r3, [r7, #24]
 8007720:	015a      	lsls	r2, r3, #5
 8007722:	69fb      	ldr	r3, [r7, #28]
 8007724:	4413      	add	r3, r2
 8007726:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800772a:	691b      	ldr	r3, [r3, #16]
 800772c:	69ba      	ldr	r2, [r7, #24]
 800772e:	0151      	lsls	r1, r2, #5
 8007730:	69fa      	ldr	r2, [r7, #28]
 8007732:	440a      	add	r2, r1
 8007734:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007738:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800773c:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8007740:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8007742:	68bb      	ldr	r3, [r7, #8]
 8007744:	695b      	ldr	r3, [r3, #20]
 8007746:	2b00      	cmp	r3, #0
 8007748:	d126      	bne.n	8007798 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800774a:	69bb      	ldr	r3, [r7, #24]
 800774c:	015a      	lsls	r2, r3, #5
 800774e:	69fb      	ldr	r3, [r7, #28]
 8007750:	4413      	add	r3, r2
 8007752:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007756:	691a      	ldr	r2, [r3, #16]
 8007758:	68bb      	ldr	r3, [r7, #8]
 800775a:	689b      	ldr	r3, [r3, #8]
 800775c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007760:	69b9      	ldr	r1, [r7, #24]
 8007762:	0148      	lsls	r0, r1, #5
 8007764:	69f9      	ldr	r1, [r7, #28]
 8007766:	4401      	add	r1, r0
 8007768:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800776c:	4313      	orrs	r3, r2
 800776e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007770:	69bb      	ldr	r3, [r7, #24]
 8007772:	015a      	lsls	r2, r3, #5
 8007774:	69fb      	ldr	r3, [r7, #28]
 8007776:	4413      	add	r3, r2
 8007778:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800777c:	691b      	ldr	r3, [r3, #16]
 800777e:	69ba      	ldr	r2, [r7, #24]
 8007780:	0151      	lsls	r1, r2, #5
 8007782:	69fa      	ldr	r2, [r7, #28]
 8007784:	440a      	add	r2, r1
 8007786:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800778a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800778e:	6113      	str	r3, [r2, #16]
 8007790:	e036      	b.n	8007800 <USB_EPStartXfer+0x3dc>
 8007792:	bf00      	nop
 8007794:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007798:	68bb      	ldr	r3, [r7, #8]
 800779a:	695a      	ldr	r2, [r3, #20]
 800779c:	68bb      	ldr	r3, [r7, #8]
 800779e:	689b      	ldr	r3, [r3, #8]
 80077a0:	4413      	add	r3, r2
 80077a2:	1e5a      	subs	r2, r3, #1
 80077a4:	68bb      	ldr	r3, [r7, #8]
 80077a6:	689b      	ldr	r3, [r3, #8]
 80077a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80077ac:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80077ae:	69bb      	ldr	r3, [r7, #24]
 80077b0:	015a      	lsls	r2, r3, #5
 80077b2:	69fb      	ldr	r3, [r7, #28]
 80077b4:	4413      	add	r3, r2
 80077b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80077ba:	691a      	ldr	r2, [r3, #16]
 80077bc:	8afb      	ldrh	r3, [r7, #22]
 80077be:	04d9      	lsls	r1, r3, #19
 80077c0:	4b39      	ldr	r3, [pc, #228]	@ (80078a8 <USB_EPStartXfer+0x484>)
 80077c2:	400b      	ands	r3, r1
 80077c4:	69b9      	ldr	r1, [r7, #24]
 80077c6:	0148      	lsls	r0, r1, #5
 80077c8:	69f9      	ldr	r1, [r7, #28]
 80077ca:	4401      	add	r1, r0
 80077cc:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80077d0:	4313      	orrs	r3, r2
 80077d2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80077d4:	69bb      	ldr	r3, [r7, #24]
 80077d6:	015a      	lsls	r2, r3, #5
 80077d8:	69fb      	ldr	r3, [r7, #28]
 80077da:	4413      	add	r3, r2
 80077dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80077e0:	691a      	ldr	r2, [r3, #16]
 80077e2:	68bb      	ldr	r3, [r7, #8]
 80077e4:	689b      	ldr	r3, [r3, #8]
 80077e6:	8af9      	ldrh	r1, [r7, #22]
 80077e8:	fb01 f303 	mul.w	r3, r1, r3
 80077ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80077f0:	69b9      	ldr	r1, [r7, #24]
 80077f2:	0148      	lsls	r0, r1, #5
 80077f4:	69f9      	ldr	r1, [r7, #28]
 80077f6:	4401      	add	r1, r0
 80077f8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80077fc:	4313      	orrs	r3, r2
 80077fe:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007800:	79fb      	ldrb	r3, [r7, #7]
 8007802:	2b01      	cmp	r3, #1
 8007804:	d10d      	bne.n	8007822 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007806:	68bb      	ldr	r3, [r7, #8]
 8007808:	68db      	ldr	r3, [r3, #12]
 800780a:	2b00      	cmp	r3, #0
 800780c:	d009      	beq.n	8007822 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800780e:	68bb      	ldr	r3, [r7, #8]
 8007810:	68d9      	ldr	r1, [r3, #12]
 8007812:	69bb      	ldr	r3, [r7, #24]
 8007814:	015a      	lsls	r2, r3, #5
 8007816:	69fb      	ldr	r3, [r7, #28]
 8007818:	4413      	add	r3, r2
 800781a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800781e:	460a      	mov	r2, r1
 8007820:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8007822:	68bb      	ldr	r3, [r7, #8]
 8007824:	78db      	ldrb	r3, [r3, #3]
 8007826:	2b01      	cmp	r3, #1
 8007828:	d128      	bne.n	800787c <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800782a:	69fb      	ldr	r3, [r7, #28]
 800782c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007830:	689b      	ldr	r3, [r3, #8]
 8007832:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007836:	2b00      	cmp	r3, #0
 8007838:	d110      	bne.n	800785c <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800783a:	69bb      	ldr	r3, [r7, #24]
 800783c:	015a      	lsls	r2, r3, #5
 800783e:	69fb      	ldr	r3, [r7, #28]
 8007840:	4413      	add	r3, r2
 8007842:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	69ba      	ldr	r2, [r7, #24]
 800784a:	0151      	lsls	r1, r2, #5
 800784c:	69fa      	ldr	r2, [r7, #28]
 800784e:	440a      	add	r2, r1
 8007850:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007854:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007858:	6013      	str	r3, [r2, #0]
 800785a:	e00f      	b.n	800787c <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800785c:	69bb      	ldr	r3, [r7, #24]
 800785e:	015a      	lsls	r2, r3, #5
 8007860:	69fb      	ldr	r3, [r7, #28]
 8007862:	4413      	add	r3, r2
 8007864:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	69ba      	ldr	r2, [r7, #24]
 800786c:	0151      	lsls	r1, r2, #5
 800786e:	69fa      	ldr	r2, [r7, #28]
 8007870:	440a      	add	r2, r1
 8007872:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007876:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800787a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800787c:	69bb      	ldr	r3, [r7, #24]
 800787e:	015a      	lsls	r2, r3, #5
 8007880:	69fb      	ldr	r3, [r7, #28]
 8007882:	4413      	add	r3, r2
 8007884:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	69ba      	ldr	r2, [r7, #24]
 800788c:	0151      	lsls	r1, r2, #5
 800788e:	69fa      	ldr	r2, [r7, #28]
 8007890:	440a      	add	r2, r1
 8007892:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007896:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800789a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800789c:	2300      	movs	r3, #0
}
 800789e:	4618      	mov	r0, r3
 80078a0:	3720      	adds	r7, #32
 80078a2:	46bd      	mov	sp, r7
 80078a4:	bd80      	pop	{r7, pc}
 80078a6:	bf00      	nop
 80078a8:	1ff80000 	.word	0x1ff80000

080078ac <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80078ac:	b480      	push	{r7}
 80078ae:	b087      	sub	sp, #28
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	60f8      	str	r0, [r7, #12]
 80078b4:	60b9      	str	r1, [r7, #8]
 80078b6:	4613      	mov	r3, r2
 80078b8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80078be:	68bb      	ldr	r3, [r7, #8]
 80078c0:	781b      	ldrb	r3, [r3, #0]
 80078c2:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80078c4:	68bb      	ldr	r3, [r7, #8]
 80078c6:	785b      	ldrb	r3, [r3, #1]
 80078c8:	2b01      	cmp	r3, #1
 80078ca:	f040 80cd 	bne.w	8007a68 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80078ce:	68bb      	ldr	r3, [r7, #8]
 80078d0:	695b      	ldr	r3, [r3, #20]
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d132      	bne.n	800793c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80078d6:	693b      	ldr	r3, [r7, #16]
 80078d8:	015a      	lsls	r2, r3, #5
 80078da:	697b      	ldr	r3, [r7, #20]
 80078dc:	4413      	add	r3, r2
 80078de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80078e2:	691b      	ldr	r3, [r3, #16]
 80078e4:	693a      	ldr	r2, [r7, #16]
 80078e6:	0151      	lsls	r1, r2, #5
 80078e8:	697a      	ldr	r2, [r7, #20]
 80078ea:	440a      	add	r2, r1
 80078ec:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80078f0:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80078f4:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80078f8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80078fa:	693b      	ldr	r3, [r7, #16]
 80078fc:	015a      	lsls	r2, r3, #5
 80078fe:	697b      	ldr	r3, [r7, #20]
 8007900:	4413      	add	r3, r2
 8007902:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007906:	691b      	ldr	r3, [r3, #16]
 8007908:	693a      	ldr	r2, [r7, #16]
 800790a:	0151      	lsls	r1, r2, #5
 800790c:	697a      	ldr	r2, [r7, #20]
 800790e:	440a      	add	r2, r1
 8007910:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007914:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007918:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800791a:	693b      	ldr	r3, [r7, #16]
 800791c:	015a      	lsls	r2, r3, #5
 800791e:	697b      	ldr	r3, [r7, #20]
 8007920:	4413      	add	r3, r2
 8007922:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007926:	691b      	ldr	r3, [r3, #16]
 8007928:	693a      	ldr	r2, [r7, #16]
 800792a:	0151      	lsls	r1, r2, #5
 800792c:	697a      	ldr	r2, [r7, #20]
 800792e:	440a      	add	r2, r1
 8007930:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007934:	0cdb      	lsrs	r3, r3, #19
 8007936:	04db      	lsls	r3, r3, #19
 8007938:	6113      	str	r3, [r2, #16]
 800793a:	e04e      	b.n	80079da <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800793c:	693b      	ldr	r3, [r7, #16]
 800793e:	015a      	lsls	r2, r3, #5
 8007940:	697b      	ldr	r3, [r7, #20]
 8007942:	4413      	add	r3, r2
 8007944:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007948:	691b      	ldr	r3, [r3, #16]
 800794a:	693a      	ldr	r2, [r7, #16]
 800794c:	0151      	lsls	r1, r2, #5
 800794e:	697a      	ldr	r2, [r7, #20]
 8007950:	440a      	add	r2, r1
 8007952:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007956:	0cdb      	lsrs	r3, r3, #19
 8007958:	04db      	lsls	r3, r3, #19
 800795a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800795c:	693b      	ldr	r3, [r7, #16]
 800795e:	015a      	lsls	r2, r3, #5
 8007960:	697b      	ldr	r3, [r7, #20]
 8007962:	4413      	add	r3, r2
 8007964:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007968:	691b      	ldr	r3, [r3, #16]
 800796a:	693a      	ldr	r2, [r7, #16]
 800796c:	0151      	lsls	r1, r2, #5
 800796e:	697a      	ldr	r2, [r7, #20]
 8007970:	440a      	add	r2, r1
 8007972:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007976:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800797a:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800797e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8007980:	68bb      	ldr	r3, [r7, #8]
 8007982:	695a      	ldr	r2, [r3, #20]
 8007984:	68bb      	ldr	r3, [r7, #8]
 8007986:	689b      	ldr	r3, [r3, #8]
 8007988:	429a      	cmp	r2, r3
 800798a:	d903      	bls.n	8007994 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800798c:	68bb      	ldr	r3, [r7, #8]
 800798e:	689a      	ldr	r2, [r3, #8]
 8007990:	68bb      	ldr	r3, [r7, #8]
 8007992:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007994:	693b      	ldr	r3, [r7, #16]
 8007996:	015a      	lsls	r2, r3, #5
 8007998:	697b      	ldr	r3, [r7, #20]
 800799a:	4413      	add	r3, r2
 800799c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80079a0:	691b      	ldr	r3, [r3, #16]
 80079a2:	693a      	ldr	r2, [r7, #16]
 80079a4:	0151      	lsls	r1, r2, #5
 80079a6:	697a      	ldr	r2, [r7, #20]
 80079a8:	440a      	add	r2, r1
 80079aa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80079ae:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80079b2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80079b4:	693b      	ldr	r3, [r7, #16]
 80079b6:	015a      	lsls	r2, r3, #5
 80079b8:	697b      	ldr	r3, [r7, #20]
 80079ba:	4413      	add	r3, r2
 80079bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80079c0:	691a      	ldr	r2, [r3, #16]
 80079c2:	68bb      	ldr	r3, [r7, #8]
 80079c4:	695b      	ldr	r3, [r3, #20]
 80079c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80079ca:	6939      	ldr	r1, [r7, #16]
 80079cc:	0148      	lsls	r0, r1, #5
 80079ce:	6979      	ldr	r1, [r7, #20]
 80079d0:	4401      	add	r1, r0
 80079d2:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80079d6:	4313      	orrs	r3, r2
 80079d8:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80079da:	79fb      	ldrb	r3, [r7, #7]
 80079dc:	2b01      	cmp	r3, #1
 80079de:	d11e      	bne.n	8007a1e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80079e0:	68bb      	ldr	r3, [r7, #8]
 80079e2:	691b      	ldr	r3, [r3, #16]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d009      	beq.n	80079fc <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80079e8:	693b      	ldr	r3, [r7, #16]
 80079ea:	015a      	lsls	r2, r3, #5
 80079ec:	697b      	ldr	r3, [r7, #20]
 80079ee:	4413      	add	r3, r2
 80079f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80079f4:	461a      	mov	r2, r3
 80079f6:	68bb      	ldr	r3, [r7, #8]
 80079f8:	691b      	ldr	r3, [r3, #16]
 80079fa:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80079fc:	693b      	ldr	r3, [r7, #16]
 80079fe:	015a      	lsls	r2, r3, #5
 8007a00:	697b      	ldr	r3, [r7, #20]
 8007a02:	4413      	add	r3, r2
 8007a04:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	693a      	ldr	r2, [r7, #16]
 8007a0c:	0151      	lsls	r1, r2, #5
 8007a0e:	697a      	ldr	r2, [r7, #20]
 8007a10:	440a      	add	r2, r1
 8007a12:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007a16:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8007a1a:	6013      	str	r3, [r2, #0]
 8007a1c:	e092      	b.n	8007b44 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007a1e:	693b      	ldr	r3, [r7, #16]
 8007a20:	015a      	lsls	r2, r3, #5
 8007a22:	697b      	ldr	r3, [r7, #20]
 8007a24:	4413      	add	r3, r2
 8007a26:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	693a      	ldr	r2, [r7, #16]
 8007a2e:	0151      	lsls	r1, r2, #5
 8007a30:	697a      	ldr	r2, [r7, #20]
 8007a32:	440a      	add	r2, r1
 8007a34:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007a38:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8007a3c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8007a3e:	68bb      	ldr	r3, [r7, #8]
 8007a40:	695b      	ldr	r3, [r3, #20]
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d07e      	beq.n	8007b44 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007a46:	697b      	ldr	r3, [r7, #20]
 8007a48:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007a4c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007a4e:	68bb      	ldr	r3, [r7, #8]
 8007a50:	781b      	ldrb	r3, [r3, #0]
 8007a52:	f003 030f 	and.w	r3, r3, #15
 8007a56:	2101      	movs	r1, #1
 8007a58:	fa01 f303 	lsl.w	r3, r1, r3
 8007a5c:	6979      	ldr	r1, [r7, #20]
 8007a5e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007a62:	4313      	orrs	r3, r2
 8007a64:	634b      	str	r3, [r1, #52]	@ 0x34
 8007a66:	e06d      	b.n	8007b44 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007a68:	693b      	ldr	r3, [r7, #16]
 8007a6a:	015a      	lsls	r2, r3, #5
 8007a6c:	697b      	ldr	r3, [r7, #20]
 8007a6e:	4413      	add	r3, r2
 8007a70:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a74:	691b      	ldr	r3, [r3, #16]
 8007a76:	693a      	ldr	r2, [r7, #16]
 8007a78:	0151      	lsls	r1, r2, #5
 8007a7a:	697a      	ldr	r2, [r7, #20]
 8007a7c:	440a      	add	r2, r1
 8007a7e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007a82:	0cdb      	lsrs	r3, r3, #19
 8007a84:	04db      	lsls	r3, r3, #19
 8007a86:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007a88:	693b      	ldr	r3, [r7, #16]
 8007a8a:	015a      	lsls	r2, r3, #5
 8007a8c:	697b      	ldr	r3, [r7, #20]
 8007a8e:	4413      	add	r3, r2
 8007a90:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a94:	691b      	ldr	r3, [r3, #16]
 8007a96:	693a      	ldr	r2, [r7, #16]
 8007a98:	0151      	lsls	r1, r2, #5
 8007a9a:	697a      	ldr	r2, [r7, #20]
 8007a9c:	440a      	add	r2, r1
 8007a9e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007aa2:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8007aa6:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8007aaa:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8007aac:	68bb      	ldr	r3, [r7, #8]
 8007aae:	695b      	ldr	r3, [r3, #20]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d003      	beq.n	8007abc <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8007ab4:	68bb      	ldr	r3, [r7, #8]
 8007ab6:	689a      	ldr	r2, [r3, #8]
 8007ab8:	68bb      	ldr	r3, [r7, #8]
 8007aba:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007abc:	693b      	ldr	r3, [r7, #16]
 8007abe:	015a      	lsls	r2, r3, #5
 8007ac0:	697b      	ldr	r3, [r7, #20]
 8007ac2:	4413      	add	r3, r2
 8007ac4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ac8:	691b      	ldr	r3, [r3, #16]
 8007aca:	693a      	ldr	r2, [r7, #16]
 8007acc:	0151      	lsls	r1, r2, #5
 8007ace:	697a      	ldr	r2, [r7, #20]
 8007ad0:	440a      	add	r2, r1
 8007ad2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007ad6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007ada:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8007adc:	693b      	ldr	r3, [r7, #16]
 8007ade:	015a      	lsls	r2, r3, #5
 8007ae0:	697b      	ldr	r3, [r7, #20]
 8007ae2:	4413      	add	r3, r2
 8007ae4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ae8:	691a      	ldr	r2, [r3, #16]
 8007aea:	68bb      	ldr	r3, [r7, #8]
 8007aec:	689b      	ldr	r3, [r3, #8]
 8007aee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007af2:	6939      	ldr	r1, [r7, #16]
 8007af4:	0148      	lsls	r0, r1, #5
 8007af6:	6979      	ldr	r1, [r7, #20]
 8007af8:	4401      	add	r1, r0
 8007afa:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007afe:	4313      	orrs	r3, r2
 8007b00:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8007b02:	79fb      	ldrb	r3, [r7, #7]
 8007b04:	2b01      	cmp	r3, #1
 8007b06:	d10d      	bne.n	8007b24 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007b08:	68bb      	ldr	r3, [r7, #8]
 8007b0a:	68db      	ldr	r3, [r3, #12]
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d009      	beq.n	8007b24 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007b10:	68bb      	ldr	r3, [r7, #8]
 8007b12:	68d9      	ldr	r1, [r3, #12]
 8007b14:	693b      	ldr	r3, [r7, #16]
 8007b16:	015a      	lsls	r2, r3, #5
 8007b18:	697b      	ldr	r3, [r7, #20]
 8007b1a:	4413      	add	r3, r2
 8007b1c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b20:	460a      	mov	r2, r1
 8007b22:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007b24:	693b      	ldr	r3, [r7, #16]
 8007b26:	015a      	lsls	r2, r3, #5
 8007b28:	697b      	ldr	r3, [r7, #20]
 8007b2a:	4413      	add	r3, r2
 8007b2c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	693a      	ldr	r2, [r7, #16]
 8007b34:	0151      	lsls	r1, r2, #5
 8007b36:	697a      	ldr	r2, [r7, #20]
 8007b38:	440a      	add	r2, r1
 8007b3a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007b3e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8007b42:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007b44:	2300      	movs	r3, #0
}
 8007b46:	4618      	mov	r0, r3
 8007b48:	371c      	adds	r7, #28
 8007b4a:	46bd      	mov	sp, r7
 8007b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b50:	4770      	bx	lr

08007b52 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007b52:	b480      	push	{r7}
 8007b54:	b089      	sub	sp, #36	@ 0x24
 8007b56:	af00      	add	r7, sp, #0
 8007b58:	60f8      	str	r0, [r7, #12]
 8007b5a:	60b9      	str	r1, [r7, #8]
 8007b5c:	4611      	mov	r1, r2
 8007b5e:	461a      	mov	r2, r3
 8007b60:	460b      	mov	r3, r1
 8007b62:	71fb      	strb	r3, [r7, #7]
 8007b64:	4613      	mov	r3, r2
 8007b66:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007b6c:	68bb      	ldr	r3, [r7, #8]
 8007b6e:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007b70:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d123      	bne.n	8007bc0 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007b78:	88bb      	ldrh	r3, [r7, #4]
 8007b7a:	3303      	adds	r3, #3
 8007b7c:	089b      	lsrs	r3, r3, #2
 8007b7e:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007b80:	2300      	movs	r3, #0
 8007b82:	61bb      	str	r3, [r7, #24]
 8007b84:	e018      	b.n	8007bb8 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007b86:	79fb      	ldrb	r3, [r7, #7]
 8007b88:	031a      	lsls	r2, r3, #12
 8007b8a:	697b      	ldr	r3, [r7, #20]
 8007b8c:	4413      	add	r3, r2
 8007b8e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007b92:	461a      	mov	r2, r3
 8007b94:	69fb      	ldr	r3, [r7, #28]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007b9a:	69fb      	ldr	r3, [r7, #28]
 8007b9c:	3301      	adds	r3, #1
 8007b9e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007ba0:	69fb      	ldr	r3, [r7, #28]
 8007ba2:	3301      	adds	r3, #1
 8007ba4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007ba6:	69fb      	ldr	r3, [r7, #28]
 8007ba8:	3301      	adds	r3, #1
 8007baa:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007bac:	69fb      	ldr	r3, [r7, #28]
 8007bae:	3301      	adds	r3, #1
 8007bb0:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007bb2:	69bb      	ldr	r3, [r7, #24]
 8007bb4:	3301      	adds	r3, #1
 8007bb6:	61bb      	str	r3, [r7, #24]
 8007bb8:	69ba      	ldr	r2, [r7, #24]
 8007bba:	693b      	ldr	r3, [r7, #16]
 8007bbc:	429a      	cmp	r2, r3
 8007bbe:	d3e2      	bcc.n	8007b86 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007bc0:	2300      	movs	r3, #0
}
 8007bc2:	4618      	mov	r0, r3
 8007bc4:	3724      	adds	r7, #36	@ 0x24
 8007bc6:	46bd      	mov	sp, r7
 8007bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bcc:	4770      	bx	lr

08007bce <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007bce:	b480      	push	{r7}
 8007bd0:	b08b      	sub	sp, #44	@ 0x2c
 8007bd2:	af00      	add	r7, sp, #0
 8007bd4:	60f8      	str	r0, [r7, #12]
 8007bd6:	60b9      	str	r1, [r7, #8]
 8007bd8:	4613      	mov	r3, r2
 8007bda:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007be0:	68bb      	ldr	r3, [r7, #8]
 8007be2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007be4:	88fb      	ldrh	r3, [r7, #6]
 8007be6:	089b      	lsrs	r3, r3, #2
 8007be8:	b29b      	uxth	r3, r3
 8007bea:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007bec:	88fb      	ldrh	r3, [r7, #6]
 8007bee:	f003 0303 	and.w	r3, r3, #3
 8007bf2:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007bf4:	2300      	movs	r3, #0
 8007bf6:	623b      	str	r3, [r7, #32]
 8007bf8:	e014      	b.n	8007c24 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007bfa:	69bb      	ldr	r3, [r7, #24]
 8007bfc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007c00:	681a      	ldr	r2, [r3, #0]
 8007c02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c04:	601a      	str	r2, [r3, #0]
    pDest++;
 8007c06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c08:	3301      	adds	r3, #1
 8007c0a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007c0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c0e:	3301      	adds	r3, #1
 8007c10:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007c12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c14:	3301      	adds	r3, #1
 8007c16:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007c18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c1a:	3301      	adds	r3, #1
 8007c1c:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8007c1e:	6a3b      	ldr	r3, [r7, #32]
 8007c20:	3301      	adds	r3, #1
 8007c22:	623b      	str	r3, [r7, #32]
 8007c24:	6a3a      	ldr	r2, [r7, #32]
 8007c26:	697b      	ldr	r3, [r7, #20]
 8007c28:	429a      	cmp	r2, r3
 8007c2a:	d3e6      	bcc.n	8007bfa <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007c2c:	8bfb      	ldrh	r3, [r7, #30]
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d01e      	beq.n	8007c70 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007c32:	2300      	movs	r3, #0
 8007c34:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007c36:	69bb      	ldr	r3, [r7, #24]
 8007c38:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007c3c:	461a      	mov	r2, r3
 8007c3e:	f107 0310 	add.w	r3, r7, #16
 8007c42:	6812      	ldr	r2, [r2, #0]
 8007c44:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007c46:	693a      	ldr	r2, [r7, #16]
 8007c48:	6a3b      	ldr	r3, [r7, #32]
 8007c4a:	b2db      	uxtb	r3, r3
 8007c4c:	00db      	lsls	r3, r3, #3
 8007c4e:	fa22 f303 	lsr.w	r3, r2, r3
 8007c52:	b2da      	uxtb	r2, r3
 8007c54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c56:	701a      	strb	r2, [r3, #0]
      i++;
 8007c58:	6a3b      	ldr	r3, [r7, #32]
 8007c5a:	3301      	adds	r3, #1
 8007c5c:	623b      	str	r3, [r7, #32]
      pDest++;
 8007c5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c60:	3301      	adds	r3, #1
 8007c62:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8007c64:	8bfb      	ldrh	r3, [r7, #30]
 8007c66:	3b01      	subs	r3, #1
 8007c68:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007c6a:	8bfb      	ldrh	r3, [r7, #30]
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d1ea      	bne.n	8007c46 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007c70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007c72:	4618      	mov	r0, r3
 8007c74:	372c      	adds	r7, #44	@ 0x2c
 8007c76:	46bd      	mov	sp, r7
 8007c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7c:	4770      	bx	lr

08007c7e <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007c7e:	b480      	push	{r7}
 8007c80:	b085      	sub	sp, #20
 8007c82:	af00      	add	r7, sp, #0
 8007c84:	6078      	str	r0, [r7, #4]
 8007c86:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007c8c:	683b      	ldr	r3, [r7, #0]
 8007c8e:	781b      	ldrb	r3, [r3, #0]
 8007c90:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007c92:	683b      	ldr	r3, [r7, #0]
 8007c94:	785b      	ldrb	r3, [r3, #1]
 8007c96:	2b01      	cmp	r3, #1
 8007c98:	d12c      	bne.n	8007cf4 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007c9a:	68bb      	ldr	r3, [r7, #8]
 8007c9c:	015a      	lsls	r2, r3, #5
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	4413      	add	r3, r2
 8007ca2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	db12      	blt.n	8007cd2 <USB_EPSetStall+0x54>
 8007cac:	68bb      	ldr	r3, [r7, #8]
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d00f      	beq.n	8007cd2 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007cb2:	68bb      	ldr	r3, [r7, #8]
 8007cb4:	015a      	lsls	r2, r3, #5
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	4413      	add	r3, r2
 8007cba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	68ba      	ldr	r2, [r7, #8]
 8007cc2:	0151      	lsls	r1, r2, #5
 8007cc4:	68fa      	ldr	r2, [r7, #12]
 8007cc6:	440a      	add	r2, r1
 8007cc8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007ccc:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007cd0:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007cd2:	68bb      	ldr	r3, [r7, #8]
 8007cd4:	015a      	lsls	r2, r3, #5
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	4413      	add	r3, r2
 8007cda:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	68ba      	ldr	r2, [r7, #8]
 8007ce2:	0151      	lsls	r1, r2, #5
 8007ce4:	68fa      	ldr	r2, [r7, #12]
 8007ce6:	440a      	add	r2, r1
 8007ce8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007cec:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007cf0:	6013      	str	r3, [r2, #0]
 8007cf2:	e02b      	b.n	8007d4c <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007cf4:	68bb      	ldr	r3, [r7, #8]
 8007cf6:	015a      	lsls	r2, r3, #5
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	4413      	add	r3, r2
 8007cfc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	db12      	blt.n	8007d2c <USB_EPSetStall+0xae>
 8007d06:	68bb      	ldr	r3, [r7, #8]
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d00f      	beq.n	8007d2c <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007d0c:	68bb      	ldr	r3, [r7, #8]
 8007d0e:	015a      	lsls	r2, r3, #5
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	4413      	add	r3, r2
 8007d14:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	68ba      	ldr	r2, [r7, #8]
 8007d1c:	0151      	lsls	r1, r2, #5
 8007d1e:	68fa      	ldr	r2, [r7, #12]
 8007d20:	440a      	add	r2, r1
 8007d22:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007d26:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007d2a:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007d2c:	68bb      	ldr	r3, [r7, #8]
 8007d2e:	015a      	lsls	r2, r3, #5
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	4413      	add	r3, r2
 8007d34:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	68ba      	ldr	r2, [r7, #8]
 8007d3c:	0151      	lsls	r1, r2, #5
 8007d3e:	68fa      	ldr	r2, [r7, #12]
 8007d40:	440a      	add	r2, r1
 8007d42:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007d46:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007d4a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007d4c:	2300      	movs	r3, #0
}
 8007d4e:	4618      	mov	r0, r3
 8007d50:	3714      	adds	r7, #20
 8007d52:	46bd      	mov	sp, r7
 8007d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d58:	4770      	bx	lr

08007d5a <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007d5a:	b480      	push	{r7}
 8007d5c:	b085      	sub	sp, #20
 8007d5e:	af00      	add	r7, sp, #0
 8007d60:	6078      	str	r0, [r7, #4]
 8007d62:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007d68:	683b      	ldr	r3, [r7, #0]
 8007d6a:	781b      	ldrb	r3, [r3, #0]
 8007d6c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007d6e:	683b      	ldr	r3, [r7, #0]
 8007d70:	785b      	ldrb	r3, [r3, #1]
 8007d72:	2b01      	cmp	r3, #1
 8007d74:	d128      	bne.n	8007dc8 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007d76:	68bb      	ldr	r3, [r7, #8]
 8007d78:	015a      	lsls	r2, r3, #5
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	4413      	add	r3, r2
 8007d7e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	68ba      	ldr	r2, [r7, #8]
 8007d86:	0151      	lsls	r1, r2, #5
 8007d88:	68fa      	ldr	r2, [r7, #12]
 8007d8a:	440a      	add	r2, r1
 8007d8c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007d90:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007d94:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007d96:	683b      	ldr	r3, [r7, #0]
 8007d98:	78db      	ldrb	r3, [r3, #3]
 8007d9a:	2b03      	cmp	r3, #3
 8007d9c:	d003      	beq.n	8007da6 <USB_EPClearStall+0x4c>
 8007d9e:	683b      	ldr	r3, [r7, #0]
 8007da0:	78db      	ldrb	r3, [r3, #3]
 8007da2:	2b02      	cmp	r3, #2
 8007da4:	d138      	bne.n	8007e18 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007da6:	68bb      	ldr	r3, [r7, #8]
 8007da8:	015a      	lsls	r2, r3, #5
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	4413      	add	r3, r2
 8007dae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	68ba      	ldr	r2, [r7, #8]
 8007db6:	0151      	lsls	r1, r2, #5
 8007db8:	68fa      	ldr	r2, [r7, #12]
 8007dba:	440a      	add	r2, r1
 8007dbc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007dc0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007dc4:	6013      	str	r3, [r2, #0]
 8007dc6:	e027      	b.n	8007e18 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007dc8:	68bb      	ldr	r3, [r7, #8]
 8007dca:	015a      	lsls	r2, r3, #5
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	4413      	add	r3, r2
 8007dd0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	68ba      	ldr	r2, [r7, #8]
 8007dd8:	0151      	lsls	r1, r2, #5
 8007dda:	68fa      	ldr	r2, [r7, #12]
 8007ddc:	440a      	add	r2, r1
 8007dde:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007de2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007de6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007de8:	683b      	ldr	r3, [r7, #0]
 8007dea:	78db      	ldrb	r3, [r3, #3]
 8007dec:	2b03      	cmp	r3, #3
 8007dee:	d003      	beq.n	8007df8 <USB_EPClearStall+0x9e>
 8007df0:	683b      	ldr	r3, [r7, #0]
 8007df2:	78db      	ldrb	r3, [r3, #3]
 8007df4:	2b02      	cmp	r3, #2
 8007df6:	d10f      	bne.n	8007e18 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007df8:	68bb      	ldr	r3, [r7, #8]
 8007dfa:	015a      	lsls	r2, r3, #5
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	4413      	add	r3, r2
 8007e00:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	68ba      	ldr	r2, [r7, #8]
 8007e08:	0151      	lsls	r1, r2, #5
 8007e0a:	68fa      	ldr	r2, [r7, #12]
 8007e0c:	440a      	add	r2, r1
 8007e0e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007e12:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007e16:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007e18:	2300      	movs	r3, #0
}
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	3714      	adds	r7, #20
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e24:	4770      	bx	lr

08007e26 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007e26:	b480      	push	{r7}
 8007e28:	b085      	sub	sp, #20
 8007e2a:	af00      	add	r7, sp, #0
 8007e2c:	6078      	str	r0, [r7, #4]
 8007e2e:	460b      	mov	r3, r1
 8007e30:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	68fa      	ldr	r2, [r7, #12]
 8007e40:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007e44:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8007e48:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007e50:	681a      	ldr	r2, [r3, #0]
 8007e52:	78fb      	ldrb	r3, [r7, #3]
 8007e54:	011b      	lsls	r3, r3, #4
 8007e56:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8007e5a:	68f9      	ldr	r1, [r7, #12]
 8007e5c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007e60:	4313      	orrs	r3, r2
 8007e62:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007e64:	2300      	movs	r3, #0
}
 8007e66:	4618      	mov	r0, r3
 8007e68:	3714      	adds	r7, #20
 8007e6a:	46bd      	mov	sp, r7
 8007e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e70:	4770      	bx	lr

08007e72 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007e72:	b480      	push	{r7}
 8007e74:	b085      	sub	sp, #20
 8007e76:	af00      	add	r7, sp, #0
 8007e78:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	68fa      	ldr	r2, [r7, #12]
 8007e88:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007e8c:	f023 0303 	bic.w	r3, r3, #3
 8007e90:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007e98:	685b      	ldr	r3, [r3, #4]
 8007e9a:	68fa      	ldr	r2, [r7, #12]
 8007e9c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007ea0:	f023 0302 	bic.w	r3, r3, #2
 8007ea4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007ea6:	2300      	movs	r3, #0
}
 8007ea8:	4618      	mov	r0, r3
 8007eaa:	3714      	adds	r7, #20
 8007eac:	46bd      	mov	sp, r7
 8007eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb2:	4770      	bx	lr

08007eb4 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007eb4:	b480      	push	{r7}
 8007eb6:	b085      	sub	sp, #20
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	68fa      	ldr	r2, [r7, #12]
 8007eca:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007ece:	f023 0303 	bic.w	r3, r3, #3
 8007ed2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007eda:	685b      	ldr	r3, [r3, #4]
 8007edc:	68fa      	ldr	r2, [r7, #12]
 8007ede:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007ee2:	f043 0302 	orr.w	r3, r3, #2
 8007ee6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007ee8:	2300      	movs	r3, #0
}
 8007eea:	4618      	mov	r0, r3
 8007eec:	3714      	adds	r7, #20
 8007eee:	46bd      	mov	sp, r7
 8007ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef4:	4770      	bx	lr

08007ef6 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007ef6:	b480      	push	{r7}
 8007ef8:	b085      	sub	sp, #20
 8007efa:	af00      	add	r7, sp, #0
 8007efc:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	695b      	ldr	r3, [r3, #20]
 8007f02:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	699b      	ldr	r3, [r3, #24]
 8007f08:	68fa      	ldr	r2, [r7, #12]
 8007f0a:	4013      	ands	r3, r2
 8007f0c:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007f0e:	68fb      	ldr	r3, [r7, #12]
}
 8007f10:	4618      	mov	r0, r3
 8007f12:	3714      	adds	r7, #20
 8007f14:	46bd      	mov	sp, r7
 8007f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1a:	4770      	bx	lr

08007f1c <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007f1c:	b480      	push	{r7}
 8007f1e:	b085      	sub	sp, #20
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007f2e:	699b      	ldr	r3, [r3, #24]
 8007f30:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007f38:	69db      	ldr	r3, [r3, #28]
 8007f3a:	68ba      	ldr	r2, [r7, #8]
 8007f3c:	4013      	ands	r3, r2
 8007f3e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007f40:	68bb      	ldr	r3, [r7, #8]
 8007f42:	0c1b      	lsrs	r3, r3, #16
}
 8007f44:	4618      	mov	r0, r3
 8007f46:	3714      	adds	r7, #20
 8007f48:	46bd      	mov	sp, r7
 8007f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4e:	4770      	bx	lr

08007f50 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007f50:	b480      	push	{r7}
 8007f52:	b085      	sub	sp, #20
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007f62:	699b      	ldr	r3, [r3, #24]
 8007f64:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007f6c:	69db      	ldr	r3, [r3, #28]
 8007f6e:	68ba      	ldr	r2, [r7, #8]
 8007f70:	4013      	ands	r3, r2
 8007f72:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007f74:	68bb      	ldr	r3, [r7, #8]
 8007f76:	b29b      	uxth	r3, r3
}
 8007f78:	4618      	mov	r0, r3
 8007f7a:	3714      	adds	r7, #20
 8007f7c:	46bd      	mov	sp, r7
 8007f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f82:	4770      	bx	lr

08007f84 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007f84:	b480      	push	{r7}
 8007f86:	b085      	sub	sp, #20
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	6078      	str	r0, [r7, #4]
 8007f8c:	460b      	mov	r3, r1
 8007f8e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007f94:	78fb      	ldrb	r3, [r7, #3]
 8007f96:	015a      	lsls	r2, r3, #5
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	4413      	add	r3, r2
 8007f9c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007fa0:	689b      	ldr	r3, [r3, #8]
 8007fa2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007faa:	695b      	ldr	r3, [r3, #20]
 8007fac:	68ba      	ldr	r2, [r7, #8]
 8007fae:	4013      	ands	r3, r2
 8007fb0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007fb2:	68bb      	ldr	r3, [r7, #8]
}
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	3714      	adds	r7, #20
 8007fb8:	46bd      	mov	sp, r7
 8007fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fbe:	4770      	bx	lr

08007fc0 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007fc0:	b480      	push	{r7}
 8007fc2:	b087      	sub	sp, #28
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	6078      	str	r0, [r7, #4]
 8007fc8:	460b      	mov	r3, r1
 8007fca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007fd0:	697b      	ldr	r3, [r7, #20]
 8007fd2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007fd6:	691b      	ldr	r3, [r3, #16]
 8007fd8:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007fda:	697b      	ldr	r3, [r7, #20]
 8007fdc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007fe0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007fe2:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007fe4:	78fb      	ldrb	r3, [r7, #3]
 8007fe6:	f003 030f 	and.w	r3, r3, #15
 8007fea:	68fa      	ldr	r2, [r7, #12]
 8007fec:	fa22 f303 	lsr.w	r3, r2, r3
 8007ff0:	01db      	lsls	r3, r3, #7
 8007ff2:	b2db      	uxtb	r3, r3
 8007ff4:	693a      	ldr	r2, [r7, #16]
 8007ff6:	4313      	orrs	r3, r2
 8007ff8:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007ffa:	78fb      	ldrb	r3, [r7, #3]
 8007ffc:	015a      	lsls	r2, r3, #5
 8007ffe:	697b      	ldr	r3, [r7, #20]
 8008000:	4413      	add	r3, r2
 8008002:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008006:	689b      	ldr	r3, [r3, #8]
 8008008:	693a      	ldr	r2, [r7, #16]
 800800a:	4013      	ands	r3, r2
 800800c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800800e:	68bb      	ldr	r3, [r7, #8]
}
 8008010:	4618      	mov	r0, r3
 8008012:	371c      	adds	r7, #28
 8008014:	46bd      	mov	sp, r7
 8008016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800801a:	4770      	bx	lr

0800801c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800801c:	b480      	push	{r7}
 800801e:	b083      	sub	sp, #12
 8008020:	af00      	add	r7, sp, #0
 8008022:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	695b      	ldr	r3, [r3, #20]
 8008028:	f003 0301 	and.w	r3, r3, #1
}
 800802c:	4618      	mov	r0, r3
 800802e:	370c      	adds	r7, #12
 8008030:	46bd      	mov	sp, r7
 8008032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008036:	4770      	bx	lr

08008038 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8008038:	b480      	push	{r7}
 800803a:	b085      	sub	sp, #20
 800803c:	af00      	add	r7, sp, #0
 800803e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	68fa      	ldr	r2, [r7, #12]
 800804e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008052:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8008056:	f023 0307 	bic.w	r3, r3, #7
 800805a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008062:	685b      	ldr	r3, [r3, #4]
 8008064:	68fa      	ldr	r2, [r7, #12]
 8008066:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800806a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800806e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008070:	2300      	movs	r3, #0
}
 8008072:	4618      	mov	r0, r3
 8008074:	3714      	adds	r7, #20
 8008076:	46bd      	mov	sp, r7
 8008078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800807c:	4770      	bx	lr
	...

08008080 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8008080:	b480      	push	{r7}
 8008082:	b087      	sub	sp, #28
 8008084:	af00      	add	r7, sp, #0
 8008086:	60f8      	str	r0, [r7, #12]
 8008088:	460b      	mov	r3, r1
 800808a:	607a      	str	r2, [r7, #4]
 800808c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	333c      	adds	r3, #60	@ 0x3c
 8008096:	3304      	adds	r3, #4
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800809c:	693b      	ldr	r3, [r7, #16]
 800809e:	4a26      	ldr	r2, [pc, #152]	@ (8008138 <USB_EP0_OutStart+0xb8>)
 80080a0:	4293      	cmp	r3, r2
 80080a2:	d90a      	bls.n	80080ba <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80080a4:	697b      	ldr	r3, [r7, #20]
 80080a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80080b0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80080b4:	d101      	bne.n	80080ba <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80080b6:	2300      	movs	r3, #0
 80080b8:	e037      	b.n	800812a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80080ba:	697b      	ldr	r3, [r7, #20]
 80080bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80080c0:	461a      	mov	r2, r3
 80080c2:	2300      	movs	r3, #0
 80080c4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80080c6:	697b      	ldr	r3, [r7, #20]
 80080c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80080cc:	691b      	ldr	r3, [r3, #16]
 80080ce:	697a      	ldr	r2, [r7, #20]
 80080d0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80080d4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80080d8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80080da:	697b      	ldr	r3, [r7, #20]
 80080dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80080e0:	691b      	ldr	r3, [r3, #16]
 80080e2:	697a      	ldr	r2, [r7, #20]
 80080e4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80080e8:	f043 0318 	orr.w	r3, r3, #24
 80080ec:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80080ee:	697b      	ldr	r3, [r7, #20]
 80080f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80080f4:	691b      	ldr	r3, [r3, #16]
 80080f6:	697a      	ldr	r2, [r7, #20]
 80080f8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80080fc:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8008100:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8008102:	7afb      	ldrb	r3, [r7, #11]
 8008104:	2b01      	cmp	r3, #1
 8008106:	d10f      	bne.n	8008128 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8008108:	697b      	ldr	r3, [r7, #20]
 800810a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800810e:	461a      	mov	r2, r3
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8008114:	697b      	ldr	r3, [r7, #20]
 8008116:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	697a      	ldr	r2, [r7, #20]
 800811e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008122:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8008126:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008128:	2300      	movs	r3, #0
}
 800812a:	4618      	mov	r0, r3
 800812c:	371c      	adds	r7, #28
 800812e:	46bd      	mov	sp, r7
 8008130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008134:	4770      	bx	lr
 8008136:	bf00      	nop
 8008138:	4f54300a 	.word	0x4f54300a

0800813c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800813c:	b480      	push	{r7}
 800813e:	b085      	sub	sp, #20
 8008140:	af00      	add	r7, sp, #0
 8008142:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008144:	2300      	movs	r3, #0
 8008146:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	3301      	adds	r3, #1
 800814c:	60fb      	str	r3, [r7, #12]
 800814e:	4a13      	ldr	r2, [pc, #76]	@ (800819c <USB_CoreReset+0x60>)
 8008150:	4293      	cmp	r3, r2
 8008152:	d901      	bls.n	8008158 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8008154:	2303      	movs	r3, #3
 8008156:	e01a      	b.n	800818e <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	691b      	ldr	r3, [r3, #16]
 800815c:	2b00      	cmp	r3, #0
 800815e:	daf3      	bge.n	8008148 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008160:	2300      	movs	r3, #0
 8008162:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	691b      	ldr	r3, [r3, #16]
 8008168:	f043 0201 	orr.w	r2, r3, #1
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	3301      	adds	r3, #1
 8008174:	60fb      	str	r3, [r7, #12]
 8008176:	4a09      	ldr	r2, [pc, #36]	@ (800819c <USB_CoreReset+0x60>)
 8008178:	4293      	cmp	r3, r2
 800817a:	d901      	bls.n	8008180 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 800817c:	2303      	movs	r3, #3
 800817e:	e006      	b.n	800818e <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	691b      	ldr	r3, [r3, #16]
 8008184:	f003 0301 	and.w	r3, r3, #1
 8008188:	2b01      	cmp	r3, #1
 800818a:	d0f1      	beq.n	8008170 <USB_CoreReset+0x34>

  return HAL_OK;
 800818c:	2300      	movs	r3, #0
}
 800818e:	4618      	mov	r0, r3
 8008190:	3714      	adds	r7, #20
 8008192:	46bd      	mov	sp, r7
 8008194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008198:	4770      	bx	lr
 800819a:	bf00      	nop
 800819c:	00030d40 	.word	0x00030d40

080081a0 <__NVIC_SystemReset>:
{
 80081a0:	b480      	push	{r7}
 80081a2:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 80081a4:	f3bf 8f4f 	dsb	sy
}
 80081a8:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80081aa:	4b06      	ldr	r3, [pc, #24]	@ (80081c4 <__NVIC_SystemReset+0x24>)
 80081ac:	68db      	ldr	r3, [r3, #12]
 80081ae:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80081b2:	4904      	ldr	r1, [pc, #16]	@ (80081c4 <__NVIC_SystemReset+0x24>)
 80081b4:	4b04      	ldr	r3, [pc, #16]	@ (80081c8 <__NVIC_SystemReset+0x28>)
 80081b6:	4313      	orrs	r3, r2
 80081b8:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80081ba:	f3bf 8f4f 	dsb	sy
}
 80081be:	bf00      	nop
    __NOP();
 80081c0:	bf00      	nop
 80081c2:	e7fd      	b.n	80081c0 <__NVIC_SystemReset+0x20>
 80081c4:	e000ed00 	.word	0xe000ed00
 80081c8:	05fa0004 	.word	0x05fa0004

080081cc <USBD_DFU_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_DFU_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80081cc:	b580      	push	{r7, lr}
 80081ce:	b084      	sub	sp, #16
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	6078      	str	r0, [r7, #4]
 80081d4:	460b      	mov	r3, r1
 80081d6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_DFU_HandleTypeDef *hdfu;

  /* Allocate Audio structure */
  hdfu = USBD_malloc(sizeof(USBD_DFU_HandleTypeDef));
 80081d8:	f240 401c 	movw	r0, #1052	@ 0x41c
 80081dc:	f002 fc28 	bl	800aa30 <USBD_static_malloc>
 80081e0:	60f8      	str	r0, [r7, #12]

  if (hdfu == NULL)
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d105      	bne.n	80081f4 <USBD_DFU_Init+0x28>
  {
    pdev->pClassData = NULL;
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	2200      	movs	r2, #0
 80081ec:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    return (uint8_t)USBD_EMEM;
 80081f0:	2302      	movs	r3, #2
 80081f2:	e03f      	b.n	8008274 <USBD_DFU_Init+0xa8>
  }

  pdev->pClassData = (void *)hdfu;
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	68fa      	ldr	r2, [r7, #12]
 80081f8:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  hdfu->alt_setting = 0U;
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	2200      	movs	r2, #0
 8008200:	f8c3 240c 	str.w	r2, [r3, #1036]	@ 0x40c
  hdfu->data_ptr = USBD_DFU_APP_DEFAULT_ADD;
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800820a:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
  hdfu->wblock_num = 0U;
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	2200      	movs	r2, #0
 8008212:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdfu->wlength = 0U;
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	2200      	movs	r2, #0
 800821a:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404

  hdfu->manif_state = DFU_MANIFEST_COMPLETE;
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	2200      	movs	r2, #0
 8008222:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
  hdfu->dev_state = DFU_STATE_IDLE;
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	2202      	movs	r2, #2
 800822a:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418

  hdfu->dev_status[0] = DFU_ERROR_NONE;
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	2200      	movs	r2, #0
 8008232:	f883 2410 	strb.w	r2, [r3, #1040]	@ 0x410
  hdfu->dev_status[1] = 0U;
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	2200      	movs	r2, #0
 800823a:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
  hdfu->dev_status[2] = 0U;
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	2200      	movs	r2, #0
 8008242:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
  hdfu->dev_status[3] = 0U;
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	2200      	movs	r2, #0
 800824a:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
  hdfu->dev_status[4] = DFU_STATE_IDLE;
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	2202      	movs	r2, #2
 8008252:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
  hdfu->dev_status[5] = 0U;
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	2200      	movs	r2, #0
 800825a:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415

  /* Initialize Hardware layer */
  if (((USBD_DFU_MediaTypeDef *)pdev->pUserData)->Init() != USBD_OK)
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008264:	685b      	ldr	r3, [r3, #4]
 8008266:	4798      	blx	r3
 8008268:	4603      	mov	r3, r0
 800826a:	2b00      	cmp	r3, #0
 800826c:	d001      	beq.n	8008272 <USBD_DFU_Init+0xa6>
  {
    return (uint8_t)USBD_FAIL;
 800826e:	2303      	movs	r3, #3
 8008270:	e000      	b.n	8008274 <USBD_DFU_Init+0xa8>
  }

  return (uint8_t)USBD_OK;
 8008272:	2300      	movs	r3, #0
}
 8008274:	4618      	mov	r0, r3
 8008276:	3710      	adds	r7, #16
 8008278:	46bd      	mov	sp, r7
 800827a:	bd80      	pop	{r7, pc}

0800827c <USBD_DFU_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_DFU_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800827c:	b580      	push	{r7, lr}
 800827e:	b084      	sub	sp, #16
 8008280:	af00      	add	r7, sp, #0
 8008282:	6078      	str	r0, [r7, #4]
 8008284:	460b      	mov	r3, r1
 8008286:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_DFU_HandleTypeDef *hdfu;

  if (pdev->pClassData == NULL)
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800828e:	2b00      	cmp	r3, #0
 8008290:	d101      	bne.n	8008296 <USBD_DFU_DeInit+0x1a>
  {
    return (uint8_t)USBD_EMEM;
 8008292:	2302      	movs	r3, #2
 8008294:	e027      	b.n	80082e6 <USBD_DFU_DeInit+0x6a>
  }

  hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800829c:	60fb      	str	r3, [r7, #12]
  hdfu->wblock_num = 0U;
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	2200      	movs	r2, #0
 80082a2:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdfu->wlength = 0U;
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	2200      	movs	r2, #0
 80082aa:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404

  hdfu->dev_state = DFU_STATE_IDLE;
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	2202      	movs	r2, #2
 80082b2:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
  hdfu->dev_status[0] = DFU_ERROR_NONE;
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	2200      	movs	r2, #0
 80082ba:	f883 2410 	strb.w	r2, [r3, #1040]	@ 0x410
  hdfu->dev_status[4] = DFU_STATE_IDLE;
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	2202      	movs	r2, #2
 80082c2:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414

  /* DeInit  physical Interface components and Hardware Layer */
  ((USBD_DFU_MediaTypeDef *)pdev->pUserData)->DeInit();
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80082cc:	689b      	ldr	r3, [r3, #8]
 80082ce:	4798      	blx	r3
  USBD_free(pdev->pClassData);
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80082d6:	4618      	mov	r0, r3
 80082d8:	f002 fbb8 	bl	800aa4c <USBD_static_free>
  pdev->pClassData = NULL;
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	2200      	movs	r2, #0
 80082e0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  return (uint8_t)USBD_OK;
 80082e4:	2300      	movs	r3, #0
}
 80082e6:	4618      	mov	r0, r3
 80082e8:	3710      	adds	r7, #16
 80082ea:	46bd      	mov	sp, r7
 80082ec:	bd80      	pop	{r7, pc}
	...

080082f0 <USBD_DFU_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_DFU_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80082f0:	b580      	push	{r7, lr}
 80082f2:	b088      	sub	sp, #32
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	6078      	str	r0, [r7, #4]
 80082f8:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008300:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 8008302:	2300      	movs	r3, #0
 8008304:	77fb      	strb	r3, [r7, #31]
  uint8_t *pbuf = NULL;
 8008306:	2300      	movs	r3, #0
 8008308:	61bb      	str	r3, [r7, #24]
  uint16_t len = 0U;
 800830a:	2300      	movs	r3, #0
 800830c:	82fb      	strh	r3, [r7, #22]
  uint16_t status_info = 0U;
 800830e:	2300      	movs	r3, #0
 8008310:	81fb      	strh	r3, [r7, #14]

  if (hdfu == NULL)
 8008312:	693b      	ldr	r3, [r7, #16]
 8008314:	2b00      	cmp	r3, #0
 8008316:	d101      	bne.n	800831c <USBD_DFU_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 8008318:	2303      	movs	r3, #3
 800831a:	e0d5      	b.n	80084c8 <USBD_DFU_Setup+0x1d8>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800831c:	683b      	ldr	r3, [r7, #0]
 800831e:	781b      	ldrb	r3, [r3, #0]
 8008320:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008324:	2b00      	cmp	r3, #0
 8008326:	d03e      	beq.n	80083a6 <USBD_DFU_Setup+0xb6>
 8008328:	2b20      	cmp	r3, #32
 800832a:	f040 80c5 	bne.w	80084b8 <USBD_DFU_Setup+0x1c8>
  {
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 800832e:	683b      	ldr	r3, [r7, #0]
 8008330:	785b      	ldrb	r3, [r3, #1]
 8008332:	2b06      	cmp	r3, #6
 8008334:	d82f      	bhi.n	8008396 <USBD_DFU_Setup+0xa6>
 8008336:	a201      	add	r2, pc, #4	@ (adr r2, 800833c <USBD_DFU_Setup+0x4c>)
 8008338:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800833c:	0800838d 	.word	0x0800838d
 8008340:	08008359 	.word	0x08008359
 8008344:	08008363 	.word	0x08008363
 8008348:	0800836d 	.word	0x0800836d
 800834c:	08008375 	.word	0x08008375
 8008350:	0800837d 	.word	0x0800837d
 8008354:	08008385 	.word	0x08008385
      {
        case DFU_DNLOAD:
          DFU_Download(pdev, req);
 8008358:	6839      	ldr	r1, [r7, #0]
 800835a:	6878      	ldr	r0, [r7, #4]
 800835c:	f000 fa6c 	bl	8008838 <DFU_Download>
          break;
 8008360:	e020      	b.n	80083a4 <USBD_DFU_Setup+0xb4>

        case DFU_UPLOAD:
          DFU_Upload(pdev, req);
 8008362:	6839      	ldr	r1, [r7, #0]
 8008364:	6878      	ldr	r0, [r7, #4]
 8008366:	f000 fad3 	bl	8008910 <DFU_Upload>
          break;
 800836a:	e01b      	b.n	80083a4 <USBD_DFU_Setup+0xb4>

        case DFU_GETSTATUS:
          DFU_GetStatus(pdev);
 800836c:	6878      	ldr	r0, [r7, #4]
 800836e:	f000 fba9 	bl	8008ac4 <DFU_GetStatus>
          break;
 8008372:	e017      	b.n	80083a4 <USBD_DFU_Setup+0xb4>

        case DFU_CLRSTATUS:
          DFU_ClearStatus(pdev);
 8008374:	6878      	ldr	r0, [r7, #4]
 8008376:	f000 fc5b 	bl	8008c30 <DFU_ClearStatus>
          break;
 800837a:	e013      	b.n	80083a4 <USBD_DFU_Setup+0xb4>

        case DFU_GETSTATE:
          DFU_GetState(pdev);
 800837c:	6878      	ldr	r0, [r7, #4]
 800837e:	f000 fcab 	bl	8008cd8 <DFU_GetState>
          break;
 8008382:	e00f      	b.n	80083a4 <USBD_DFU_Setup+0xb4>

        case DFU_ABORT:
          DFU_Abort(pdev);
 8008384:	6878      	ldr	r0, [r7, #4]
 8008386:	f000 fcbf 	bl	8008d08 <DFU_Abort>
          break;
 800838a:	e00b      	b.n	80083a4 <USBD_DFU_Setup+0xb4>

        case DFU_DETACH:
          DFU_Detach(pdev, req);
 800838c:	6839      	ldr	r1, [r7, #0]
 800838e:	6878      	ldr	r0, [r7, #4]
 8008390:	f000 f9ee 	bl	8008770 <DFU_Detach>
          break;
 8008394:	e006      	b.n	80083a4 <USBD_DFU_Setup+0xb4>

        default:
          USBD_CtlError(pdev, req);
 8008396:	6839      	ldr	r1, [r7, #0]
 8008398:	6878      	ldr	r0, [r7, #4]
 800839a:	f001 fdfb 	bl	8009f94 <USBD_CtlError>
          ret = USBD_FAIL;
 800839e:	2303      	movs	r3, #3
 80083a0:	77fb      	strb	r3, [r7, #31]
          break;
 80083a2:	bf00      	nop
      }
      break;
 80083a4:	e08f      	b.n	80084c6 <USBD_DFU_Setup+0x1d6>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80083a6:	683b      	ldr	r3, [r7, #0]
 80083a8:	785b      	ldrb	r3, [r3, #1]
 80083aa:	2b0b      	cmp	r3, #11
 80083ac:	d87b      	bhi.n	80084a6 <USBD_DFU_Setup+0x1b6>
 80083ae:	a201      	add	r2, pc, #4	@ (adr r2, 80083b4 <USBD_DFU_Setup+0xc4>)
 80083b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083b4:	080083e5 	.word	0x080083e5
 80083b8:	080084b5 	.word	0x080084b5
 80083bc:	080084a7 	.word	0x080084a7
 80083c0:	080084a7 	.word	0x080084a7
 80083c4:	080084a7 	.word	0x080084a7
 80083c8:	080084a7 	.word	0x080084a7
 80083cc:	0800840f 	.word	0x0800840f
 80083d0:	080084a7 	.word	0x080084a7
 80083d4:	080084a7 	.word	0x080084a7
 80083d8:	080084a7 	.word	0x080084a7
 80083dc:	08008439 	.word	0x08008439
 80083e0:	08008465 	.word	0x08008465
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80083ea:	b2db      	uxtb	r3, r3
 80083ec:	2b03      	cmp	r3, #3
 80083ee:	d107      	bne.n	8008400 <USBD_DFU_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80083f0:	f107 030e 	add.w	r3, r7, #14
 80083f4:	2202      	movs	r2, #2
 80083f6:	4619      	mov	r1, r3
 80083f8:	6878      	ldr	r0, [r7, #4]
 80083fa:	f001 fe3c 	bl	800a076 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80083fe:	e05a      	b.n	80084b6 <USBD_DFU_Setup+0x1c6>
            USBD_CtlError(pdev, req);
 8008400:	6839      	ldr	r1, [r7, #0]
 8008402:	6878      	ldr	r0, [r7, #4]
 8008404:	f001 fdc6 	bl	8009f94 <USBD_CtlError>
            ret = USBD_FAIL;
 8008408:	2303      	movs	r3, #3
 800840a:	77fb      	strb	r3, [r7, #31]
          break;
 800840c:	e053      	b.n	80084b6 <USBD_DFU_Setup+0x1c6>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == DFU_DESCRIPTOR_TYPE)
 800840e:	683b      	ldr	r3, [r7, #0]
 8008410:	885b      	ldrh	r3, [r3, #2]
 8008412:	0a1b      	lsrs	r3, r3, #8
 8008414:	b29b      	uxth	r3, r3
 8008416:	2b21      	cmp	r3, #33	@ 0x21
 8008418:	d107      	bne.n	800842a <USBD_DFU_Setup+0x13a>
          {
            pbuf = USBD_DFU_CfgDesc + (9U * (USBD_DFU_MAX_ITF_NUM + 1U));
 800841a:	4b2d      	ldr	r3, [pc, #180]	@ (80084d0 <USBD_DFU_Setup+0x1e0>)
 800841c:	61bb      	str	r3, [r7, #24]
            len = MIN(USB_DFU_DESC_SIZ, req->wLength);
 800841e:	683b      	ldr	r3, [r7, #0]
 8008420:	88db      	ldrh	r3, [r3, #6]
 8008422:	2b09      	cmp	r3, #9
 8008424:	bf28      	it	cs
 8008426:	2309      	movcs	r3, #9
 8008428:	82fb      	strh	r3, [r7, #22]
          }

          (void)USBD_CtlSendData(pdev, pbuf, len);
 800842a:	8afb      	ldrh	r3, [r7, #22]
 800842c:	461a      	mov	r2, r3
 800842e:	69b9      	ldr	r1, [r7, #24]
 8008430:	6878      	ldr	r0, [r7, #4]
 8008432:	f001 fe20 	bl	800a076 <USBD_CtlSendData>
          break;
 8008436:	e03e      	b.n	80084b6 <USBD_DFU_Setup+0x1c6>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800843e:	b2db      	uxtb	r3, r3
 8008440:	2b03      	cmp	r3, #3
 8008442:	d108      	bne.n	8008456 <USBD_DFU_Setup+0x166>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hdfu->alt_setting, 1U);
 8008444:	693b      	ldr	r3, [r7, #16]
 8008446:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800844a:	2201      	movs	r2, #1
 800844c:	4619      	mov	r1, r3
 800844e:	6878      	ldr	r0, [r7, #4]
 8008450:	f001 fe11 	bl	800a076 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008454:	e02f      	b.n	80084b6 <USBD_DFU_Setup+0x1c6>
            USBD_CtlError(pdev, req);
 8008456:	6839      	ldr	r1, [r7, #0]
 8008458:	6878      	ldr	r0, [r7, #4]
 800845a:	f001 fd9b 	bl	8009f94 <USBD_CtlError>
            ret = USBD_FAIL;
 800845e:	2303      	movs	r3, #3
 8008460:	77fb      	strb	r3, [r7, #31]
          break;
 8008462:	e028      	b.n	80084b6 <USBD_DFU_Setup+0x1c6>

        case USB_REQ_SET_INTERFACE:
          if ((uint8_t)(req->wValue) < USBD_DFU_MAX_ITF_NUM)
 8008464:	683b      	ldr	r3, [r7, #0]
 8008466:	885b      	ldrh	r3, [r3, #2]
 8008468:	b2db      	uxtb	r3, r3
 800846a:	2b00      	cmp	r3, #0
 800846c:	d114      	bne.n	8008498 <USBD_DFU_Setup+0x1a8>
          {
            if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008474:	b2db      	uxtb	r3, r3
 8008476:	2b03      	cmp	r3, #3
 8008478:	d107      	bne.n	800848a <USBD_DFU_Setup+0x19a>
            {
              hdfu->alt_setting = (uint8_t)(req->wValue);
 800847a:	683b      	ldr	r3, [r7, #0]
 800847c:	885b      	ldrh	r3, [r3, #2]
 800847e:	b2db      	uxtb	r3, r3
 8008480:	461a      	mov	r2, r3
 8008482:	693b      	ldr	r3, [r7, #16]
 8008484:	f8c3 240c 	str.w	r2, [r3, #1036]	@ 0x40c
          {
            /* Call the error management function (command will be NAKed */
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008488:	e015      	b.n	80084b6 <USBD_DFU_Setup+0x1c6>
              USBD_CtlError(pdev, req);
 800848a:	6839      	ldr	r1, [r7, #0]
 800848c:	6878      	ldr	r0, [r7, #4]
 800848e:	f001 fd81 	bl	8009f94 <USBD_CtlError>
              ret = USBD_FAIL;
 8008492:	2303      	movs	r3, #3
 8008494:	77fb      	strb	r3, [r7, #31]
          break;
 8008496:	e00e      	b.n	80084b6 <USBD_DFU_Setup+0x1c6>
            USBD_CtlError(pdev, req);
 8008498:	6839      	ldr	r1, [r7, #0]
 800849a:	6878      	ldr	r0, [r7, #4]
 800849c:	f001 fd7a 	bl	8009f94 <USBD_CtlError>
            ret = USBD_FAIL;
 80084a0:	2303      	movs	r3, #3
 80084a2:	77fb      	strb	r3, [r7, #31]
          break;
 80084a4:	e007      	b.n	80084b6 <USBD_DFU_Setup+0x1c6>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80084a6:	6839      	ldr	r1, [r7, #0]
 80084a8:	6878      	ldr	r0, [r7, #4]
 80084aa:	f001 fd73 	bl	8009f94 <USBD_CtlError>
          ret = USBD_FAIL;
 80084ae:	2303      	movs	r3, #3
 80084b0:	77fb      	strb	r3, [r7, #31]
          break;
 80084b2:	e000      	b.n	80084b6 <USBD_DFU_Setup+0x1c6>
          break;
 80084b4:	bf00      	nop
      }
      break;
 80084b6:	e006      	b.n	80084c6 <USBD_DFU_Setup+0x1d6>

    default:
      USBD_CtlError(pdev, req);
 80084b8:	6839      	ldr	r1, [r7, #0]
 80084ba:	6878      	ldr	r0, [r7, #4]
 80084bc:	f001 fd6a 	bl	8009f94 <USBD_CtlError>
      ret = USBD_FAIL;
 80084c0:	2303      	movs	r3, #3
 80084c2:	77fb      	strb	r3, [r7, #31]
      break;
 80084c4:	bf00      	nop
  }

  return (uint8_t)ret;
 80084c6:	7ffb      	ldrb	r3, [r7, #31]
}
 80084c8:	4618      	mov	r0, r3
 80084ca:	3720      	adds	r7, #32
 80084cc:	46bd      	mov	sp, r7
 80084ce:	bd80      	pop	{r7, pc}
 80084d0:	2000005a 	.word	0x2000005a

080084d4 <USBD_DFU_GetCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_DFU_GetCfgDesc(uint16_t *length)
{
 80084d4:	b480      	push	{r7}
 80084d6:	b083      	sub	sp, #12
 80084d8:	af00      	add	r7, sp, #0
 80084da:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_DFU_CfgDesc);
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	221b      	movs	r2, #27
 80084e0:	801a      	strh	r2, [r3, #0]

  return USBD_DFU_CfgDesc;
 80084e2:	4b03      	ldr	r3, [pc, #12]	@ (80084f0 <USBD_DFU_GetCfgDesc+0x1c>)
}
 80084e4:	4618      	mov	r0, r3
 80084e6:	370c      	adds	r7, #12
 80084e8:	46bd      	mov	sp, r7
 80084ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ee:	4770      	bx	lr
 80084f0:	20000048 	.word	0x20000048

080084f4 <USBD_DFU_EP0_RxReady>:
  *         handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_DFU_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80084f4:	b480      	push	{r7}
 80084f6:	b083      	sub	sp, #12
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	6078      	str	r0, [r7, #4]
  UNUSED(pdev);

  return (uint8_t)USBD_OK;
 80084fc:	2300      	movs	r3, #0
}
 80084fe:	4618      	mov	r0, r3
 8008500:	370c      	adds	r7, #12
 8008502:	46bd      	mov	sp, r7
 8008504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008508:	4770      	bx	lr

0800850a <USBD_DFU_EP0_TxReady>:
  *         handle EP0 TRx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_DFU_EP0_TxReady(USBD_HandleTypeDef *pdev)
{
 800850a:	b580      	push	{r7, lr}
 800850c:	b088      	sub	sp, #32
 800850e:	af00      	add	r7, sp, #0
 8008510:	6078      	str	r0, [r7, #4]
  USBD_SetupReqTypedef req;
  uint32_t addr;
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008518:	61fb      	str	r3, [r7, #28]
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData;
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008520:	61bb      	str	r3, [r7, #24]

  if (hdfu == NULL)
 8008522:	69fb      	ldr	r3, [r7, #28]
 8008524:	2b00      	cmp	r3, #0
 8008526:	d101      	bne.n	800852c <USBD_DFU_EP0_TxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008528:	2303      	movs	r3, #3
 800852a:	e0ce      	b.n	80086ca <USBD_DFU_EP0_TxReady+0x1c0>
  }

  if (hdfu->dev_state == DFU_STATE_DNLOAD_BUSY)
 800852c:	69fb      	ldr	r3, [r7, #28]
 800852e:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 8008532:	2b04      	cmp	r3, #4
 8008534:	f040 80bd 	bne.w	80086b2 <USBD_DFU_EP0_TxReady+0x1a8>
  {
    /* Decode the Special Command */
    if (hdfu->wblock_num == 0U)
 8008538:	69fb      	ldr	r3, [r7, #28]
 800853a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 800853e:	2b00      	cmp	r3, #0
 8008540:	d17c      	bne.n	800863c <USBD_DFU_EP0_TxReady+0x132>
    {
      if (hdfu->wlength == 1U)
 8008542:	69fb      	ldr	r3, [r7, #28]
 8008544:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8008548:	2b01      	cmp	r3, #1
 800854a:	f000 8093 	beq.w	8008674 <USBD_DFU_EP0_TxReady+0x16a>
        if (hdfu->buffer.d8[0] == DFU_CMD_GETCOMMANDS)
        {
          /* Nothing to do */
        }
      }
      else if (hdfu->wlength == 5U)
 800854e:	69fb      	ldr	r3, [r7, #28]
 8008550:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8008554:	2b05      	cmp	r3, #5
 8008556:	d15e      	bne.n	8008616 <USBD_DFU_EP0_TxReady+0x10c>
      {
        if (hdfu->buffer.d8[0] == DFU_CMD_SETADDRESSPOINTER)
 8008558:	69fb      	ldr	r3, [r7, #28]
 800855a:	781b      	ldrb	r3, [r3, #0]
 800855c:	2b21      	cmp	r3, #33	@ 0x21
 800855e:	d124      	bne.n	80085aa <USBD_DFU_EP0_TxReady+0xa0>
        {
          hdfu->data_ptr = hdfu->buffer.d8[1];
 8008560:	69fb      	ldr	r3, [r7, #28]
 8008562:	785b      	ldrb	r3, [r3, #1]
 8008564:	461a      	mov	r2, r3
 8008566:	69fb      	ldr	r3, [r7, #28]
 8008568:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[2] << 8;
 800856c:	69fb      	ldr	r3, [r7, #28]
 800856e:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8008572:	69fb      	ldr	r3, [r7, #28]
 8008574:	789b      	ldrb	r3, [r3, #2]
 8008576:	021b      	lsls	r3, r3, #8
 8008578:	441a      	add	r2, r3
 800857a:	69fb      	ldr	r3, [r7, #28]
 800857c:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[3] << 16;
 8008580:	69fb      	ldr	r3, [r7, #28]
 8008582:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8008586:	69fb      	ldr	r3, [r7, #28]
 8008588:	78db      	ldrb	r3, [r3, #3]
 800858a:	041b      	lsls	r3, r3, #16
 800858c:	441a      	add	r2, r3
 800858e:	69fb      	ldr	r3, [r7, #28]
 8008590:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[4] << 24;
 8008594:	69fb      	ldr	r3, [r7, #28]
 8008596:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 800859a:	69fb      	ldr	r3, [r7, #28]
 800859c:	791b      	ldrb	r3, [r3, #4]
 800859e:	061b      	lsls	r3, r3, #24
 80085a0:	441a      	add	r2, r3
 80085a2:	69fb      	ldr	r3, [r7, #28]
 80085a4:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
 80085a8:	e064      	b.n	8008674 <USBD_DFU_EP0_TxReady+0x16a>
        }
        else if (hdfu->buffer.d8[0] == DFU_CMD_ERASE)
 80085aa:	69fb      	ldr	r3, [r7, #28]
 80085ac:	781b      	ldrb	r3, [r3, #0]
 80085ae:	2b41      	cmp	r3, #65	@ 0x41
 80085b0:	d12f      	bne.n	8008612 <USBD_DFU_EP0_TxReady+0x108>
        {
          hdfu->data_ptr = hdfu->buffer.d8[1];
 80085b2:	69fb      	ldr	r3, [r7, #28]
 80085b4:	785b      	ldrb	r3, [r3, #1]
 80085b6:	461a      	mov	r2, r3
 80085b8:	69fb      	ldr	r3, [r7, #28]
 80085ba:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[2] << 8;
 80085be:	69fb      	ldr	r3, [r7, #28]
 80085c0:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 80085c4:	69fb      	ldr	r3, [r7, #28]
 80085c6:	789b      	ldrb	r3, [r3, #2]
 80085c8:	021b      	lsls	r3, r3, #8
 80085ca:	441a      	add	r2, r3
 80085cc:	69fb      	ldr	r3, [r7, #28]
 80085ce:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[3] << 16;
 80085d2:	69fb      	ldr	r3, [r7, #28]
 80085d4:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 80085d8:	69fb      	ldr	r3, [r7, #28]
 80085da:	78db      	ldrb	r3, [r3, #3]
 80085dc:	041b      	lsls	r3, r3, #16
 80085de:	441a      	add	r2, r3
 80085e0:	69fb      	ldr	r3, [r7, #28]
 80085e2:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[4] << 24;
 80085e6:	69fb      	ldr	r3, [r7, #28]
 80085e8:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 80085ec:	69fb      	ldr	r3, [r7, #28]
 80085ee:	791b      	ldrb	r3, [r3, #4]
 80085f0:	061b      	lsls	r3, r3, #24
 80085f2:	441a      	add	r2, r3
 80085f4:	69fb      	ldr	r3, [r7, #28]
 80085f6:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408

          if (DfuInterface->Erase(hdfu->data_ptr) != USBD_OK)
 80085fa:	69bb      	ldr	r3, [r7, #24]
 80085fc:	68db      	ldr	r3, [r3, #12]
 80085fe:	69fa      	ldr	r2, [r7, #28]
 8008600:	f8d2 2408 	ldr.w	r2, [r2, #1032]	@ 0x408
 8008604:	4610      	mov	r0, r2
 8008606:	4798      	blx	r3
 8008608:	4603      	mov	r3, r0
 800860a:	2b00      	cmp	r3, #0
 800860c:	d032      	beq.n	8008674 <USBD_DFU_EP0_TxReady+0x16a>
          {
            return (uint8_t)USBD_FAIL;
 800860e:	2303      	movs	r3, #3
 8008610:	e05b      	b.n	80086ca <USBD_DFU_EP0_TxReady+0x1c0>
          }
        }
        else
        {
          return (uint8_t)USBD_FAIL;
 8008612:	2303      	movs	r3, #3
 8008614:	e059      	b.n	80086ca <USBD_DFU_EP0_TxReady+0x1c0>
        }
      }
      else
      {
        /* Reset the global length and block number */
        hdfu->wlength = 0U;
 8008616:	69fb      	ldr	r3, [r7, #28]
 8008618:	2200      	movs	r2, #0
 800861a:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
        hdfu->wblock_num = 0U;
 800861e:	69fb      	ldr	r3, [r7, #28]
 8008620:	2200      	movs	r2, #0
 8008622:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
        /* Call the error management function (command will be NAKed) */
        req.bmRequest = 0U;
 8008626:	2300      	movs	r3, #0
 8008628:	733b      	strb	r3, [r7, #12]
        req.wLength = 1U;
 800862a:	2301      	movs	r3, #1
 800862c:	827b      	strh	r3, [r7, #18]
        USBD_CtlError(pdev, &req);
 800862e:	f107 030c 	add.w	r3, r7, #12
 8008632:	4619      	mov	r1, r3
 8008634:	6878      	ldr	r0, [r7, #4]
 8008636:	f001 fcad 	bl	8009f94 <USBD_CtlError>
 800863a:	e01b      	b.n	8008674 <USBD_DFU_EP0_TxReady+0x16a>
      }
    }
    /* Regular Download Command */
    else
    {
      if (hdfu->wblock_num > 1U)
 800863c:	69fb      	ldr	r3, [r7, #28]
 800863e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 8008642:	2b01      	cmp	r3, #1
 8008644:	d916      	bls.n	8008674 <USBD_DFU_EP0_TxReady+0x16a>
      {
        /* Decode the required address */
        addr = ((hdfu->wblock_num - 2U) * USBD_DFU_XFER_SIZE) + hdfu->data_ptr;
 8008646:	69fb      	ldr	r3, [r7, #28]
 8008648:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 800864c:	3b02      	subs	r3, #2
 800864e:	029a      	lsls	r2, r3, #10
 8008650:	69fb      	ldr	r3, [r7, #28]
 8008652:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 8008656:	4413      	add	r3, r2
 8008658:	617b      	str	r3, [r7, #20]

        /* Perform the write operation */
        if (DfuInterface->Write(hdfu->buffer.d8, (uint8_t *)addr, hdfu->wlength) != USBD_OK)
 800865a:	69bb      	ldr	r3, [r7, #24]
 800865c:	691b      	ldr	r3, [r3, #16]
 800865e:	69f8      	ldr	r0, [r7, #28]
 8008660:	6979      	ldr	r1, [r7, #20]
 8008662:	69fa      	ldr	r2, [r7, #28]
 8008664:	f8d2 2404 	ldr.w	r2, [r2, #1028]	@ 0x404
 8008668:	4798      	blx	r3
 800866a:	4603      	mov	r3, r0
 800866c:	2b00      	cmp	r3, #0
 800866e:	d001      	beq.n	8008674 <USBD_DFU_EP0_TxReady+0x16a>
        {
          return (uint8_t)USBD_FAIL;
 8008670:	2303      	movs	r3, #3
 8008672:	e02a      	b.n	80086ca <USBD_DFU_EP0_TxReady+0x1c0>
        }
      }
    }

    /* Reset the global length and block number */
    hdfu->wlength = 0U;
 8008674:	69fb      	ldr	r3, [r7, #28]
 8008676:	2200      	movs	r2, #0
 8008678:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
    hdfu->wblock_num = 0U;
 800867c:	69fb      	ldr	r3, [r7, #28]
 800867e:	2200      	movs	r2, #0
 8008680:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400

    /* Update the state machine */
    hdfu->dev_state =  DFU_STATE_DNLOAD_SYNC;
 8008684:	69fb      	ldr	r3, [r7, #28]
 8008686:	2203      	movs	r2, #3
 8008688:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418

    hdfu->dev_status[1] = 0U;
 800868c:	69fb      	ldr	r3, [r7, #28]
 800868e:	2200      	movs	r2, #0
 8008690:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
    hdfu->dev_status[2] = 0U;
 8008694:	69fb      	ldr	r3, [r7, #28]
 8008696:	2200      	movs	r2, #0
 8008698:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
    hdfu->dev_status[3] = 0U;
 800869c:	69fb      	ldr	r3, [r7, #28]
 800869e:	2200      	movs	r2, #0
 80086a0:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 80086a4:	69fb      	ldr	r3, [r7, #28]
 80086a6:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 80086aa:	69fb      	ldr	r3, [r7, #28]
 80086ac:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
 80086b0:	e00a      	b.n	80086c8 <USBD_DFU_EP0_TxReady+0x1be>
  }
  else if (hdfu->dev_state == DFU_STATE_MANIFEST)/* Manifestation in progress */
 80086b2:	69fb      	ldr	r3, [r7, #28]
 80086b4:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 80086b8:	2b07      	cmp	r3, #7
 80086ba:	d103      	bne.n	80086c4 <USBD_DFU_EP0_TxReady+0x1ba>
  {
    /* Start leaving DFU mode */
    DFU_Leave(pdev);
 80086bc:	6878      	ldr	r0, [r7, #4]
 80086be:	f000 fb75 	bl	8008dac <DFU_Leave>
 80086c2:	e001      	b.n	80086c8 <USBD_DFU_EP0_TxReady+0x1be>
  }
  else
  {
    return (uint8_t)USBD_FAIL;
 80086c4:	2303      	movs	r3, #3
 80086c6:	e000      	b.n	80086ca <USBD_DFU_EP0_TxReady+0x1c0>
  }

  return (uint8_t)USBD_OK;
 80086c8:	2300      	movs	r3, #0
}
 80086ca:	4618      	mov	r0, r3
 80086cc:	3720      	adds	r7, #32
 80086ce:	46bd      	mov	sp, r7
 80086d0:	bd80      	pop	{r7, pc}

080086d2 <USBD_DFU_SOF>:
  *         handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_DFU_SOF(USBD_HandleTypeDef *pdev)
{
 80086d2:	b480      	push	{r7}
 80086d4:	b083      	sub	sp, #12
 80086d6:	af00      	add	r7, sp, #0
 80086d8:	6078      	str	r0, [r7, #4]
  UNUSED(pdev);

  return (uint8_t)USBD_OK;
 80086da:	2300      	movs	r3, #0
}
 80086dc:	4618      	mov	r0, r3
 80086de:	370c      	adds	r7, #12
 80086e0:	46bd      	mov	sp, r7
 80086e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e6:	4770      	bx	lr

080086e8 <USBD_DFU_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_DFU_GetDeviceQualifierDesc(uint16_t *length)
{
 80086e8:	b480      	push	{r7}
 80086ea:	b083      	sub	sp, #12
 80086ec:	af00      	add	r7, sp, #0
 80086ee:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_DFU_DeviceQualifierDesc);
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	220a      	movs	r2, #10
 80086f4:	801a      	strh	r2, [r3, #0]

  return USBD_DFU_DeviceQualifierDesc;
 80086f6:	4b03      	ldr	r3, [pc, #12]	@ (8008704 <USBD_DFU_GetDeviceQualifierDesc+0x1c>)
}
 80086f8:	4618      	mov	r0, r3
 80086fa:	370c      	adds	r7, #12
 80086fc:	46bd      	mov	sp, r7
 80086fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008702:	4770      	bx	lr
 8008704:	20000064 	.word	0x20000064

08008708 <USBD_DFU_GetUsrStringDesc>:
  * @param  length : pointer data length
  * @retval pointer to the descriptor table or NULL if the descriptor is not supported.
  */
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
static uint8_t *USBD_DFU_GetUsrStringDesc(USBD_HandleTypeDef *pdev, uint8_t index, uint16_t *length)
{
 8008708:	b580      	push	{r7, lr}
 800870a:	b086      	sub	sp, #24
 800870c:	af00      	add	r7, sp, #0
 800870e:	60f8      	str	r0, [r7, #12]
 8008710:	460b      	mov	r3, r1
 8008712:	607a      	str	r2, [r7, #4]
 8008714:	72fb      	strb	r3, [r7, #11]
  static uint8_t USBD_StrDesc[255];
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData;
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800871c:	617b      	str	r3, [r7, #20]

  /* Check if the requested string interface is supported */
  if (index <= (USBD_IDX_INTERFACE_STR + USBD_DFU_MAX_ITF_NUM))
 800871e:	7afb      	ldrb	r3, [r7, #11]
 8008720:	2b06      	cmp	r3, #6
 8008722:	d808      	bhi.n	8008736 <USBD_DFU_GetUsrStringDesc+0x2e>
  {
    USBD_GetString((uint8_t *)DfuInterface->pStrDesc, USBD_StrDesc, length);
 8008724:	697b      	ldr	r3, [r7, #20]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	687a      	ldr	r2, [r7, #4]
 800872a:	4905      	ldr	r1, [pc, #20]	@ (8008740 <USBD_DFU_GetUsrStringDesc+0x38>)
 800872c:	4618      	mov	r0, r3
 800872e:	f001 fc42 	bl	8009fb6 <USBD_GetString>
    return USBD_StrDesc;
 8008732:	4b03      	ldr	r3, [pc, #12]	@ (8008740 <USBD_DFU_GetUsrStringDesc+0x38>)
 8008734:	e000      	b.n	8008738 <USBD_DFU_GetUsrStringDesc+0x30>
  }
  else
  {
    /* Not supported Interface Descriptor index */
    return NULL;
 8008736:	2300      	movs	r3, #0
  }
}
 8008738:	4618      	mov	r0, r3
 800873a:	3718      	adds	r7, #24
 800873c:	46bd      	mov	sp, r7
 800873e:	bd80      	pop	{r7, pc}
 8008740:	20000490 	.word	0x20000490

08008744 <USBD_DFU_RegisterMedia>:
  * @param  fops: storage callback
  * @retval status
  */
uint8_t USBD_DFU_RegisterMedia(USBD_HandleTypeDef *pdev,
                               USBD_DFU_MediaTypeDef *fops)
{
 8008744:	b480      	push	{r7}
 8008746:	b083      	sub	sp, #12
 8008748:	af00      	add	r7, sp, #0
 800874a:	6078      	str	r0, [r7, #4]
 800874c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800874e:	683b      	ldr	r3, [r7, #0]
 8008750:	2b00      	cmp	r3, #0
 8008752:	d101      	bne.n	8008758 <USBD_DFU_RegisterMedia+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008754:	2303      	movs	r3, #3
 8008756:	e004      	b.n	8008762 <USBD_DFU_RegisterMedia+0x1e>
  }

  pdev->pUserData = fops;
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	683a      	ldr	r2, [r7, #0]
 800875c:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  return (uint8_t)USBD_OK;
 8008760:	2300      	movs	r3, #0
}
 8008762:	4618      	mov	r0, r3
 8008764:	370c      	adds	r7, #12
 8008766:	46bd      	mov	sp, r7
 8008768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800876c:	4770      	bx	lr
	...

08008770 <DFU_Detach>:
  * @param  pdev: device instance
  * @param  req: pointer to the request structure.
  * @retval None.
  */
static void DFU_Detach(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008770:	b580      	push	{r7, lr}
 8008772:	b084      	sub	sp, #16
 8008774:	af00      	add	r7, sp, #0
 8008776:	6078      	str	r0, [r7, #4]
 8008778:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008780:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	2b00      	cmp	r3, #0
 8008786:	d051      	beq.n	800882c <DFU_Detach+0xbc>
  {
    return;
  }

  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 800878e:	2b02      	cmp	r3, #2
 8008790:	d013      	beq.n	80087ba <DFU_Detach+0x4a>
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 8008798:	2b03      	cmp	r3, #3
 800879a:	d00e      	beq.n	80087ba <DFU_Detach+0x4a>
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 80087a2:	2b05      	cmp	r3, #5
 80087a4:	d009      	beq.n	80087ba <DFU_Detach+0x4a>
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 80087ac:	2b06      	cmp	r3, #6
 80087ae:	d004      	beq.n	80087ba <DFU_Detach+0x4a>
      (hdfu->dev_state == DFU_STATE_UPLOAD_IDLE))
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 80087b6:	2b09      	cmp	r3, #9
 80087b8:	d125      	bne.n	8008806 <DFU_Detach+0x96>
  {
    /* Update the state machine */
    hdfu->dev_state = DFU_STATE_IDLE;
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	2202      	movs	r2, #2
 80087be:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
    hdfu->dev_status[0] = DFU_ERROR_NONE;
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	2200      	movs	r2, #0
 80087c6:	f883 2410 	strb.w	r2, [r3, #1040]	@ 0x410
    hdfu->dev_status[1] = 0U;
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	2200      	movs	r2, #0
 80087ce:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
    hdfu->dev_status[2] = 0U;
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	2200      	movs	r2, #0
 80087d6:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
    hdfu->dev_status[3] = 0U; /*bwPollTimeout=0ms*/
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	2200      	movs	r2, #0
 80087de:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
    hdfu->dev_status[5] = 0U; /*iString*/
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	2200      	movs	r2, #0
 80087f2:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
    hdfu->wblock_num = 0U;
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	2200      	movs	r2, #0
 80087fa:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
    hdfu->wlength = 0U;
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	2200      	movs	r2, #0
 8008802:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
  }

  /* Check the detach capability in the DFU functional descriptor */
  if (((USBD_DFU_CfgDesc[12U + (9U * USBD_DFU_MAX_ITF_NUM)]) & DFU_DETACH_MASK) != 0U)
 8008806:	4b0b      	ldr	r3, [pc, #44]	@ (8008834 <DFU_Detach+0xc4>)
 8008808:	7d5b      	ldrb	r3, [r3, #21]
 800880a:	f003 0310 	and.w	r3, r3, #16
 800880e:	2b00      	cmp	r3, #0
 8008810:	d006      	beq.n	8008820 <DFU_Detach+0xb0>
  {
    /* Perform an Attach-Detach operation on USB bus */
    (void)USBD_Stop(pdev);
 8008812:	6878      	ldr	r0, [r7, #4]
 8008814:	f000 fb7b 	bl	8008f0e <USBD_Stop>
    (void)USBD_Start(pdev);
 8008818:	6878      	ldr	r0, [r7, #4]
 800881a:	f000 fb6c 	bl	8008ef6 <USBD_Start>
 800881e:	e006      	b.n	800882e <DFU_Detach+0xbe>
  }
  else
  {
    /* Wait for the period of time specified in Detach request */
    USBD_Delay((uint32_t)req->wValue);
 8008820:	683b      	ldr	r3, [r7, #0]
 8008822:	885b      	ldrh	r3, [r3, #2]
 8008824:	4618      	mov	r0, r3
 8008826:	f7f9 fb53 	bl	8001ed0 <HAL_Delay>
 800882a:	e000      	b.n	800882e <DFU_Detach+0xbe>
    return;
 800882c:	bf00      	nop
  }
}
 800882e:	3710      	adds	r7, #16
 8008830:	46bd      	mov	sp, r7
 8008832:	bd80      	pop	{r7, pc}
 8008834:	20000048 	.word	0x20000048

08008838 <DFU_Download>:
  * @param  pdev: device instance
  * @param  req: pointer to the request structure
  * @retval None
  */
static void DFU_Download(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008838:	b580      	push	{r7, lr}
 800883a:	b084      	sub	sp, #16
 800883c:	af00      	add	r7, sp, #0
 800883e:	6078      	str	r0, [r7, #4]
 8008840:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008848:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	2b00      	cmp	r3, #0
 800884e:	d05b      	beq.n	8008908 <DFU_Download+0xd0>
  {
    return;
  }

  /* Data setup request */
  if (req->wLength > 0U)
 8008850:	683b      	ldr	r3, [r7, #0]
 8008852:	88db      	ldrh	r3, [r3, #6]
 8008854:	2b00      	cmp	r3, #0
 8008856:	d02d      	beq.n	80088b4 <DFU_Download+0x7c>
  {
    if ((hdfu->dev_state == DFU_STATE_IDLE) || (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE))
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 800885e:	2b02      	cmp	r3, #2
 8008860:	d004      	beq.n	800886c <DFU_Download+0x34>
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 8008868:	2b05      	cmp	r3, #5
 800886a:	d11e      	bne.n	80088aa <DFU_Download+0x72>
    {
      /* Update the global length and block number */
      hdfu->wblock_num = req->wValue;
 800886c:	683b      	ldr	r3, [r7, #0]
 800886e:	885b      	ldrh	r3, [r3, #2]
 8008870:	461a      	mov	r2, r3
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
      hdfu->wlength = req->wLength;
 8008878:	683b      	ldr	r3, [r7, #0]
 800887a:	88db      	ldrh	r3, [r3, #6]
 800887c:	461a      	mov	r2, r3
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404

      /* Update the state machine */
      hdfu->dev_state = DFU_STATE_DNLOAD_SYNC;
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	2203      	movs	r2, #3
 8008888:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
      hdfu->dev_status[4] = hdfu->dev_state;
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414

      /* Prepare the reception of the buffer over EP0 */
      (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hdfu->buffer.d8, hdfu->wlength);
 8008898:	68f9      	ldr	r1, [r7, #12]
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 80088a0:	461a      	mov	r2, r3
 80088a2:	6878      	ldr	r0, [r7, #4]
 80088a4:	f001 fc13 	bl	800a0ce <USBD_CtlPrepareRx>
 80088a8:	e02f      	b.n	800890a <DFU_Download+0xd2>
    }
    /* Unsupported state */
    else
    {
      /* Call the error management function (command will be NAKed */
      USBD_CtlError(pdev, req);
 80088aa:	6839      	ldr	r1, [r7, #0]
 80088ac:	6878      	ldr	r0, [r7, #4]
 80088ae:	f001 fb71 	bl	8009f94 <USBD_CtlError>
 80088b2:	e02a      	b.n	800890a <DFU_Download+0xd2>
  }
  /* 0 Data DNLOAD request */
  else
  {
    /* End of DNLOAD operation*/
    if ((hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) || (hdfu->dev_state == DFU_STATE_IDLE))
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 80088ba:	2b05      	cmp	r3, #5
 80088bc:	d004      	beq.n	80088c8 <DFU_Download+0x90>
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 80088c4:	2b02      	cmp	r3, #2
 80088c6:	d11a      	bne.n	80088fe <DFU_Download+0xc6>
    {
      hdfu->manif_state = DFU_MANIFEST_IN_PROGRESS;
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	2201      	movs	r2, #1
 80088cc:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
      hdfu->dev_state = DFU_STATE_MANIFEST_SYNC;
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	2206      	movs	r2, #6
 80088d4:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
      hdfu->dev_status[1] = 0U;
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	2200      	movs	r2, #0
 80088dc:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
      hdfu->dev_status[2] = 0U;
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	2200      	movs	r2, #0
 80088e4:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
      hdfu->dev_status[3] = 0U;
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	2200      	movs	r2, #0
 80088ec:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
      hdfu->dev_status[4] = hdfu->dev_state;
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
 80088fc:	e005      	b.n	800890a <DFU_Download+0xd2>
    }
    else
    {
      /* Call the error management function (command will be NAKed */
      USBD_CtlError(pdev, req);
 80088fe:	6839      	ldr	r1, [r7, #0]
 8008900:	6878      	ldr	r0, [r7, #4]
 8008902:	f001 fb47 	bl	8009f94 <USBD_CtlError>
 8008906:	e000      	b.n	800890a <DFU_Download+0xd2>
    return;
 8008908:	bf00      	nop
    }
  }
}
 800890a:	3710      	adds	r7, #16
 800890c:	46bd      	mov	sp, r7
 800890e:	bd80      	pop	{r7, pc}

08008910 <DFU_Upload>:
  * @param  pdev: instance
  * @param  req: pointer to the request structure
  * @retval status
  */
static void DFU_Upload(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008910:	b580      	push	{r7, lr}
 8008912:	b086      	sub	sp, #24
 8008914:	af00      	add	r7, sp, #0
 8008916:	6078      	str	r0, [r7, #4]
 8008918:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008920:	617b      	str	r3, [r7, #20]
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData;
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008928:	613b      	str	r3, [r7, #16]
  uint8_t *phaddr;
  uint32_t addr;

  if (hdfu == NULL)
 800892a:	697b      	ldr	r3, [r7, #20]
 800892c:	2b00      	cmp	r3, #0
 800892e:	f000 80c4 	beq.w	8008aba <DFU_Upload+0x1aa>
  {
    return;
  }

  /* Data setup request */
  if (req->wLength > 0U)
 8008932:	683b      	ldr	r3, [r7, #0]
 8008934:	88db      	ldrh	r3, [r3, #6]
 8008936:	2b00      	cmp	r3, #0
 8008938:	f000 80a8 	beq.w	8008a8c <DFU_Upload+0x17c>
  {
    if ((hdfu->dev_state == DFU_STATE_IDLE) || (hdfu->dev_state == DFU_STATE_UPLOAD_IDLE))
 800893c:	697b      	ldr	r3, [r7, #20]
 800893e:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 8008942:	2b02      	cmp	r3, #2
 8008944:	d005      	beq.n	8008952 <DFU_Upload+0x42>
 8008946:	697b      	ldr	r3, [r7, #20]
 8008948:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 800894c:	2b09      	cmp	r3, #9
 800894e:	f040 8090 	bne.w	8008a72 <DFU_Upload+0x162>
    {
      /* Update the global length and block number */
      hdfu->wblock_num = req->wValue;
 8008952:	683b      	ldr	r3, [r7, #0]
 8008954:	885b      	ldrh	r3, [r3, #2]
 8008956:	461a      	mov	r2, r3
 8008958:	697b      	ldr	r3, [r7, #20]
 800895a:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
      hdfu->wlength = req->wLength;
 800895e:	683b      	ldr	r3, [r7, #0]
 8008960:	88db      	ldrh	r3, [r3, #6]
 8008962:	461a      	mov	r2, r3
 8008964:	697b      	ldr	r3, [r7, #20]
 8008966:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404

      /* DFU Get Command */
      if (hdfu->wblock_num == 0U)
 800896a:	697b      	ldr	r3, [r7, #20]
 800896c:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 8008970:	2b00      	cmp	r3, #0
 8008972:	d12c      	bne.n	80089ce <DFU_Upload+0xbe>
      {
        /* Update the state machine */
        hdfu->dev_state = (hdfu->wlength > 3U) ? DFU_STATE_IDLE : DFU_STATE_UPLOAD_IDLE;
 8008974:	697b      	ldr	r3, [r7, #20]
 8008976:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 800897a:	2b03      	cmp	r3, #3
 800897c:	d901      	bls.n	8008982 <DFU_Upload+0x72>
 800897e:	2202      	movs	r2, #2
 8008980:	e000      	b.n	8008984 <DFU_Upload+0x74>
 8008982:	2209      	movs	r2, #9
 8008984:	697b      	ldr	r3, [r7, #20]
 8008986:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418

        hdfu->dev_status[1] = 0U;
 800898a:	697b      	ldr	r3, [r7, #20]
 800898c:	2200      	movs	r2, #0
 800898e:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
        hdfu->dev_status[2] = 0U;
 8008992:	697b      	ldr	r3, [r7, #20]
 8008994:	2200      	movs	r2, #0
 8008996:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
        hdfu->dev_status[3] = 0U;
 800899a:	697b      	ldr	r3, [r7, #20]
 800899c:	2200      	movs	r2, #0
 800899e:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 80089a2:	697b      	ldr	r3, [r7, #20]
 80089a4:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 80089a8:	697b      	ldr	r3, [r7, #20]
 80089aa:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414

        /* Store the values of all supported commands */
        hdfu->buffer.d8[0] = DFU_CMD_GETCOMMANDS;
 80089ae:	697b      	ldr	r3, [r7, #20]
 80089b0:	2200      	movs	r2, #0
 80089b2:	701a      	strb	r2, [r3, #0]
        hdfu->buffer.d8[1] = DFU_CMD_SETADDRESSPOINTER;
 80089b4:	697b      	ldr	r3, [r7, #20]
 80089b6:	2221      	movs	r2, #33	@ 0x21
 80089b8:	705a      	strb	r2, [r3, #1]
        hdfu->buffer.d8[2] = DFU_CMD_ERASE;
 80089ba:	697b      	ldr	r3, [r7, #20]
 80089bc:	2241      	movs	r2, #65	@ 0x41
 80089be:	709a      	strb	r2, [r3, #2]

        /* Send the status data over EP0 */
        (void)USBD_CtlSendData(pdev, (uint8_t *)(&(hdfu->buffer.d8[0])), 3U);
 80089c0:	697b      	ldr	r3, [r7, #20]
 80089c2:	2203      	movs	r2, #3
 80089c4:	4619      	mov	r1, r3
 80089c6:	6878      	ldr	r0, [r7, #4]
 80089c8:	f001 fb55 	bl	800a076 <USBD_CtlSendData>
      if (hdfu->wblock_num == 0U)
 80089cc:	e076      	b.n	8008abc <DFU_Upload+0x1ac>
      }
      else if (hdfu->wblock_num > 1U)
 80089ce:	697b      	ldr	r3, [r7, #20]
 80089d0:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 80089d4:	2b01      	cmp	r3, #1
 80089d6:	d931      	bls.n	8008a3c <DFU_Upload+0x12c>
      {
        hdfu->dev_state = DFU_STATE_UPLOAD_IDLE;
 80089d8:	697b      	ldr	r3, [r7, #20]
 80089da:	2209      	movs	r2, #9
 80089dc:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418

        hdfu->dev_status[1] = 0U;
 80089e0:	697b      	ldr	r3, [r7, #20]
 80089e2:	2200      	movs	r2, #0
 80089e4:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
        hdfu->dev_status[2] = 0U;
 80089e8:	697b      	ldr	r3, [r7, #20]
 80089ea:	2200      	movs	r2, #0
 80089ec:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
        hdfu->dev_status[3] = 0U;
 80089f0:	697b      	ldr	r3, [r7, #20]
 80089f2:	2200      	movs	r2, #0
 80089f4:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 80089f8:	697b      	ldr	r3, [r7, #20]
 80089fa:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 80089fe:	697b      	ldr	r3, [r7, #20]
 8008a00:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414

        addr = ((hdfu->wblock_num - 2U) * USBD_DFU_XFER_SIZE) + hdfu->data_ptr;
 8008a04:	697b      	ldr	r3, [r7, #20]
 8008a06:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 8008a0a:	3b02      	subs	r3, #2
 8008a0c:	029a      	lsls	r2, r3, #10
 8008a0e:	697b      	ldr	r3, [r7, #20]
 8008a10:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 8008a14:	4413      	add	r3, r2
 8008a16:	60fb      	str	r3, [r7, #12]

        /* Return the physical address where data are stored */
        phaddr = DfuInterface->Read((uint8_t *)addr, hdfu->buffer.d8, hdfu->wlength);
 8008a18:	693b      	ldr	r3, [r7, #16]
 8008a1a:	695b      	ldr	r3, [r3, #20]
 8008a1c:	68f8      	ldr	r0, [r7, #12]
 8008a1e:	6979      	ldr	r1, [r7, #20]
 8008a20:	697a      	ldr	r2, [r7, #20]
 8008a22:	f8d2 2404 	ldr.w	r2, [r2, #1028]	@ 0x404
 8008a26:	4798      	blx	r3
 8008a28:	60b8      	str	r0, [r7, #8]

        /* Send the status data over EP0 */
        (void)USBD_CtlSendData(pdev, phaddr, hdfu->wlength);
 8008a2a:	697b      	ldr	r3, [r7, #20]
 8008a2c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8008a30:	461a      	mov	r2, r3
 8008a32:	68b9      	ldr	r1, [r7, #8]
 8008a34:	6878      	ldr	r0, [r7, #4]
 8008a36:	f001 fb1e 	bl	800a076 <USBD_CtlSendData>
      if (hdfu->wblock_num == 0U)
 8008a3a:	e03f      	b.n	8008abc <DFU_Upload+0x1ac>
      }
      else  /* unsupported hdfu->wblock_num */
      {
        hdfu->dev_state = DFU_ERROR_STALLEDPKT;
 8008a3c:	697b      	ldr	r3, [r7, #20]
 8008a3e:	220f      	movs	r2, #15
 8008a40:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418

        hdfu->dev_status[1] = 0U;
 8008a44:	697b      	ldr	r3, [r7, #20]
 8008a46:	2200      	movs	r2, #0
 8008a48:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
        hdfu->dev_status[2] = 0U;
 8008a4c:	697b      	ldr	r3, [r7, #20]
 8008a4e:	2200      	movs	r2, #0
 8008a50:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
        hdfu->dev_status[3] = 0U;
 8008a54:	697b      	ldr	r3, [r7, #20]
 8008a56:	2200      	movs	r2, #0
 8008a58:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 8008a5c:	697b      	ldr	r3, [r7, #20]
 8008a5e:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 8008a62:	697b      	ldr	r3, [r7, #20]
 8008a64:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414

        /* Call the error management function (command will be NAKed */
        USBD_CtlError(pdev, req);
 8008a68:	6839      	ldr	r1, [r7, #0]
 8008a6a:	6878      	ldr	r0, [r7, #4]
 8008a6c:	f001 fa92 	bl	8009f94 <USBD_CtlError>
      if (hdfu->wblock_num == 0U)
 8008a70:	e024      	b.n	8008abc <DFU_Upload+0x1ac>
      }
    }
    /* Unsupported state */
    else
    {
      hdfu->wlength = 0U;
 8008a72:	697b      	ldr	r3, [r7, #20]
 8008a74:	2200      	movs	r2, #0
 8008a76:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
      hdfu->wblock_num = 0U;
 8008a7a:	697b      	ldr	r3, [r7, #20]
 8008a7c:	2200      	movs	r2, #0
 8008a7e:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400

      /* Call the error management function (command will be NAKed */
      USBD_CtlError(pdev, req);
 8008a82:	6839      	ldr	r1, [r7, #0]
 8008a84:	6878      	ldr	r0, [r7, #4]
 8008a86:	f001 fa85 	bl	8009f94 <USBD_CtlError>
 8008a8a:	e017      	b.n	8008abc <DFU_Upload+0x1ac>
    }
  }
  /* No Data setup request */
  else
  {
    hdfu->dev_state = DFU_STATE_IDLE;
 8008a8c:	697b      	ldr	r3, [r7, #20]
 8008a8e:	2202      	movs	r2, #2
 8008a90:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418

    hdfu->dev_status[1] = 0U;
 8008a94:	697b      	ldr	r3, [r7, #20]
 8008a96:	2200      	movs	r2, #0
 8008a98:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
    hdfu->dev_status[2] = 0U;
 8008a9c:	697b      	ldr	r3, [r7, #20]
 8008a9e:	2200      	movs	r2, #0
 8008aa0:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
    hdfu->dev_status[3] = 0U;
 8008aa4:	697b      	ldr	r3, [r7, #20]
 8008aa6:	2200      	movs	r2, #0
 8008aa8:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 8008aac:	697b      	ldr	r3, [r7, #20]
 8008aae:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 8008ab2:	697b      	ldr	r3, [r7, #20]
 8008ab4:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
 8008ab8:	e000      	b.n	8008abc <DFU_Upload+0x1ac>
    return;
 8008aba:	bf00      	nop
  }
}
 8008abc:	3718      	adds	r7, #24
 8008abe:	46bd      	mov	sp, r7
 8008ac0:	bd80      	pop	{r7, pc}
	...

08008ac4 <DFU_GetStatus>:
  *         Handles the DFU GETSTATUS request.
  * @param  pdev: instance
  * @retval status
  */
static void DFU_GetStatus(USBD_HandleTypeDef *pdev)
{
 8008ac4:	b580      	push	{r7, lr}
 8008ac6:	b084      	sub	sp, #16
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008ad2:	60fb      	str	r3, [r7, #12]
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData;
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008ada:	60bb      	str	r3, [r7, #8]

  if (hdfu == NULL)
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	f000 80a0 	beq.w	8008c24 <DFU_GetStatus+0x160>
  {
    return;
  }

  switch (hdfu->dev_state)
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 8008aea:	2b03      	cmp	r3, #3
 8008aec:	d002      	beq.n	8008af4 <DFU_GetStatus+0x30>
 8008aee:	2b06      	cmp	r3, #6
 8008af0:	d051      	beq.n	8008b96 <DFU_GetStatus+0xd2>
        }
      }
      break;

    default:
      break;
 8008af2:	e08e      	b.n	8008c12 <DFU_GetStatus+0x14e>
      if (hdfu->wlength != 0U)
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d034      	beq.n	8008b68 <DFU_GetStatus+0xa4>
        hdfu->dev_state = DFU_STATE_DNLOAD_BUSY;
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	2204      	movs	r2, #4
 8008b02:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
        hdfu->dev_status[1] = 0U;
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	2200      	movs	r2, #0
 8008b0a:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
        hdfu->dev_status[2] = 0U;
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	2200      	movs	r2, #0
 8008b12:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
        hdfu->dev_status[3] = 0U;
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	2200      	movs	r2, #0
 8008b1a:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
        if ((hdfu->wblock_num == 0U) && (hdfu->buffer.d8[0] == DFU_CMD_ERASE))
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d10e      	bne.n	8008b52 <DFU_GetStatus+0x8e>
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	781b      	ldrb	r3, [r3, #0]
 8008b38:	2b41      	cmp	r3, #65	@ 0x41
 8008b3a:	d10a      	bne.n	8008b52 <DFU_GetStatus+0x8e>
          DfuInterface->GetStatus(hdfu->data_ptr, DFU_MEDIA_ERASE, hdfu->dev_status);
 8008b3c:	68bb      	ldr	r3, [r7, #8]
 8008b3e:	699b      	ldr	r3, [r3, #24]
 8008b40:	68fa      	ldr	r2, [r7, #12]
 8008b42:	f8d2 0408 	ldr.w	r0, [r2, #1032]	@ 0x408
 8008b46:	68fa      	ldr	r2, [r7, #12]
 8008b48:	f502 6282 	add.w	r2, r2, #1040	@ 0x410
 8008b4c:	2100      	movs	r1, #0
 8008b4e:	4798      	blx	r3
      break;
 8008b50:	e05f      	b.n	8008c12 <DFU_GetStatus+0x14e>
          DfuInterface->GetStatus(hdfu->data_ptr, DFU_MEDIA_PROGRAM, hdfu->dev_status);
 8008b52:	68bb      	ldr	r3, [r7, #8]
 8008b54:	699b      	ldr	r3, [r3, #24]
 8008b56:	68fa      	ldr	r2, [r7, #12]
 8008b58:	f8d2 0408 	ldr.w	r0, [r2, #1032]	@ 0x408
 8008b5c:	68fa      	ldr	r2, [r7, #12]
 8008b5e:	f502 6282 	add.w	r2, r2, #1040	@ 0x410
 8008b62:	2101      	movs	r1, #1
 8008b64:	4798      	blx	r3
      break;
 8008b66:	e054      	b.n	8008c12 <DFU_GetStatus+0x14e>
        hdfu->dev_state = DFU_STATE_DNLOAD_IDLE;
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	2205      	movs	r2, #5
 8008b6c:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
        hdfu->dev_status[1] = 0U;
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	2200      	movs	r2, #0
 8008b74:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
        hdfu->dev_status[2] = 0U;
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	2200      	movs	r2, #0
 8008b7c:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
        hdfu->dev_status[3] = 0U;
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	2200      	movs	r2, #0
 8008b84:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
      break;
 8008b94:	e03d      	b.n	8008c12 <DFU_GetStatus+0x14e>
      if (hdfu->manif_state == DFU_MANIFEST_IN_PROGRESS)
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	f893 3419 	ldrb.w	r3, [r3, #1049]	@ 0x419
 8008b9c:	2b01      	cmp	r3, #1
 8008b9e:	d116      	bne.n	8008bce <DFU_GetStatus+0x10a>
        hdfu->dev_state = DFU_STATE_MANIFEST;
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	2207      	movs	r2, #7
 8008ba4:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
        hdfu->dev_status[1] = 1U;             /*bwPollTimeout = 1ms*/
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	2201      	movs	r2, #1
 8008bac:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
        hdfu->dev_status[2] = 0U;
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	2200      	movs	r2, #0
 8008bb4:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
        hdfu->dev_status[3] = 0U;
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	2200      	movs	r2, #0
 8008bbc:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
      break;
 8008bcc:	e020      	b.n	8008c10 <DFU_GetStatus+0x14c>
        if ((hdfu->manif_state == DFU_MANIFEST_COMPLETE) &&
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	f893 3419 	ldrb.w	r3, [r3, #1049]	@ 0x419
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d11b      	bne.n	8008c10 <DFU_GetStatus+0x14c>
            (((USBD_DFU_CfgDesc[(11U + (9U * USBD_DFU_MAX_ITF_NUM))]) & 0x04U) != 0U))
 8008bd8:	4b14      	ldr	r3, [pc, #80]	@ (8008c2c <DFU_GetStatus+0x168>)
 8008bda:	7d1b      	ldrb	r3, [r3, #20]
 8008bdc:	f003 0304 	and.w	r3, r3, #4
        if ((hdfu->manif_state == DFU_MANIFEST_COMPLETE) &&
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d015      	beq.n	8008c10 <DFU_GetStatus+0x14c>
          hdfu->dev_state = DFU_STATE_IDLE;
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	2202      	movs	r2, #2
 8008be8:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
          hdfu->dev_status[1] = 0U;
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	2200      	movs	r2, #0
 8008bf0:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
          hdfu->dev_status[2] = 0U;
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	2200      	movs	r2, #0
 8008bf8:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
          hdfu->dev_status[3] = 0U;
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	2200      	movs	r2, #0
 8008c00:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
          hdfu->dev_status[4] = hdfu->dev_state;
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
      break;
 8008c10:	bf00      	nop
  }

  /* Send the status data over EP0 */
  (void)USBD_CtlSendData(pdev, (uint8_t *)(&(hdfu->dev_status[0])), 6U);
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	f503 6382 	add.w	r3, r3, #1040	@ 0x410
 8008c18:	2206      	movs	r2, #6
 8008c1a:	4619      	mov	r1, r3
 8008c1c:	6878      	ldr	r0, [r7, #4]
 8008c1e:	f001 fa2a 	bl	800a076 <USBD_CtlSendData>
 8008c22:	e000      	b.n	8008c26 <DFU_GetStatus+0x162>
    return;
 8008c24:	bf00      	nop
}
 8008c26:	3710      	adds	r7, #16
 8008c28:	46bd      	mov	sp, r7
 8008c2a:	bd80      	pop	{r7, pc}
 8008c2c:	20000048 	.word	0x20000048

08008c30 <DFU_ClearStatus>:
  *         Handles the DFU CLRSTATUS request.
  * @param  pdev: device instance
  * @retval status
  */
static void DFU_ClearStatus(USBD_HandleTypeDef *pdev)
{
 8008c30:	b480      	push	{r7}
 8008c32:	b085      	sub	sp, #20
 8008c34:	af00      	add	r7, sp, #0
 8008c36:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008c3e:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d042      	beq.n	8008ccc <DFU_ClearStatus+0x9c>
  {
    return;
  }

  if (hdfu->dev_state == DFU_STATE_ERROR)
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 8008c4c:	2b0a      	cmp	r3, #10
 8008c4e:	d11e      	bne.n	8008c8e <DFU_ClearStatus+0x5e>
  {
    hdfu->dev_state = DFU_STATE_IDLE;
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	2202      	movs	r2, #2
 8008c54:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
    hdfu->dev_status[0] = DFU_ERROR_NONE; /* bStatus */
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	2200      	movs	r2, #0
 8008c5c:	f883 2410 	strb.w	r2, [r3, #1040]	@ 0x410
    hdfu->dev_status[1] = 0U;
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	2200      	movs	r2, #0
 8008c64:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
    hdfu->dev_status[2] = 0U;
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	2200      	movs	r2, #0
 8008c6c:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
    hdfu->dev_status[3] = 0U; /* bwPollTimeout=0ms */
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	2200      	movs	r2, #0
 8008c74:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
    hdfu->dev_status[4] = hdfu->dev_state; /* bState */
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
    hdfu->dev_status[5] = 0U; /* iString */
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	2200      	movs	r2, #0
 8008c88:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
 8008c8c:	e01f      	b.n	8008cce <DFU_ClearStatus+0x9e>
  }
  else
  {
    /* State Error */
    hdfu->dev_state = DFU_STATE_ERROR;
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	220a      	movs	r2, #10
 8008c92:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
    hdfu->dev_status[0] = DFU_ERROR_UNKNOWN; /* bStatus */
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	220e      	movs	r2, #14
 8008c9a:	f883 2410 	strb.w	r2, [r3, #1040]	@ 0x410
    hdfu->dev_status[1] = 0U;
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	2200      	movs	r2, #0
 8008ca2:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
    hdfu->dev_status[2] = 0U;
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	2200      	movs	r2, #0
 8008caa:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
    hdfu->dev_status[3] = 0U; /* bwPollTimeout=0ms */
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	2200      	movs	r2, #0
 8008cb2:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
    hdfu->dev_status[4] = hdfu->dev_state; /* bState */
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
    hdfu->dev_status[5] = 0U; /* iString */
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	2200      	movs	r2, #0
 8008cc6:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
 8008cca:	e000      	b.n	8008cce <DFU_ClearStatus+0x9e>
    return;
 8008ccc:	bf00      	nop
  }
}
 8008cce:	3714      	adds	r7, #20
 8008cd0:	46bd      	mov	sp, r7
 8008cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd6:	4770      	bx	lr

08008cd8 <DFU_GetState>:
  *         Handles the DFU GETSTATE request.
  * @param  pdev: device instance
  * @retval None
  */
static void DFU_GetState(USBD_HandleTypeDef *pdev)
{
 8008cd8:	b580      	push	{r7, lr}
 8008cda:	b084      	sub	sp, #16
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008ce6:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d008      	beq.n	8008d00 <DFU_GetState+0x28>
  {
    return;
  }

  /* Return the current state of the DFU interface */
  (void)USBD_CtlSendData(pdev, &hdfu->dev_state, 1U);
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	f503 6383 	add.w	r3, r3, #1048	@ 0x418
 8008cf4:	2201      	movs	r2, #1
 8008cf6:	4619      	mov	r1, r3
 8008cf8:	6878      	ldr	r0, [r7, #4]
 8008cfa:	f001 f9bc 	bl	800a076 <USBD_CtlSendData>
 8008cfe:	e000      	b.n	8008d02 <DFU_GetState+0x2a>
    return;
 8008d00:	bf00      	nop
}
 8008d02:	3710      	adds	r7, #16
 8008d04:	46bd      	mov	sp, r7
 8008d06:	bd80      	pop	{r7, pc}

08008d08 <DFU_Abort>:
  *         Handles the DFU ABORT request.
  * @param  pdev: device instance
  * @retval None
  */
static void DFU_Abort(USBD_HandleTypeDef *pdev)
{
 8008d08:	b480      	push	{r7}
 8008d0a:	b085      	sub	sp, #20
 8008d0c:	af00      	add	r7, sp, #0
 8008d0e:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008d16:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d03f      	beq.n	8008d9e <DFU_Abort+0x96>
  {
    return;
  }

  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 8008d24:	2b02      	cmp	r3, #2
 8008d26:	d013      	beq.n	8008d50 <DFU_Abort+0x48>
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 8008d2e:	2b03      	cmp	r3, #3
 8008d30:	d00e      	beq.n	8008d50 <DFU_Abort+0x48>
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 8008d38:	2b05      	cmp	r3, #5
 8008d3a:	d009      	beq.n	8008d50 <DFU_Abort+0x48>
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 8008d42:	2b06      	cmp	r3, #6
 8008d44:	d004      	beq.n	8008d50 <DFU_Abort+0x48>
      (hdfu->dev_state == DFU_STATE_UPLOAD_IDLE))
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 8008d4c:	2b09      	cmp	r3, #9
 8008d4e:	d127      	bne.n	8008da0 <DFU_Abort+0x98>
  {
    hdfu->dev_state = DFU_STATE_IDLE;
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	2202      	movs	r2, #2
 8008d54:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
    hdfu->dev_status[0] = DFU_ERROR_NONE;
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	2200      	movs	r2, #0
 8008d5c:	f883 2410 	strb.w	r2, [r3, #1040]	@ 0x410
    hdfu->dev_status[1] = 0U;
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	2200      	movs	r2, #0
 8008d64:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
    hdfu->dev_status[2] = 0U;
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	2200      	movs	r2, #0
 8008d6c:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
    hdfu->dev_status[3] = 0U; /* bwPollTimeout=0ms */
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	2200      	movs	r2, #0
 8008d74:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
    hdfu->dev_status[5] = 0U; /* iString */
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	2200      	movs	r2, #0
 8008d88:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
    hdfu->wblock_num = 0U;
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	2200      	movs	r2, #0
 8008d90:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
    hdfu->wlength = 0U;
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	2200      	movs	r2, #0
 8008d98:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
 8008d9c:	e000      	b.n	8008da0 <DFU_Abort+0x98>
    return;
 8008d9e:	bf00      	nop
  }
}
 8008da0:	3714      	adds	r7, #20
 8008da2:	46bd      	mov	sp, r7
 8008da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da8:	4770      	bx	lr
	...

08008dac <DFU_Leave>:
  *         and resets device to jump to user loaded code).
  * @param  pdev: device instance
  * @retval None
  */
static void DFU_Leave(USBD_HandleTypeDef *pdev)
{
 8008dac:	b580      	push	{r7, lr}
 8008dae:	b084      	sub	sp, #16
 8008db0:	af00      	add	r7, sp, #0
 8008db2:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008dba:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d03b      	beq.n	8008e3a <DFU_Leave+0x8e>
  {
    return;
  }

  hdfu->manif_state = DFU_MANIFEST_COMPLETE;
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	2200      	movs	r2, #0
 8008dc6:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419

  if (((USBD_DFU_CfgDesc[(11U + (9U * USBD_DFU_MAX_ITF_NUM))]) & 0x04U) != 0U)
 8008dca:	4b1e      	ldr	r3, [pc, #120]	@ (8008e44 <DFU_Leave+0x98>)
 8008dcc:	7d1b      	ldrb	r3, [r3, #20]
 8008dce:	f003 0304 	and.w	r3, r3, #4
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d016      	beq.n	8008e04 <DFU_Leave+0x58>
  {
    hdfu->dev_state = DFU_STATE_MANIFEST_SYNC;
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	2206      	movs	r2, #6
 8008dda:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418

    hdfu->dev_status[1] = 0U;
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	2200      	movs	r2, #0
 8008de2:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
    hdfu->dev_status[2] = 0U;
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	2200      	movs	r2, #0
 8008dea:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
    hdfu->dev_status[3] = 0U;
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	2200      	movs	r2, #0
 8008df2:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
    return;
 8008e02:	e01b      	b.n	8008e3c <DFU_Leave+0x90>
  }
  else
  {
    hdfu->dev_state = DFU_STATE_MANIFEST_WAIT_RESET;
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	2208      	movs	r2, #8
 8008e08:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418

    hdfu->dev_status[1] = 0U;
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	2200      	movs	r2, #0
 8008e10:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
    hdfu->dev_status[2] = 0U;
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	2200      	movs	r2, #0
 8008e18:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
    hdfu->dev_status[3] = 0U;
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	2200      	movs	r2, #0
 8008e20:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414

    /* Disconnect the USB device */
    (void)USBD_Stop(pdev);
 8008e30:	6878      	ldr	r0, [r7, #4]
 8008e32:	f000 f86c 	bl	8008f0e <USBD_Stop>

    /* Generate system reset to allow jumping to the user code */
    NVIC_SystemReset();
 8008e36:	f7ff f9b3 	bl	80081a0 <__NVIC_SystemReset>
    return;
 8008e3a:	bf00      	nop

    /* The next instructions will not be reached (system reset) */
  }
}
 8008e3c:	3710      	adds	r7, #16
 8008e3e:	46bd      	mov	sp, r7
 8008e40:	bd80      	pop	{r7, pc}
 8008e42:	bf00      	nop
 8008e44:	20000048 	.word	0x20000048

08008e48 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008e48:	b580      	push	{r7, lr}
 8008e4a:	b086      	sub	sp, #24
 8008e4c:	af00      	add	r7, sp, #0
 8008e4e:	60f8      	str	r0, [r7, #12]
 8008e50:	60b9      	str	r1, [r7, #8]
 8008e52:	4613      	mov	r3, r2
 8008e54:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d101      	bne.n	8008e60 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008e5c:	2303      	movs	r3, #3
 8008e5e:	e01f      	b.n	8008ea0 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	2200      	movs	r2, #0
 8008e64:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData = NULL;
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	2200      	movs	r2, #0
 8008e6c:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
  pdev->pConfDesc = NULL;
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	2200      	movs	r2, #0
 8008e74:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008e78:	68bb      	ldr	r3, [r7, #8]
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d003      	beq.n	8008e86 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	68ba      	ldr	r2, [r7, #8]
 8008e82:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	2201      	movs	r2, #1
 8008e8a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	79fa      	ldrb	r2, [r7, #7]
 8008e92:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008e94:	68f8      	ldr	r0, [r7, #12]
 8008e96:	f001 fc53 	bl	800a740 <USBD_LL_Init>
 8008e9a:	4603      	mov	r3, r0
 8008e9c:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008e9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ea0:	4618      	mov	r0, r3
 8008ea2:	3718      	adds	r7, #24
 8008ea4:	46bd      	mov	sp, r7
 8008ea6:	bd80      	pop	{r7, pc}

08008ea8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008ea8:	b580      	push	{r7, lr}
 8008eaa:	b084      	sub	sp, #16
 8008eac:	af00      	add	r7, sp, #0
 8008eae:	6078      	str	r0, [r7, #4]
 8008eb0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008eb2:	2300      	movs	r3, #0
 8008eb4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8008eb6:	683b      	ldr	r3, [r7, #0]
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d101      	bne.n	8008ec0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8008ebc:	2303      	movs	r3, #3
 8008ebe:	e016      	b.n	8008eee <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	683a      	ldr	r2, [r7, #0]
 8008ec4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008ece:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d00b      	beq.n	8008eec <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008eda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008edc:	f107 020e 	add.w	r2, r7, #14
 8008ee0:	4610      	mov	r0, r2
 8008ee2:	4798      	blx	r3
 8008ee4:	4602      	mov	r2, r0
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8008eec:	2300      	movs	r3, #0
}
 8008eee:	4618      	mov	r0, r3
 8008ef0:	3710      	adds	r7, #16
 8008ef2:	46bd      	mov	sp, r7
 8008ef4:	bd80      	pop	{r7, pc}

08008ef6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008ef6:	b580      	push	{r7, lr}
 8008ef8:	b082      	sub	sp, #8
 8008efa:	af00      	add	r7, sp, #0
 8008efc:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008efe:	6878      	ldr	r0, [r7, #4]
 8008f00:	f001 fc6e 	bl	800a7e0 <USBD_LL_Start>
 8008f04:	4603      	mov	r3, r0
}
 8008f06:	4618      	mov	r0, r3
 8008f08:	3708      	adds	r7, #8
 8008f0a:	46bd      	mov	sp, r7
 8008f0c:	bd80      	pop	{r7, pc}

08008f0e <USBD_Stop>:
  *         Stop the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Stop(USBD_HandleTypeDef *pdev)
{
 8008f0e:	b580      	push	{r7, lr}
 8008f10:	b082      	sub	sp, #8
 8008f12:	af00      	add	r7, sp, #0
 8008f14:	6078      	str	r0, [r7, #4]
  /* Disconnect USB Device */
  (void)USBD_LL_Stop(pdev);
 8008f16:	6878      	ldr	r0, [r7, #4]
 8008f18:	f001 fc7d 	bl	800a816 <USBD_LL_Stop>

  /* Free Class Resources */
  if (pdev->pClass != NULL)
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d009      	beq.n	8008f3a <USBD_Stop+0x2c>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008f2c:	685b      	ldr	r3, [r3, #4]
 8008f2e:	687a      	ldr	r2, [r7, #4]
 8008f30:	6852      	ldr	r2, [r2, #4]
 8008f32:	b2d2      	uxtb	r2, r2
 8008f34:	4611      	mov	r1, r2
 8008f36:	6878      	ldr	r0, [r7, #4]
 8008f38:	4798      	blx	r3
  }

  return USBD_OK;
 8008f3a:	2300      	movs	r3, #0
}
 8008f3c:	4618      	mov	r0, r3
 8008f3e:	3708      	adds	r7, #8
 8008f40:	46bd      	mov	sp, r7
 8008f42:	bd80      	pop	{r7, pc}

08008f44 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8008f44:	b480      	push	{r7}
 8008f46:	b083      	sub	sp, #12
 8008f48:	af00      	add	r7, sp, #0
 8008f4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008f4c:	2300      	movs	r3, #0
}
 8008f4e:	4618      	mov	r0, r3
 8008f50:	370c      	adds	r7, #12
 8008f52:	46bd      	mov	sp, r7
 8008f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f58:	4770      	bx	lr

08008f5a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008f5a:	b580      	push	{r7, lr}
 8008f5c:	b084      	sub	sp, #16
 8008f5e:	af00      	add	r7, sp, #0
 8008f60:	6078      	str	r0, [r7, #4]
 8008f62:	460b      	mov	r3, r1
 8008f64:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8008f66:	2303      	movs	r3, #3
 8008f68:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d009      	beq.n	8008f88 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	78fa      	ldrb	r2, [r7, #3]
 8008f7e:	4611      	mov	r1, r2
 8008f80:	6878      	ldr	r0, [r7, #4]
 8008f82:	4798      	blx	r3
 8008f84:	4603      	mov	r3, r0
 8008f86:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008f88:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f8a:	4618      	mov	r0, r3
 8008f8c:	3710      	adds	r7, #16
 8008f8e:	46bd      	mov	sp, r7
 8008f90:	bd80      	pop	{r7, pc}

08008f92 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008f92:	b580      	push	{r7, lr}
 8008f94:	b082      	sub	sp, #8
 8008f96:	af00      	add	r7, sp, #0
 8008f98:	6078      	str	r0, [r7, #4]
 8008f9a:	460b      	mov	r3, r1
 8008f9c:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d007      	beq.n	8008fb8 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008fae:	685b      	ldr	r3, [r3, #4]
 8008fb0:	78fa      	ldrb	r2, [r7, #3]
 8008fb2:	4611      	mov	r1, r2
 8008fb4:	6878      	ldr	r0, [r7, #4]
 8008fb6:	4798      	blx	r3
  }

  return USBD_OK;
 8008fb8:	2300      	movs	r3, #0
}
 8008fba:	4618      	mov	r0, r3
 8008fbc:	3708      	adds	r7, #8
 8008fbe:	46bd      	mov	sp, r7
 8008fc0:	bd80      	pop	{r7, pc}

08008fc2 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008fc2:	b580      	push	{r7, lr}
 8008fc4:	b084      	sub	sp, #16
 8008fc6:	af00      	add	r7, sp, #0
 8008fc8:	6078      	str	r0, [r7, #4]
 8008fca:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008fd2:	6839      	ldr	r1, [r7, #0]
 8008fd4:	4618      	mov	r0, r3
 8008fd6:	f000 ffa3 	bl	8009f20 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	2201      	movs	r2, #1
 8008fde:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8008fe8:	461a      	mov	r2, r3
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008ff6:	f003 031f 	and.w	r3, r3, #31
 8008ffa:	2b02      	cmp	r3, #2
 8008ffc:	d01a      	beq.n	8009034 <USBD_LL_SetupStage+0x72>
 8008ffe:	2b02      	cmp	r3, #2
 8009000:	d822      	bhi.n	8009048 <USBD_LL_SetupStage+0x86>
 8009002:	2b00      	cmp	r3, #0
 8009004:	d002      	beq.n	800900c <USBD_LL_SetupStage+0x4a>
 8009006:	2b01      	cmp	r3, #1
 8009008:	d00a      	beq.n	8009020 <USBD_LL_SetupStage+0x5e>
 800900a:	e01d      	b.n	8009048 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009012:	4619      	mov	r1, r3
 8009014:	6878      	ldr	r0, [r7, #4]
 8009016:	f000 fa63 	bl	80094e0 <USBD_StdDevReq>
 800901a:	4603      	mov	r3, r0
 800901c:	73fb      	strb	r3, [r7, #15]
      break;
 800901e:	e020      	b.n	8009062 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009026:	4619      	mov	r1, r3
 8009028:	6878      	ldr	r0, [r7, #4]
 800902a:	f000 fac7 	bl	80095bc <USBD_StdItfReq>
 800902e:	4603      	mov	r3, r0
 8009030:	73fb      	strb	r3, [r7, #15]
      break;
 8009032:	e016      	b.n	8009062 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800903a:	4619      	mov	r1, r3
 800903c:	6878      	ldr	r0, [r7, #4]
 800903e:	f000 fb06 	bl	800964e <USBD_StdEPReq>
 8009042:	4603      	mov	r3, r0
 8009044:	73fb      	strb	r3, [r7, #15]
      break;
 8009046:	e00c      	b.n	8009062 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800904e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8009052:	b2db      	uxtb	r3, r3
 8009054:	4619      	mov	r1, r3
 8009056:	6878      	ldr	r0, [r7, #4]
 8009058:	f001 fc1e 	bl	800a898 <USBD_LL_StallEP>
 800905c:	4603      	mov	r3, r0
 800905e:	73fb      	strb	r3, [r7, #15]
      break;
 8009060:	bf00      	nop
  }

  return ret;
 8009062:	7bfb      	ldrb	r3, [r7, #15]
}
 8009064:	4618      	mov	r0, r3
 8009066:	3710      	adds	r7, #16
 8009068:	46bd      	mov	sp, r7
 800906a:	bd80      	pop	{r7, pc}

0800906c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800906c:	b580      	push	{r7, lr}
 800906e:	b086      	sub	sp, #24
 8009070:	af00      	add	r7, sp, #0
 8009072:	60f8      	str	r0, [r7, #12]
 8009074:	460b      	mov	r3, r1
 8009076:	607a      	str	r2, [r7, #4]
 8009078:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800907a:	7afb      	ldrb	r3, [r7, #11]
 800907c:	2b00      	cmp	r3, #0
 800907e:	d138      	bne.n	80090f2 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8009086:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800908e:	2b03      	cmp	r3, #3
 8009090:	d14a      	bne.n	8009128 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8009092:	693b      	ldr	r3, [r7, #16]
 8009094:	689a      	ldr	r2, [r3, #8]
 8009096:	693b      	ldr	r3, [r7, #16]
 8009098:	68db      	ldr	r3, [r3, #12]
 800909a:	429a      	cmp	r2, r3
 800909c:	d913      	bls.n	80090c6 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800909e:	693b      	ldr	r3, [r7, #16]
 80090a0:	689a      	ldr	r2, [r3, #8]
 80090a2:	693b      	ldr	r3, [r7, #16]
 80090a4:	68db      	ldr	r3, [r3, #12]
 80090a6:	1ad2      	subs	r2, r2, r3
 80090a8:	693b      	ldr	r3, [r7, #16]
 80090aa:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80090ac:	693b      	ldr	r3, [r7, #16]
 80090ae:	68da      	ldr	r2, [r3, #12]
 80090b0:	693b      	ldr	r3, [r7, #16]
 80090b2:	689b      	ldr	r3, [r3, #8]
 80090b4:	4293      	cmp	r3, r2
 80090b6:	bf28      	it	cs
 80090b8:	4613      	movcs	r3, r2
 80090ba:	461a      	mov	r2, r3
 80090bc:	6879      	ldr	r1, [r7, #4]
 80090be:	68f8      	ldr	r0, [r7, #12]
 80090c0:	f001 f822 	bl	800a108 <USBD_CtlContinueRx>
 80090c4:	e030      	b.n	8009128 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80090cc:	b2db      	uxtb	r3, r3
 80090ce:	2b03      	cmp	r3, #3
 80090d0:	d10b      	bne.n	80090ea <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80090d8:	691b      	ldr	r3, [r3, #16]
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d005      	beq.n	80090ea <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80090e4:	691b      	ldr	r3, [r3, #16]
 80090e6:	68f8      	ldr	r0, [r7, #12]
 80090e8:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80090ea:	68f8      	ldr	r0, [r7, #12]
 80090ec:	f001 f81d 	bl	800a12a <USBD_CtlSendStatus>
 80090f0:	e01a      	b.n	8009128 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80090f8:	b2db      	uxtb	r3, r3
 80090fa:	2b03      	cmp	r3, #3
 80090fc:	d114      	bne.n	8009128 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009104:	699b      	ldr	r3, [r3, #24]
 8009106:	2b00      	cmp	r3, #0
 8009108:	d00e      	beq.n	8009128 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009110:	699b      	ldr	r3, [r3, #24]
 8009112:	7afa      	ldrb	r2, [r7, #11]
 8009114:	4611      	mov	r1, r2
 8009116:	68f8      	ldr	r0, [r7, #12]
 8009118:	4798      	blx	r3
 800911a:	4603      	mov	r3, r0
 800911c:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800911e:	7dfb      	ldrb	r3, [r7, #23]
 8009120:	2b00      	cmp	r3, #0
 8009122:	d001      	beq.n	8009128 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8009124:	7dfb      	ldrb	r3, [r7, #23]
 8009126:	e000      	b.n	800912a <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8009128:	2300      	movs	r3, #0
}
 800912a:	4618      	mov	r0, r3
 800912c:	3718      	adds	r7, #24
 800912e:	46bd      	mov	sp, r7
 8009130:	bd80      	pop	{r7, pc}

08009132 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009132:	b580      	push	{r7, lr}
 8009134:	b086      	sub	sp, #24
 8009136:	af00      	add	r7, sp, #0
 8009138:	60f8      	str	r0, [r7, #12]
 800913a:	460b      	mov	r3, r1
 800913c:	607a      	str	r2, [r7, #4]
 800913e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8009140:	7afb      	ldrb	r3, [r7, #11]
 8009142:	2b00      	cmp	r3, #0
 8009144:	d16b      	bne.n	800921e <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	3314      	adds	r3, #20
 800914a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009152:	2b02      	cmp	r3, #2
 8009154:	d156      	bne.n	8009204 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8009156:	693b      	ldr	r3, [r7, #16]
 8009158:	689a      	ldr	r2, [r3, #8]
 800915a:	693b      	ldr	r3, [r7, #16]
 800915c:	68db      	ldr	r3, [r3, #12]
 800915e:	429a      	cmp	r2, r3
 8009160:	d914      	bls.n	800918c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009162:	693b      	ldr	r3, [r7, #16]
 8009164:	689a      	ldr	r2, [r3, #8]
 8009166:	693b      	ldr	r3, [r7, #16]
 8009168:	68db      	ldr	r3, [r3, #12]
 800916a:	1ad2      	subs	r2, r2, r3
 800916c:	693b      	ldr	r3, [r7, #16]
 800916e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8009170:	693b      	ldr	r3, [r7, #16]
 8009172:	689b      	ldr	r3, [r3, #8]
 8009174:	461a      	mov	r2, r3
 8009176:	6879      	ldr	r1, [r7, #4]
 8009178:	68f8      	ldr	r0, [r7, #12]
 800917a:	f000 ff97 	bl	800a0ac <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800917e:	2300      	movs	r3, #0
 8009180:	2200      	movs	r2, #0
 8009182:	2100      	movs	r1, #0
 8009184:	68f8      	ldr	r0, [r7, #12]
 8009186:	f001 fc31 	bl	800a9ec <USBD_LL_PrepareReceive>
 800918a:	e03b      	b.n	8009204 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800918c:	693b      	ldr	r3, [r7, #16]
 800918e:	68da      	ldr	r2, [r3, #12]
 8009190:	693b      	ldr	r3, [r7, #16]
 8009192:	689b      	ldr	r3, [r3, #8]
 8009194:	429a      	cmp	r2, r3
 8009196:	d11c      	bne.n	80091d2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8009198:	693b      	ldr	r3, [r7, #16]
 800919a:	685a      	ldr	r2, [r3, #4]
 800919c:	693b      	ldr	r3, [r7, #16]
 800919e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80091a0:	429a      	cmp	r2, r3
 80091a2:	d316      	bcc.n	80091d2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80091a4:	693b      	ldr	r3, [r7, #16]
 80091a6:	685a      	ldr	r2, [r3, #4]
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 80091ae:	429a      	cmp	r2, r3
 80091b0:	d20f      	bcs.n	80091d2 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80091b2:	2200      	movs	r2, #0
 80091b4:	2100      	movs	r1, #0
 80091b6:	68f8      	ldr	r0, [r7, #12]
 80091b8:	f000 ff78 	bl	800a0ac <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	2200      	movs	r2, #0
 80091c0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80091c4:	2300      	movs	r3, #0
 80091c6:	2200      	movs	r2, #0
 80091c8:	2100      	movs	r1, #0
 80091ca:	68f8      	ldr	r0, [r7, #12]
 80091cc:	f001 fc0e 	bl	800a9ec <USBD_LL_PrepareReceive>
 80091d0:	e018      	b.n	8009204 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80091d8:	b2db      	uxtb	r3, r3
 80091da:	2b03      	cmp	r3, #3
 80091dc:	d10b      	bne.n	80091f6 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80091e4:	68db      	ldr	r3, [r3, #12]
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d005      	beq.n	80091f6 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80091f0:	68db      	ldr	r3, [r3, #12]
 80091f2:	68f8      	ldr	r0, [r7, #12]
 80091f4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80091f6:	2180      	movs	r1, #128	@ 0x80
 80091f8:	68f8      	ldr	r0, [r7, #12]
 80091fa:	f001 fb4d 	bl	800a898 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80091fe:	68f8      	ldr	r0, [r7, #12]
 8009200:	f000 ffa6 	bl	800a150 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800920a:	2b01      	cmp	r3, #1
 800920c:	d122      	bne.n	8009254 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800920e:	68f8      	ldr	r0, [r7, #12]
 8009210:	f7ff fe98 	bl	8008f44 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	2200      	movs	r2, #0
 8009218:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800921c:	e01a      	b.n	8009254 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009224:	b2db      	uxtb	r3, r3
 8009226:	2b03      	cmp	r3, #3
 8009228:	d114      	bne.n	8009254 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009230:	695b      	ldr	r3, [r3, #20]
 8009232:	2b00      	cmp	r3, #0
 8009234:	d00e      	beq.n	8009254 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800923c:	695b      	ldr	r3, [r3, #20]
 800923e:	7afa      	ldrb	r2, [r7, #11]
 8009240:	4611      	mov	r1, r2
 8009242:	68f8      	ldr	r0, [r7, #12]
 8009244:	4798      	blx	r3
 8009246:	4603      	mov	r3, r0
 8009248:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800924a:	7dfb      	ldrb	r3, [r7, #23]
 800924c:	2b00      	cmp	r3, #0
 800924e:	d001      	beq.n	8009254 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8009250:	7dfb      	ldrb	r3, [r7, #23]
 8009252:	e000      	b.n	8009256 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8009254:	2300      	movs	r3, #0
}
 8009256:	4618      	mov	r0, r3
 8009258:	3718      	adds	r7, #24
 800925a:	46bd      	mov	sp, r7
 800925c:	bd80      	pop	{r7, pc}

0800925e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800925e:	b580      	push	{r7, lr}
 8009260:	b082      	sub	sp, #8
 8009262:	af00      	add	r7, sp, #0
 8009264:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	2201      	movs	r2, #1
 800926a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	2200      	movs	r2, #0
 8009272:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	2200      	movs	r2, #0
 800927a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	2200      	movs	r2, #0
 8009280:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClass == NULL)
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800928a:	2b00      	cmp	r3, #0
 800928c:	d101      	bne.n	8009292 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800928e:	2303      	movs	r3, #3
 8009290:	e02f      	b.n	80092f2 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009298:	2b00      	cmp	r3, #0
 800929a:	d00f      	beq.n	80092bc <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80092a2:	685b      	ldr	r3, [r3, #4]
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d009      	beq.n	80092bc <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80092ae:	685b      	ldr	r3, [r3, #4]
 80092b0:	687a      	ldr	r2, [r7, #4]
 80092b2:	6852      	ldr	r2, [r2, #4]
 80092b4:	b2d2      	uxtb	r2, r2
 80092b6:	4611      	mov	r1, r2
 80092b8:	6878      	ldr	r0, [r7, #4]
 80092ba:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80092bc:	2340      	movs	r3, #64	@ 0x40
 80092be:	2200      	movs	r2, #0
 80092c0:	2100      	movs	r1, #0
 80092c2:	6878      	ldr	r0, [r7, #4]
 80092c4:	f001 fac2 	bl	800a84c <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	2201      	movs	r2, #1
 80092cc:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	2240      	movs	r2, #64	@ 0x40
 80092d4:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80092d8:	2340      	movs	r3, #64	@ 0x40
 80092da:	2200      	movs	r2, #0
 80092dc:	2180      	movs	r1, #128	@ 0x80
 80092de:	6878      	ldr	r0, [r7, #4]
 80092e0:	f001 fab4 	bl	800a84c <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	2201      	movs	r2, #1
 80092e8:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	2240      	movs	r2, #64	@ 0x40
 80092ee:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80092f0:	2300      	movs	r3, #0
}
 80092f2:	4618      	mov	r0, r3
 80092f4:	3708      	adds	r7, #8
 80092f6:	46bd      	mov	sp, r7
 80092f8:	bd80      	pop	{r7, pc}

080092fa <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80092fa:	b480      	push	{r7}
 80092fc:	b083      	sub	sp, #12
 80092fe:	af00      	add	r7, sp, #0
 8009300:	6078      	str	r0, [r7, #4]
 8009302:	460b      	mov	r3, r1
 8009304:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	78fa      	ldrb	r2, [r7, #3]
 800930a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800930c:	2300      	movs	r3, #0
}
 800930e:	4618      	mov	r0, r3
 8009310:	370c      	adds	r7, #12
 8009312:	46bd      	mov	sp, r7
 8009314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009318:	4770      	bx	lr

0800931a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800931a:	b480      	push	{r7}
 800931c:	b083      	sub	sp, #12
 800931e:	af00      	add	r7, sp, #0
 8009320:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009328:	b2da      	uxtb	r2, r3
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	2204      	movs	r2, #4
 8009334:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8009338:	2300      	movs	r3, #0
}
 800933a:	4618      	mov	r0, r3
 800933c:	370c      	adds	r7, #12
 800933e:	46bd      	mov	sp, r7
 8009340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009344:	4770      	bx	lr

08009346 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009346:	b480      	push	{r7}
 8009348:	b083      	sub	sp, #12
 800934a:	af00      	add	r7, sp, #0
 800934c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009354:	b2db      	uxtb	r3, r3
 8009356:	2b04      	cmp	r3, #4
 8009358:	d106      	bne.n	8009368 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8009360:	b2da      	uxtb	r2, r3
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8009368:	2300      	movs	r3, #0
}
 800936a:	4618      	mov	r0, r3
 800936c:	370c      	adds	r7, #12
 800936e:	46bd      	mov	sp, r7
 8009370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009374:	4770      	bx	lr

08009376 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009376:	b580      	push	{r7, lr}
 8009378:	b082      	sub	sp, #8
 800937a:	af00      	add	r7, sp, #0
 800937c:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009384:	2b00      	cmp	r3, #0
 8009386:	d101      	bne.n	800938c <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8009388:	2303      	movs	r3, #3
 800938a:	e012      	b.n	80093b2 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009392:	b2db      	uxtb	r3, r3
 8009394:	2b03      	cmp	r3, #3
 8009396:	d10b      	bne.n	80093b0 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800939e:	69db      	ldr	r3, [r3, #28]
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d005      	beq.n	80093b0 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80093aa:	69db      	ldr	r3, [r3, #28]
 80093ac:	6878      	ldr	r0, [r7, #4]
 80093ae:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80093b0:	2300      	movs	r3, #0
}
 80093b2:	4618      	mov	r0, r3
 80093b4:	3708      	adds	r7, #8
 80093b6:	46bd      	mov	sp, r7
 80093b8:	bd80      	pop	{r7, pc}

080093ba <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80093ba:	b580      	push	{r7, lr}
 80093bc:	b082      	sub	sp, #8
 80093be:	af00      	add	r7, sp, #0
 80093c0:	6078      	str	r0, [r7, #4]
 80093c2:	460b      	mov	r3, r1
 80093c4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d101      	bne.n	80093d4 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 80093d0:	2303      	movs	r3, #3
 80093d2:	e014      	b.n	80093fe <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80093da:	b2db      	uxtb	r3, r3
 80093dc:	2b03      	cmp	r3, #3
 80093de:	d10d      	bne.n	80093fc <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80093e6:	6a1b      	ldr	r3, [r3, #32]
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d007      	beq.n	80093fc <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80093f2:	6a1b      	ldr	r3, [r3, #32]
 80093f4:	78fa      	ldrb	r2, [r7, #3]
 80093f6:	4611      	mov	r1, r2
 80093f8:	6878      	ldr	r0, [r7, #4]
 80093fa:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80093fc:	2300      	movs	r3, #0
}
 80093fe:	4618      	mov	r0, r3
 8009400:	3708      	adds	r7, #8
 8009402:	46bd      	mov	sp, r7
 8009404:	bd80      	pop	{r7, pc}

08009406 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8009406:	b580      	push	{r7, lr}
 8009408:	b082      	sub	sp, #8
 800940a:	af00      	add	r7, sp, #0
 800940c:	6078      	str	r0, [r7, #4]
 800940e:	460b      	mov	r3, r1
 8009410:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009418:	2b00      	cmp	r3, #0
 800941a:	d101      	bne.n	8009420 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800941c:	2303      	movs	r3, #3
 800941e:	e014      	b.n	800944a <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009426:	b2db      	uxtb	r3, r3
 8009428:	2b03      	cmp	r3, #3
 800942a:	d10d      	bne.n	8009448 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009432:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009434:	2b00      	cmp	r3, #0
 8009436:	d007      	beq.n	8009448 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800943e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009440:	78fa      	ldrb	r2, [r7, #3]
 8009442:	4611      	mov	r1, r2
 8009444:	6878      	ldr	r0, [r7, #4]
 8009446:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009448:	2300      	movs	r3, #0
}
 800944a:	4618      	mov	r0, r3
 800944c:	3708      	adds	r7, #8
 800944e:	46bd      	mov	sp, r7
 8009450:	bd80      	pop	{r7, pc}

08009452 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8009452:	b480      	push	{r7}
 8009454:	b083      	sub	sp, #12
 8009456:	af00      	add	r7, sp, #0
 8009458:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800945a:	2300      	movs	r3, #0
}
 800945c:	4618      	mov	r0, r3
 800945e:	370c      	adds	r7, #12
 8009460:	46bd      	mov	sp, r7
 8009462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009466:	4770      	bx	lr

08009468 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8009468:	b580      	push	{r7, lr}
 800946a:	b082      	sub	sp, #8
 800946c:	af00      	add	r7, sp, #0
 800946e:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	2201      	movs	r2, #1
 8009474:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  if (pdev->pClass != NULL)
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800947e:	2b00      	cmp	r3, #0
 8009480:	d009      	beq.n	8009496 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009488:	685b      	ldr	r3, [r3, #4]
 800948a:	687a      	ldr	r2, [r7, #4]
 800948c:	6852      	ldr	r2, [r2, #4]
 800948e:	b2d2      	uxtb	r2, r2
 8009490:	4611      	mov	r1, r2
 8009492:	6878      	ldr	r0, [r7, #4]
 8009494:	4798      	blx	r3
  }

  return USBD_OK;
 8009496:	2300      	movs	r3, #0
}
 8009498:	4618      	mov	r0, r3
 800949a:	3708      	adds	r7, #8
 800949c:	46bd      	mov	sp, r7
 800949e:	bd80      	pop	{r7, pc}

080094a0 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80094a0:	b480      	push	{r7}
 80094a2:	b087      	sub	sp, #28
 80094a4:	af00      	add	r7, sp, #0
 80094a6:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80094ac:	697b      	ldr	r3, [r7, #20]
 80094ae:	781b      	ldrb	r3, [r3, #0]
 80094b0:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80094b2:	697b      	ldr	r3, [r7, #20]
 80094b4:	3301      	adds	r3, #1
 80094b6:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80094b8:	697b      	ldr	r3, [r7, #20]
 80094ba:	781b      	ldrb	r3, [r3, #0]
 80094bc:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80094be:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80094c2:	021b      	lsls	r3, r3, #8
 80094c4:	b21a      	sxth	r2, r3
 80094c6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80094ca:	4313      	orrs	r3, r2
 80094cc:	b21b      	sxth	r3, r3
 80094ce:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80094d0:	89fb      	ldrh	r3, [r7, #14]
}
 80094d2:	4618      	mov	r0, r3
 80094d4:	371c      	adds	r7, #28
 80094d6:	46bd      	mov	sp, r7
 80094d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094dc:	4770      	bx	lr
	...

080094e0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80094e0:	b580      	push	{r7, lr}
 80094e2:	b084      	sub	sp, #16
 80094e4:	af00      	add	r7, sp, #0
 80094e6:	6078      	str	r0, [r7, #4]
 80094e8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80094ea:	2300      	movs	r3, #0
 80094ec:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80094ee:	683b      	ldr	r3, [r7, #0]
 80094f0:	781b      	ldrb	r3, [r3, #0]
 80094f2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80094f6:	2b40      	cmp	r3, #64	@ 0x40
 80094f8:	d005      	beq.n	8009506 <USBD_StdDevReq+0x26>
 80094fa:	2b40      	cmp	r3, #64	@ 0x40
 80094fc:	d853      	bhi.n	80095a6 <USBD_StdDevReq+0xc6>
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d00b      	beq.n	800951a <USBD_StdDevReq+0x3a>
 8009502:	2b20      	cmp	r3, #32
 8009504:	d14f      	bne.n	80095a6 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800950c:	689b      	ldr	r3, [r3, #8]
 800950e:	6839      	ldr	r1, [r7, #0]
 8009510:	6878      	ldr	r0, [r7, #4]
 8009512:	4798      	blx	r3
 8009514:	4603      	mov	r3, r0
 8009516:	73fb      	strb	r3, [r7, #15]
      break;
 8009518:	e04a      	b.n	80095b0 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800951a:	683b      	ldr	r3, [r7, #0]
 800951c:	785b      	ldrb	r3, [r3, #1]
 800951e:	2b09      	cmp	r3, #9
 8009520:	d83b      	bhi.n	800959a <USBD_StdDevReq+0xba>
 8009522:	a201      	add	r2, pc, #4	@ (adr r2, 8009528 <USBD_StdDevReq+0x48>)
 8009524:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009528:	0800957d 	.word	0x0800957d
 800952c:	08009591 	.word	0x08009591
 8009530:	0800959b 	.word	0x0800959b
 8009534:	08009587 	.word	0x08009587
 8009538:	0800959b 	.word	0x0800959b
 800953c:	0800955b 	.word	0x0800955b
 8009540:	08009551 	.word	0x08009551
 8009544:	0800959b 	.word	0x0800959b
 8009548:	08009573 	.word	0x08009573
 800954c:	08009565 	.word	0x08009565
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009550:	6839      	ldr	r1, [r7, #0]
 8009552:	6878      	ldr	r0, [r7, #4]
 8009554:	f000 f9de 	bl	8009914 <USBD_GetDescriptor>
          break;
 8009558:	e024      	b.n	80095a4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800955a:	6839      	ldr	r1, [r7, #0]
 800955c:	6878      	ldr	r0, [r7, #4]
 800955e:	f000 fb55 	bl	8009c0c <USBD_SetAddress>
          break;
 8009562:	e01f      	b.n	80095a4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8009564:	6839      	ldr	r1, [r7, #0]
 8009566:	6878      	ldr	r0, [r7, #4]
 8009568:	f000 fb94 	bl	8009c94 <USBD_SetConfig>
 800956c:	4603      	mov	r3, r0
 800956e:	73fb      	strb	r3, [r7, #15]
          break;
 8009570:	e018      	b.n	80095a4 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009572:	6839      	ldr	r1, [r7, #0]
 8009574:	6878      	ldr	r0, [r7, #4]
 8009576:	f000 fc33 	bl	8009de0 <USBD_GetConfig>
          break;
 800957a:	e013      	b.n	80095a4 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800957c:	6839      	ldr	r1, [r7, #0]
 800957e:	6878      	ldr	r0, [r7, #4]
 8009580:	f000 fc64 	bl	8009e4c <USBD_GetStatus>
          break;
 8009584:	e00e      	b.n	80095a4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009586:	6839      	ldr	r1, [r7, #0]
 8009588:	6878      	ldr	r0, [r7, #4]
 800958a:	f000 fc93 	bl	8009eb4 <USBD_SetFeature>
          break;
 800958e:	e009      	b.n	80095a4 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009590:	6839      	ldr	r1, [r7, #0]
 8009592:	6878      	ldr	r0, [r7, #4]
 8009594:	f000 fca2 	bl	8009edc <USBD_ClrFeature>
          break;
 8009598:	e004      	b.n	80095a4 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800959a:	6839      	ldr	r1, [r7, #0]
 800959c:	6878      	ldr	r0, [r7, #4]
 800959e:	f000 fcf9 	bl	8009f94 <USBD_CtlError>
          break;
 80095a2:	bf00      	nop
      }
      break;
 80095a4:	e004      	b.n	80095b0 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 80095a6:	6839      	ldr	r1, [r7, #0]
 80095a8:	6878      	ldr	r0, [r7, #4]
 80095aa:	f000 fcf3 	bl	8009f94 <USBD_CtlError>
      break;
 80095ae:	bf00      	nop
  }

  return ret;
 80095b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80095b2:	4618      	mov	r0, r3
 80095b4:	3710      	adds	r7, #16
 80095b6:	46bd      	mov	sp, r7
 80095b8:	bd80      	pop	{r7, pc}
 80095ba:	bf00      	nop

080095bc <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80095bc:	b580      	push	{r7, lr}
 80095be:	b084      	sub	sp, #16
 80095c0:	af00      	add	r7, sp, #0
 80095c2:	6078      	str	r0, [r7, #4]
 80095c4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80095c6:	2300      	movs	r3, #0
 80095c8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80095ca:	683b      	ldr	r3, [r7, #0]
 80095cc:	781b      	ldrb	r3, [r3, #0]
 80095ce:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80095d2:	2b40      	cmp	r3, #64	@ 0x40
 80095d4:	d005      	beq.n	80095e2 <USBD_StdItfReq+0x26>
 80095d6:	2b40      	cmp	r3, #64	@ 0x40
 80095d8:	d82f      	bhi.n	800963a <USBD_StdItfReq+0x7e>
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d001      	beq.n	80095e2 <USBD_StdItfReq+0x26>
 80095de:	2b20      	cmp	r3, #32
 80095e0:	d12b      	bne.n	800963a <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80095e8:	b2db      	uxtb	r3, r3
 80095ea:	3b01      	subs	r3, #1
 80095ec:	2b02      	cmp	r3, #2
 80095ee:	d81d      	bhi.n	800962c <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80095f0:	683b      	ldr	r3, [r7, #0]
 80095f2:	889b      	ldrh	r3, [r3, #4]
 80095f4:	b2db      	uxtb	r3, r3
 80095f6:	2b01      	cmp	r3, #1
 80095f8:	d813      	bhi.n	8009622 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009600:	689b      	ldr	r3, [r3, #8]
 8009602:	6839      	ldr	r1, [r7, #0]
 8009604:	6878      	ldr	r0, [r7, #4]
 8009606:	4798      	blx	r3
 8009608:	4603      	mov	r3, r0
 800960a:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800960c:	683b      	ldr	r3, [r7, #0]
 800960e:	88db      	ldrh	r3, [r3, #6]
 8009610:	2b00      	cmp	r3, #0
 8009612:	d110      	bne.n	8009636 <USBD_StdItfReq+0x7a>
 8009614:	7bfb      	ldrb	r3, [r7, #15]
 8009616:	2b00      	cmp	r3, #0
 8009618:	d10d      	bne.n	8009636 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800961a:	6878      	ldr	r0, [r7, #4]
 800961c:	f000 fd85 	bl	800a12a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009620:	e009      	b.n	8009636 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8009622:	6839      	ldr	r1, [r7, #0]
 8009624:	6878      	ldr	r0, [r7, #4]
 8009626:	f000 fcb5 	bl	8009f94 <USBD_CtlError>
          break;
 800962a:	e004      	b.n	8009636 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800962c:	6839      	ldr	r1, [r7, #0]
 800962e:	6878      	ldr	r0, [r7, #4]
 8009630:	f000 fcb0 	bl	8009f94 <USBD_CtlError>
          break;
 8009634:	e000      	b.n	8009638 <USBD_StdItfReq+0x7c>
          break;
 8009636:	bf00      	nop
      }
      break;
 8009638:	e004      	b.n	8009644 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800963a:	6839      	ldr	r1, [r7, #0]
 800963c:	6878      	ldr	r0, [r7, #4]
 800963e:	f000 fca9 	bl	8009f94 <USBD_CtlError>
      break;
 8009642:	bf00      	nop
  }

  return ret;
 8009644:	7bfb      	ldrb	r3, [r7, #15]
}
 8009646:	4618      	mov	r0, r3
 8009648:	3710      	adds	r7, #16
 800964a:	46bd      	mov	sp, r7
 800964c:	bd80      	pop	{r7, pc}

0800964e <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800964e:	b580      	push	{r7, lr}
 8009650:	b084      	sub	sp, #16
 8009652:	af00      	add	r7, sp, #0
 8009654:	6078      	str	r0, [r7, #4]
 8009656:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8009658:	2300      	movs	r3, #0
 800965a:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800965c:	683b      	ldr	r3, [r7, #0]
 800965e:	889b      	ldrh	r3, [r3, #4]
 8009660:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009662:	683b      	ldr	r3, [r7, #0]
 8009664:	781b      	ldrb	r3, [r3, #0]
 8009666:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800966a:	2b40      	cmp	r3, #64	@ 0x40
 800966c:	d007      	beq.n	800967e <USBD_StdEPReq+0x30>
 800966e:	2b40      	cmp	r3, #64	@ 0x40
 8009670:	f200 8145 	bhi.w	80098fe <USBD_StdEPReq+0x2b0>
 8009674:	2b00      	cmp	r3, #0
 8009676:	d00c      	beq.n	8009692 <USBD_StdEPReq+0x44>
 8009678:	2b20      	cmp	r3, #32
 800967a:	f040 8140 	bne.w	80098fe <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009684:	689b      	ldr	r3, [r3, #8]
 8009686:	6839      	ldr	r1, [r7, #0]
 8009688:	6878      	ldr	r0, [r7, #4]
 800968a:	4798      	blx	r3
 800968c:	4603      	mov	r3, r0
 800968e:	73fb      	strb	r3, [r7, #15]
      break;
 8009690:	e13a      	b.n	8009908 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009692:	683b      	ldr	r3, [r7, #0]
 8009694:	785b      	ldrb	r3, [r3, #1]
 8009696:	2b03      	cmp	r3, #3
 8009698:	d007      	beq.n	80096aa <USBD_StdEPReq+0x5c>
 800969a:	2b03      	cmp	r3, #3
 800969c:	f300 8129 	bgt.w	80098f2 <USBD_StdEPReq+0x2a4>
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d07f      	beq.n	80097a4 <USBD_StdEPReq+0x156>
 80096a4:	2b01      	cmp	r3, #1
 80096a6:	d03c      	beq.n	8009722 <USBD_StdEPReq+0xd4>
 80096a8:	e123      	b.n	80098f2 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80096b0:	b2db      	uxtb	r3, r3
 80096b2:	2b02      	cmp	r3, #2
 80096b4:	d002      	beq.n	80096bc <USBD_StdEPReq+0x6e>
 80096b6:	2b03      	cmp	r3, #3
 80096b8:	d016      	beq.n	80096e8 <USBD_StdEPReq+0x9a>
 80096ba:	e02c      	b.n	8009716 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80096bc:	7bbb      	ldrb	r3, [r7, #14]
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d00d      	beq.n	80096de <USBD_StdEPReq+0x90>
 80096c2:	7bbb      	ldrb	r3, [r7, #14]
 80096c4:	2b80      	cmp	r3, #128	@ 0x80
 80096c6:	d00a      	beq.n	80096de <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80096c8:	7bbb      	ldrb	r3, [r7, #14]
 80096ca:	4619      	mov	r1, r3
 80096cc:	6878      	ldr	r0, [r7, #4]
 80096ce:	f001 f8e3 	bl	800a898 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80096d2:	2180      	movs	r1, #128	@ 0x80
 80096d4:	6878      	ldr	r0, [r7, #4]
 80096d6:	f001 f8df 	bl	800a898 <USBD_LL_StallEP>
 80096da:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80096dc:	e020      	b.n	8009720 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 80096de:	6839      	ldr	r1, [r7, #0]
 80096e0:	6878      	ldr	r0, [r7, #4]
 80096e2:	f000 fc57 	bl	8009f94 <USBD_CtlError>
              break;
 80096e6:	e01b      	b.n	8009720 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80096e8:	683b      	ldr	r3, [r7, #0]
 80096ea:	885b      	ldrh	r3, [r3, #2]
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d10e      	bne.n	800970e <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80096f0:	7bbb      	ldrb	r3, [r7, #14]
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d00b      	beq.n	800970e <USBD_StdEPReq+0xc0>
 80096f6:	7bbb      	ldrb	r3, [r7, #14]
 80096f8:	2b80      	cmp	r3, #128	@ 0x80
 80096fa:	d008      	beq.n	800970e <USBD_StdEPReq+0xc0>
 80096fc:	683b      	ldr	r3, [r7, #0]
 80096fe:	88db      	ldrh	r3, [r3, #6]
 8009700:	2b00      	cmp	r3, #0
 8009702:	d104      	bne.n	800970e <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009704:	7bbb      	ldrb	r3, [r7, #14]
 8009706:	4619      	mov	r1, r3
 8009708:	6878      	ldr	r0, [r7, #4]
 800970a:	f001 f8c5 	bl	800a898 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800970e:	6878      	ldr	r0, [r7, #4]
 8009710:	f000 fd0b 	bl	800a12a <USBD_CtlSendStatus>

              break;
 8009714:	e004      	b.n	8009720 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8009716:	6839      	ldr	r1, [r7, #0]
 8009718:	6878      	ldr	r0, [r7, #4]
 800971a:	f000 fc3b 	bl	8009f94 <USBD_CtlError>
              break;
 800971e:	bf00      	nop
          }
          break;
 8009720:	e0ec      	b.n	80098fc <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009728:	b2db      	uxtb	r3, r3
 800972a:	2b02      	cmp	r3, #2
 800972c:	d002      	beq.n	8009734 <USBD_StdEPReq+0xe6>
 800972e:	2b03      	cmp	r3, #3
 8009730:	d016      	beq.n	8009760 <USBD_StdEPReq+0x112>
 8009732:	e030      	b.n	8009796 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009734:	7bbb      	ldrb	r3, [r7, #14]
 8009736:	2b00      	cmp	r3, #0
 8009738:	d00d      	beq.n	8009756 <USBD_StdEPReq+0x108>
 800973a:	7bbb      	ldrb	r3, [r7, #14]
 800973c:	2b80      	cmp	r3, #128	@ 0x80
 800973e:	d00a      	beq.n	8009756 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009740:	7bbb      	ldrb	r3, [r7, #14]
 8009742:	4619      	mov	r1, r3
 8009744:	6878      	ldr	r0, [r7, #4]
 8009746:	f001 f8a7 	bl	800a898 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800974a:	2180      	movs	r1, #128	@ 0x80
 800974c:	6878      	ldr	r0, [r7, #4]
 800974e:	f001 f8a3 	bl	800a898 <USBD_LL_StallEP>
 8009752:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009754:	e025      	b.n	80097a2 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8009756:	6839      	ldr	r1, [r7, #0]
 8009758:	6878      	ldr	r0, [r7, #4]
 800975a:	f000 fc1b 	bl	8009f94 <USBD_CtlError>
              break;
 800975e:	e020      	b.n	80097a2 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009760:	683b      	ldr	r3, [r7, #0]
 8009762:	885b      	ldrh	r3, [r3, #2]
 8009764:	2b00      	cmp	r3, #0
 8009766:	d11b      	bne.n	80097a0 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009768:	7bbb      	ldrb	r3, [r7, #14]
 800976a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800976e:	2b00      	cmp	r3, #0
 8009770:	d004      	beq.n	800977c <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009772:	7bbb      	ldrb	r3, [r7, #14]
 8009774:	4619      	mov	r1, r3
 8009776:	6878      	ldr	r0, [r7, #4]
 8009778:	f001 f8ad 	bl	800a8d6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800977c:	6878      	ldr	r0, [r7, #4]
 800977e:	f000 fcd4 	bl	800a12a <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009788:	689b      	ldr	r3, [r3, #8]
 800978a:	6839      	ldr	r1, [r7, #0]
 800978c:	6878      	ldr	r0, [r7, #4]
 800978e:	4798      	blx	r3
 8009790:	4603      	mov	r3, r0
 8009792:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8009794:	e004      	b.n	80097a0 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8009796:	6839      	ldr	r1, [r7, #0]
 8009798:	6878      	ldr	r0, [r7, #4]
 800979a:	f000 fbfb 	bl	8009f94 <USBD_CtlError>
              break;
 800979e:	e000      	b.n	80097a2 <USBD_StdEPReq+0x154>
              break;
 80097a0:	bf00      	nop
          }
          break;
 80097a2:	e0ab      	b.n	80098fc <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80097aa:	b2db      	uxtb	r3, r3
 80097ac:	2b02      	cmp	r3, #2
 80097ae:	d002      	beq.n	80097b6 <USBD_StdEPReq+0x168>
 80097b0:	2b03      	cmp	r3, #3
 80097b2:	d032      	beq.n	800981a <USBD_StdEPReq+0x1cc>
 80097b4:	e097      	b.n	80098e6 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80097b6:	7bbb      	ldrb	r3, [r7, #14]
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d007      	beq.n	80097cc <USBD_StdEPReq+0x17e>
 80097bc:	7bbb      	ldrb	r3, [r7, #14]
 80097be:	2b80      	cmp	r3, #128	@ 0x80
 80097c0:	d004      	beq.n	80097cc <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 80097c2:	6839      	ldr	r1, [r7, #0]
 80097c4:	6878      	ldr	r0, [r7, #4]
 80097c6:	f000 fbe5 	bl	8009f94 <USBD_CtlError>
                break;
 80097ca:	e091      	b.n	80098f0 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80097cc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	da0b      	bge.n	80097ec <USBD_StdEPReq+0x19e>
 80097d4:	7bbb      	ldrb	r3, [r7, #14]
 80097d6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80097da:	4613      	mov	r3, r2
 80097dc:	009b      	lsls	r3, r3, #2
 80097de:	4413      	add	r3, r2
 80097e0:	009b      	lsls	r3, r3, #2
 80097e2:	3310      	adds	r3, #16
 80097e4:	687a      	ldr	r2, [r7, #4]
 80097e6:	4413      	add	r3, r2
 80097e8:	3304      	adds	r3, #4
 80097ea:	e00b      	b.n	8009804 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80097ec:	7bbb      	ldrb	r3, [r7, #14]
 80097ee:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80097f2:	4613      	mov	r3, r2
 80097f4:	009b      	lsls	r3, r3, #2
 80097f6:	4413      	add	r3, r2
 80097f8:	009b      	lsls	r3, r3, #2
 80097fa:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80097fe:	687a      	ldr	r2, [r7, #4]
 8009800:	4413      	add	r3, r2
 8009802:	3304      	adds	r3, #4
 8009804:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009806:	68bb      	ldr	r3, [r7, #8]
 8009808:	2200      	movs	r2, #0
 800980a:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800980c:	68bb      	ldr	r3, [r7, #8]
 800980e:	2202      	movs	r2, #2
 8009810:	4619      	mov	r1, r3
 8009812:	6878      	ldr	r0, [r7, #4]
 8009814:	f000 fc2f 	bl	800a076 <USBD_CtlSendData>
              break;
 8009818:	e06a      	b.n	80098f0 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800981a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800981e:	2b00      	cmp	r3, #0
 8009820:	da11      	bge.n	8009846 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009822:	7bbb      	ldrb	r3, [r7, #14]
 8009824:	f003 020f 	and.w	r2, r3, #15
 8009828:	6879      	ldr	r1, [r7, #4]
 800982a:	4613      	mov	r3, r2
 800982c:	009b      	lsls	r3, r3, #2
 800982e:	4413      	add	r3, r2
 8009830:	009b      	lsls	r3, r3, #2
 8009832:	440b      	add	r3, r1
 8009834:	3324      	adds	r3, #36	@ 0x24
 8009836:	881b      	ldrh	r3, [r3, #0]
 8009838:	2b00      	cmp	r3, #0
 800983a:	d117      	bne.n	800986c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800983c:	6839      	ldr	r1, [r7, #0]
 800983e:	6878      	ldr	r0, [r7, #4]
 8009840:	f000 fba8 	bl	8009f94 <USBD_CtlError>
                  break;
 8009844:	e054      	b.n	80098f0 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009846:	7bbb      	ldrb	r3, [r7, #14]
 8009848:	f003 020f 	and.w	r2, r3, #15
 800984c:	6879      	ldr	r1, [r7, #4]
 800984e:	4613      	mov	r3, r2
 8009850:	009b      	lsls	r3, r3, #2
 8009852:	4413      	add	r3, r2
 8009854:	009b      	lsls	r3, r3, #2
 8009856:	440b      	add	r3, r1
 8009858:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800985c:	881b      	ldrh	r3, [r3, #0]
 800985e:	2b00      	cmp	r3, #0
 8009860:	d104      	bne.n	800986c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8009862:	6839      	ldr	r1, [r7, #0]
 8009864:	6878      	ldr	r0, [r7, #4]
 8009866:	f000 fb95 	bl	8009f94 <USBD_CtlError>
                  break;
 800986a:	e041      	b.n	80098f0 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800986c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009870:	2b00      	cmp	r3, #0
 8009872:	da0b      	bge.n	800988c <USBD_StdEPReq+0x23e>
 8009874:	7bbb      	ldrb	r3, [r7, #14]
 8009876:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800987a:	4613      	mov	r3, r2
 800987c:	009b      	lsls	r3, r3, #2
 800987e:	4413      	add	r3, r2
 8009880:	009b      	lsls	r3, r3, #2
 8009882:	3310      	adds	r3, #16
 8009884:	687a      	ldr	r2, [r7, #4]
 8009886:	4413      	add	r3, r2
 8009888:	3304      	adds	r3, #4
 800988a:	e00b      	b.n	80098a4 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800988c:	7bbb      	ldrb	r3, [r7, #14]
 800988e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009892:	4613      	mov	r3, r2
 8009894:	009b      	lsls	r3, r3, #2
 8009896:	4413      	add	r3, r2
 8009898:	009b      	lsls	r3, r3, #2
 800989a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800989e:	687a      	ldr	r2, [r7, #4]
 80098a0:	4413      	add	r3, r2
 80098a2:	3304      	adds	r3, #4
 80098a4:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80098a6:	7bbb      	ldrb	r3, [r7, #14]
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d002      	beq.n	80098b2 <USBD_StdEPReq+0x264>
 80098ac:	7bbb      	ldrb	r3, [r7, #14]
 80098ae:	2b80      	cmp	r3, #128	@ 0x80
 80098b0:	d103      	bne.n	80098ba <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 80098b2:	68bb      	ldr	r3, [r7, #8]
 80098b4:	2200      	movs	r2, #0
 80098b6:	601a      	str	r2, [r3, #0]
 80098b8:	e00e      	b.n	80098d8 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80098ba:	7bbb      	ldrb	r3, [r7, #14]
 80098bc:	4619      	mov	r1, r3
 80098be:	6878      	ldr	r0, [r7, #4]
 80098c0:	f001 f828 	bl	800a914 <USBD_LL_IsStallEP>
 80098c4:	4603      	mov	r3, r0
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d003      	beq.n	80098d2 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 80098ca:	68bb      	ldr	r3, [r7, #8]
 80098cc:	2201      	movs	r2, #1
 80098ce:	601a      	str	r2, [r3, #0]
 80098d0:	e002      	b.n	80098d8 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 80098d2:	68bb      	ldr	r3, [r7, #8]
 80098d4:	2200      	movs	r2, #0
 80098d6:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80098d8:	68bb      	ldr	r3, [r7, #8]
 80098da:	2202      	movs	r2, #2
 80098dc:	4619      	mov	r1, r3
 80098de:	6878      	ldr	r0, [r7, #4]
 80098e0:	f000 fbc9 	bl	800a076 <USBD_CtlSendData>
              break;
 80098e4:	e004      	b.n	80098f0 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 80098e6:	6839      	ldr	r1, [r7, #0]
 80098e8:	6878      	ldr	r0, [r7, #4]
 80098ea:	f000 fb53 	bl	8009f94 <USBD_CtlError>
              break;
 80098ee:	bf00      	nop
          }
          break;
 80098f0:	e004      	b.n	80098fc <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 80098f2:	6839      	ldr	r1, [r7, #0]
 80098f4:	6878      	ldr	r0, [r7, #4]
 80098f6:	f000 fb4d 	bl	8009f94 <USBD_CtlError>
          break;
 80098fa:	bf00      	nop
      }
      break;
 80098fc:	e004      	b.n	8009908 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 80098fe:	6839      	ldr	r1, [r7, #0]
 8009900:	6878      	ldr	r0, [r7, #4]
 8009902:	f000 fb47 	bl	8009f94 <USBD_CtlError>
      break;
 8009906:	bf00      	nop
  }

  return ret;
 8009908:	7bfb      	ldrb	r3, [r7, #15]
}
 800990a:	4618      	mov	r0, r3
 800990c:	3710      	adds	r7, #16
 800990e:	46bd      	mov	sp, r7
 8009910:	bd80      	pop	{r7, pc}
	...

08009914 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009914:	b580      	push	{r7, lr}
 8009916:	b084      	sub	sp, #16
 8009918:	af00      	add	r7, sp, #0
 800991a:	6078      	str	r0, [r7, #4]
 800991c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800991e:	2300      	movs	r3, #0
 8009920:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009922:	2300      	movs	r3, #0
 8009924:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009926:	2300      	movs	r3, #0
 8009928:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800992a:	683b      	ldr	r3, [r7, #0]
 800992c:	885b      	ldrh	r3, [r3, #2]
 800992e:	0a1b      	lsrs	r3, r3, #8
 8009930:	b29b      	uxth	r3, r3
 8009932:	3b01      	subs	r3, #1
 8009934:	2b06      	cmp	r3, #6
 8009936:	f200 813b 	bhi.w	8009bb0 <USBD_GetDescriptor+0x29c>
 800993a:	a201      	add	r2, pc, #4	@ (adr r2, 8009940 <USBD_GetDescriptor+0x2c>)
 800993c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009940:	0800995d 	.word	0x0800995d
 8009944:	08009975 	.word	0x08009975
 8009948:	080099b5 	.word	0x080099b5
 800994c:	08009bb1 	.word	0x08009bb1
 8009950:	08009bb1 	.word	0x08009bb1
 8009954:	08009b51 	.word	0x08009b51
 8009958:	08009b7d 	.word	0x08009b7d
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	687a      	ldr	r2, [r7, #4]
 8009966:	7c12      	ldrb	r2, [r2, #16]
 8009968:	f107 0108 	add.w	r1, r7, #8
 800996c:	4610      	mov	r0, r2
 800996e:	4798      	blx	r3
 8009970:	60f8      	str	r0, [r7, #12]
      break;
 8009972:	e125      	b.n	8009bc0 <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	7c1b      	ldrb	r3, [r3, #16]
 8009978:	2b00      	cmp	r3, #0
 800997a:	d10d      	bne.n	8009998 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009982:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009984:	f107 0208 	add.w	r2, r7, #8
 8009988:	4610      	mov	r0, r2
 800998a:	4798      	blx	r3
 800998c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	3301      	adds	r3, #1
 8009992:	2202      	movs	r2, #2
 8009994:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009996:	e113      	b.n	8009bc0 <USBD_GetDescriptor+0x2ac>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800999e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099a0:	f107 0208 	add.w	r2, r7, #8
 80099a4:	4610      	mov	r0, r2
 80099a6:	4798      	blx	r3
 80099a8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	3301      	adds	r3, #1
 80099ae:	2202      	movs	r2, #2
 80099b0:	701a      	strb	r2, [r3, #0]
      break;
 80099b2:	e105      	b.n	8009bc0 <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80099b4:	683b      	ldr	r3, [r7, #0]
 80099b6:	885b      	ldrh	r3, [r3, #2]
 80099b8:	b2db      	uxtb	r3, r3
 80099ba:	2b05      	cmp	r3, #5
 80099bc:	f200 80ac 	bhi.w	8009b18 <USBD_GetDescriptor+0x204>
 80099c0:	a201      	add	r2, pc, #4	@ (adr r2, 80099c8 <USBD_GetDescriptor+0xb4>)
 80099c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099c6:	bf00      	nop
 80099c8:	080099e1 	.word	0x080099e1
 80099cc:	08009a15 	.word	0x08009a15
 80099d0:	08009a49 	.word	0x08009a49
 80099d4:	08009a7d 	.word	0x08009a7d
 80099d8:	08009ab1 	.word	0x08009ab1
 80099dc:	08009ae5 	.word	0x08009ae5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80099e6:	685b      	ldr	r3, [r3, #4]
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d00b      	beq.n	8009a04 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80099f2:	685b      	ldr	r3, [r3, #4]
 80099f4:	687a      	ldr	r2, [r7, #4]
 80099f6:	7c12      	ldrb	r2, [r2, #16]
 80099f8:	f107 0108 	add.w	r1, r7, #8
 80099fc:	4610      	mov	r0, r2
 80099fe:	4798      	blx	r3
 8009a00:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009a02:	e0a4      	b.n	8009b4e <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 8009a04:	6839      	ldr	r1, [r7, #0]
 8009a06:	6878      	ldr	r0, [r7, #4]
 8009a08:	f000 fac4 	bl	8009f94 <USBD_CtlError>
            err++;
 8009a0c:	7afb      	ldrb	r3, [r7, #11]
 8009a0e:	3301      	adds	r3, #1
 8009a10:	72fb      	strb	r3, [r7, #11]
          break;
 8009a12:	e09c      	b.n	8009b4e <USBD_GetDescriptor+0x23a>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009a1a:	689b      	ldr	r3, [r3, #8]
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d00b      	beq.n	8009a38 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009a26:	689b      	ldr	r3, [r3, #8]
 8009a28:	687a      	ldr	r2, [r7, #4]
 8009a2a:	7c12      	ldrb	r2, [r2, #16]
 8009a2c:	f107 0108 	add.w	r1, r7, #8
 8009a30:	4610      	mov	r0, r2
 8009a32:	4798      	blx	r3
 8009a34:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009a36:	e08a      	b.n	8009b4e <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 8009a38:	6839      	ldr	r1, [r7, #0]
 8009a3a:	6878      	ldr	r0, [r7, #4]
 8009a3c:	f000 faaa 	bl	8009f94 <USBD_CtlError>
            err++;
 8009a40:	7afb      	ldrb	r3, [r7, #11]
 8009a42:	3301      	adds	r3, #1
 8009a44:	72fb      	strb	r3, [r7, #11]
          break;
 8009a46:	e082      	b.n	8009b4e <USBD_GetDescriptor+0x23a>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009a4e:	68db      	ldr	r3, [r3, #12]
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d00b      	beq.n	8009a6c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009a5a:	68db      	ldr	r3, [r3, #12]
 8009a5c:	687a      	ldr	r2, [r7, #4]
 8009a5e:	7c12      	ldrb	r2, [r2, #16]
 8009a60:	f107 0108 	add.w	r1, r7, #8
 8009a64:	4610      	mov	r0, r2
 8009a66:	4798      	blx	r3
 8009a68:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009a6a:	e070      	b.n	8009b4e <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 8009a6c:	6839      	ldr	r1, [r7, #0]
 8009a6e:	6878      	ldr	r0, [r7, #4]
 8009a70:	f000 fa90 	bl	8009f94 <USBD_CtlError>
            err++;
 8009a74:	7afb      	ldrb	r3, [r7, #11]
 8009a76:	3301      	adds	r3, #1
 8009a78:	72fb      	strb	r3, [r7, #11]
          break;
 8009a7a:	e068      	b.n	8009b4e <USBD_GetDescriptor+0x23a>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009a82:	691b      	ldr	r3, [r3, #16]
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d00b      	beq.n	8009aa0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009a8e:	691b      	ldr	r3, [r3, #16]
 8009a90:	687a      	ldr	r2, [r7, #4]
 8009a92:	7c12      	ldrb	r2, [r2, #16]
 8009a94:	f107 0108 	add.w	r1, r7, #8
 8009a98:	4610      	mov	r0, r2
 8009a9a:	4798      	blx	r3
 8009a9c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009a9e:	e056      	b.n	8009b4e <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 8009aa0:	6839      	ldr	r1, [r7, #0]
 8009aa2:	6878      	ldr	r0, [r7, #4]
 8009aa4:	f000 fa76 	bl	8009f94 <USBD_CtlError>
            err++;
 8009aa8:	7afb      	ldrb	r3, [r7, #11]
 8009aaa:	3301      	adds	r3, #1
 8009aac:	72fb      	strb	r3, [r7, #11]
          break;
 8009aae:	e04e      	b.n	8009b4e <USBD_GetDescriptor+0x23a>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009ab6:	695b      	ldr	r3, [r3, #20]
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d00b      	beq.n	8009ad4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009ac2:	695b      	ldr	r3, [r3, #20]
 8009ac4:	687a      	ldr	r2, [r7, #4]
 8009ac6:	7c12      	ldrb	r2, [r2, #16]
 8009ac8:	f107 0108 	add.w	r1, r7, #8
 8009acc:	4610      	mov	r0, r2
 8009ace:	4798      	blx	r3
 8009ad0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009ad2:	e03c      	b.n	8009b4e <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 8009ad4:	6839      	ldr	r1, [r7, #0]
 8009ad6:	6878      	ldr	r0, [r7, #4]
 8009ad8:	f000 fa5c 	bl	8009f94 <USBD_CtlError>
            err++;
 8009adc:	7afb      	ldrb	r3, [r7, #11]
 8009ade:	3301      	adds	r3, #1
 8009ae0:	72fb      	strb	r3, [r7, #11]
          break;
 8009ae2:	e034      	b.n	8009b4e <USBD_GetDescriptor+0x23a>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009aea:	699b      	ldr	r3, [r3, #24]
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d00b      	beq.n	8009b08 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009af6:	699b      	ldr	r3, [r3, #24]
 8009af8:	687a      	ldr	r2, [r7, #4]
 8009afa:	7c12      	ldrb	r2, [r2, #16]
 8009afc:	f107 0108 	add.w	r1, r7, #8
 8009b00:	4610      	mov	r0, r2
 8009b02:	4798      	blx	r3
 8009b04:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009b06:	e022      	b.n	8009b4e <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 8009b08:	6839      	ldr	r1, [r7, #0]
 8009b0a:	6878      	ldr	r0, [r7, #4]
 8009b0c:	f000 fa42 	bl	8009f94 <USBD_CtlError>
            err++;
 8009b10:	7afb      	ldrb	r3, [r7, #11]
 8009b12:	3301      	adds	r3, #1
 8009b14:	72fb      	strb	r3, [r7, #11]
          break;
 8009b16:	e01a      	b.n	8009b4e <USBD_GetDescriptor+0x23a>

        default:
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
          if (pdev->pClass->GetUsrStrDescriptor != NULL)
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009b1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d00c      	beq.n	8009b3e <USBD_GetDescriptor+0x22a>
          {
            pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue), &len);
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009b2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b2c:	683a      	ldr	r2, [r7, #0]
 8009b2e:	8852      	ldrh	r2, [r2, #2]
 8009b30:	b2d1      	uxtb	r1, r2
 8009b32:	f107 0208 	add.w	r2, r7, #8
 8009b36:	6878      	ldr	r0, [r7, #4]
 8009b38:	4798      	blx	r3
 8009b3a:	60f8      	str	r0, [r7, #12]

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
          err++;
#endif
          break;
 8009b3c:	e006      	b.n	8009b4c <USBD_GetDescriptor+0x238>
            USBD_CtlError(pdev, req);
 8009b3e:	6839      	ldr	r1, [r7, #0]
 8009b40:	6878      	ldr	r0, [r7, #4]
 8009b42:	f000 fa27 	bl	8009f94 <USBD_CtlError>
            err++;
 8009b46:	7afb      	ldrb	r3, [r7, #11]
 8009b48:	3301      	adds	r3, #1
 8009b4a:	72fb      	strb	r3, [r7, #11]
          break;
 8009b4c:	bf00      	nop
      }
      break;
 8009b4e:	e037      	b.n	8009bc0 <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	7c1b      	ldrb	r3, [r3, #16]
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d109      	bne.n	8009b6c <USBD_GetDescriptor+0x258>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009b5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009b60:	f107 0208 	add.w	r2, r7, #8
 8009b64:	4610      	mov	r0, r2
 8009b66:	4798      	blx	r3
 8009b68:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009b6a:	e029      	b.n	8009bc0 <USBD_GetDescriptor+0x2ac>
        USBD_CtlError(pdev, req);
 8009b6c:	6839      	ldr	r1, [r7, #0]
 8009b6e:	6878      	ldr	r0, [r7, #4]
 8009b70:	f000 fa10 	bl	8009f94 <USBD_CtlError>
        err++;
 8009b74:	7afb      	ldrb	r3, [r7, #11]
 8009b76:	3301      	adds	r3, #1
 8009b78:	72fb      	strb	r3, [r7, #11]
      break;
 8009b7a:	e021      	b.n	8009bc0 <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	7c1b      	ldrb	r3, [r3, #16]
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d10d      	bne.n	8009ba0 <USBD_GetDescriptor+0x28c>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009b8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b8c:	f107 0208 	add.w	r2, r7, #8
 8009b90:	4610      	mov	r0, r2
 8009b92:	4798      	blx	r3
 8009b94:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	3301      	adds	r3, #1
 8009b9a:	2207      	movs	r2, #7
 8009b9c:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009b9e:	e00f      	b.n	8009bc0 <USBD_GetDescriptor+0x2ac>
        USBD_CtlError(pdev, req);
 8009ba0:	6839      	ldr	r1, [r7, #0]
 8009ba2:	6878      	ldr	r0, [r7, #4]
 8009ba4:	f000 f9f6 	bl	8009f94 <USBD_CtlError>
        err++;
 8009ba8:	7afb      	ldrb	r3, [r7, #11]
 8009baa:	3301      	adds	r3, #1
 8009bac:	72fb      	strb	r3, [r7, #11]
      break;
 8009bae:	e007      	b.n	8009bc0 <USBD_GetDescriptor+0x2ac>

    default:
      USBD_CtlError(pdev, req);
 8009bb0:	6839      	ldr	r1, [r7, #0]
 8009bb2:	6878      	ldr	r0, [r7, #4]
 8009bb4:	f000 f9ee 	bl	8009f94 <USBD_CtlError>
      err++;
 8009bb8:	7afb      	ldrb	r3, [r7, #11]
 8009bba:	3301      	adds	r3, #1
 8009bbc:	72fb      	strb	r3, [r7, #11]
      break;
 8009bbe:	bf00      	nop
  }

  if (err != 0U)
 8009bc0:	7afb      	ldrb	r3, [r7, #11]
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d11e      	bne.n	8009c04 <USBD_GetDescriptor+0x2f0>
  {
    return;
  }

  if (req->wLength != 0U)
 8009bc6:	683b      	ldr	r3, [r7, #0]
 8009bc8:	88db      	ldrh	r3, [r3, #6]
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d016      	beq.n	8009bfc <USBD_GetDescriptor+0x2e8>
  {
    if (len != 0U)
 8009bce:	893b      	ldrh	r3, [r7, #8]
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d00e      	beq.n	8009bf2 <USBD_GetDescriptor+0x2de>
    {
      len = MIN(len, req->wLength);
 8009bd4:	683b      	ldr	r3, [r7, #0]
 8009bd6:	88da      	ldrh	r2, [r3, #6]
 8009bd8:	893b      	ldrh	r3, [r7, #8]
 8009bda:	4293      	cmp	r3, r2
 8009bdc:	bf28      	it	cs
 8009bde:	4613      	movcs	r3, r2
 8009be0:	b29b      	uxth	r3, r3
 8009be2:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009be4:	893b      	ldrh	r3, [r7, #8]
 8009be6:	461a      	mov	r2, r3
 8009be8:	68f9      	ldr	r1, [r7, #12]
 8009bea:	6878      	ldr	r0, [r7, #4]
 8009bec:	f000 fa43 	bl	800a076 <USBD_CtlSendData>
 8009bf0:	e009      	b.n	8009c06 <USBD_GetDescriptor+0x2f2>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009bf2:	6839      	ldr	r1, [r7, #0]
 8009bf4:	6878      	ldr	r0, [r7, #4]
 8009bf6:	f000 f9cd 	bl	8009f94 <USBD_CtlError>
 8009bfa:	e004      	b.n	8009c06 <USBD_GetDescriptor+0x2f2>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8009bfc:	6878      	ldr	r0, [r7, #4]
 8009bfe:	f000 fa94 	bl	800a12a <USBD_CtlSendStatus>
 8009c02:	e000      	b.n	8009c06 <USBD_GetDescriptor+0x2f2>
    return;
 8009c04:	bf00      	nop
  }
}
 8009c06:	3710      	adds	r7, #16
 8009c08:	46bd      	mov	sp, r7
 8009c0a:	bd80      	pop	{r7, pc}

08009c0c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009c0c:	b580      	push	{r7, lr}
 8009c0e:	b084      	sub	sp, #16
 8009c10:	af00      	add	r7, sp, #0
 8009c12:	6078      	str	r0, [r7, #4]
 8009c14:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009c16:	683b      	ldr	r3, [r7, #0]
 8009c18:	889b      	ldrh	r3, [r3, #4]
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d131      	bne.n	8009c82 <USBD_SetAddress+0x76>
 8009c1e:	683b      	ldr	r3, [r7, #0]
 8009c20:	88db      	ldrh	r3, [r3, #6]
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d12d      	bne.n	8009c82 <USBD_SetAddress+0x76>
 8009c26:	683b      	ldr	r3, [r7, #0]
 8009c28:	885b      	ldrh	r3, [r3, #2]
 8009c2a:	2b7f      	cmp	r3, #127	@ 0x7f
 8009c2c:	d829      	bhi.n	8009c82 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009c2e:	683b      	ldr	r3, [r7, #0]
 8009c30:	885b      	ldrh	r3, [r3, #2]
 8009c32:	b2db      	uxtb	r3, r3
 8009c34:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009c38:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009c40:	b2db      	uxtb	r3, r3
 8009c42:	2b03      	cmp	r3, #3
 8009c44:	d104      	bne.n	8009c50 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8009c46:	6839      	ldr	r1, [r7, #0]
 8009c48:	6878      	ldr	r0, [r7, #4]
 8009c4a:	f000 f9a3 	bl	8009f94 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009c4e:	e01d      	b.n	8009c8c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	7bfa      	ldrb	r2, [r7, #15]
 8009c54:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009c58:	7bfb      	ldrb	r3, [r7, #15]
 8009c5a:	4619      	mov	r1, r3
 8009c5c:	6878      	ldr	r0, [r7, #4]
 8009c5e:	f000 fe85 	bl	800a96c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009c62:	6878      	ldr	r0, [r7, #4]
 8009c64:	f000 fa61 	bl	800a12a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009c68:	7bfb      	ldrb	r3, [r7, #15]
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d004      	beq.n	8009c78 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	2202      	movs	r2, #2
 8009c72:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009c76:	e009      	b.n	8009c8c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	2201      	movs	r2, #1
 8009c7c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009c80:	e004      	b.n	8009c8c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009c82:	6839      	ldr	r1, [r7, #0]
 8009c84:	6878      	ldr	r0, [r7, #4]
 8009c86:	f000 f985 	bl	8009f94 <USBD_CtlError>
  }
}
 8009c8a:	bf00      	nop
 8009c8c:	bf00      	nop
 8009c8e:	3710      	adds	r7, #16
 8009c90:	46bd      	mov	sp, r7
 8009c92:	bd80      	pop	{r7, pc}

08009c94 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009c94:	b580      	push	{r7, lr}
 8009c96:	b084      	sub	sp, #16
 8009c98:	af00      	add	r7, sp, #0
 8009c9a:	6078      	str	r0, [r7, #4]
 8009c9c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009c9e:	2300      	movs	r3, #0
 8009ca0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009ca2:	683b      	ldr	r3, [r7, #0]
 8009ca4:	885b      	ldrh	r3, [r3, #2]
 8009ca6:	b2da      	uxtb	r2, r3
 8009ca8:	4b4c      	ldr	r3, [pc, #304]	@ (8009ddc <USBD_SetConfig+0x148>)
 8009caa:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009cac:	4b4b      	ldr	r3, [pc, #300]	@ (8009ddc <USBD_SetConfig+0x148>)
 8009cae:	781b      	ldrb	r3, [r3, #0]
 8009cb0:	2b01      	cmp	r3, #1
 8009cb2:	d905      	bls.n	8009cc0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009cb4:	6839      	ldr	r1, [r7, #0]
 8009cb6:	6878      	ldr	r0, [r7, #4]
 8009cb8:	f000 f96c 	bl	8009f94 <USBD_CtlError>
    return USBD_FAIL;
 8009cbc:	2303      	movs	r3, #3
 8009cbe:	e088      	b.n	8009dd2 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009cc6:	b2db      	uxtb	r3, r3
 8009cc8:	2b02      	cmp	r3, #2
 8009cca:	d002      	beq.n	8009cd2 <USBD_SetConfig+0x3e>
 8009ccc:	2b03      	cmp	r3, #3
 8009cce:	d025      	beq.n	8009d1c <USBD_SetConfig+0x88>
 8009cd0:	e071      	b.n	8009db6 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8009cd2:	4b42      	ldr	r3, [pc, #264]	@ (8009ddc <USBD_SetConfig+0x148>)
 8009cd4:	781b      	ldrb	r3, [r3, #0]
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d01c      	beq.n	8009d14 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8009cda:	4b40      	ldr	r3, [pc, #256]	@ (8009ddc <USBD_SetConfig+0x148>)
 8009cdc:	781b      	ldrb	r3, [r3, #0]
 8009cde:	461a      	mov	r2, r3
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009ce4:	4b3d      	ldr	r3, [pc, #244]	@ (8009ddc <USBD_SetConfig+0x148>)
 8009ce6:	781b      	ldrb	r3, [r3, #0]
 8009ce8:	4619      	mov	r1, r3
 8009cea:	6878      	ldr	r0, [r7, #4]
 8009cec:	f7ff f935 	bl	8008f5a <USBD_SetClassConfig>
 8009cf0:	4603      	mov	r3, r0
 8009cf2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009cf4:	7bfb      	ldrb	r3, [r7, #15]
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d004      	beq.n	8009d04 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8009cfa:	6839      	ldr	r1, [r7, #0]
 8009cfc:	6878      	ldr	r0, [r7, #4]
 8009cfe:	f000 f949 	bl	8009f94 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009d02:	e065      	b.n	8009dd0 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8009d04:	6878      	ldr	r0, [r7, #4]
 8009d06:	f000 fa10 	bl	800a12a <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	2203      	movs	r2, #3
 8009d0e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8009d12:	e05d      	b.n	8009dd0 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8009d14:	6878      	ldr	r0, [r7, #4]
 8009d16:	f000 fa08 	bl	800a12a <USBD_CtlSendStatus>
      break;
 8009d1a:	e059      	b.n	8009dd0 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009d1c:	4b2f      	ldr	r3, [pc, #188]	@ (8009ddc <USBD_SetConfig+0x148>)
 8009d1e:	781b      	ldrb	r3, [r3, #0]
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d112      	bne.n	8009d4a <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	2202      	movs	r2, #2
 8009d28:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8009d2c:	4b2b      	ldr	r3, [pc, #172]	@ (8009ddc <USBD_SetConfig+0x148>)
 8009d2e:	781b      	ldrb	r3, [r3, #0]
 8009d30:	461a      	mov	r2, r3
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009d36:	4b29      	ldr	r3, [pc, #164]	@ (8009ddc <USBD_SetConfig+0x148>)
 8009d38:	781b      	ldrb	r3, [r3, #0]
 8009d3a:	4619      	mov	r1, r3
 8009d3c:	6878      	ldr	r0, [r7, #4]
 8009d3e:	f7ff f928 	bl	8008f92 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8009d42:	6878      	ldr	r0, [r7, #4]
 8009d44:	f000 f9f1 	bl	800a12a <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009d48:	e042      	b.n	8009dd0 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8009d4a:	4b24      	ldr	r3, [pc, #144]	@ (8009ddc <USBD_SetConfig+0x148>)
 8009d4c:	781b      	ldrb	r3, [r3, #0]
 8009d4e:	461a      	mov	r2, r3
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	685b      	ldr	r3, [r3, #4]
 8009d54:	429a      	cmp	r2, r3
 8009d56:	d02a      	beq.n	8009dae <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	685b      	ldr	r3, [r3, #4]
 8009d5c:	b2db      	uxtb	r3, r3
 8009d5e:	4619      	mov	r1, r3
 8009d60:	6878      	ldr	r0, [r7, #4]
 8009d62:	f7ff f916 	bl	8008f92 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009d66:	4b1d      	ldr	r3, [pc, #116]	@ (8009ddc <USBD_SetConfig+0x148>)
 8009d68:	781b      	ldrb	r3, [r3, #0]
 8009d6a:	461a      	mov	r2, r3
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009d70:	4b1a      	ldr	r3, [pc, #104]	@ (8009ddc <USBD_SetConfig+0x148>)
 8009d72:	781b      	ldrb	r3, [r3, #0]
 8009d74:	4619      	mov	r1, r3
 8009d76:	6878      	ldr	r0, [r7, #4]
 8009d78:	f7ff f8ef 	bl	8008f5a <USBD_SetClassConfig>
 8009d7c:	4603      	mov	r3, r0
 8009d7e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009d80:	7bfb      	ldrb	r3, [r7, #15]
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d00f      	beq.n	8009da6 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8009d86:	6839      	ldr	r1, [r7, #0]
 8009d88:	6878      	ldr	r0, [r7, #4]
 8009d8a:	f000 f903 	bl	8009f94 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	685b      	ldr	r3, [r3, #4]
 8009d92:	b2db      	uxtb	r3, r3
 8009d94:	4619      	mov	r1, r3
 8009d96:	6878      	ldr	r0, [r7, #4]
 8009d98:	f7ff f8fb 	bl	8008f92 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	2202      	movs	r2, #2
 8009da0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8009da4:	e014      	b.n	8009dd0 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8009da6:	6878      	ldr	r0, [r7, #4]
 8009da8:	f000 f9bf 	bl	800a12a <USBD_CtlSendStatus>
      break;
 8009dac:	e010      	b.n	8009dd0 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8009dae:	6878      	ldr	r0, [r7, #4]
 8009db0:	f000 f9bb 	bl	800a12a <USBD_CtlSendStatus>
      break;
 8009db4:	e00c      	b.n	8009dd0 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8009db6:	6839      	ldr	r1, [r7, #0]
 8009db8:	6878      	ldr	r0, [r7, #4]
 8009dba:	f000 f8eb 	bl	8009f94 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009dbe:	4b07      	ldr	r3, [pc, #28]	@ (8009ddc <USBD_SetConfig+0x148>)
 8009dc0:	781b      	ldrb	r3, [r3, #0]
 8009dc2:	4619      	mov	r1, r3
 8009dc4:	6878      	ldr	r0, [r7, #4]
 8009dc6:	f7ff f8e4 	bl	8008f92 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8009dca:	2303      	movs	r3, #3
 8009dcc:	73fb      	strb	r3, [r7, #15]
      break;
 8009dce:	bf00      	nop
  }

  return ret;
 8009dd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009dd2:	4618      	mov	r0, r3
 8009dd4:	3710      	adds	r7, #16
 8009dd6:	46bd      	mov	sp, r7
 8009dd8:	bd80      	pop	{r7, pc}
 8009dda:	bf00      	nop
 8009ddc:	2000058f 	.word	0x2000058f

08009de0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009de0:	b580      	push	{r7, lr}
 8009de2:	b082      	sub	sp, #8
 8009de4:	af00      	add	r7, sp, #0
 8009de6:	6078      	str	r0, [r7, #4]
 8009de8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009dea:	683b      	ldr	r3, [r7, #0]
 8009dec:	88db      	ldrh	r3, [r3, #6]
 8009dee:	2b01      	cmp	r3, #1
 8009df0:	d004      	beq.n	8009dfc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009df2:	6839      	ldr	r1, [r7, #0]
 8009df4:	6878      	ldr	r0, [r7, #4]
 8009df6:	f000 f8cd 	bl	8009f94 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009dfa:	e023      	b.n	8009e44 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009e02:	b2db      	uxtb	r3, r3
 8009e04:	2b02      	cmp	r3, #2
 8009e06:	dc02      	bgt.n	8009e0e <USBD_GetConfig+0x2e>
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	dc03      	bgt.n	8009e14 <USBD_GetConfig+0x34>
 8009e0c:	e015      	b.n	8009e3a <USBD_GetConfig+0x5a>
 8009e0e:	2b03      	cmp	r3, #3
 8009e10:	d00b      	beq.n	8009e2a <USBD_GetConfig+0x4a>
 8009e12:	e012      	b.n	8009e3a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	2200      	movs	r2, #0
 8009e18:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	3308      	adds	r3, #8
 8009e1e:	2201      	movs	r2, #1
 8009e20:	4619      	mov	r1, r3
 8009e22:	6878      	ldr	r0, [r7, #4]
 8009e24:	f000 f927 	bl	800a076 <USBD_CtlSendData>
        break;
 8009e28:	e00c      	b.n	8009e44 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	3304      	adds	r3, #4
 8009e2e:	2201      	movs	r2, #1
 8009e30:	4619      	mov	r1, r3
 8009e32:	6878      	ldr	r0, [r7, #4]
 8009e34:	f000 f91f 	bl	800a076 <USBD_CtlSendData>
        break;
 8009e38:	e004      	b.n	8009e44 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8009e3a:	6839      	ldr	r1, [r7, #0]
 8009e3c:	6878      	ldr	r0, [r7, #4]
 8009e3e:	f000 f8a9 	bl	8009f94 <USBD_CtlError>
        break;
 8009e42:	bf00      	nop
}
 8009e44:	bf00      	nop
 8009e46:	3708      	adds	r7, #8
 8009e48:	46bd      	mov	sp, r7
 8009e4a:	bd80      	pop	{r7, pc}

08009e4c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009e4c:	b580      	push	{r7, lr}
 8009e4e:	b082      	sub	sp, #8
 8009e50:	af00      	add	r7, sp, #0
 8009e52:	6078      	str	r0, [r7, #4]
 8009e54:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009e5c:	b2db      	uxtb	r3, r3
 8009e5e:	3b01      	subs	r3, #1
 8009e60:	2b02      	cmp	r3, #2
 8009e62:	d81e      	bhi.n	8009ea2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009e64:	683b      	ldr	r3, [r7, #0]
 8009e66:	88db      	ldrh	r3, [r3, #6]
 8009e68:	2b02      	cmp	r3, #2
 8009e6a:	d004      	beq.n	8009e76 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009e6c:	6839      	ldr	r1, [r7, #0]
 8009e6e:	6878      	ldr	r0, [r7, #4]
 8009e70:	f000 f890 	bl	8009f94 <USBD_CtlError>
        break;
 8009e74:	e01a      	b.n	8009eac <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	2201      	movs	r2, #1
 8009e7a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d005      	beq.n	8009e92 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	68db      	ldr	r3, [r3, #12]
 8009e8a:	f043 0202 	orr.w	r2, r3, #2
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	330c      	adds	r3, #12
 8009e96:	2202      	movs	r2, #2
 8009e98:	4619      	mov	r1, r3
 8009e9a:	6878      	ldr	r0, [r7, #4]
 8009e9c:	f000 f8eb 	bl	800a076 <USBD_CtlSendData>
      break;
 8009ea0:	e004      	b.n	8009eac <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8009ea2:	6839      	ldr	r1, [r7, #0]
 8009ea4:	6878      	ldr	r0, [r7, #4]
 8009ea6:	f000 f875 	bl	8009f94 <USBD_CtlError>
      break;
 8009eaa:	bf00      	nop
  }
}
 8009eac:	bf00      	nop
 8009eae:	3708      	adds	r7, #8
 8009eb0:	46bd      	mov	sp, r7
 8009eb2:	bd80      	pop	{r7, pc}

08009eb4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009eb4:	b580      	push	{r7, lr}
 8009eb6:	b082      	sub	sp, #8
 8009eb8:	af00      	add	r7, sp, #0
 8009eba:	6078      	str	r0, [r7, #4]
 8009ebc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009ebe:	683b      	ldr	r3, [r7, #0]
 8009ec0:	885b      	ldrh	r3, [r3, #2]
 8009ec2:	2b01      	cmp	r3, #1
 8009ec4:	d106      	bne.n	8009ed4 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	2201      	movs	r2, #1
 8009eca:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009ece:	6878      	ldr	r0, [r7, #4]
 8009ed0:	f000 f92b 	bl	800a12a <USBD_CtlSendStatus>
  }
}
 8009ed4:	bf00      	nop
 8009ed6:	3708      	adds	r7, #8
 8009ed8:	46bd      	mov	sp, r7
 8009eda:	bd80      	pop	{r7, pc}

08009edc <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009edc:	b580      	push	{r7, lr}
 8009ede:	b082      	sub	sp, #8
 8009ee0:	af00      	add	r7, sp, #0
 8009ee2:	6078      	str	r0, [r7, #4]
 8009ee4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009eec:	b2db      	uxtb	r3, r3
 8009eee:	3b01      	subs	r3, #1
 8009ef0:	2b02      	cmp	r3, #2
 8009ef2:	d80b      	bhi.n	8009f0c <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009ef4:	683b      	ldr	r3, [r7, #0]
 8009ef6:	885b      	ldrh	r3, [r3, #2]
 8009ef8:	2b01      	cmp	r3, #1
 8009efa:	d10c      	bne.n	8009f16 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	2200      	movs	r2, #0
 8009f00:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009f04:	6878      	ldr	r0, [r7, #4]
 8009f06:	f000 f910 	bl	800a12a <USBD_CtlSendStatus>
      }
      break;
 8009f0a:	e004      	b.n	8009f16 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009f0c:	6839      	ldr	r1, [r7, #0]
 8009f0e:	6878      	ldr	r0, [r7, #4]
 8009f10:	f000 f840 	bl	8009f94 <USBD_CtlError>
      break;
 8009f14:	e000      	b.n	8009f18 <USBD_ClrFeature+0x3c>
      break;
 8009f16:	bf00      	nop
  }
}
 8009f18:	bf00      	nop
 8009f1a:	3708      	adds	r7, #8
 8009f1c:	46bd      	mov	sp, r7
 8009f1e:	bd80      	pop	{r7, pc}

08009f20 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009f20:	b580      	push	{r7, lr}
 8009f22:	b084      	sub	sp, #16
 8009f24:	af00      	add	r7, sp, #0
 8009f26:	6078      	str	r0, [r7, #4]
 8009f28:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009f2a:	683b      	ldr	r3, [r7, #0]
 8009f2c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	781a      	ldrb	r2, [r3, #0]
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	3301      	adds	r3, #1
 8009f3a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	781a      	ldrb	r2, [r3, #0]
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	3301      	adds	r3, #1
 8009f48:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009f4a:	68f8      	ldr	r0, [r7, #12]
 8009f4c:	f7ff faa8 	bl	80094a0 <SWAPBYTE>
 8009f50:	4603      	mov	r3, r0
 8009f52:	461a      	mov	r2, r3
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	3301      	adds	r3, #1
 8009f5c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	3301      	adds	r3, #1
 8009f62:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009f64:	68f8      	ldr	r0, [r7, #12]
 8009f66:	f7ff fa9b 	bl	80094a0 <SWAPBYTE>
 8009f6a:	4603      	mov	r3, r0
 8009f6c:	461a      	mov	r2, r3
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	3301      	adds	r3, #1
 8009f76:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	3301      	adds	r3, #1
 8009f7c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009f7e:	68f8      	ldr	r0, [r7, #12]
 8009f80:	f7ff fa8e 	bl	80094a0 <SWAPBYTE>
 8009f84:	4603      	mov	r3, r0
 8009f86:	461a      	mov	r2, r3
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	80da      	strh	r2, [r3, #6]
}
 8009f8c:	bf00      	nop
 8009f8e:	3710      	adds	r7, #16
 8009f90:	46bd      	mov	sp, r7
 8009f92:	bd80      	pop	{r7, pc}

08009f94 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009f94:	b580      	push	{r7, lr}
 8009f96:	b082      	sub	sp, #8
 8009f98:	af00      	add	r7, sp, #0
 8009f9a:	6078      	str	r0, [r7, #4]
 8009f9c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009f9e:	2180      	movs	r1, #128	@ 0x80
 8009fa0:	6878      	ldr	r0, [r7, #4]
 8009fa2:	f000 fc79 	bl	800a898 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009fa6:	2100      	movs	r1, #0
 8009fa8:	6878      	ldr	r0, [r7, #4]
 8009faa:	f000 fc75 	bl	800a898 <USBD_LL_StallEP>
}
 8009fae:	bf00      	nop
 8009fb0:	3708      	adds	r7, #8
 8009fb2:	46bd      	mov	sp, r7
 8009fb4:	bd80      	pop	{r7, pc}

08009fb6 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009fb6:	b580      	push	{r7, lr}
 8009fb8:	b086      	sub	sp, #24
 8009fba:	af00      	add	r7, sp, #0
 8009fbc:	60f8      	str	r0, [r7, #12]
 8009fbe:	60b9      	str	r1, [r7, #8]
 8009fc0:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009fc2:	2300      	movs	r3, #0
 8009fc4:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d036      	beq.n	800a03a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8009fd0:	6938      	ldr	r0, [r7, #16]
 8009fd2:	f000 f836 	bl	800a042 <USBD_GetLen>
 8009fd6:	4603      	mov	r3, r0
 8009fd8:	3301      	adds	r3, #1
 8009fda:	b29b      	uxth	r3, r3
 8009fdc:	005b      	lsls	r3, r3, #1
 8009fde:	b29a      	uxth	r2, r3
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009fe4:	7dfb      	ldrb	r3, [r7, #23]
 8009fe6:	68ba      	ldr	r2, [r7, #8]
 8009fe8:	4413      	add	r3, r2
 8009fea:	687a      	ldr	r2, [r7, #4]
 8009fec:	7812      	ldrb	r2, [r2, #0]
 8009fee:	701a      	strb	r2, [r3, #0]
  idx++;
 8009ff0:	7dfb      	ldrb	r3, [r7, #23]
 8009ff2:	3301      	adds	r3, #1
 8009ff4:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009ff6:	7dfb      	ldrb	r3, [r7, #23]
 8009ff8:	68ba      	ldr	r2, [r7, #8]
 8009ffa:	4413      	add	r3, r2
 8009ffc:	2203      	movs	r2, #3
 8009ffe:	701a      	strb	r2, [r3, #0]
  idx++;
 800a000:	7dfb      	ldrb	r3, [r7, #23]
 800a002:	3301      	adds	r3, #1
 800a004:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800a006:	e013      	b.n	800a030 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800a008:	7dfb      	ldrb	r3, [r7, #23]
 800a00a:	68ba      	ldr	r2, [r7, #8]
 800a00c:	4413      	add	r3, r2
 800a00e:	693a      	ldr	r2, [r7, #16]
 800a010:	7812      	ldrb	r2, [r2, #0]
 800a012:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800a014:	693b      	ldr	r3, [r7, #16]
 800a016:	3301      	adds	r3, #1
 800a018:	613b      	str	r3, [r7, #16]
    idx++;
 800a01a:	7dfb      	ldrb	r3, [r7, #23]
 800a01c:	3301      	adds	r3, #1
 800a01e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800a020:	7dfb      	ldrb	r3, [r7, #23]
 800a022:	68ba      	ldr	r2, [r7, #8]
 800a024:	4413      	add	r3, r2
 800a026:	2200      	movs	r2, #0
 800a028:	701a      	strb	r2, [r3, #0]
    idx++;
 800a02a:	7dfb      	ldrb	r3, [r7, #23]
 800a02c:	3301      	adds	r3, #1
 800a02e:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800a030:	693b      	ldr	r3, [r7, #16]
 800a032:	781b      	ldrb	r3, [r3, #0]
 800a034:	2b00      	cmp	r3, #0
 800a036:	d1e7      	bne.n	800a008 <USBD_GetString+0x52>
 800a038:	e000      	b.n	800a03c <USBD_GetString+0x86>
    return;
 800a03a:	bf00      	nop
  }
}
 800a03c:	3718      	adds	r7, #24
 800a03e:	46bd      	mov	sp, r7
 800a040:	bd80      	pop	{r7, pc}

0800a042 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a042:	b480      	push	{r7}
 800a044:	b085      	sub	sp, #20
 800a046:	af00      	add	r7, sp, #0
 800a048:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a04a:	2300      	movs	r3, #0
 800a04c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800a052:	e005      	b.n	800a060 <USBD_GetLen+0x1e>
  {
    len++;
 800a054:	7bfb      	ldrb	r3, [r7, #15]
 800a056:	3301      	adds	r3, #1
 800a058:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800a05a:	68bb      	ldr	r3, [r7, #8]
 800a05c:	3301      	adds	r3, #1
 800a05e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a060:	68bb      	ldr	r3, [r7, #8]
 800a062:	781b      	ldrb	r3, [r3, #0]
 800a064:	2b00      	cmp	r3, #0
 800a066:	d1f5      	bne.n	800a054 <USBD_GetLen+0x12>
  }

  return len;
 800a068:	7bfb      	ldrb	r3, [r7, #15]
}
 800a06a:	4618      	mov	r0, r3
 800a06c:	3714      	adds	r7, #20
 800a06e:	46bd      	mov	sp, r7
 800a070:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a074:	4770      	bx	lr

0800a076 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a076:	b580      	push	{r7, lr}
 800a078:	b084      	sub	sp, #16
 800a07a:	af00      	add	r7, sp, #0
 800a07c:	60f8      	str	r0, [r7, #12]
 800a07e:	60b9      	str	r1, [r7, #8]
 800a080:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	2202      	movs	r2, #2
 800a086:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	687a      	ldr	r2, [r7, #4]
 800a08e:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	687a      	ldr	r2, [r7, #4]
 800a094:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	68ba      	ldr	r2, [r7, #8]
 800a09a:	2100      	movs	r1, #0
 800a09c:	68f8      	ldr	r0, [r7, #12]
 800a09e:	f000 fc84 	bl	800a9aa <USBD_LL_Transmit>

  return USBD_OK;
 800a0a2:	2300      	movs	r3, #0
}
 800a0a4:	4618      	mov	r0, r3
 800a0a6:	3710      	adds	r7, #16
 800a0a8:	46bd      	mov	sp, r7
 800a0aa:	bd80      	pop	{r7, pc}

0800a0ac <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a0ac:	b580      	push	{r7, lr}
 800a0ae:	b084      	sub	sp, #16
 800a0b0:	af00      	add	r7, sp, #0
 800a0b2:	60f8      	str	r0, [r7, #12]
 800a0b4:	60b9      	str	r1, [r7, #8]
 800a0b6:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	68ba      	ldr	r2, [r7, #8]
 800a0bc:	2100      	movs	r1, #0
 800a0be:	68f8      	ldr	r0, [r7, #12]
 800a0c0:	f000 fc73 	bl	800a9aa <USBD_LL_Transmit>

  return USBD_OK;
 800a0c4:	2300      	movs	r3, #0
}
 800a0c6:	4618      	mov	r0, r3
 800a0c8:	3710      	adds	r7, #16
 800a0ca:	46bd      	mov	sp, r7
 800a0cc:	bd80      	pop	{r7, pc}

0800a0ce <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800a0ce:	b580      	push	{r7, lr}
 800a0d0:	b084      	sub	sp, #16
 800a0d2:	af00      	add	r7, sp, #0
 800a0d4:	60f8      	str	r0, [r7, #12]
 800a0d6:	60b9      	str	r1, [r7, #8]
 800a0d8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	2203      	movs	r2, #3
 800a0de:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	687a      	ldr	r2, [r7, #4]
 800a0e6:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	687a      	ldr	r2, [r7, #4]
 800a0ee:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	68ba      	ldr	r2, [r7, #8]
 800a0f6:	2100      	movs	r1, #0
 800a0f8:	68f8      	ldr	r0, [r7, #12]
 800a0fa:	f000 fc77 	bl	800a9ec <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a0fe:	2300      	movs	r3, #0
}
 800a100:	4618      	mov	r0, r3
 800a102:	3710      	adds	r7, #16
 800a104:	46bd      	mov	sp, r7
 800a106:	bd80      	pop	{r7, pc}

0800a108 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a108:	b580      	push	{r7, lr}
 800a10a:	b084      	sub	sp, #16
 800a10c:	af00      	add	r7, sp, #0
 800a10e:	60f8      	str	r0, [r7, #12]
 800a110:	60b9      	str	r1, [r7, #8]
 800a112:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	68ba      	ldr	r2, [r7, #8]
 800a118:	2100      	movs	r1, #0
 800a11a:	68f8      	ldr	r0, [r7, #12]
 800a11c:	f000 fc66 	bl	800a9ec <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a120:	2300      	movs	r3, #0
}
 800a122:	4618      	mov	r0, r3
 800a124:	3710      	adds	r7, #16
 800a126:	46bd      	mov	sp, r7
 800a128:	bd80      	pop	{r7, pc}

0800a12a <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a12a:	b580      	push	{r7, lr}
 800a12c:	b082      	sub	sp, #8
 800a12e:	af00      	add	r7, sp, #0
 800a130:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	2204      	movs	r2, #4
 800a136:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a13a:	2300      	movs	r3, #0
 800a13c:	2200      	movs	r2, #0
 800a13e:	2100      	movs	r1, #0
 800a140:	6878      	ldr	r0, [r7, #4]
 800a142:	f000 fc32 	bl	800a9aa <USBD_LL_Transmit>

  return USBD_OK;
 800a146:	2300      	movs	r3, #0
}
 800a148:	4618      	mov	r0, r3
 800a14a:	3708      	adds	r7, #8
 800a14c:	46bd      	mov	sp, r7
 800a14e:	bd80      	pop	{r7, pc}

0800a150 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a150:	b580      	push	{r7, lr}
 800a152:	b082      	sub	sp, #8
 800a154:	af00      	add	r7, sp, #0
 800a156:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	2205      	movs	r2, #5
 800a15c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a160:	2300      	movs	r3, #0
 800a162:	2200      	movs	r2, #0
 800a164:	2100      	movs	r1, #0
 800a166:	6878      	ldr	r0, [r7, #4]
 800a168:	f000 fc40 	bl	800a9ec <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a16c:	2300      	movs	r3, #0
}
 800a16e:	4618      	mov	r0, r3
 800a170:	3708      	adds	r7, #8
 800a172:	46bd      	mov	sp, r7
 800a174:	bd80      	pop	{r7, pc}
	...

0800a178 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a178:	b580      	push	{r7, lr}
 800a17a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a17c:	2200      	movs	r2, #0
 800a17e:	4912      	ldr	r1, [pc, #72]	@ (800a1c8 <MX_USB_DEVICE_Init+0x50>)
 800a180:	4812      	ldr	r0, [pc, #72]	@ (800a1cc <MX_USB_DEVICE_Init+0x54>)
 800a182:	f7fe fe61 	bl	8008e48 <USBD_Init>
 800a186:	4603      	mov	r3, r0
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d001      	beq.n	800a190 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a18c:	f7f7 faec 	bl	8001768 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_DFU) != USBD_OK)
 800a190:	490f      	ldr	r1, [pc, #60]	@ (800a1d0 <MX_USB_DEVICE_Init+0x58>)
 800a192:	480e      	ldr	r0, [pc, #56]	@ (800a1cc <MX_USB_DEVICE_Init+0x54>)
 800a194:	f7fe fe88 	bl	8008ea8 <USBD_RegisterClass>
 800a198:	4603      	mov	r3, r0
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d001      	beq.n	800a1a2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a19e:	f7f7 fae3 	bl	8001768 <Error_Handler>
  }
  if (USBD_DFU_RegisterMedia(&hUsbDeviceFS, &USBD_DFU_fops_FS) != USBD_OK)
 800a1a2:	490c      	ldr	r1, [pc, #48]	@ (800a1d4 <MX_USB_DEVICE_Init+0x5c>)
 800a1a4:	4809      	ldr	r0, [pc, #36]	@ (800a1cc <MX_USB_DEVICE_Init+0x54>)
 800a1a6:	f7fe facd 	bl	8008744 <USBD_DFU_RegisterMedia>
 800a1aa:	4603      	mov	r3, r0
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d001      	beq.n	800a1b4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a1b0:	f7f7 fada 	bl	8001768 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a1b4:	4805      	ldr	r0, [pc, #20]	@ (800a1cc <MX_USB_DEVICE_Init+0x54>)
 800a1b6:	f7fe fe9e 	bl	8008ef6 <USBD_Start>
 800a1ba:	4603      	mov	r3, r0
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d001      	beq.n	800a1c4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a1c0:	f7f7 fad2 	bl	8001768 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a1c4:	bf00      	nop
 800a1c6:	bd80      	pop	{r7, pc}
 800a1c8:	20000070 	.word	0x20000070
 800a1cc:	20000590 	.word	0x20000590
 800a1d0:	2000000c 	.word	0x2000000c
 800a1d4:	200000c0 	.word	0x200000c0

0800a1d8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a1d8:	b480      	push	{r7}
 800a1da:	b083      	sub	sp, #12
 800a1dc:	af00      	add	r7, sp, #0
 800a1de:	4603      	mov	r3, r0
 800a1e0:	6039      	str	r1, [r7, #0]
 800a1e2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a1e4:	683b      	ldr	r3, [r7, #0]
 800a1e6:	2212      	movs	r2, #18
 800a1e8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a1ea:	4b03      	ldr	r3, [pc, #12]	@ (800a1f8 <USBD_FS_DeviceDescriptor+0x20>)
}
 800a1ec:	4618      	mov	r0, r3
 800a1ee:	370c      	adds	r7, #12
 800a1f0:	46bd      	mov	sp, r7
 800a1f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1f6:	4770      	bx	lr
 800a1f8:	2000008c 	.word	0x2000008c

0800a1fc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a1fc:	b480      	push	{r7}
 800a1fe:	b083      	sub	sp, #12
 800a200:	af00      	add	r7, sp, #0
 800a202:	4603      	mov	r3, r0
 800a204:	6039      	str	r1, [r7, #0]
 800a206:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a208:	683b      	ldr	r3, [r7, #0]
 800a20a:	2204      	movs	r2, #4
 800a20c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a20e:	4b03      	ldr	r3, [pc, #12]	@ (800a21c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a210:	4618      	mov	r0, r3
 800a212:	370c      	adds	r7, #12
 800a214:	46bd      	mov	sp, r7
 800a216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a21a:	4770      	bx	lr
 800a21c:	200000a0 	.word	0x200000a0

0800a220 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a220:	b580      	push	{r7, lr}
 800a222:	b082      	sub	sp, #8
 800a224:	af00      	add	r7, sp, #0
 800a226:	4603      	mov	r3, r0
 800a228:	6039      	str	r1, [r7, #0]
 800a22a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a22c:	79fb      	ldrb	r3, [r7, #7]
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d105      	bne.n	800a23e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a232:	683a      	ldr	r2, [r7, #0]
 800a234:	4907      	ldr	r1, [pc, #28]	@ (800a254 <USBD_FS_ProductStrDescriptor+0x34>)
 800a236:	4808      	ldr	r0, [pc, #32]	@ (800a258 <USBD_FS_ProductStrDescriptor+0x38>)
 800a238:	f7ff febd 	bl	8009fb6 <USBD_GetString>
 800a23c:	e004      	b.n	800a248 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a23e:	683a      	ldr	r2, [r7, #0]
 800a240:	4904      	ldr	r1, [pc, #16]	@ (800a254 <USBD_FS_ProductStrDescriptor+0x34>)
 800a242:	4805      	ldr	r0, [pc, #20]	@ (800a258 <USBD_FS_ProductStrDescriptor+0x38>)
 800a244:	f7ff feb7 	bl	8009fb6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a248:	4b02      	ldr	r3, [pc, #8]	@ (800a254 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a24a:	4618      	mov	r0, r3
 800a24c:	3708      	adds	r7, #8
 800a24e:	46bd      	mov	sp, r7
 800a250:	bd80      	pop	{r7, pc}
 800a252:	bf00      	nop
 800a254:	20000860 	.word	0x20000860
 800a258:	0800d52c 	.word	0x0800d52c

0800a25c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a25c:	b580      	push	{r7, lr}
 800a25e:	b082      	sub	sp, #8
 800a260:	af00      	add	r7, sp, #0
 800a262:	4603      	mov	r3, r0
 800a264:	6039      	str	r1, [r7, #0]
 800a266:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a268:	683a      	ldr	r2, [r7, #0]
 800a26a:	4904      	ldr	r1, [pc, #16]	@ (800a27c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a26c:	4804      	ldr	r0, [pc, #16]	@ (800a280 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a26e:	f7ff fea2 	bl	8009fb6 <USBD_GetString>
  return USBD_StrDesc;
 800a272:	4b02      	ldr	r3, [pc, #8]	@ (800a27c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a274:	4618      	mov	r0, r3
 800a276:	3708      	adds	r7, #8
 800a278:	46bd      	mov	sp, r7
 800a27a:	bd80      	pop	{r7, pc}
 800a27c:	20000860 	.word	0x20000860
 800a280:	0800d54c 	.word	0x0800d54c

0800a284 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a284:	b580      	push	{r7, lr}
 800a286:	b082      	sub	sp, #8
 800a288:	af00      	add	r7, sp, #0
 800a28a:	4603      	mov	r3, r0
 800a28c:	6039      	str	r1, [r7, #0]
 800a28e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a290:	683b      	ldr	r3, [r7, #0]
 800a292:	221a      	movs	r2, #26
 800a294:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a296:	f000 f843 	bl	800a320 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a29a:	4b02      	ldr	r3, [pc, #8]	@ (800a2a4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a29c:	4618      	mov	r0, r3
 800a29e:	3708      	adds	r7, #8
 800a2a0:	46bd      	mov	sp, r7
 800a2a2:	bd80      	pop	{r7, pc}
 800a2a4:	200000a4 	.word	0x200000a4

0800a2a8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a2a8:	b580      	push	{r7, lr}
 800a2aa:	b082      	sub	sp, #8
 800a2ac:	af00      	add	r7, sp, #0
 800a2ae:	4603      	mov	r3, r0
 800a2b0:	6039      	str	r1, [r7, #0]
 800a2b2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a2b4:	79fb      	ldrb	r3, [r7, #7]
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d105      	bne.n	800a2c6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a2ba:	683a      	ldr	r2, [r7, #0]
 800a2bc:	4907      	ldr	r1, [pc, #28]	@ (800a2dc <USBD_FS_ConfigStrDescriptor+0x34>)
 800a2be:	4808      	ldr	r0, [pc, #32]	@ (800a2e0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a2c0:	f7ff fe79 	bl	8009fb6 <USBD_GetString>
 800a2c4:	e004      	b.n	800a2d0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a2c6:	683a      	ldr	r2, [r7, #0]
 800a2c8:	4904      	ldr	r1, [pc, #16]	@ (800a2dc <USBD_FS_ConfigStrDescriptor+0x34>)
 800a2ca:	4805      	ldr	r0, [pc, #20]	@ (800a2e0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a2cc:	f7ff fe73 	bl	8009fb6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a2d0:	4b02      	ldr	r3, [pc, #8]	@ (800a2dc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a2d2:	4618      	mov	r0, r3
 800a2d4:	3708      	adds	r7, #8
 800a2d6:	46bd      	mov	sp, r7
 800a2d8:	bd80      	pop	{r7, pc}
 800a2da:	bf00      	nop
 800a2dc:	20000860 	.word	0x20000860
 800a2e0:	0800d560 	.word	0x0800d560

0800a2e4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a2e4:	b580      	push	{r7, lr}
 800a2e6:	b082      	sub	sp, #8
 800a2e8:	af00      	add	r7, sp, #0
 800a2ea:	4603      	mov	r3, r0
 800a2ec:	6039      	str	r1, [r7, #0]
 800a2ee:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a2f0:	79fb      	ldrb	r3, [r7, #7]
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d105      	bne.n	800a302 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a2f6:	683a      	ldr	r2, [r7, #0]
 800a2f8:	4907      	ldr	r1, [pc, #28]	@ (800a318 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a2fa:	4808      	ldr	r0, [pc, #32]	@ (800a31c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a2fc:	f7ff fe5b 	bl	8009fb6 <USBD_GetString>
 800a300:	e004      	b.n	800a30c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a302:	683a      	ldr	r2, [r7, #0]
 800a304:	4904      	ldr	r1, [pc, #16]	@ (800a318 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a306:	4805      	ldr	r0, [pc, #20]	@ (800a31c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a308:	f7ff fe55 	bl	8009fb6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a30c:	4b02      	ldr	r3, [pc, #8]	@ (800a318 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a30e:	4618      	mov	r0, r3
 800a310:	3708      	adds	r7, #8
 800a312:	46bd      	mov	sp, r7
 800a314:	bd80      	pop	{r7, pc}
 800a316:	bf00      	nop
 800a318:	20000860 	.word	0x20000860
 800a31c:	0800d56c 	.word	0x0800d56c

0800a320 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a320:	b580      	push	{r7, lr}
 800a322:	b084      	sub	sp, #16
 800a324:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a326:	4b0f      	ldr	r3, [pc, #60]	@ (800a364 <Get_SerialNum+0x44>)
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a32c:	4b0e      	ldr	r3, [pc, #56]	@ (800a368 <Get_SerialNum+0x48>)
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a332:	4b0e      	ldr	r3, [pc, #56]	@ (800a36c <Get_SerialNum+0x4c>)
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a338:	68fa      	ldr	r2, [r7, #12]
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	4413      	add	r3, r2
 800a33e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	2b00      	cmp	r3, #0
 800a344:	d009      	beq.n	800a35a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a346:	2208      	movs	r2, #8
 800a348:	4909      	ldr	r1, [pc, #36]	@ (800a370 <Get_SerialNum+0x50>)
 800a34a:	68f8      	ldr	r0, [r7, #12]
 800a34c:	f000 f814 	bl	800a378 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a350:	2204      	movs	r2, #4
 800a352:	4908      	ldr	r1, [pc, #32]	@ (800a374 <Get_SerialNum+0x54>)
 800a354:	68b8      	ldr	r0, [r7, #8]
 800a356:	f000 f80f 	bl	800a378 <IntToUnicode>
  }
}
 800a35a:	bf00      	nop
 800a35c:	3710      	adds	r7, #16
 800a35e:	46bd      	mov	sp, r7
 800a360:	bd80      	pop	{r7, pc}
 800a362:	bf00      	nop
 800a364:	1fff7a10 	.word	0x1fff7a10
 800a368:	1fff7a14 	.word	0x1fff7a14
 800a36c:	1fff7a18 	.word	0x1fff7a18
 800a370:	200000a6 	.word	0x200000a6
 800a374:	200000b6 	.word	0x200000b6

0800a378 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a378:	b480      	push	{r7}
 800a37a:	b087      	sub	sp, #28
 800a37c:	af00      	add	r7, sp, #0
 800a37e:	60f8      	str	r0, [r7, #12]
 800a380:	60b9      	str	r1, [r7, #8]
 800a382:	4613      	mov	r3, r2
 800a384:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a386:	2300      	movs	r3, #0
 800a388:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a38a:	2300      	movs	r3, #0
 800a38c:	75fb      	strb	r3, [r7, #23]
 800a38e:	e027      	b.n	800a3e0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	0f1b      	lsrs	r3, r3, #28
 800a394:	2b09      	cmp	r3, #9
 800a396:	d80b      	bhi.n	800a3b0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	0f1b      	lsrs	r3, r3, #28
 800a39c:	b2da      	uxtb	r2, r3
 800a39e:	7dfb      	ldrb	r3, [r7, #23]
 800a3a0:	005b      	lsls	r3, r3, #1
 800a3a2:	4619      	mov	r1, r3
 800a3a4:	68bb      	ldr	r3, [r7, #8]
 800a3a6:	440b      	add	r3, r1
 800a3a8:	3230      	adds	r2, #48	@ 0x30
 800a3aa:	b2d2      	uxtb	r2, r2
 800a3ac:	701a      	strb	r2, [r3, #0]
 800a3ae:	e00a      	b.n	800a3c6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	0f1b      	lsrs	r3, r3, #28
 800a3b4:	b2da      	uxtb	r2, r3
 800a3b6:	7dfb      	ldrb	r3, [r7, #23]
 800a3b8:	005b      	lsls	r3, r3, #1
 800a3ba:	4619      	mov	r1, r3
 800a3bc:	68bb      	ldr	r3, [r7, #8]
 800a3be:	440b      	add	r3, r1
 800a3c0:	3237      	adds	r2, #55	@ 0x37
 800a3c2:	b2d2      	uxtb	r2, r2
 800a3c4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	011b      	lsls	r3, r3, #4
 800a3ca:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a3cc:	7dfb      	ldrb	r3, [r7, #23]
 800a3ce:	005b      	lsls	r3, r3, #1
 800a3d0:	3301      	adds	r3, #1
 800a3d2:	68ba      	ldr	r2, [r7, #8]
 800a3d4:	4413      	add	r3, r2
 800a3d6:	2200      	movs	r2, #0
 800a3d8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a3da:	7dfb      	ldrb	r3, [r7, #23]
 800a3dc:	3301      	adds	r3, #1
 800a3de:	75fb      	strb	r3, [r7, #23]
 800a3e0:	7dfa      	ldrb	r2, [r7, #23]
 800a3e2:	79fb      	ldrb	r3, [r7, #7]
 800a3e4:	429a      	cmp	r2, r3
 800a3e6:	d3d3      	bcc.n	800a390 <IntToUnicode+0x18>
  }
}
 800a3e8:	bf00      	nop
 800a3ea:	bf00      	nop
 800a3ec:	371c      	adds	r7, #28
 800a3ee:	46bd      	mov	sp, r7
 800a3f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3f4:	4770      	bx	lr

0800a3f6 <MEM_If_Init_FS>:
/**
  * @brief  Memory initialization routine.
  * @retval USBD_OK if operation is successful, MAL_FAIL else.
  */
uint16_t MEM_If_Init_FS(void)
{
 800a3f6:	b480      	push	{r7}
 800a3f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 0 */
  return (USBD_OK);
 800a3fa:	2300      	movs	r3, #0
  /* USER CODE END 0 */
}
 800a3fc:	4618      	mov	r0, r3
 800a3fe:	46bd      	mov	sp, r7
 800a400:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a404:	4770      	bx	lr

0800a406 <MEM_If_DeInit_FS>:
/**
  * @brief  De-Initializes Memory
  * @retval USBD_OK if operation is successful, MAL_FAIL else
  */
uint16_t MEM_If_DeInit_FS(void)
{
 800a406:	b480      	push	{r7}
 800a408:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  return (USBD_OK);
 800a40a:	2300      	movs	r3, #0
  /* USER CODE END 1 */
}
 800a40c:	4618      	mov	r0, r3
 800a40e:	46bd      	mov	sp, r7
 800a410:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a414:	4770      	bx	lr

0800a416 <MEM_If_Erase_FS>:
  * @brief  Erase sector.
  * @param  Add: Address of sector to be erased.
  * @retval 0 if operation is successful, MAL_FAIL else.
  */
uint16_t MEM_If_Erase_FS(uint32_t Add)
{
 800a416:	b480      	push	{r7}
 800a418:	b083      	sub	sp, #12
 800a41a:	af00      	add	r7, sp, #0
 800a41c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 2 */

  return (USBD_OK);
 800a41e:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 800a420:	4618      	mov	r0, r3
 800a422:	370c      	adds	r7, #12
 800a424:	46bd      	mov	sp, r7
 800a426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a42a:	4770      	bx	lr

0800a42c <MEM_If_Write_FS>:
  * @param  dest: Pointer to the destination buffer.
  * @param  Len: Number of data to be written (in bytes).
  * @retval USBD_OK if operation is successful, MAL_FAIL else.
  */
uint16_t MEM_If_Write_FS(uint8_t *src, uint8_t *dest, uint32_t Len)
{
 800a42c:	b480      	push	{r7}
 800a42e:	b085      	sub	sp, #20
 800a430:	af00      	add	r7, sp, #0
 800a432:	60f8      	str	r0, [r7, #12]
 800a434:	60b9      	str	r1, [r7, #8]
 800a436:	607a      	str	r2, [r7, #4]
  /* USER CODE BEGIN 3 */
  return (USBD_OK);
 800a438:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a43a:	4618      	mov	r0, r3
 800a43c:	3714      	adds	r7, #20
 800a43e:	46bd      	mov	sp, r7
 800a440:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a444:	4770      	bx	lr

0800a446 <MEM_If_Read_FS>:
  * @param  dest: Pointer to the destination buffer.
  * @param  Len: Number of data to be read (in bytes).
  * @retval Pointer to the physical address where data should be read.
  */
uint8_t *MEM_If_Read_FS(uint8_t *src, uint8_t *dest, uint32_t Len)
{
 800a446:	b480      	push	{r7}
 800a448:	b085      	sub	sp, #20
 800a44a:	af00      	add	r7, sp, #0
 800a44c:	60f8      	str	r0, [r7, #12]
 800a44e:	60b9      	str	r1, [r7, #8]
 800a450:	607a      	str	r2, [r7, #4]
  /* Return a valid address to avoid HardFault */
  /* USER CODE BEGIN 4 */
  return (uint8_t*)(USBD_OK);
 800a452:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a454:	4618      	mov	r0, r3
 800a456:	3714      	adds	r7, #20
 800a458:	46bd      	mov	sp, r7
 800a45a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a45e:	4770      	bx	lr

0800a460 <MEM_If_GetStatus_FS>:
  * @param  Cmd: Number of data to be read (in bytes)
  * @param  buffer: used for returning the time necessary for a program or an erase operation
  * @retval USBD_OK if operation is successful
  */
uint16_t MEM_If_GetStatus_FS(uint32_t Add, uint8_t Cmd, uint8_t *buffer)
{
 800a460:	b480      	push	{r7}
 800a462:	b085      	sub	sp, #20
 800a464:	af00      	add	r7, sp, #0
 800a466:	60f8      	str	r0, [r7, #12]
 800a468:	460b      	mov	r3, r1
 800a46a:	607a      	str	r2, [r7, #4]
 800a46c:	72fb      	strb	r3, [r7, #11]
  /* USER CODE BEGIN 5 */
  switch (Cmd)
 800a46e:	7afb      	ldrb	r3, [r7, #11]
 800a470:	2b01      	cmp	r3, #1
    break;

    case DFU_MEDIA_ERASE:
    default:

    break;
 800a472:	bf00      	nop
  }
  return (USBD_OK);
 800a474:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a476:	4618      	mov	r0, r3
 800a478:	3714      	adds	r7, #20
 800a47a:	46bd      	mov	sp, r7
 800a47c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a480:	4770      	bx	lr
	...

0800a484 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a484:	b580      	push	{r7, lr}
 800a486:	b0a0      	sub	sp, #128	@ 0x80
 800a488:	af00      	add	r7, sp, #0
 800a48a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a48c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800a490:	2200      	movs	r2, #0
 800a492:	601a      	str	r2, [r3, #0]
 800a494:	605a      	str	r2, [r3, #4]
 800a496:	609a      	str	r2, [r3, #8]
 800a498:	60da      	str	r2, [r3, #12]
 800a49a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800a49c:	f107 0314 	add.w	r3, r7, #20
 800a4a0:	2258      	movs	r2, #88	@ 0x58
 800a4a2:	2100      	movs	r1, #0
 800a4a4:	4618      	mov	r0, r3
 800a4a6:	f001 f967 	bl	800b778 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a4b2:	d155      	bne.n	800a560 <HAL_PCD_MspInit+0xdc>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800a4b4:	2320      	movs	r3, #32
 800a4b6:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 800a4b8:	2300      	movs	r3, #0
 800a4ba:	647b      	str	r3, [r7, #68]	@ 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800a4bc:	f107 0314 	add.w	r3, r7, #20
 800a4c0:	4618      	mov	r0, r3
 800a4c2:	f7fb fa6b 	bl	800599c <HAL_RCCEx_PeriphCLKConfig>
 800a4c6:	4603      	mov	r3, r0
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d001      	beq.n	800a4d0 <HAL_PCD_MspInit+0x4c>
    {
      Error_Handler();
 800a4cc:	f7f7 f94c 	bl	8001768 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a4d0:	2300      	movs	r3, #0
 800a4d2:	613b      	str	r3, [r7, #16]
 800a4d4:	4b24      	ldr	r3, [pc, #144]	@ (800a568 <HAL_PCD_MspInit+0xe4>)
 800a4d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a4d8:	4a23      	ldr	r2, [pc, #140]	@ (800a568 <HAL_PCD_MspInit+0xe4>)
 800a4da:	f043 0301 	orr.w	r3, r3, #1
 800a4de:	6313      	str	r3, [r2, #48]	@ 0x30
 800a4e0:	4b21      	ldr	r3, [pc, #132]	@ (800a568 <HAL_PCD_MspInit+0xe4>)
 800a4e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a4e4:	f003 0301 	and.w	r3, r3, #1
 800a4e8:	613b      	str	r3, [r7, #16]
 800a4ea:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800a4ec:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 800a4f0:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a4f2:	2302      	movs	r3, #2
 800a4f4:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a4f6:	2300      	movs	r3, #0
 800a4f8:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a4fa:	2303      	movs	r3, #3
 800a4fc:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a4fe:	230a      	movs	r3, #10
 800a500:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a502:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800a506:	4619      	mov	r1, r3
 800a508:	4818      	ldr	r0, [pc, #96]	@ (800a56c <HAL_PCD_MspInit+0xe8>)
 800a50a:	f7f8 fa39 	bl	8002980 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800a50e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a512:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a514:	2300      	movs	r3, #0
 800a516:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a518:	2300      	movs	r3, #0
 800a51a:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800a51c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800a520:	4619      	mov	r1, r3
 800a522:	4812      	ldr	r0, [pc, #72]	@ (800a56c <HAL_PCD_MspInit+0xe8>)
 800a524:	f7f8 fa2c 	bl	8002980 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a528:	4b0f      	ldr	r3, [pc, #60]	@ (800a568 <HAL_PCD_MspInit+0xe4>)
 800a52a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a52c:	4a0e      	ldr	r2, [pc, #56]	@ (800a568 <HAL_PCD_MspInit+0xe4>)
 800a52e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a532:	6353      	str	r3, [r2, #52]	@ 0x34
 800a534:	2300      	movs	r3, #0
 800a536:	60fb      	str	r3, [r7, #12]
 800a538:	4b0b      	ldr	r3, [pc, #44]	@ (800a568 <HAL_PCD_MspInit+0xe4>)
 800a53a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a53c:	4a0a      	ldr	r2, [pc, #40]	@ (800a568 <HAL_PCD_MspInit+0xe4>)
 800a53e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800a542:	6453      	str	r3, [r2, #68]	@ 0x44
 800a544:	4b08      	ldr	r3, [pc, #32]	@ (800a568 <HAL_PCD_MspInit+0xe4>)
 800a546:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a548:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a54c:	60fb      	str	r3, [r7, #12]
 800a54e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800a550:	2200      	movs	r2, #0
 800a552:	2100      	movs	r1, #0
 800a554:	2043      	movs	r0, #67	@ 0x43
 800a556:	f7f8 f928 	bl	80027aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a55a:	2043      	movs	r0, #67	@ 0x43
 800a55c:	f7f8 f941 	bl	80027e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a560:	bf00      	nop
 800a562:	3780      	adds	r7, #128	@ 0x80
 800a564:	46bd      	mov	sp, r7
 800a566:	bd80      	pop	{r7, pc}
 800a568:	40023800 	.word	0x40023800
 800a56c:	40020000 	.word	0x40020000

0800a570 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a570:	b580      	push	{r7, lr}
 800a572:	b082      	sub	sp, #8
 800a574:	af00      	add	r7, sp, #0
 800a576:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	f503 7371 	add.w	r3, r3, #964	@ 0x3c4
 800a584:	4619      	mov	r1, r3
 800a586:	4610      	mov	r0, r2
 800a588:	f7fe fd1b 	bl	8008fc2 <USBD_LL_SetupStage>
}
 800a58c:	bf00      	nop
 800a58e:	3708      	adds	r7, #8
 800a590:	46bd      	mov	sp, r7
 800a592:	bd80      	pop	{r7, pc}

0800a594 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a594:	b580      	push	{r7, lr}
 800a596:	b082      	sub	sp, #8
 800a598:	af00      	add	r7, sp, #0
 800a59a:	6078      	str	r0, [r7, #4]
 800a59c:	460b      	mov	r3, r1
 800a59e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	f8d3 0404 	ldr.w	r0, [r3, #1028]	@ 0x404
 800a5a6:	78fa      	ldrb	r2, [r7, #3]
 800a5a8:	6879      	ldr	r1, [r7, #4]
 800a5aa:	4613      	mov	r3, r2
 800a5ac:	00db      	lsls	r3, r3, #3
 800a5ae:	1a9b      	subs	r3, r3, r2
 800a5b0:	009b      	lsls	r3, r3, #2
 800a5b2:	440b      	add	r3, r1
 800a5b4:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 800a5b8:	681a      	ldr	r2, [r3, #0]
 800a5ba:	78fb      	ldrb	r3, [r7, #3]
 800a5bc:	4619      	mov	r1, r3
 800a5be:	f7fe fd55 	bl	800906c <USBD_LL_DataOutStage>
}
 800a5c2:	bf00      	nop
 800a5c4:	3708      	adds	r7, #8
 800a5c6:	46bd      	mov	sp, r7
 800a5c8:	bd80      	pop	{r7, pc}

0800a5ca <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a5ca:	b580      	push	{r7, lr}
 800a5cc:	b082      	sub	sp, #8
 800a5ce:	af00      	add	r7, sp, #0
 800a5d0:	6078      	str	r0, [r7, #4]
 800a5d2:	460b      	mov	r3, r1
 800a5d4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	f8d3 0404 	ldr.w	r0, [r3, #1028]	@ 0x404
 800a5dc:	78fa      	ldrb	r2, [r7, #3]
 800a5de:	6879      	ldr	r1, [r7, #4]
 800a5e0:	4613      	mov	r3, r2
 800a5e2:	00db      	lsls	r3, r3, #3
 800a5e4:	1a9b      	subs	r3, r3, r2
 800a5e6:	009b      	lsls	r3, r3, #2
 800a5e8:	440b      	add	r3, r1
 800a5ea:	3348      	adds	r3, #72	@ 0x48
 800a5ec:	681a      	ldr	r2, [r3, #0]
 800a5ee:	78fb      	ldrb	r3, [r7, #3]
 800a5f0:	4619      	mov	r1, r3
 800a5f2:	f7fe fd9e 	bl	8009132 <USBD_LL_DataInStage>
}
 800a5f6:	bf00      	nop
 800a5f8:	3708      	adds	r7, #8
 800a5fa:	46bd      	mov	sp, r7
 800a5fc:	bd80      	pop	{r7, pc}

0800a5fe <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a5fe:	b580      	push	{r7, lr}
 800a600:	b082      	sub	sp, #8
 800a602:	af00      	add	r7, sp, #0
 800a604:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 800a60c:	4618      	mov	r0, r3
 800a60e:	f7fe feb2 	bl	8009376 <USBD_LL_SOF>
}
 800a612:	bf00      	nop
 800a614:	3708      	adds	r7, #8
 800a616:	46bd      	mov	sp, r7
 800a618:	bd80      	pop	{r7, pc}

0800a61a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a61a:	b580      	push	{r7, lr}
 800a61c:	b084      	sub	sp, #16
 800a61e:	af00      	add	r7, sp, #0
 800a620:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a622:	2301      	movs	r3, #1
 800a624:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	68db      	ldr	r3, [r3, #12]
 800a62a:	2b02      	cmp	r3, #2
 800a62c:	d001      	beq.n	800a632 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800a62e:	f7f7 f89b 	bl	8001768 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 800a638:	7bfa      	ldrb	r2, [r7, #15]
 800a63a:	4611      	mov	r1, r2
 800a63c:	4618      	mov	r0, r3
 800a63e:	f7fe fe5c 	bl	80092fa <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 800a648:	4618      	mov	r0, r3
 800a64a:	f7fe fe08 	bl	800925e <USBD_LL_Reset>
}
 800a64e:	bf00      	nop
 800a650:	3710      	adds	r7, #16
 800a652:	46bd      	mov	sp, r7
 800a654:	bd80      	pop	{r7, pc}
	...

0800a658 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a658:	b580      	push	{r7, lr}
 800a65a:	b082      	sub	sp, #8
 800a65c:	af00      	add	r7, sp, #0
 800a65e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 800a666:	4618      	mov	r0, r3
 800a668:	f7fe fe57 	bl	800931a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	687a      	ldr	r2, [r7, #4]
 800a678:	6812      	ldr	r2, [r2, #0]
 800a67a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a67e:	f043 0301 	orr.w	r3, r3, #1
 800a682:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	6a1b      	ldr	r3, [r3, #32]
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d005      	beq.n	800a698 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a68c:	4b04      	ldr	r3, [pc, #16]	@ (800a6a0 <HAL_PCD_SuspendCallback+0x48>)
 800a68e:	691b      	ldr	r3, [r3, #16]
 800a690:	4a03      	ldr	r2, [pc, #12]	@ (800a6a0 <HAL_PCD_SuspendCallback+0x48>)
 800a692:	f043 0306 	orr.w	r3, r3, #6
 800a696:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a698:	bf00      	nop
 800a69a:	3708      	adds	r7, #8
 800a69c:	46bd      	mov	sp, r7
 800a69e:	bd80      	pop	{r7, pc}
 800a6a0:	e000ed00 	.word	0xe000ed00

0800a6a4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a6a4:	b580      	push	{r7, lr}
 800a6a6:	b082      	sub	sp, #8
 800a6a8:	af00      	add	r7, sp, #0
 800a6aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 800a6b2:	4618      	mov	r0, r3
 800a6b4:	f7fe fe47 	bl	8009346 <USBD_LL_Resume>
}
 800a6b8:	bf00      	nop
 800a6ba:	3708      	adds	r7, #8
 800a6bc:	46bd      	mov	sp, r7
 800a6be:	bd80      	pop	{r7, pc}

0800a6c0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a6c0:	b580      	push	{r7, lr}
 800a6c2:	b082      	sub	sp, #8
 800a6c4:	af00      	add	r7, sp, #0
 800a6c6:	6078      	str	r0, [r7, #4]
 800a6c8:	460b      	mov	r3, r1
 800a6ca:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 800a6d2:	78fa      	ldrb	r2, [r7, #3]
 800a6d4:	4611      	mov	r1, r2
 800a6d6:	4618      	mov	r0, r3
 800a6d8:	f7fe fe95 	bl	8009406 <USBD_LL_IsoOUTIncomplete>
}
 800a6dc:	bf00      	nop
 800a6de:	3708      	adds	r7, #8
 800a6e0:	46bd      	mov	sp, r7
 800a6e2:	bd80      	pop	{r7, pc}

0800a6e4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a6e4:	b580      	push	{r7, lr}
 800a6e6:	b082      	sub	sp, #8
 800a6e8:	af00      	add	r7, sp, #0
 800a6ea:	6078      	str	r0, [r7, #4]
 800a6ec:	460b      	mov	r3, r1
 800a6ee:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 800a6f6:	78fa      	ldrb	r2, [r7, #3]
 800a6f8:	4611      	mov	r1, r2
 800a6fa:	4618      	mov	r0, r3
 800a6fc:	f7fe fe5d 	bl	80093ba <USBD_LL_IsoINIncomplete>
}
 800a700:	bf00      	nop
 800a702:	3708      	adds	r7, #8
 800a704:	46bd      	mov	sp, r7
 800a706:	bd80      	pop	{r7, pc}

0800a708 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a708:	b580      	push	{r7, lr}
 800a70a:	b082      	sub	sp, #8
 800a70c:	af00      	add	r7, sp, #0
 800a70e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 800a716:	4618      	mov	r0, r3
 800a718:	f7fe fe9b 	bl	8009452 <USBD_LL_DevConnected>
}
 800a71c:	bf00      	nop
 800a71e:	3708      	adds	r7, #8
 800a720:	46bd      	mov	sp, r7
 800a722:	bd80      	pop	{r7, pc}

0800a724 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a724:	b580      	push	{r7, lr}
 800a726:	b082      	sub	sp, #8
 800a728:	af00      	add	r7, sp, #0
 800a72a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 800a732:	4618      	mov	r0, r3
 800a734:	f7fe fe98 	bl	8009468 <USBD_LL_DevDisconnected>
}
 800a738:	bf00      	nop
 800a73a:	3708      	adds	r7, #8
 800a73c:	46bd      	mov	sp, r7
 800a73e:	bd80      	pop	{r7, pc}

0800a740 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a740:	b580      	push	{r7, lr}
 800a742:	b082      	sub	sp, #8
 800a744:	af00      	add	r7, sp, #0
 800a746:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	781b      	ldrb	r3, [r3, #0]
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d13f      	bne.n	800a7d0 <USBD_LL_Init+0x90>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800a750:	4a22      	ldr	r2, [pc, #136]	@ (800a7dc <USBD_LL_Init+0x9c>)
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	f8c2 3404 	str.w	r3, [r2, #1028]	@ 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	4a20      	ldr	r2, [pc, #128]	@ (800a7dc <USBD_LL_Init+0x9c>)
 800a75c:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a760:	4b1e      	ldr	r3, [pc, #120]	@ (800a7dc <USBD_LL_Init+0x9c>)
 800a762:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800a766:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800a768:	4b1c      	ldr	r3, [pc, #112]	@ (800a7dc <USBD_LL_Init+0x9c>)
 800a76a:	2206      	movs	r2, #6
 800a76c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800a76e:	4b1b      	ldr	r3, [pc, #108]	@ (800a7dc <USBD_LL_Init+0x9c>)
 800a770:	2202      	movs	r2, #2
 800a772:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a774:	4b19      	ldr	r3, [pc, #100]	@ (800a7dc <USBD_LL_Init+0x9c>)
 800a776:	2200      	movs	r2, #0
 800a778:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a77a:	4b18      	ldr	r3, [pc, #96]	@ (800a7dc <USBD_LL_Init+0x9c>)
 800a77c:	2202      	movs	r2, #2
 800a77e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800a780:	4b16      	ldr	r3, [pc, #88]	@ (800a7dc <USBD_LL_Init+0x9c>)
 800a782:	2201      	movs	r2, #1
 800a784:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800a786:	4b15      	ldr	r3, [pc, #84]	@ (800a7dc <USBD_LL_Init+0x9c>)
 800a788:	2200      	movs	r2, #0
 800a78a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800a78c:	4b13      	ldr	r3, [pc, #76]	@ (800a7dc <USBD_LL_Init+0x9c>)
 800a78e:	2200      	movs	r2, #0
 800a790:	625a      	str	r2, [r3, #36]	@ 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 800a792:	4b12      	ldr	r3, [pc, #72]	@ (800a7dc <USBD_LL_Init+0x9c>)
 800a794:	2201      	movs	r2, #1
 800a796:	629a      	str	r2, [r3, #40]	@ 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800a798:	4b10      	ldr	r3, [pc, #64]	@ (800a7dc <USBD_LL_Init+0x9c>)
 800a79a:	2201      	movs	r2, #1
 800a79c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800a79e:	4b0f      	ldr	r3, [pc, #60]	@ (800a7dc <USBD_LL_Init+0x9c>)
 800a7a0:	2200      	movs	r2, #0
 800a7a2:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800a7a4:	480d      	ldr	r0, [pc, #52]	@ (800a7dc <USBD_LL_Init+0x9c>)
 800a7a6:	f7f9 fd26 	bl	80041f6 <HAL_PCD_Init>
 800a7aa:	4603      	mov	r3, r0
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d001      	beq.n	800a7b4 <USBD_LL_Init+0x74>
  {
    Error_Handler( );
 800a7b0:	f7f6 ffda 	bl	8001768 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800a7b4:	2180      	movs	r1, #128	@ 0x80
 800a7b6:	4809      	ldr	r0, [pc, #36]	@ (800a7dc <USBD_LL_Init+0x9c>)
 800a7b8:	f7fa fe8f 	bl	80054da <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800a7bc:	2240      	movs	r2, #64	@ 0x40
 800a7be:	2100      	movs	r1, #0
 800a7c0:	4806      	ldr	r0, [pc, #24]	@ (800a7dc <USBD_LL_Init+0x9c>)
 800a7c2:	f7fa fe43 	bl	800544c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800a7c6:	2280      	movs	r2, #128	@ 0x80
 800a7c8:	2101      	movs	r1, #1
 800a7ca:	4804      	ldr	r0, [pc, #16]	@ (800a7dc <USBD_LL_Init+0x9c>)
 800a7cc:	f7fa fe3e 	bl	800544c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800a7d0:	2300      	movs	r3, #0
}
 800a7d2:	4618      	mov	r0, r3
 800a7d4:	3708      	adds	r7, #8
 800a7d6:	46bd      	mov	sp, r7
 800a7d8:	bd80      	pop	{r7, pc}
 800a7da:	bf00      	nop
 800a7dc:	20000a60 	.word	0x20000a60

0800a7e0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a7e0:	b580      	push	{r7, lr}
 800a7e2:	b084      	sub	sp, #16
 800a7e4:	af00      	add	r7, sp, #0
 800a7e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a7e8:	2300      	movs	r3, #0
 800a7ea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a7ec:	2300      	movs	r3, #0
 800a7ee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800a7f6:	4618      	mov	r0, r3
 800a7f8:	f7f9 fe21 	bl	800443e <HAL_PCD_Start>
 800a7fc:	4603      	mov	r3, r0
 800a7fe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a800:	7bfb      	ldrb	r3, [r7, #15]
 800a802:	4618      	mov	r0, r3
 800a804:	f000 f92c 	bl	800aa60 <USBD_Get_USB_Status>
 800a808:	4603      	mov	r3, r0
 800a80a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a80c:	7bbb      	ldrb	r3, [r7, #14]
}
 800a80e:	4618      	mov	r0, r3
 800a810:	3710      	adds	r7, #16
 800a812:	46bd      	mov	sp, r7
 800a814:	bd80      	pop	{r7, pc}

0800a816 <USBD_LL_Stop>:
  * @brief  Stops the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Stop(USBD_HandleTypeDef *pdev)
{
 800a816:	b580      	push	{r7, lr}
 800a818:	b084      	sub	sp, #16
 800a81a:	af00      	add	r7, sp, #0
 800a81c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a81e:	2300      	movs	r3, #0
 800a820:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a822:	2300      	movs	r3, #0
 800a824:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Stop(pdev->pData);
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800a82c:	4618      	mov	r0, r3
 800a82e:	f7f9 fe39 	bl	80044a4 <HAL_PCD_Stop>
 800a832:	4603      	mov	r3, r0
 800a834:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a836:	7bfb      	ldrb	r3, [r7, #15]
 800a838:	4618      	mov	r0, r3
 800a83a:	f000 f911 	bl	800aa60 <USBD_Get_USB_Status>
 800a83e:	4603      	mov	r3, r0
 800a840:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a842:	7bbb      	ldrb	r3, [r7, #14]
}
 800a844:	4618      	mov	r0, r3
 800a846:	3710      	adds	r7, #16
 800a848:	46bd      	mov	sp, r7
 800a84a:	bd80      	pop	{r7, pc}

0800a84c <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a84c:	b580      	push	{r7, lr}
 800a84e:	b084      	sub	sp, #16
 800a850:	af00      	add	r7, sp, #0
 800a852:	6078      	str	r0, [r7, #4]
 800a854:	4608      	mov	r0, r1
 800a856:	4611      	mov	r1, r2
 800a858:	461a      	mov	r2, r3
 800a85a:	4603      	mov	r3, r0
 800a85c:	70fb      	strb	r3, [r7, #3]
 800a85e:	460b      	mov	r3, r1
 800a860:	70bb      	strb	r3, [r7, #2]
 800a862:	4613      	mov	r3, r2
 800a864:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a866:	2300      	movs	r3, #0
 800a868:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a86a:	2300      	movs	r3, #0
 800a86c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800a874:	78bb      	ldrb	r3, [r7, #2]
 800a876:	883a      	ldrh	r2, [r7, #0]
 800a878:	78f9      	ldrb	r1, [r7, #3]
 800a87a:	f7fa fa50 	bl	8004d1e <HAL_PCD_EP_Open>
 800a87e:	4603      	mov	r3, r0
 800a880:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a882:	7bfb      	ldrb	r3, [r7, #15]
 800a884:	4618      	mov	r0, r3
 800a886:	f000 f8eb 	bl	800aa60 <USBD_Get_USB_Status>
 800a88a:	4603      	mov	r3, r0
 800a88c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a88e:	7bbb      	ldrb	r3, [r7, #14]
}
 800a890:	4618      	mov	r0, r3
 800a892:	3710      	adds	r7, #16
 800a894:	46bd      	mov	sp, r7
 800a896:	bd80      	pop	{r7, pc}

0800a898 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a898:	b580      	push	{r7, lr}
 800a89a:	b084      	sub	sp, #16
 800a89c:	af00      	add	r7, sp, #0
 800a89e:	6078      	str	r0, [r7, #4]
 800a8a0:	460b      	mov	r3, r1
 800a8a2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a8a4:	2300      	movs	r3, #0
 800a8a6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a8a8:	2300      	movs	r3, #0
 800a8aa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800a8b2:	78fa      	ldrb	r2, [r7, #3]
 800a8b4:	4611      	mov	r1, r2
 800a8b6:	4618      	mov	r0, r3
 800a8b8:	f7fa fb2e 	bl	8004f18 <HAL_PCD_EP_SetStall>
 800a8bc:	4603      	mov	r3, r0
 800a8be:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a8c0:	7bfb      	ldrb	r3, [r7, #15]
 800a8c2:	4618      	mov	r0, r3
 800a8c4:	f000 f8cc 	bl	800aa60 <USBD_Get_USB_Status>
 800a8c8:	4603      	mov	r3, r0
 800a8ca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a8cc:	7bbb      	ldrb	r3, [r7, #14]
}
 800a8ce:	4618      	mov	r0, r3
 800a8d0:	3710      	adds	r7, #16
 800a8d2:	46bd      	mov	sp, r7
 800a8d4:	bd80      	pop	{r7, pc}

0800a8d6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a8d6:	b580      	push	{r7, lr}
 800a8d8:	b084      	sub	sp, #16
 800a8da:	af00      	add	r7, sp, #0
 800a8dc:	6078      	str	r0, [r7, #4]
 800a8de:	460b      	mov	r3, r1
 800a8e0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a8e2:	2300      	movs	r3, #0
 800a8e4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a8e6:	2300      	movs	r3, #0
 800a8e8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800a8f0:	78fa      	ldrb	r2, [r7, #3]
 800a8f2:	4611      	mov	r1, r2
 800a8f4:	4618      	mov	r0, r3
 800a8f6:	f7fa fb73 	bl	8004fe0 <HAL_PCD_EP_ClrStall>
 800a8fa:	4603      	mov	r3, r0
 800a8fc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a8fe:	7bfb      	ldrb	r3, [r7, #15]
 800a900:	4618      	mov	r0, r3
 800a902:	f000 f8ad 	bl	800aa60 <USBD_Get_USB_Status>
 800a906:	4603      	mov	r3, r0
 800a908:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a90a:	7bbb      	ldrb	r3, [r7, #14]
}
 800a90c:	4618      	mov	r0, r3
 800a90e:	3710      	adds	r7, #16
 800a910:	46bd      	mov	sp, r7
 800a912:	bd80      	pop	{r7, pc}

0800a914 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a914:	b480      	push	{r7}
 800a916:	b085      	sub	sp, #20
 800a918:	af00      	add	r7, sp, #0
 800a91a:	6078      	str	r0, [r7, #4]
 800a91c:	460b      	mov	r3, r1
 800a91e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800a926:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a928:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	da0b      	bge.n	800a948 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a930:	78fb      	ldrb	r3, [r7, #3]
 800a932:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a936:	68f9      	ldr	r1, [r7, #12]
 800a938:	4613      	mov	r3, r2
 800a93a:	00db      	lsls	r3, r3, #3
 800a93c:	1a9b      	subs	r3, r3, r2
 800a93e:	009b      	lsls	r3, r3, #2
 800a940:	440b      	add	r3, r1
 800a942:	333e      	adds	r3, #62	@ 0x3e
 800a944:	781b      	ldrb	r3, [r3, #0]
 800a946:	e00b      	b.n	800a960 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a948:	78fb      	ldrb	r3, [r7, #3]
 800a94a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a94e:	68f9      	ldr	r1, [r7, #12]
 800a950:	4613      	mov	r3, r2
 800a952:	00db      	lsls	r3, r3, #3
 800a954:	1a9b      	subs	r3, r3, r2
 800a956:	009b      	lsls	r3, r3, #2
 800a958:	440b      	add	r3, r1
 800a95a:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800a95e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a960:	4618      	mov	r0, r3
 800a962:	3714      	adds	r7, #20
 800a964:	46bd      	mov	sp, r7
 800a966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a96a:	4770      	bx	lr

0800a96c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a96c:	b580      	push	{r7, lr}
 800a96e:	b084      	sub	sp, #16
 800a970:	af00      	add	r7, sp, #0
 800a972:	6078      	str	r0, [r7, #4]
 800a974:	460b      	mov	r3, r1
 800a976:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a978:	2300      	movs	r3, #0
 800a97a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a97c:	2300      	movs	r3, #0
 800a97e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800a986:	78fa      	ldrb	r2, [r7, #3]
 800a988:	4611      	mov	r1, r2
 800a98a:	4618      	mov	r0, r3
 800a98c:	f7fa f9a2 	bl	8004cd4 <HAL_PCD_SetAddress>
 800a990:	4603      	mov	r3, r0
 800a992:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a994:	7bfb      	ldrb	r3, [r7, #15]
 800a996:	4618      	mov	r0, r3
 800a998:	f000 f862 	bl	800aa60 <USBD_Get_USB_Status>
 800a99c:	4603      	mov	r3, r0
 800a99e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a9a0:	7bbb      	ldrb	r3, [r7, #14]
}
 800a9a2:	4618      	mov	r0, r3
 800a9a4:	3710      	adds	r7, #16
 800a9a6:	46bd      	mov	sp, r7
 800a9a8:	bd80      	pop	{r7, pc}

0800a9aa <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a9aa:	b580      	push	{r7, lr}
 800a9ac:	b086      	sub	sp, #24
 800a9ae:	af00      	add	r7, sp, #0
 800a9b0:	60f8      	str	r0, [r7, #12]
 800a9b2:	607a      	str	r2, [r7, #4]
 800a9b4:	603b      	str	r3, [r7, #0]
 800a9b6:	460b      	mov	r3, r1
 800a9b8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a9ba:	2300      	movs	r3, #0
 800a9bc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a9be:	2300      	movs	r3, #0
 800a9c0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800a9c8:	7af9      	ldrb	r1, [r7, #11]
 800a9ca:	683b      	ldr	r3, [r7, #0]
 800a9cc:	687a      	ldr	r2, [r7, #4]
 800a9ce:	f7fa fa59 	bl	8004e84 <HAL_PCD_EP_Transmit>
 800a9d2:	4603      	mov	r3, r0
 800a9d4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a9d6:	7dfb      	ldrb	r3, [r7, #23]
 800a9d8:	4618      	mov	r0, r3
 800a9da:	f000 f841 	bl	800aa60 <USBD_Get_USB_Status>
 800a9de:	4603      	mov	r3, r0
 800a9e0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a9e2:	7dbb      	ldrb	r3, [r7, #22]
}
 800a9e4:	4618      	mov	r0, r3
 800a9e6:	3718      	adds	r7, #24
 800a9e8:	46bd      	mov	sp, r7
 800a9ea:	bd80      	pop	{r7, pc}

0800a9ec <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a9ec:	b580      	push	{r7, lr}
 800a9ee:	b086      	sub	sp, #24
 800a9f0:	af00      	add	r7, sp, #0
 800a9f2:	60f8      	str	r0, [r7, #12]
 800a9f4:	607a      	str	r2, [r7, #4]
 800a9f6:	603b      	str	r3, [r7, #0]
 800a9f8:	460b      	mov	r3, r1
 800a9fa:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a9fc:	2300      	movs	r3, #0
 800a9fe:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aa00:	2300      	movs	r3, #0
 800aa02:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800aa0a:	7af9      	ldrb	r1, [r7, #11]
 800aa0c:	683b      	ldr	r3, [r7, #0]
 800aa0e:	687a      	ldr	r2, [r7, #4]
 800aa10:	f7fa f9ed 	bl	8004dee <HAL_PCD_EP_Receive>
 800aa14:	4603      	mov	r3, r0
 800aa16:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aa18:	7dfb      	ldrb	r3, [r7, #23]
 800aa1a:	4618      	mov	r0, r3
 800aa1c:	f000 f820 	bl	800aa60 <USBD_Get_USB_Status>
 800aa20:	4603      	mov	r3, r0
 800aa22:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800aa24:	7dbb      	ldrb	r3, [r7, #22]
}
 800aa26:	4618      	mov	r0, r3
 800aa28:	3718      	adds	r7, #24
 800aa2a:	46bd      	mov	sp, r7
 800aa2c:	bd80      	pop	{r7, pc}
	...

0800aa30 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800aa30:	b480      	push	{r7}
 800aa32:	b083      	sub	sp, #12
 800aa34:	af00      	add	r7, sp, #0
 800aa36:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_DFU_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800aa38:	4b03      	ldr	r3, [pc, #12]	@ (800aa48 <USBD_static_malloc+0x18>)
}
 800aa3a:	4618      	mov	r0, r3
 800aa3c:	370c      	adds	r7, #12
 800aa3e:	46bd      	mov	sp, r7
 800aa40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa44:	4770      	bx	lr
 800aa46:	bf00      	nop
 800aa48:	20000e68 	.word	0x20000e68

0800aa4c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800aa4c:	b480      	push	{r7}
 800aa4e:	b083      	sub	sp, #12
 800aa50:	af00      	add	r7, sp, #0
 800aa52:	6078      	str	r0, [r7, #4]

}
 800aa54:	bf00      	nop
 800aa56:	370c      	adds	r7, #12
 800aa58:	46bd      	mov	sp, r7
 800aa5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa5e:	4770      	bx	lr

0800aa60 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800aa60:	b480      	push	{r7}
 800aa62:	b085      	sub	sp, #20
 800aa64:	af00      	add	r7, sp, #0
 800aa66:	4603      	mov	r3, r0
 800aa68:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aa6a:	2300      	movs	r3, #0
 800aa6c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800aa6e:	79fb      	ldrb	r3, [r7, #7]
 800aa70:	2b03      	cmp	r3, #3
 800aa72:	d817      	bhi.n	800aaa4 <USBD_Get_USB_Status+0x44>
 800aa74:	a201      	add	r2, pc, #4	@ (adr r2, 800aa7c <USBD_Get_USB_Status+0x1c>)
 800aa76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa7a:	bf00      	nop
 800aa7c:	0800aa8d 	.word	0x0800aa8d
 800aa80:	0800aa93 	.word	0x0800aa93
 800aa84:	0800aa99 	.word	0x0800aa99
 800aa88:	0800aa9f 	.word	0x0800aa9f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800aa8c:	2300      	movs	r3, #0
 800aa8e:	73fb      	strb	r3, [r7, #15]
    break;
 800aa90:	e00b      	b.n	800aaaa <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800aa92:	2303      	movs	r3, #3
 800aa94:	73fb      	strb	r3, [r7, #15]
    break;
 800aa96:	e008      	b.n	800aaaa <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800aa98:	2301      	movs	r3, #1
 800aa9a:	73fb      	strb	r3, [r7, #15]
    break;
 800aa9c:	e005      	b.n	800aaaa <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800aa9e:	2303      	movs	r3, #3
 800aaa0:	73fb      	strb	r3, [r7, #15]
    break;
 800aaa2:	e002      	b.n	800aaaa <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800aaa4:	2303      	movs	r3, #3
 800aaa6:	73fb      	strb	r3, [r7, #15]
    break;
 800aaa8:	bf00      	nop
  }
  return usb_status;
 800aaaa:	7bfb      	ldrb	r3, [r7, #15]
}
 800aaac:	4618      	mov	r0, r3
 800aaae:	3714      	adds	r7, #20
 800aab0:	46bd      	mov	sp, r7
 800aab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab6:	4770      	bx	lr

0800aab8 <__cvt>:
 800aab8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800aabc:	ec57 6b10 	vmov	r6, r7, d0
 800aac0:	2f00      	cmp	r7, #0
 800aac2:	460c      	mov	r4, r1
 800aac4:	4619      	mov	r1, r3
 800aac6:	463b      	mov	r3, r7
 800aac8:	bfbb      	ittet	lt
 800aaca:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800aace:	461f      	movlt	r7, r3
 800aad0:	2300      	movge	r3, #0
 800aad2:	232d      	movlt	r3, #45	@ 0x2d
 800aad4:	700b      	strb	r3, [r1, #0]
 800aad6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800aad8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800aadc:	4691      	mov	r9, r2
 800aade:	f023 0820 	bic.w	r8, r3, #32
 800aae2:	bfbc      	itt	lt
 800aae4:	4632      	movlt	r2, r6
 800aae6:	4616      	movlt	r6, r2
 800aae8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800aaec:	d005      	beq.n	800aafa <__cvt+0x42>
 800aaee:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800aaf2:	d100      	bne.n	800aaf6 <__cvt+0x3e>
 800aaf4:	3401      	adds	r4, #1
 800aaf6:	2102      	movs	r1, #2
 800aaf8:	e000      	b.n	800aafc <__cvt+0x44>
 800aafa:	2103      	movs	r1, #3
 800aafc:	ab03      	add	r3, sp, #12
 800aafe:	9301      	str	r3, [sp, #4]
 800ab00:	ab02      	add	r3, sp, #8
 800ab02:	9300      	str	r3, [sp, #0]
 800ab04:	ec47 6b10 	vmov	d0, r6, r7
 800ab08:	4653      	mov	r3, sl
 800ab0a:	4622      	mov	r2, r4
 800ab0c:	f000 ff3c 	bl	800b988 <_dtoa_r>
 800ab10:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800ab14:	4605      	mov	r5, r0
 800ab16:	d119      	bne.n	800ab4c <__cvt+0x94>
 800ab18:	f019 0f01 	tst.w	r9, #1
 800ab1c:	d00e      	beq.n	800ab3c <__cvt+0x84>
 800ab1e:	eb00 0904 	add.w	r9, r0, r4
 800ab22:	2200      	movs	r2, #0
 800ab24:	2300      	movs	r3, #0
 800ab26:	4630      	mov	r0, r6
 800ab28:	4639      	mov	r1, r7
 800ab2a:	f7f5 fff5 	bl	8000b18 <__aeabi_dcmpeq>
 800ab2e:	b108      	cbz	r0, 800ab34 <__cvt+0x7c>
 800ab30:	f8cd 900c 	str.w	r9, [sp, #12]
 800ab34:	2230      	movs	r2, #48	@ 0x30
 800ab36:	9b03      	ldr	r3, [sp, #12]
 800ab38:	454b      	cmp	r3, r9
 800ab3a:	d31e      	bcc.n	800ab7a <__cvt+0xc2>
 800ab3c:	9b03      	ldr	r3, [sp, #12]
 800ab3e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ab40:	1b5b      	subs	r3, r3, r5
 800ab42:	4628      	mov	r0, r5
 800ab44:	6013      	str	r3, [r2, #0]
 800ab46:	b004      	add	sp, #16
 800ab48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab4c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800ab50:	eb00 0904 	add.w	r9, r0, r4
 800ab54:	d1e5      	bne.n	800ab22 <__cvt+0x6a>
 800ab56:	7803      	ldrb	r3, [r0, #0]
 800ab58:	2b30      	cmp	r3, #48	@ 0x30
 800ab5a:	d10a      	bne.n	800ab72 <__cvt+0xba>
 800ab5c:	2200      	movs	r2, #0
 800ab5e:	2300      	movs	r3, #0
 800ab60:	4630      	mov	r0, r6
 800ab62:	4639      	mov	r1, r7
 800ab64:	f7f5 ffd8 	bl	8000b18 <__aeabi_dcmpeq>
 800ab68:	b918      	cbnz	r0, 800ab72 <__cvt+0xba>
 800ab6a:	f1c4 0401 	rsb	r4, r4, #1
 800ab6e:	f8ca 4000 	str.w	r4, [sl]
 800ab72:	f8da 3000 	ldr.w	r3, [sl]
 800ab76:	4499      	add	r9, r3
 800ab78:	e7d3      	b.n	800ab22 <__cvt+0x6a>
 800ab7a:	1c59      	adds	r1, r3, #1
 800ab7c:	9103      	str	r1, [sp, #12]
 800ab7e:	701a      	strb	r2, [r3, #0]
 800ab80:	e7d9      	b.n	800ab36 <__cvt+0x7e>

0800ab82 <__exponent>:
 800ab82:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ab84:	2900      	cmp	r1, #0
 800ab86:	bfba      	itte	lt
 800ab88:	4249      	neglt	r1, r1
 800ab8a:	232d      	movlt	r3, #45	@ 0x2d
 800ab8c:	232b      	movge	r3, #43	@ 0x2b
 800ab8e:	2909      	cmp	r1, #9
 800ab90:	7002      	strb	r2, [r0, #0]
 800ab92:	7043      	strb	r3, [r0, #1]
 800ab94:	dd29      	ble.n	800abea <__exponent+0x68>
 800ab96:	f10d 0307 	add.w	r3, sp, #7
 800ab9a:	461d      	mov	r5, r3
 800ab9c:	270a      	movs	r7, #10
 800ab9e:	461a      	mov	r2, r3
 800aba0:	fbb1 f6f7 	udiv	r6, r1, r7
 800aba4:	fb07 1416 	mls	r4, r7, r6, r1
 800aba8:	3430      	adds	r4, #48	@ 0x30
 800abaa:	f802 4c01 	strb.w	r4, [r2, #-1]
 800abae:	460c      	mov	r4, r1
 800abb0:	2c63      	cmp	r4, #99	@ 0x63
 800abb2:	f103 33ff 	add.w	r3, r3, #4294967295
 800abb6:	4631      	mov	r1, r6
 800abb8:	dcf1      	bgt.n	800ab9e <__exponent+0x1c>
 800abba:	3130      	adds	r1, #48	@ 0x30
 800abbc:	1e94      	subs	r4, r2, #2
 800abbe:	f803 1c01 	strb.w	r1, [r3, #-1]
 800abc2:	1c41      	adds	r1, r0, #1
 800abc4:	4623      	mov	r3, r4
 800abc6:	42ab      	cmp	r3, r5
 800abc8:	d30a      	bcc.n	800abe0 <__exponent+0x5e>
 800abca:	f10d 0309 	add.w	r3, sp, #9
 800abce:	1a9b      	subs	r3, r3, r2
 800abd0:	42ac      	cmp	r4, r5
 800abd2:	bf88      	it	hi
 800abd4:	2300      	movhi	r3, #0
 800abd6:	3302      	adds	r3, #2
 800abd8:	4403      	add	r3, r0
 800abda:	1a18      	subs	r0, r3, r0
 800abdc:	b003      	add	sp, #12
 800abde:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800abe0:	f813 6b01 	ldrb.w	r6, [r3], #1
 800abe4:	f801 6f01 	strb.w	r6, [r1, #1]!
 800abe8:	e7ed      	b.n	800abc6 <__exponent+0x44>
 800abea:	2330      	movs	r3, #48	@ 0x30
 800abec:	3130      	adds	r1, #48	@ 0x30
 800abee:	7083      	strb	r3, [r0, #2]
 800abf0:	70c1      	strb	r1, [r0, #3]
 800abf2:	1d03      	adds	r3, r0, #4
 800abf4:	e7f1      	b.n	800abda <__exponent+0x58>
	...

0800abf8 <_printf_float>:
 800abf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abfc:	b08d      	sub	sp, #52	@ 0x34
 800abfe:	460c      	mov	r4, r1
 800ac00:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800ac04:	4616      	mov	r6, r2
 800ac06:	461f      	mov	r7, r3
 800ac08:	4605      	mov	r5, r0
 800ac0a:	f000 fdbd 	bl	800b788 <_localeconv_r>
 800ac0e:	6803      	ldr	r3, [r0, #0]
 800ac10:	9304      	str	r3, [sp, #16]
 800ac12:	4618      	mov	r0, r3
 800ac14:	f7f5 fb54 	bl	80002c0 <strlen>
 800ac18:	2300      	movs	r3, #0
 800ac1a:	930a      	str	r3, [sp, #40]	@ 0x28
 800ac1c:	f8d8 3000 	ldr.w	r3, [r8]
 800ac20:	9005      	str	r0, [sp, #20]
 800ac22:	3307      	adds	r3, #7
 800ac24:	f023 0307 	bic.w	r3, r3, #7
 800ac28:	f103 0208 	add.w	r2, r3, #8
 800ac2c:	f894 a018 	ldrb.w	sl, [r4, #24]
 800ac30:	f8d4 b000 	ldr.w	fp, [r4]
 800ac34:	f8c8 2000 	str.w	r2, [r8]
 800ac38:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ac3c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800ac40:	9307      	str	r3, [sp, #28]
 800ac42:	f8cd 8018 	str.w	r8, [sp, #24]
 800ac46:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800ac4a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ac4e:	4b9c      	ldr	r3, [pc, #624]	@ (800aec0 <_printf_float+0x2c8>)
 800ac50:	f04f 32ff 	mov.w	r2, #4294967295
 800ac54:	f7f5 ff92 	bl	8000b7c <__aeabi_dcmpun>
 800ac58:	bb70      	cbnz	r0, 800acb8 <_printf_float+0xc0>
 800ac5a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ac5e:	4b98      	ldr	r3, [pc, #608]	@ (800aec0 <_printf_float+0x2c8>)
 800ac60:	f04f 32ff 	mov.w	r2, #4294967295
 800ac64:	f7f5 ff6c 	bl	8000b40 <__aeabi_dcmple>
 800ac68:	bb30      	cbnz	r0, 800acb8 <_printf_float+0xc0>
 800ac6a:	2200      	movs	r2, #0
 800ac6c:	2300      	movs	r3, #0
 800ac6e:	4640      	mov	r0, r8
 800ac70:	4649      	mov	r1, r9
 800ac72:	f7f5 ff5b 	bl	8000b2c <__aeabi_dcmplt>
 800ac76:	b110      	cbz	r0, 800ac7e <_printf_float+0x86>
 800ac78:	232d      	movs	r3, #45	@ 0x2d
 800ac7a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ac7e:	4a91      	ldr	r2, [pc, #580]	@ (800aec4 <_printf_float+0x2cc>)
 800ac80:	4b91      	ldr	r3, [pc, #580]	@ (800aec8 <_printf_float+0x2d0>)
 800ac82:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800ac86:	bf8c      	ite	hi
 800ac88:	4690      	movhi	r8, r2
 800ac8a:	4698      	movls	r8, r3
 800ac8c:	2303      	movs	r3, #3
 800ac8e:	6123      	str	r3, [r4, #16]
 800ac90:	f02b 0304 	bic.w	r3, fp, #4
 800ac94:	6023      	str	r3, [r4, #0]
 800ac96:	f04f 0900 	mov.w	r9, #0
 800ac9a:	9700      	str	r7, [sp, #0]
 800ac9c:	4633      	mov	r3, r6
 800ac9e:	aa0b      	add	r2, sp, #44	@ 0x2c
 800aca0:	4621      	mov	r1, r4
 800aca2:	4628      	mov	r0, r5
 800aca4:	f000 f9d2 	bl	800b04c <_printf_common>
 800aca8:	3001      	adds	r0, #1
 800acaa:	f040 808d 	bne.w	800adc8 <_printf_float+0x1d0>
 800acae:	f04f 30ff 	mov.w	r0, #4294967295
 800acb2:	b00d      	add	sp, #52	@ 0x34
 800acb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800acb8:	4642      	mov	r2, r8
 800acba:	464b      	mov	r3, r9
 800acbc:	4640      	mov	r0, r8
 800acbe:	4649      	mov	r1, r9
 800acc0:	f7f5 ff5c 	bl	8000b7c <__aeabi_dcmpun>
 800acc4:	b140      	cbz	r0, 800acd8 <_printf_float+0xe0>
 800acc6:	464b      	mov	r3, r9
 800acc8:	2b00      	cmp	r3, #0
 800acca:	bfbc      	itt	lt
 800accc:	232d      	movlt	r3, #45	@ 0x2d
 800acce:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800acd2:	4a7e      	ldr	r2, [pc, #504]	@ (800aecc <_printf_float+0x2d4>)
 800acd4:	4b7e      	ldr	r3, [pc, #504]	@ (800aed0 <_printf_float+0x2d8>)
 800acd6:	e7d4      	b.n	800ac82 <_printf_float+0x8a>
 800acd8:	6863      	ldr	r3, [r4, #4]
 800acda:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800acde:	9206      	str	r2, [sp, #24]
 800ace0:	1c5a      	adds	r2, r3, #1
 800ace2:	d13b      	bne.n	800ad5c <_printf_float+0x164>
 800ace4:	2306      	movs	r3, #6
 800ace6:	6063      	str	r3, [r4, #4]
 800ace8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800acec:	2300      	movs	r3, #0
 800acee:	6022      	str	r2, [r4, #0]
 800acf0:	9303      	str	r3, [sp, #12]
 800acf2:	ab0a      	add	r3, sp, #40	@ 0x28
 800acf4:	e9cd a301 	strd	sl, r3, [sp, #4]
 800acf8:	ab09      	add	r3, sp, #36	@ 0x24
 800acfa:	9300      	str	r3, [sp, #0]
 800acfc:	6861      	ldr	r1, [r4, #4]
 800acfe:	ec49 8b10 	vmov	d0, r8, r9
 800ad02:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800ad06:	4628      	mov	r0, r5
 800ad08:	f7ff fed6 	bl	800aab8 <__cvt>
 800ad0c:	9b06      	ldr	r3, [sp, #24]
 800ad0e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ad10:	2b47      	cmp	r3, #71	@ 0x47
 800ad12:	4680      	mov	r8, r0
 800ad14:	d129      	bne.n	800ad6a <_printf_float+0x172>
 800ad16:	1cc8      	adds	r0, r1, #3
 800ad18:	db02      	blt.n	800ad20 <_printf_float+0x128>
 800ad1a:	6863      	ldr	r3, [r4, #4]
 800ad1c:	4299      	cmp	r1, r3
 800ad1e:	dd41      	ble.n	800ada4 <_printf_float+0x1ac>
 800ad20:	f1aa 0a02 	sub.w	sl, sl, #2
 800ad24:	fa5f fa8a 	uxtb.w	sl, sl
 800ad28:	3901      	subs	r1, #1
 800ad2a:	4652      	mov	r2, sl
 800ad2c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800ad30:	9109      	str	r1, [sp, #36]	@ 0x24
 800ad32:	f7ff ff26 	bl	800ab82 <__exponent>
 800ad36:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ad38:	1813      	adds	r3, r2, r0
 800ad3a:	2a01      	cmp	r2, #1
 800ad3c:	4681      	mov	r9, r0
 800ad3e:	6123      	str	r3, [r4, #16]
 800ad40:	dc02      	bgt.n	800ad48 <_printf_float+0x150>
 800ad42:	6822      	ldr	r2, [r4, #0]
 800ad44:	07d2      	lsls	r2, r2, #31
 800ad46:	d501      	bpl.n	800ad4c <_printf_float+0x154>
 800ad48:	3301      	adds	r3, #1
 800ad4a:	6123      	str	r3, [r4, #16]
 800ad4c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d0a2      	beq.n	800ac9a <_printf_float+0xa2>
 800ad54:	232d      	movs	r3, #45	@ 0x2d
 800ad56:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ad5a:	e79e      	b.n	800ac9a <_printf_float+0xa2>
 800ad5c:	9a06      	ldr	r2, [sp, #24]
 800ad5e:	2a47      	cmp	r2, #71	@ 0x47
 800ad60:	d1c2      	bne.n	800ace8 <_printf_float+0xf0>
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d1c0      	bne.n	800ace8 <_printf_float+0xf0>
 800ad66:	2301      	movs	r3, #1
 800ad68:	e7bd      	b.n	800ace6 <_printf_float+0xee>
 800ad6a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800ad6e:	d9db      	bls.n	800ad28 <_printf_float+0x130>
 800ad70:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800ad74:	d118      	bne.n	800ada8 <_printf_float+0x1b0>
 800ad76:	2900      	cmp	r1, #0
 800ad78:	6863      	ldr	r3, [r4, #4]
 800ad7a:	dd0b      	ble.n	800ad94 <_printf_float+0x19c>
 800ad7c:	6121      	str	r1, [r4, #16]
 800ad7e:	b913      	cbnz	r3, 800ad86 <_printf_float+0x18e>
 800ad80:	6822      	ldr	r2, [r4, #0]
 800ad82:	07d0      	lsls	r0, r2, #31
 800ad84:	d502      	bpl.n	800ad8c <_printf_float+0x194>
 800ad86:	3301      	adds	r3, #1
 800ad88:	440b      	add	r3, r1
 800ad8a:	6123      	str	r3, [r4, #16]
 800ad8c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800ad8e:	f04f 0900 	mov.w	r9, #0
 800ad92:	e7db      	b.n	800ad4c <_printf_float+0x154>
 800ad94:	b913      	cbnz	r3, 800ad9c <_printf_float+0x1a4>
 800ad96:	6822      	ldr	r2, [r4, #0]
 800ad98:	07d2      	lsls	r2, r2, #31
 800ad9a:	d501      	bpl.n	800ada0 <_printf_float+0x1a8>
 800ad9c:	3302      	adds	r3, #2
 800ad9e:	e7f4      	b.n	800ad8a <_printf_float+0x192>
 800ada0:	2301      	movs	r3, #1
 800ada2:	e7f2      	b.n	800ad8a <_printf_float+0x192>
 800ada4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800ada8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800adaa:	4299      	cmp	r1, r3
 800adac:	db05      	blt.n	800adba <_printf_float+0x1c2>
 800adae:	6823      	ldr	r3, [r4, #0]
 800adb0:	6121      	str	r1, [r4, #16]
 800adb2:	07d8      	lsls	r0, r3, #31
 800adb4:	d5ea      	bpl.n	800ad8c <_printf_float+0x194>
 800adb6:	1c4b      	adds	r3, r1, #1
 800adb8:	e7e7      	b.n	800ad8a <_printf_float+0x192>
 800adba:	2900      	cmp	r1, #0
 800adbc:	bfd4      	ite	le
 800adbe:	f1c1 0202 	rsble	r2, r1, #2
 800adc2:	2201      	movgt	r2, #1
 800adc4:	4413      	add	r3, r2
 800adc6:	e7e0      	b.n	800ad8a <_printf_float+0x192>
 800adc8:	6823      	ldr	r3, [r4, #0]
 800adca:	055a      	lsls	r2, r3, #21
 800adcc:	d407      	bmi.n	800adde <_printf_float+0x1e6>
 800adce:	6923      	ldr	r3, [r4, #16]
 800add0:	4642      	mov	r2, r8
 800add2:	4631      	mov	r1, r6
 800add4:	4628      	mov	r0, r5
 800add6:	47b8      	blx	r7
 800add8:	3001      	adds	r0, #1
 800adda:	d12b      	bne.n	800ae34 <_printf_float+0x23c>
 800addc:	e767      	b.n	800acae <_printf_float+0xb6>
 800adde:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800ade2:	f240 80dd 	bls.w	800afa0 <_printf_float+0x3a8>
 800ade6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800adea:	2200      	movs	r2, #0
 800adec:	2300      	movs	r3, #0
 800adee:	f7f5 fe93 	bl	8000b18 <__aeabi_dcmpeq>
 800adf2:	2800      	cmp	r0, #0
 800adf4:	d033      	beq.n	800ae5e <_printf_float+0x266>
 800adf6:	4a37      	ldr	r2, [pc, #220]	@ (800aed4 <_printf_float+0x2dc>)
 800adf8:	2301      	movs	r3, #1
 800adfa:	4631      	mov	r1, r6
 800adfc:	4628      	mov	r0, r5
 800adfe:	47b8      	blx	r7
 800ae00:	3001      	adds	r0, #1
 800ae02:	f43f af54 	beq.w	800acae <_printf_float+0xb6>
 800ae06:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800ae0a:	4543      	cmp	r3, r8
 800ae0c:	db02      	blt.n	800ae14 <_printf_float+0x21c>
 800ae0e:	6823      	ldr	r3, [r4, #0]
 800ae10:	07d8      	lsls	r0, r3, #31
 800ae12:	d50f      	bpl.n	800ae34 <_printf_float+0x23c>
 800ae14:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ae18:	4631      	mov	r1, r6
 800ae1a:	4628      	mov	r0, r5
 800ae1c:	47b8      	blx	r7
 800ae1e:	3001      	adds	r0, #1
 800ae20:	f43f af45 	beq.w	800acae <_printf_float+0xb6>
 800ae24:	f04f 0900 	mov.w	r9, #0
 800ae28:	f108 38ff 	add.w	r8, r8, #4294967295
 800ae2c:	f104 0a1a 	add.w	sl, r4, #26
 800ae30:	45c8      	cmp	r8, r9
 800ae32:	dc09      	bgt.n	800ae48 <_printf_float+0x250>
 800ae34:	6823      	ldr	r3, [r4, #0]
 800ae36:	079b      	lsls	r3, r3, #30
 800ae38:	f100 8103 	bmi.w	800b042 <_printf_float+0x44a>
 800ae3c:	68e0      	ldr	r0, [r4, #12]
 800ae3e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ae40:	4298      	cmp	r0, r3
 800ae42:	bfb8      	it	lt
 800ae44:	4618      	movlt	r0, r3
 800ae46:	e734      	b.n	800acb2 <_printf_float+0xba>
 800ae48:	2301      	movs	r3, #1
 800ae4a:	4652      	mov	r2, sl
 800ae4c:	4631      	mov	r1, r6
 800ae4e:	4628      	mov	r0, r5
 800ae50:	47b8      	blx	r7
 800ae52:	3001      	adds	r0, #1
 800ae54:	f43f af2b 	beq.w	800acae <_printf_float+0xb6>
 800ae58:	f109 0901 	add.w	r9, r9, #1
 800ae5c:	e7e8      	b.n	800ae30 <_printf_float+0x238>
 800ae5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	dc39      	bgt.n	800aed8 <_printf_float+0x2e0>
 800ae64:	4a1b      	ldr	r2, [pc, #108]	@ (800aed4 <_printf_float+0x2dc>)
 800ae66:	2301      	movs	r3, #1
 800ae68:	4631      	mov	r1, r6
 800ae6a:	4628      	mov	r0, r5
 800ae6c:	47b8      	blx	r7
 800ae6e:	3001      	adds	r0, #1
 800ae70:	f43f af1d 	beq.w	800acae <_printf_float+0xb6>
 800ae74:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800ae78:	ea59 0303 	orrs.w	r3, r9, r3
 800ae7c:	d102      	bne.n	800ae84 <_printf_float+0x28c>
 800ae7e:	6823      	ldr	r3, [r4, #0]
 800ae80:	07d9      	lsls	r1, r3, #31
 800ae82:	d5d7      	bpl.n	800ae34 <_printf_float+0x23c>
 800ae84:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ae88:	4631      	mov	r1, r6
 800ae8a:	4628      	mov	r0, r5
 800ae8c:	47b8      	blx	r7
 800ae8e:	3001      	adds	r0, #1
 800ae90:	f43f af0d 	beq.w	800acae <_printf_float+0xb6>
 800ae94:	f04f 0a00 	mov.w	sl, #0
 800ae98:	f104 0b1a 	add.w	fp, r4, #26
 800ae9c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ae9e:	425b      	negs	r3, r3
 800aea0:	4553      	cmp	r3, sl
 800aea2:	dc01      	bgt.n	800aea8 <_printf_float+0x2b0>
 800aea4:	464b      	mov	r3, r9
 800aea6:	e793      	b.n	800add0 <_printf_float+0x1d8>
 800aea8:	2301      	movs	r3, #1
 800aeaa:	465a      	mov	r2, fp
 800aeac:	4631      	mov	r1, r6
 800aeae:	4628      	mov	r0, r5
 800aeb0:	47b8      	blx	r7
 800aeb2:	3001      	adds	r0, #1
 800aeb4:	f43f aefb 	beq.w	800acae <_printf_float+0xb6>
 800aeb8:	f10a 0a01 	add.w	sl, sl, #1
 800aebc:	e7ee      	b.n	800ae9c <_printf_float+0x2a4>
 800aebe:	bf00      	nop
 800aec0:	7fefffff 	.word	0x7fefffff
 800aec4:	0800d5f8 	.word	0x0800d5f8
 800aec8:	0800d5f4 	.word	0x0800d5f4
 800aecc:	0800d600 	.word	0x0800d600
 800aed0:	0800d5fc 	.word	0x0800d5fc
 800aed4:	0800d604 	.word	0x0800d604
 800aed8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800aeda:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800aede:	4553      	cmp	r3, sl
 800aee0:	bfa8      	it	ge
 800aee2:	4653      	movge	r3, sl
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	4699      	mov	r9, r3
 800aee8:	dc36      	bgt.n	800af58 <_printf_float+0x360>
 800aeea:	f04f 0b00 	mov.w	fp, #0
 800aeee:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800aef2:	f104 021a 	add.w	r2, r4, #26
 800aef6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800aef8:	9306      	str	r3, [sp, #24]
 800aefa:	eba3 0309 	sub.w	r3, r3, r9
 800aefe:	455b      	cmp	r3, fp
 800af00:	dc31      	bgt.n	800af66 <_printf_float+0x36e>
 800af02:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af04:	459a      	cmp	sl, r3
 800af06:	dc3a      	bgt.n	800af7e <_printf_float+0x386>
 800af08:	6823      	ldr	r3, [r4, #0]
 800af0a:	07da      	lsls	r2, r3, #31
 800af0c:	d437      	bmi.n	800af7e <_printf_float+0x386>
 800af0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af10:	ebaa 0903 	sub.w	r9, sl, r3
 800af14:	9b06      	ldr	r3, [sp, #24]
 800af16:	ebaa 0303 	sub.w	r3, sl, r3
 800af1a:	4599      	cmp	r9, r3
 800af1c:	bfa8      	it	ge
 800af1e:	4699      	movge	r9, r3
 800af20:	f1b9 0f00 	cmp.w	r9, #0
 800af24:	dc33      	bgt.n	800af8e <_printf_float+0x396>
 800af26:	f04f 0800 	mov.w	r8, #0
 800af2a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800af2e:	f104 0b1a 	add.w	fp, r4, #26
 800af32:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af34:	ebaa 0303 	sub.w	r3, sl, r3
 800af38:	eba3 0309 	sub.w	r3, r3, r9
 800af3c:	4543      	cmp	r3, r8
 800af3e:	f77f af79 	ble.w	800ae34 <_printf_float+0x23c>
 800af42:	2301      	movs	r3, #1
 800af44:	465a      	mov	r2, fp
 800af46:	4631      	mov	r1, r6
 800af48:	4628      	mov	r0, r5
 800af4a:	47b8      	blx	r7
 800af4c:	3001      	adds	r0, #1
 800af4e:	f43f aeae 	beq.w	800acae <_printf_float+0xb6>
 800af52:	f108 0801 	add.w	r8, r8, #1
 800af56:	e7ec      	b.n	800af32 <_printf_float+0x33a>
 800af58:	4642      	mov	r2, r8
 800af5a:	4631      	mov	r1, r6
 800af5c:	4628      	mov	r0, r5
 800af5e:	47b8      	blx	r7
 800af60:	3001      	adds	r0, #1
 800af62:	d1c2      	bne.n	800aeea <_printf_float+0x2f2>
 800af64:	e6a3      	b.n	800acae <_printf_float+0xb6>
 800af66:	2301      	movs	r3, #1
 800af68:	4631      	mov	r1, r6
 800af6a:	4628      	mov	r0, r5
 800af6c:	9206      	str	r2, [sp, #24]
 800af6e:	47b8      	blx	r7
 800af70:	3001      	adds	r0, #1
 800af72:	f43f ae9c 	beq.w	800acae <_printf_float+0xb6>
 800af76:	9a06      	ldr	r2, [sp, #24]
 800af78:	f10b 0b01 	add.w	fp, fp, #1
 800af7c:	e7bb      	b.n	800aef6 <_printf_float+0x2fe>
 800af7e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800af82:	4631      	mov	r1, r6
 800af84:	4628      	mov	r0, r5
 800af86:	47b8      	blx	r7
 800af88:	3001      	adds	r0, #1
 800af8a:	d1c0      	bne.n	800af0e <_printf_float+0x316>
 800af8c:	e68f      	b.n	800acae <_printf_float+0xb6>
 800af8e:	9a06      	ldr	r2, [sp, #24]
 800af90:	464b      	mov	r3, r9
 800af92:	4442      	add	r2, r8
 800af94:	4631      	mov	r1, r6
 800af96:	4628      	mov	r0, r5
 800af98:	47b8      	blx	r7
 800af9a:	3001      	adds	r0, #1
 800af9c:	d1c3      	bne.n	800af26 <_printf_float+0x32e>
 800af9e:	e686      	b.n	800acae <_printf_float+0xb6>
 800afa0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800afa4:	f1ba 0f01 	cmp.w	sl, #1
 800afa8:	dc01      	bgt.n	800afae <_printf_float+0x3b6>
 800afaa:	07db      	lsls	r3, r3, #31
 800afac:	d536      	bpl.n	800b01c <_printf_float+0x424>
 800afae:	2301      	movs	r3, #1
 800afb0:	4642      	mov	r2, r8
 800afb2:	4631      	mov	r1, r6
 800afb4:	4628      	mov	r0, r5
 800afb6:	47b8      	blx	r7
 800afb8:	3001      	adds	r0, #1
 800afba:	f43f ae78 	beq.w	800acae <_printf_float+0xb6>
 800afbe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800afc2:	4631      	mov	r1, r6
 800afc4:	4628      	mov	r0, r5
 800afc6:	47b8      	blx	r7
 800afc8:	3001      	adds	r0, #1
 800afca:	f43f ae70 	beq.w	800acae <_printf_float+0xb6>
 800afce:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800afd2:	2200      	movs	r2, #0
 800afd4:	2300      	movs	r3, #0
 800afd6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800afda:	f7f5 fd9d 	bl	8000b18 <__aeabi_dcmpeq>
 800afde:	b9c0      	cbnz	r0, 800b012 <_printf_float+0x41a>
 800afe0:	4653      	mov	r3, sl
 800afe2:	f108 0201 	add.w	r2, r8, #1
 800afe6:	4631      	mov	r1, r6
 800afe8:	4628      	mov	r0, r5
 800afea:	47b8      	blx	r7
 800afec:	3001      	adds	r0, #1
 800afee:	d10c      	bne.n	800b00a <_printf_float+0x412>
 800aff0:	e65d      	b.n	800acae <_printf_float+0xb6>
 800aff2:	2301      	movs	r3, #1
 800aff4:	465a      	mov	r2, fp
 800aff6:	4631      	mov	r1, r6
 800aff8:	4628      	mov	r0, r5
 800affa:	47b8      	blx	r7
 800affc:	3001      	adds	r0, #1
 800affe:	f43f ae56 	beq.w	800acae <_printf_float+0xb6>
 800b002:	f108 0801 	add.w	r8, r8, #1
 800b006:	45d0      	cmp	r8, sl
 800b008:	dbf3      	blt.n	800aff2 <_printf_float+0x3fa>
 800b00a:	464b      	mov	r3, r9
 800b00c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800b010:	e6df      	b.n	800add2 <_printf_float+0x1da>
 800b012:	f04f 0800 	mov.w	r8, #0
 800b016:	f104 0b1a 	add.w	fp, r4, #26
 800b01a:	e7f4      	b.n	800b006 <_printf_float+0x40e>
 800b01c:	2301      	movs	r3, #1
 800b01e:	4642      	mov	r2, r8
 800b020:	e7e1      	b.n	800afe6 <_printf_float+0x3ee>
 800b022:	2301      	movs	r3, #1
 800b024:	464a      	mov	r2, r9
 800b026:	4631      	mov	r1, r6
 800b028:	4628      	mov	r0, r5
 800b02a:	47b8      	blx	r7
 800b02c:	3001      	adds	r0, #1
 800b02e:	f43f ae3e 	beq.w	800acae <_printf_float+0xb6>
 800b032:	f108 0801 	add.w	r8, r8, #1
 800b036:	68e3      	ldr	r3, [r4, #12]
 800b038:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b03a:	1a5b      	subs	r3, r3, r1
 800b03c:	4543      	cmp	r3, r8
 800b03e:	dcf0      	bgt.n	800b022 <_printf_float+0x42a>
 800b040:	e6fc      	b.n	800ae3c <_printf_float+0x244>
 800b042:	f04f 0800 	mov.w	r8, #0
 800b046:	f104 0919 	add.w	r9, r4, #25
 800b04a:	e7f4      	b.n	800b036 <_printf_float+0x43e>

0800b04c <_printf_common>:
 800b04c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b050:	4616      	mov	r6, r2
 800b052:	4698      	mov	r8, r3
 800b054:	688a      	ldr	r2, [r1, #8]
 800b056:	690b      	ldr	r3, [r1, #16]
 800b058:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b05c:	4293      	cmp	r3, r2
 800b05e:	bfb8      	it	lt
 800b060:	4613      	movlt	r3, r2
 800b062:	6033      	str	r3, [r6, #0]
 800b064:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b068:	4607      	mov	r7, r0
 800b06a:	460c      	mov	r4, r1
 800b06c:	b10a      	cbz	r2, 800b072 <_printf_common+0x26>
 800b06e:	3301      	adds	r3, #1
 800b070:	6033      	str	r3, [r6, #0]
 800b072:	6823      	ldr	r3, [r4, #0]
 800b074:	0699      	lsls	r1, r3, #26
 800b076:	bf42      	ittt	mi
 800b078:	6833      	ldrmi	r3, [r6, #0]
 800b07a:	3302      	addmi	r3, #2
 800b07c:	6033      	strmi	r3, [r6, #0]
 800b07e:	6825      	ldr	r5, [r4, #0]
 800b080:	f015 0506 	ands.w	r5, r5, #6
 800b084:	d106      	bne.n	800b094 <_printf_common+0x48>
 800b086:	f104 0a19 	add.w	sl, r4, #25
 800b08a:	68e3      	ldr	r3, [r4, #12]
 800b08c:	6832      	ldr	r2, [r6, #0]
 800b08e:	1a9b      	subs	r3, r3, r2
 800b090:	42ab      	cmp	r3, r5
 800b092:	dc26      	bgt.n	800b0e2 <_printf_common+0x96>
 800b094:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b098:	6822      	ldr	r2, [r4, #0]
 800b09a:	3b00      	subs	r3, #0
 800b09c:	bf18      	it	ne
 800b09e:	2301      	movne	r3, #1
 800b0a0:	0692      	lsls	r2, r2, #26
 800b0a2:	d42b      	bmi.n	800b0fc <_printf_common+0xb0>
 800b0a4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b0a8:	4641      	mov	r1, r8
 800b0aa:	4638      	mov	r0, r7
 800b0ac:	47c8      	blx	r9
 800b0ae:	3001      	adds	r0, #1
 800b0b0:	d01e      	beq.n	800b0f0 <_printf_common+0xa4>
 800b0b2:	6823      	ldr	r3, [r4, #0]
 800b0b4:	6922      	ldr	r2, [r4, #16]
 800b0b6:	f003 0306 	and.w	r3, r3, #6
 800b0ba:	2b04      	cmp	r3, #4
 800b0bc:	bf02      	ittt	eq
 800b0be:	68e5      	ldreq	r5, [r4, #12]
 800b0c0:	6833      	ldreq	r3, [r6, #0]
 800b0c2:	1aed      	subeq	r5, r5, r3
 800b0c4:	68a3      	ldr	r3, [r4, #8]
 800b0c6:	bf0c      	ite	eq
 800b0c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b0cc:	2500      	movne	r5, #0
 800b0ce:	4293      	cmp	r3, r2
 800b0d0:	bfc4      	itt	gt
 800b0d2:	1a9b      	subgt	r3, r3, r2
 800b0d4:	18ed      	addgt	r5, r5, r3
 800b0d6:	2600      	movs	r6, #0
 800b0d8:	341a      	adds	r4, #26
 800b0da:	42b5      	cmp	r5, r6
 800b0dc:	d11a      	bne.n	800b114 <_printf_common+0xc8>
 800b0de:	2000      	movs	r0, #0
 800b0e0:	e008      	b.n	800b0f4 <_printf_common+0xa8>
 800b0e2:	2301      	movs	r3, #1
 800b0e4:	4652      	mov	r2, sl
 800b0e6:	4641      	mov	r1, r8
 800b0e8:	4638      	mov	r0, r7
 800b0ea:	47c8      	blx	r9
 800b0ec:	3001      	adds	r0, #1
 800b0ee:	d103      	bne.n	800b0f8 <_printf_common+0xac>
 800b0f0:	f04f 30ff 	mov.w	r0, #4294967295
 800b0f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b0f8:	3501      	adds	r5, #1
 800b0fa:	e7c6      	b.n	800b08a <_printf_common+0x3e>
 800b0fc:	18e1      	adds	r1, r4, r3
 800b0fe:	1c5a      	adds	r2, r3, #1
 800b100:	2030      	movs	r0, #48	@ 0x30
 800b102:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b106:	4422      	add	r2, r4
 800b108:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b10c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b110:	3302      	adds	r3, #2
 800b112:	e7c7      	b.n	800b0a4 <_printf_common+0x58>
 800b114:	2301      	movs	r3, #1
 800b116:	4622      	mov	r2, r4
 800b118:	4641      	mov	r1, r8
 800b11a:	4638      	mov	r0, r7
 800b11c:	47c8      	blx	r9
 800b11e:	3001      	adds	r0, #1
 800b120:	d0e6      	beq.n	800b0f0 <_printf_common+0xa4>
 800b122:	3601      	adds	r6, #1
 800b124:	e7d9      	b.n	800b0da <_printf_common+0x8e>
	...

0800b128 <_printf_i>:
 800b128:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b12c:	7e0f      	ldrb	r7, [r1, #24]
 800b12e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b130:	2f78      	cmp	r7, #120	@ 0x78
 800b132:	4691      	mov	r9, r2
 800b134:	4680      	mov	r8, r0
 800b136:	460c      	mov	r4, r1
 800b138:	469a      	mov	sl, r3
 800b13a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b13e:	d807      	bhi.n	800b150 <_printf_i+0x28>
 800b140:	2f62      	cmp	r7, #98	@ 0x62
 800b142:	d80a      	bhi.n	800b15a <_printf_i+0x32>
 800b144:	2f00      	cmp	r7, #0
 800b146:	f000 80d1 	beq.w	800b2ec <_printf_i+0x1c4>
 800b14a:	2f58      	cmp	r7, #88	@ 0x58
 800b14c:	f000 80b8 	beq.w	800b2c0 <_printf_i+0x198>
 800b150:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b154:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b158:	e03a      	b.n	800b1d0 <_printf_i+0xa8>
 800b15a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b15e:	2b15      	cmp	r3, #21
 800b160:	d8f6      	bhi.n	800b150 <_printf_i+0x28>
 800b162:	a101      	add	r1, pc, #4	@ (adr r1, 800b168 <_printf_i+0x40>)
 800b164:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b168:	0800b1c1 	.word	0x0800b1c1
 800b16c:	0800b1d5 	.word	0x0800b1d5
 800b170:	0800b151 	.word	0x0800b151
 800b174:	0800b151 	.word	0x0800b151
 800b178:	0800b151 	.word	0x0800b151
 800b17c:	0800b151 	.word	0x0800b151
 800b180:	0800b1d5 	.word	0x0800b1d5
 800b184:	0800b151 	.word	0x0800b151
 800b188:	0800b151 	.word	0x0800b151
 800b18c:	0800b151 	.word	0x0800b151
 800b190:	0800b151 	.word	0x0800b151
 800b194:	0800b2d3 	.word	0x0800b2d3
 800b198:	0800b1ff 	.word	0x0800b1ff
 800b19c:	0800b28d 	.word	0x0800b28d
 800b1a0:	0800b151 	.word	0x0800b151
 800b1a4:	0800b151 	.word	0x0800b151
 800b1a8:	0800b2f5 	.word	0x0800b2f5
 800b1ac:	0800b151 	.word	0x0800b151
 800b1b0:	0800b1ff 	.word	0x0800b1ff
 800b1b4:	0800b151 	.word	0x0800b151
 800b1b8:	0800b151 	.word	0x0800b151
 800b1bc:	0800b295 	.word	0x0800b295
 800b1c0:	6833      	ldr	r3, [r6, #0]
 800b1c2:	1d1a      	adds	r2, r3, #4
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	6032      	str	r2, [r6, #0]
 800b1c8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b1cc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b1d0:	2301      	movs	r3, #1
 800b1d2:	e09c      	b.n	800b30e <_printf_i+0x1e6>
 800b1d4:	6833      	ldr	r3, [r6, #0]
 800b1d6:	6820      	ldr	r0, [r4, #0]
 800b1d8:	1d19      	adds	r1, r3, #4
 800b1da:	6031      	str	r1, [r6, #0]
 800b1dc:	0606      	lsls	r6, r0, #24
 800b1de:	d501      	bpl.n	800b1e4 <_printf_i+0xbc>
 800b1e0:	681d      	ldr	r5, [r3, #0]
 800b1e2:	e003      	b.n	800b1ec <_printf_i+0xc4>
 800b1e4:	0645      	lsls	r5, r0, #25
 800b1e6:	d5fb      	bpl.n	800b1e0 <_printf_i+0xb8>
 800b1e8:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b1ec:	2d00      	cmp	r5, #0
 800b1ee:	da03      	bge.n	800b1f8 <_printf_i+0xd0>
 800b1f0:	232d      	movs	r3, #45	@ 0x2d
 800b1f2:	426d      	negs	r5, r5
 800b1f4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b1f8:	4858      	ldr	r0, [pc, #352]	@ (800b35c <_printf_i+0x234>)
 800b1fa:	230a      	movs	r3, #10
 800b1fc:	e011      	b.n	800b222 <_printf_i+0xfa>
 800b1fe:	6821      	ldr	r1, [r4, #0]
 800b200:	6833      	ldr	r3, [r6, #0]
 800b202:	0608      	lsls	r0, r1, #24
 800b204:	f853 5b04 	ldr.w	r5, [r3], #4
 800b208:	d402      	bmi.n	800b210 <_printf_i+0xe8>
 800b20a:	0649      	lsls	r1, r1, #25
 800b20c:	bf48      	it	mi
 800b20e:	b2ad      	uxthmi	r5, r5
 800b210:	2f6f      	cmp	r7, #111	@ 0x6f
 800b212:	4852      	ldr	r0, [pc, #328]	@ (800b35c <_printf_i+0x234>)
 800b214:	6033      	str	r3, [r6, #0]
 800b216:	bf14      	ite	ne
 800b218:	230a      	movne	r3, #10
 800b21a:	2308      	moveq	r3, #8
 800b21c:	2100      	movs	r1, #0
 800b21e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b222:	6866      	ldr	r6, [r4, #4]
 800b224:	60a6      	str	r6, [r4, #8]
 800b226:	2e00      	cmp	r6, #0
 800b228:	db05      	blt.n	800b236 <_printf_i+0x10e>
 800b22a:	6821      	ldr	r1, [r4, #0]
 800b22c:	432e      	orrs	r6, r5
 800b22e:	f021 0104 	bic.w	r1, r1, #4
 800b232:	6021      	str	r1, [r4, #0]
 800b234:	d04b      	beq.n	800b2ce <_printf_i+0x1a6>
 800b236:	4616      	mov	r6, r2
 800b238:	fbb5 f1f3 	udiv	r1, r5, r3
 800b23c:	fb03 5711 	mls	r7, r3, r1, r5
 800b240:	5dc7      	ldrb	r7, [r0, r7]
 800b242:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b246:	462f      	mov	r7, r5
 800b248:	42bb      	cmp	r3, r7
 800b24a:	460d      	mov	r5, r1
 800b24c:	d9f4      	bls.n	800b238 <_printf_i+0x110>
 800b24e:	2b08      	cmp	r3, #8
 800b250:	d10b      	bne.n	800b26a <_printf_i+0x142>
 800b252:	6823      	ldr	r3, [r4, #0]
 800b254:	07df      	lsls	r7, r3, #31
 800b256:	d508      	bpl.n	800b26a <_printf_i+0x142>
 800b258:	6923      	ldr	r3, [r4, #16]
 800b25a:	6861      	ldr	r1, [r4, #4]
 800b25c:	4299      	cmp	r1, r3
 800b25e:	bfde      	ittt	le
 800b260:	2330      	movle	r3, #48	@ 0x30
 800b262:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b266:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b26a:	1b92      	subs	r2, r2, r6
 800b26c:	6122      	str	r2, [r4, #16]
 800b26e:	f8cd a000 	str.w	sl, [sp]
 800b272:	464b      	mov	r3, r9
 800b274:	aa03      	add	r2, sp, #12
 800b276:	4621      	mov	r1, r4
 800b278:	4640      	mov	r0, r8
 800b27a:	f7ff fee7 	bl	800b04c <_printf_common>
 800b27e:	3001      	adds	r0, #1
 800b280:	d14a      	bne.n	800b318 <_printf_i+0x1f0>
 800b282:	f04f 30ff 	mov.w	r0, #4294967295
 800b286:	b004      	add	sp, #16
 800b288:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b28c:	6823      	ldr	r3, [r4, #0]
 800b28e:	f043 0320 	orr.w	r3, r3, #32
 800b292:	6023      	str	r3, [r4, #0]
 800b294:	4832      	ldr	r0, [pc, #200]	@ (800b360 <_printf_i+0x238>)
 800b296:	2778      	movs	r7, #120	@ 0x78
 800b298:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b29c:	6823      	ldr	r3, [r4, #0]
 800b29e:	6831      	ldr	r1, [r6, #0]
 800b2a0:	061f      	lsls	r7, r3, #24
 800b2a2:	f851 5b04 	ldr.w	r5, [r1], #4
 800b2a6:	d402      	bmi.n	800b2ae <_printf_i+0x186>
 800b2a8:	065f      	lsls	r7, r3, #25
 800b2aa:	bf48      	it	mi
 800b2ac:	b2ad      	uxthmi	r5, r5
 800b2ae:	6031      	str	r1, [r6, #0]
 800b2b0:	07d9      	lsls	r1, r3, #31
 800b2b2:	bf44      	itt	mi
 800b2b4:	f043 0320 	orrmi.w	r3, r3, #32
 800b2b8:	6023      	strmi	r3, [r4, #0]
 800b2ba:	b11d      	cbz	r5, 800b2c4 <_printf_i+0x19c>
 800b2bc:	2310      	movs	r3, #16
 800b2be:	e7ad      	b.n	800b21c <_printf_i+0xf4>
 800b2c0:	4826      	ldr	r0, [pc, #152]	@ (800b35c <_printf_i+0x234>)
 800b2c2:	e7e9      	b.n	800b298 <_printf_i+0x170>
 800b2c4:	6823      	ldr	r3, [r4, #0]
 800b2c6:	f023 0320 	bic.w	r3, r3, #32
 800b2ca:	6023      	str	r3, [r4, #0]
 800b2cc:	e7f6      	b.n	800b2bc <_printf_i+0x194>
 800b2ce:	4616      	mov	r6, r2
 800b2d0:	e7bd      	b.n	800b24e <_printf_i+0x126>
 800b2d2:	6833      	ldr	r3, [r6, #0]
 800b2d4:	6825      	ldr	r5, [r4, #0]
 800b2d6:	6961      	ldr	r1, [r4, #20]
 800b2d8:	1d18      	adds	r0, r3, #4
 800b2da:	6030      	str	r0, [r6, #0]
 800b2dc:	062e      	lsls	r6, r5, #24
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	d501      	bpl.n	800b2e6 <_printf_i+0x1be>
 800b2e2:	6019      	str	r1, [r3, #0]
 800b2e4:	e002      	b.n	800b2ec <_printf_i+0x1c4>
 800b2e6:	0668      	lsls	r0, r5, #25
 800b2e8:	d5fb      	bpl.n	800b2e2 <_printf_i+0x1ba>
 800b2ea:	8019      	strh	r1, [r3, #0]
 800b2ec:	2300      	movs	r3, #0
 800b2ee:	6123      	str	r3, [r4, #16]
 800b2f0:	4616      	mov	r6, r2
 800b2f2:	e7bc      	b.n	800b26e <_printf_i+0x146>
 800b2f4:	6833      	ldr	r3, [r6, #0]
 800b2f6:	1d1a      	adds	r2, r3, #4
 800b2f8:	6032      	str	r2, [r6, #0]
 800b2fa:	681e      	ldr	r6, [r3, #0]
 800b2fc:	6862      	ldr	r2, [r4, #4]
 800b2fe:	2100      	movs	r1, #0
 800b300:	4630      	mov	r0, r6
 800b302:	f7f4 ff8d 	bl	8000220 <memchr>
 800b306:	b108      	cbz	r0, 800b30c <_printf_i+0x1e4>
 800b308:	1b80      	subs	r0, r0, r6
 800b30a:	6060      	str	r0, [r4, #4]
 800b30c:	6863      	ldr	r3, [r4, #4]
 800b30e:	6123      	str	r3, [r4, #16]
 800b310:	2300      	movs	r3, #0
 800b312:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b316:	e7aa      	b.n	800b26e <_printf_i+0x146>
 800b318:	6923      	ldr	r3, [r4, #16]
 800b31a:	4632      	mov	r2, r6
 800b31c:	4649      	mov	r1, r9
 800b31e:	4640      	mov	r0, r8
 800b320:	47d0      	blx	sl
 800b322:	3001      	adds	r0, #1
 800b324:	d0ad      	beq.n	800b282 <_printf_i+0x15a>
 800b326:	6823      	ldr	r3, [r4, #0]
 800b328:	079b      	lsls	r3, r3, #30
 800b32a:	d413      	bmi.n	800b354 <_printf_i+0x22c>
 800b32c:	68e0      	ldr	r0, [r4, #12]
 800b32e:	9b03      	ldr	r3, [sp, #12]
 800b330:	4298      	cmp	r0, r3
 800b332:	bfb8      	it	lt
 800b334:	4618      	movlt	r0, r3
 800b336:	e7a6      	b.n	800b286 <_printf_i+0x15e>
 800b338:	2301      	movs	r3, #1
 800b33a:	4632      	mov	r2, r6
 800b33c:	4649      	mov	r1, r9
 800b33e:	4640      	mov	r0, r8
 800b340:	47d0      	blx	sl
 800b342:	3001      	adds	r0, #1
 800b344:	d09d      	beq.n	800b282 <_printf_i+0x15a>
 800b346:	3501      	adds	r5, #1
 800b348:	68e3      	ldr	r3, [r4, #12]
 800b34a:	9903      	ldr	r1, [sp, #12]
 800b34c:	1a5b      	subs	r3, r3, r1
 800b34e:	42ab      	cmp	r3, r5
 800b350:	dcf2      	bgt.n	800b338 <_printf_i+0x210>
 800b352:	e7eb      	b.n	800b32c <_printf_i+0x204>
 800b354:	2500      	movs	r5, #0
 800b356:	f104 0619 	add.w	r6, r4, #25
 800b35a:	e7f5      	b.n	800b348 <_printf_i+0x220>
 800b35c:	0800d606 	.word	0x0800d606
 800b360:	0800d617 	.word	0x0800d617

0800b364 <std>:
 800b364:	2300      	movs	r3, #0
 800b366:	b510      	push	{r4, lr}
 800b368:	4604      	mov	r4, r0
 800b36a:	e9c0 3300 	strd	r3, r3, [r0]
 800b36e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b372:	6083      	str	r3, [r0, #8]
 800b374:	8181      	strh	r1, [r0, #12]
 800b376:	6643      	str	r3, [r0, #100]	@ 0x64
 800b378:	81c2      	strh	r2, [r0, #14]
 800b37a:	6183      	str	r3, [r0, #24]
 800b37c:	4619      	mov	r1, r3
 800b37e:	2208      	movs	r2, #8
 800b380:	305c      	adds	r0, #92	@ 0x5c
 800b382:	f000 f9f9 	bl	800b778 <memset>
 800b386:	4b0d      	ldr	r3, [pc, #52]	@ (800b3bc <std+0x58>)
 800b388:	6263      	str	r3, [r4, #36]	@ 0x24
 800b38a:	4b0d      	ldr	r3, [pc, #52]	@ (800b3c0 <std+0x5c>)
 800b38c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b38e:	4b0d      	ldr	r3, [pc, #52]	@ (800b3c4 <std+0x60>)
 800b390:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b392:	4b0d      	ldr	r3, [pc, #52]	@ (800b3c8 <std+0x64>)
 800b394:	6323      	str	r3, [r4, #48]	@ 0x30
 800b396:	4b0d      	ldr	r3, [pc, #52]	@ (800b3cc <std+0x68>)
 800b398:	6224      	str	r4, [r4, #32]
 800b39a:	429c      	cmp	r4, r3
 800b39c:	d006      	beq.n	800b3ac <std+0x48>
 800b39e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b3a2:	4294      	cmp	r4, r2
 800b3a4:	d002      	beq.n	800b3ac <std+0x48>
 800b3a6:	33d0      	adds	r3, #208	@ 0xd0
 800b3a8:	429c      	cmp	r4, r3
 800b3aa:	d105      	bne.n	800b3b8 <std+0x54>
 800b3ac:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b3b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b3b4:	f000 ba5c 	b.w	800b870 <__retarget_lock_init_recursive>
 800b3b8:	bd10      	pop	{r4, pc}
 800b3ba:	bf00      	nop
 800b3bc:	0800b5c9 	.word	0x0800b5c9
 800b3c0:	0800b5eb 	.word	0x0800b5eb
 800b3c4:	0800b623 	.word	0x0800b623
 800b3c8:	0800b647 	.word	0x0800b647
 800b3cc:	20001288 	.word	0x20001288

0800b3d0 <stdio_exit_handler>:
 800b3d0:	4a02      	ldr	r2, [pc, #8]	@ (800b3dc <stdio_exit_handler+0xc>)
 800b3d2:	4903      	ldr	r1, [pc, #12]	@ (800b3e0 <stdio_exit_handler+0x10>)
 800b3d4:	4803      	ldr	r0, [pc, #12]	@ (800b3e4 <stdio_exit_handler+0x14>)
 800b3d6:	f000 b869 	b.w	800b4ac <_fwalk_sglue>
 800b3da:	bf00      	nop
 800b3dc:	200000dc 	.word	0x200000dc
 800b3e0:	0800d1a9 	.word	0x0800d1a9
 800b3e4:	200000ec 	.word	0x200000ec

0800b3e8 <cleanup_stdio>:
 800b3e8:	6841      	ldr	r1, [r0, #4]
 800b3ea:	4b0c      	ldr	r3, [pc, #48]	@ (800b41c <cleanup_stdio+0x34>)
 800b3ec:	4299      	cmp	r1, r3
 800b3ee:	b510      	push	{r4, lr}
 800b3f0:	4604      	mov	r4, r0
 800b3f2:	d001      	beq.n	800b3f8 <cleanup_stdio+0x10>
 800b3f4:	f001 fed8 	bl	800d1a8 <_fflush_r>
 800b3f8:	68a1      	ldr	r1, [r4, #8]
 800b3fa:	4b09      	ldr	r3, [pc, #36]	@ (800b420 <cleanup_stdio+0x38>)
 800b3fc:	4299      	cmp	r1, r3
 800b3fe:	d002      	beq.n	800b406 <cleanup_stdio+0x1e>
 800b400:	4620      	mov	r0, r4
 800b402:	f001 fed1 	bl	800d1a8 <_fflush_r>
 800b406:	68e1      	ldr	r1, [r4, #12]
 800b408:	4b06      	ldr	r3, [pc, #24]	@ (800b424 <cleanup_stdio+0x3c>)
 800b40a:	4299      	cmp	r1, r3
 800b40c:	d004      	beq.n	800b418 <cleanup_stdio+0x30>
 800b40e:	4620      	mov	r0, r4
 800b410:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b414:	f001 bec8 	b.w	800d1a8 <_fflush_r>
 800b418:	bd10      	pop	{r4, pc}
 800b41a:	bf00      	nop
 800b41c:	20001288 	.word	0x20001288
 800b420:	200012f0 	.word	0x200012f0
 800b424:	20001358 	.word	0x20001358

0800b428 <global_stdio_init.part.0>:
 800b428:	b510      	push	{r4, lr}
 800b42a:	4b0b      	ldr	r3, [pc, #44]	@ (800b458 <global_stdio_init.part.0+0x30>)
 800b42c:	4c0b      	ldr	r4, [pc, #44]	@ (800b45c <global_stdio_init.part.0+0x34>)
 800b42e:	4a0c      	ldr	r2, [pc, #48]	@ (800b460 <global_stdio_init.part.0+0x38>)
 800b430:	601a      	str	r2, [r3, #0]
 800b432:	4620      	mov	r0, r4
 800b434:	2200      	movs	r2, #0
 800b436:	2104      	movs	r1, #4
 800b438:	f7ff ff94 	bl	800b364 <std>
 800b43c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b440:	2201      	movs	r2, #1
 800b442:	2109      	movs	r1, #9
 800b444:	f7ff ff8e 	bl	800b364 <std>
 800b448:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b44c:	2202      	movs	r2, #2
 800b44e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b452:	2112      	movs	r1, #18
 800b454:	f7ff bf86 	b.w	800b364 <std>
 800b458:	200013c0 	.word	0x200013c0
 800b45c:	20001288 	.word	0x20001288
 800b460:	0800b3d1 	.word	0x0800b3d1

0800b464 <__sfp_lock_acquire>:
 800b464:	4801      	ldr	r0, [pc, #4]	@ (800b46c <__sfp_lock_acquire+0x8>)
 800b466:	f000 ba04 	b.w	800b872 <__retarget_lock_acquire_recursive>
 800b46a:	bf00      	nop
 800b46c:	200013c9 	.word	0x200013c9

0800b470 <__sfp_lock_release>:
 800b470:	4801      	ldr	r0, [pc, #4]	@ (800b478 <__sfp_lock_release+0x8>)
 800b472:	f000 b9ff 	b.w	800b874 <__retarget_lock_release_recursive>
 800b476:	bf00      	nop
 800b478:	200013c9 	.word	0x200013c9

0800b47c <__sinit>:
 800b47c:	b510      	push	{r4, lr}
 800b47e:	4604      	mov	r4, r0
 800b480:	f7ff fff0 	bl	800b464 <__sfp_lock_acquire>
 800b484:	6a23      	ldr	r3, [r4, #32]
 800b486:	b11b      	cbz	r3, 800b490 <__sinit+0x14>
 800b488:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b48c:	f7ff bff0 	b.w	800b470 <__sfp_lock_release>
 800b490:	4b04      	ldr	r3, [pc, #16]	@ (800b4a4 <__sinit+0x28>)
 800b492:	6223      	str	r3, [r4, #32]
 800b494:	4b04      	ldr	r3, [pc, #16]	@ (800b4a8 <__sinit+0x2c>)
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d1f5      	bne.n	800b488 <__sinit+0xc>
 800b49c:	f7ff ffc4 	bl	800b428 <global_stdio_init.part.0>
 800b4a0:	e7f2      	b.n	800b488 <__sinit+0xc>
 800b4a2:	bf00      	nop
 800b4a4:	0800b3e9 	.word	0x0800b3e9
 800b4a8:	200013c0 	.word	0x200013c0

0800b4ac <_fwalk_sglue>:
 800b4ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b4b0:	4607      	mov	r7, r0
 800b4b2:	4688      	mov	r8, r1
 800b4b4:	4614      	mov	r4, r2
 800b4b6:	2600      	movs	r6, #0
 800b4b8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b4bc:	f1b9 0901 	subs.w	r9, r9, #1
 800b4c0:	d505      	bpl.n	800b4ce <_fwalk_sglue+0x22>
 800b4c2:	6824      	ldr	r4, [r4, #0]
 800b4c4:	2c00      	cmp	r4, #0
 800b4c6:	d1f7      	bne.n	800b4b8 <_fwalk_sglue+0xc>
 800b4c8:	4630      	mov	r0, r6
 800b4ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b4ce:	89ab      	ldrh	r3, [r5, #12]
 800b4d0:	2b01      	cmp	r3, #1
 800b4d2:	d907      	bls.n	800b4e4 <_fwalk_sglue+0x38>
 800b4d4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b4d8:	3301      	adds	r3, #1
 800b4da:	d003      	beq.n	800b4e4 <_fwalk_sglue+0x38>
 800b4dc:	4629      	mov	r1, r5
 800b4de:	4638      	mov	r0, r7
 800b4e0:	47c0      	blx	r8
 800b4e2:	4306      	orrs	r6, r0
 800b4e4:	3568      	adds	r5, #104	@ 0x68
 800b4e6:	e7e9      	b.n	800b4bc <_fwalk_sglue+0x10>

0800b4e8 <iprintf>:
 800b4e8:	b40f      	push	{r0, r1, r2, r3}
 800b4ea:	b507      	push	{r0, r1, r2, lr}
 800b4ec:	4906      	ldr	r1, [pc, #24]	@ (800b508 <iprintf+0x20>)
 800b4ee:	ab04      	add	r3, sp, #16
 800b4f0:	6808      	ldr	r0, [r1, #0]
 800b4f2:	f853 2b04 	ldr.w	r2, [r3], #4
 800b4f6:	6881      	ldr	r1, [r0, #8]
 800b4f8:	9301      	str	r3, [sp, #4]
 800b4fa:	f001 fcb9 	bl	800ce70 <_vfiprintf_r>
 800b4fe:	b003      	add	sp, #12
 800b500:	f85d eb04 	ldr.w	lr, [sp], #4
 800b504:	b004      	add	sp, #16
 800b506:	4770      	bx	lr
 800b508:	200000e8 	.word	0x200000e8

0800b50c <_puts_r>:
 800b50c:	6a03      	ldr	r3, [r0, #32]
 800b50e:	b570      	push	{r4, r5, r6, lr}
 800b510:	6884      	ldr	r4, [r0, #8]
 800b512:	4605      	mov	r5, r0
 800b514:	460e      	mov	r6, r1
 800b516:	b90b      	cbnz	r3, 800b51c <_puts_r+0x10>
 800b518:	f7ff ffb0 	bl	800b47c <__sinit>
 800b51c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b51e:	07db      	lsls	r3, r3, #31
 800b520:	d405      	bmi.n	800b52e <_puts_r+0x22>
 800b522:	89a3      	ldrh	r3, [r4, #12]
 800b524:	0598      	lsls	r0, r3, #22
 800b526:	d402      	bmi.n	800b52e <_puts_r+0x22>
 800b528:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b52a:	f000 f9a2 	bl	800b872 <__retarget_lock_acquire_recursive>
 800b52e:	89a3      	ldrh	r3, [r4, #12]
 800b530:	0719      	lsls	r1, r3, #28
 800b532:	d502      	bpl.n	800b53a <_puts_r+0x2e>
 800b534:	6923      	ldr	r3, [r4, #16]
 800b536:	2b00      	cmp	r3, #0
 800b538:	d135      	bne.n	800b5a6 <_puts_r+0x9a>
 800b53a:	4621      	mov	r1, r4
 800b53c:	4628      	mov	r0, r5
 800b53e:	f000 f8c5 	bl	800b6cc <__swsetup_r>
 800b542:	b380      	cbz	r0, 800b5a6 <_puts_r+0x9a>
 800b544:	f04f 35ff 	mov.w	r5, #4294967295
 800b548:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b54a:	07da      	lsls	r2, r3, #31
 800b54c:	d405      	bmi.n	800b55a <_puts_r+0x4e>
 800b54e:	89a3      	ldrh	r3, [r4, #12]
 800b550:	059b      	lsls	r3, r3, #22
 800b552:	d402      	bmi.n	800b55a <_puts_r+0x4e>
 800b554:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b556:	f000 f98d 	bl	800b874 <__retarget_lock_release_recursive>
 800b55a:	4628      	mov	r0, r5
 800b55c:	bd70      	pop	{r4, r5, r6, pc}
 800b55e:	2b00      	cmp	r3, #0
 800b560:	da04      	bge.n	800b56c <_puts_r+0x60>
 800b562:	69a2      	ldr	r2, [r4, #24]
 800b564:	429a      	cmp	r2, r3
 800b566:	dc17      	bgt.n	800b598 <_puts_r+0x8c>
 800b568:	290a      	cmp	r1, #10
 800b56a:	d015      	beq.n	800b598 <_puts_r+0x8c>
 800b56c:	6823      	ldr	r3, [r4, #0]
 800b56e:	1c5a      	adds	r2, r3, #1
 800b570:	6022      	str	r2, [r4, #0]
 800b572:	7019      	strb	r1, [r3, #0]
 800b574:	68a3      	ldr	r3, [r4, #8]
 800b576:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b57a:	3b01      	subs	r3, #1
 800b57c:	60a3      	str	r3, [r4, #8]
 800b57e:	2900      	cmp	r1, #0
 800b580:	d1ed      	bne.n	800b55e <_puts_r+0x52>
 800b582:	2b00      	cmp	r3, #0
 800b584:	da11      	bge.n	800b5aa <_puts_r+0x9e>
 800b586:	4622      	mov	r2, r4
 800b588:	210a      	movs	r1, #10
 800b58a:	4628      	mov	r0, r5
 800b58c:	f000 f85f 	bl	800b64e <__swbuf_r>
 800b590:	3001      	adds	r0, #1
 800b592:	d0d7      	beq.n	800b544 <_puts_r+0x38>
 800b594:	250a      	movs	r5, #10
 800b596:	e7d7      	b.n	800b548 <_puts_r+0x3c>
 800b598:	4622      	mov	r2, r4
 800b59a:	4628      	mov	r0, r5
 800b59c:	f000 f857 	bl	800b64e <__swbuf_r>
 800b5a0:	3001      	adds	r0, #1
 800b5a2:	d1e7      	bne.n	800b574 <_puts_r+0x68>
 800b5a4:	e7ce      	b.n	800b544 <_puts_r+0x38>
 800b5a6:	3e01      	subs	r6, #1
 800b5a8:	e7e4      	b.n	800b574 <_puts_r+0x68>
 800b5aa:	6823      	ldr	r3, [r4, #0]
 800b5ac:	1c5a      	adds	r2, r3, #1
 800b5ae:	6022      	str	r2, [r4, #0]
 800b5b0:	220a      	movs	r2, #10
 800b5b2:	701a      	strb	r2, [r3, #0]
 800b5b4:	e7ee      	b.n	800b594 <_puts_r+0x88>
	...

0800b5b8 <puts>:
 800b5b8:	4b02      	ldr	r3, [pc, #8]	@ (800b5c4 <puts+0xc>)
 800b5ba:	4601      	mov	r1, r0
 800b5bc:	6818      	ldr	r0, [r3, #0]
 800b5be:	f7ff bfa5 	b.w	800b50c <_puts_r>
 800b5c2:	bf00      	nop
 800b5c4:	200000e8 	.word	0x200000e8

0800b5c8 <__sread>:
 800b5c8:	b510      	push	{r4, lr}
 800b5ca:	460c      	mov	r4, r1
 800b5cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b5d0:	f000 f900 	bl	800b7d4 <_read_r>
 800b5d4:	2800      	cmp	r0, #0
 800b5d6:	bfab      	itete	ge
 800b5d8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b5da:	89a3      	ldrhlt	r3, [r4, #12]
 800b5dc:	181b      	addge	r3, r3, r0
 800b5de:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b5e2:	bfac      	ite	ge
 800b5e4:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b5e6:	81a3      	strhlt	r3, [r4, #12]
 800b5e8:	bd10      	pop	{r4, pc}

0800b5ea <__swrite>:
 800b5ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b5ee:	461f      	mov	r7, r3
 800b5f0:	898b      	ldrh	r3, [r1, #12]
 800b5f2:	05db      	lsls	r3, r3, #23
 800b5f4:	4605      	mov	r5, r0
 800b5f6:	460c      	mov	r4, r1
 800b5f8:	4616      	mov	r6, r2
 800b5fa:	d505      	bpl.n	800b608 <__swrite+0x1e>
 800b5fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b600:	2302      	movs	r3, #2
 800b602:	2200      	movs	r2, #0
 800b604:	f000 f8d4 	bl	800b7b0 <_lseek_r>
 800b608:	89a3      	ldrh	r3, [r4, #12]
 800b60a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b60e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b612:	81a3      	strh	r3, [r4, #12]
 800b614:	4632      	mov	r2, r6
 800b616:	463b      	mov	r3, r7
 800b618:	4628      	mov	r0, r5
 800b61a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b61e:	f000 b8eb 	b.w	800b7f8 <_write_r>

0800b622 <__sseek>:
 800b622:	b510      	push	{r4, lr}
 800b624:	460c      	mov	r4, r1
 800b626:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b62a:	f000 f8c1 	bl	800b7b0 <_lseek_r>
 800b62e:	1c43      	adds	r3, r0, #1
 800b630:	89a3      	ldrh	r3, [r4, #12]
 800b632:	bf15      	itete	ne
 800b634:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b636:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b63a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b63e:	81a3      	strheq	r3, [r4, #12]
 800b640:	bf18      	it	ne
 800b642:	81a3      	strhne	r3, [r4, #12]
 800b644:	bd10      	pop	{r4, pc}

0800b646 <__sclose>:
 800b646:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b64a:	f000 b8a1 	b.w	800b790 <_close_r>

0800b64e <__swbuf_r>:
 800b64e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b650:	460e      	mov	r6, r1
 800b652:	4614      	mov	r4, r2
 800b654:	4605      	mov	r5, r0
 800b656:	b118      	cbz	r0, 800b660 <__swbuf_r+0x12>
 800b658:	6a03      	ldr	r3, [r0, #32]
 800b65a:	b90b      	cbnz	r3, 800b660 <__swbuf_r+0x12>
 800b65c:	f7ff ff0e 	bl	800b47c <__sinit>
 800b660:	69a3      	ldr	r3, [r4, #24]
 800b662:	60a3      	str	r3, [r4, #8]
 800b664:	89a3      	ldrh	r3, [r4, #12]
 800b666:	071a      	lsls	r2, r3, #28
 800b668:	d501      	bpl.n	800b66e <__swbuf_r+0x20>
 800b66a:	6923      	ldr	r3, [r4, #16]
 800b66c:	b943      	cbnz	r3, 800b680 <__swbuf_r+0x32>
 800b66e:	4621      	mov	r1, r4
 800b670:	4628      	mov	r0, r5
 800b672:	f000 f82b 	bl	800b6cc <__swsetup_r>
 800b676:	b118      	cbz	r0, 800b680 <__swbuf_r+0x32>
 800b678:	f04f 37ff 	mov.w	r7, #4294967295
 800b67c:	4638      	mov	r0, r7
 800b67e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b680:	6823      	ldr	r3, [r4, #0]
 800b682:	6922      	ldr	r2, [r4, #16]
 800b684:	1a98      	subs	r0, r3, r2
 800b686:	6963      	ldr	r3, [r4, #20]
 800b688:	b2f6      	uxtb	r6, r6
 800b68a:	4283      	cmp	r3, r0
 800b68c:	4637      	mov	r7, r6
 800b68e:	dc05      	bgt.n	800b69c <__swbuf_r+0x4e>
 800b690:	4621      	mov	r1, r4
 800b692:	4628      	mov	r0, r5
 800b694:	f001 fd88 	bl	800d1a8 <_fflush_r>
 800b698:	2800      	cmp	r0, #0
 800b69a:	d1ed      	bne.n	800b678 <__swbuf_r+0x2a>
 800b69c:	68a3      	ldr	r3, [r4, #8]
 800b69e:	3b01      	subs	r3, #1
 800b6a0:	60a3      	str	r3, [r4, #8]
 800b6a2:	6823      	ldr	r3, [r4, #0]
 800b6a4:	1c5a      	adds	r2, r3, #1
 800b6a6:	6022      	str	r2, [r4, #0]
 800b6a8:	701e      	strb	r6, [r3, #0]
 800b6aa:	6962      	ldr	r2, [r4, #20]
 800b6ac:	1c43      	adds	r3, r0, #1
 800b6ae:	429a      	cmp	r2, r3
 800b6b0:	d004      	beq.n	800b6bc <__swbuf_r+0x6e>
 800b6b2:	89a3      	ldrh	r3, [r4, #12]
 800b6b4:	07db      	lsls	r3, r3, #31
 800b6b6:	d5e1      	bpl.n	800b67c <__swbuf_r+0x2e>
 800b6b8:	2e0a      	cmp	r6, #10
 800b6ba:	d1df      	bne.n	800b67c <__swbuf_r+0x2e>
 800b6bc:	4621      	mov	r1, r4
 800b6be:	4628      	mov	r0, r5
 800b6c0:	f001 fd72 	bl	800d1a8 <_fflush_r>
 800b6c4:	2800      	cmp	r0, #0
 800b6c6:	d0d9      	beq.n	800b67c <__swbuf_r+0x2e>
 800b6c8:	e7d6      	b.n	800b678 <__swbuf_r+0x2a>
	...

0800b6cc <__swsetup_r>:
 800b6cc:	b538      	push	{r3, r4, r5, lr}
 800b6ce:	4b29      	ldr	r3, [pc, #164]	@ (800b774 <__swsetup_r+0xa8>)
 800b6d0:	4605      	mov	r5, r0
 800b6d2:	6818      	ldr	r0, [r3, #0]
 800b6d4:	460c      	mov	r4, r1
 800b6d6:	b118      	cbz	r0, 800b6e0 <__swsetup_r+0x14>
 800b6d8:	6a03      	ldr	r3, [r0, #32]
 800b6da:	b90b      	cbnz	r3, 800b6e0 <__swsetup_r+0x14>
 800b6dc:	f7ff fece 	bl	800b47c <__sinit>
 800b6e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b6e4:	0719      	lsls	r1, r3, #28
 800b6e6:	d422      	bmi.n	800b72e <__swsetup_r+0x62>
 800b6e8:	06da      	lsls	r2, r3, #27
 800b6ea:	d407      	bmi.n	800b6fc <__swsetup_r+0x30>
 800b6ec:	2209      	movs	r2, #9
 800b6ee:	602a      	str	r2, [r5, #0]
 800b6f0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b6f4:	81a3      	strh	r3, [r4, #12]
 800b6f6:	f04f 30ff 	mov.w	r0, #4294967295
 800b6fa:	e033      	b.n	800b764 <__swsetup_r+0x98>
 800b6fc:	0758      	lsls	r0, r3, #29
 800b6fe:	d512      	bpl.n	800b726 <__swsetup_r+0x5a>
 800b700:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b702:	b141      	cbz	r1, 800b716 <__swsetup_r+0x4a>
 800b704:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b708:	4299      	cmp	r1, r3
 800b70a:	d002      	beq.n	800b712 <__swsetup_r+0x46>
 800b70c:	4628      	mov	r0, r5
 800b70e:	f000 ff0b 	bl	800c528 <_free_r>
 800b712:	2300      	movs	r3, #0
 800b714:	6363      	str	r3, [r4, #52]	@ 0x34
 800b716:	89a3      	ldrh	r3, [r4, #12]
 800b718:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b71c:	81a3      	strh	r3, [r4, #12]
 800b71e:	2300      	movs	r3, #0
 800b720:	6063      	str	r3, [r4, #4]
 800b722:	6923      	ldr	r3, [r4, #16]
 800b724:	6023      	str	r3, [r4, #0]
 800b726:	89a3      	ldrh	r3, [r4, #12]
 800b728:	f043 0308 	orr.w	r3, r3, #8
 800b72c:	81a3      	strh	r3, [r4, #12]
 800b72e:	6923      	ldr	r3, [r4, #16]
 800b730:	b94b      	cbnz	r3, 800b746 <__swsetup_r+0x7a>
 800b732:	89a3      	ldrh	r3, [r4, #12]
 800b734:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b738:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b73c:	d003      	beq.n	800b746 <__swsetup_r+0x7a>
 800b73e:	4621      	mov	r1, r4
 800b740:	4628      	mov	r0, r5
 800b742:	f001 fd7f 	bl	800d244 <__smakebuf_r>
 800b746:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b74a:	f013 0201 	ands.w	r2, r3, #1
 800b74e:	d00a      	beq.n	800b766 <__swsetup_r+0x9a>
 800b750:	2200      	movs	r2, #0
 800b752:	60a2      	str	r2, [r4, #8]
 800b754:	6962      	ldr	r2, [r4, #20]
 800b756:	4252      	negs	r2, r2
 800b758:	61a2      	str	r2, [r4, #24]
 800b75a:	6922      	ldr	r2, [r4, #16]
 800b75c:	b942      	cbnz	r2, 800b770 <__swsetup_r+0xa4>
 800b75e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b762:	d1c5      	bne.n	800b6f0 <__swsetup_r+0x24>
 800b764:	bd38      	pop	{r3, r4, r5, pc}
 800b766:	0799      	lsls	r1, r3, #30
 800b768:	bf58      	it	pl
 800b76a:	6962      	ldrpl	r2, [r4, #20]
 800b76c:	60a2      	str	r2, [r4, #8]
 800b76e:	e7f4      	b.n	800b75a <__swsetup_r+0x8e>
 800b770:	2000      	movs	r0, #0
 800b772:	e7f7      	b.n	800b764 <__swsetup_r+0x98>
 800b774:	200000e8 	.word	0x200000e8

0800b778 <memset>:
 800b778:	4402      	add	r2, r0
 800b77a:	4603      	mov	r3, r0
 800b77c:	4293      	cmp	r3, r2
 800b77e:	d100      	bne.n	800b782 <memset+0xa>
 800b780:	4770      	bx	lr
 800b782:	f803 1b01 	strb.w	r1, [r3], #1
 800b786:	e7f9      	b.n	800b77c <memset+0x4>

0800b788 <_localeconv_r>:
 800b788:	4800      	ldr	r0, [pc, #0]	@ (800b78c <_localeconv_r+0x4>)
 800b78a:	4770      	bx	lr
 800b78c:	20000228 	.word	0x20000228

0800b790 <_close_r>:
 800b790:	b538      	push	{r3, r4, r5, lr}
 800b792:	4d06      	ldr	r5, [pc, #24]	@ (800b7ac <_close_r+0x1c>)
 800b794:	2300      	movs	r3, #0
 800b796:	4604      	mov	r4, r0
 800b798:	4608      	mov	r0, r1
 800b79a:	602b      	str	r3, [r5, #0]
 800b79c:	f7f6 fa80 	bl	8001ca0 <_close>
 800b7a0:	1c43      	adds	r3, r0, #1
 800b7a2:	d102      	bne.n	800b7aa <_close_r+0x1a>
 800b7a4:	682b      	ldr	r3, [r5, #0]
 800b7a6:	b103      	cbz	r3, 800b7aa <_close_r+0x1a>
 800b7a8:	6023      	str	r3, [r4, #0]
 800b7aa:	bd38      	pop	{r3, r4, r5, pc}
 800b7ac:	200013c4 	.word	0x200013c4

0800b7b0 <_lseek_r>:
 800b7b0:	b538      	push	{r3, r4, r5, lr}
 800b7b2:	4d07      	ldr	r5, [pc, #28]	@ (800b7d0 <_lseek_r+0x20>)
 800b7b4:	4604      	mov	r4, r0
 800b7b6:	4608      	mov	r0, r1
 800b7b8:	4611      	mov	r1, r2
 800b7ba:	2200      	movs	r2, #0
 800b7bc:	602a      	str	r2, [r5, #0]
 800b7be:	461a      	mov	r2, r3
 800b7c0:	f7f6 fa95 	bl	8001cee <_lseek>
 800b7c4:	1c43      	adds	r3, r0, #1
 800b7c6:	d102      	bne.n	800b7ce <_lseek_r+0x1e>
 800b7c8:	682b      	ldr	r3, [r5, #0]
 800b7ca:	b103      	cbz	r3, 800b7ce <_lseek_r+0x1e>
 800b7cc:	6023      	str	r3, [r4, #0]
 800b7ce:	bd38      	pop	{r3, r4, r5, pc}
 800b7d0:	200013c4 	.word	0x200013c4

0800b7d4 <_read_r>:
 800b7d4:	b538      	push	{r3, r4, r5, lr}
 800b7d6:	4d07      	ldr	r5, [pc, #28]	@ (800b7f4 <_read_r+0x20>)
 800b7d8:	4604      	mov	r4, r0
 800b7da:	4608      	mov	r0, r1
 800b7dc:	4611      	mov	r1, r2
 800b7de:	2200      	movs	r2, #0
 800b7e0:	602a      	str	r2, [r5, #0]
 800b7e2:	461a      	mov	r2, r3
 800b7e4:	f7f6 fa23 	bl	8001c2e <_read>
 800b7e8:	1c43      	adds	r3, r0, #1
 800b7ea:	d102      	bne.n	800b7f2 <_read_r+0x1e>
 800b7ec:	682b      	ldr	r3, [r5, #0]
 800b7ee:	b103      	cbz	r3, 800b7f2 <_read_r+0x1e>
 800b7f0:	6023      	str	r3, [r4, #0]
 800b7f2:	bd38      	pop	{r3, r4, r5, pc}
 800b7f4:	200013c4 	.word	0x200013c4

0800b7f8 <_write_r>:
 800b7f8:	b538      	push	{r3, r4, r5, lr}
 800b7fa:	4d07      	ldr	r5, [pc, #28]	@ (800b818 <_write_r+0x20>)
 800b7fc:	4604      	mov	r4, r0
 800b7fe:	4608      	mov	r0, r1
 800b800:	4611      	mov	r1, r2
 800b802:	2200      	movs	r2, #0
 800b804:	602a      	str	r2, [r5, #0]
 800b806:	461a      	mov	r2, r3
 800b808:	f7f6 fa2e 	bl	8001c68 <_write>
 800b80c:	1c43      	adds	r3, r0, #1
 800b80e:	d102      	bne.n	800b816 <_write_r+0x1e>
 800b810:	682b      	ldr	r3, [r5, #0]
 800b812:	b103      	cbz	r3, 800b816 <_write_r+0x1e>
 800b814:	6023      	str	r3, [r4, #0]
 800b816:	bd38      	pop	{r3, r4, r5, pc}
 800b818:	200013c4 	.word	0x200013c4

0800b81c <__errno>:
 800b81c:	4b01      	ldr	r3, [pc, #4]	@ (800b824 <__errno+0x8>)
 800b81e:	6818      	ldr	r0, [r3, #0]
 800b820:	4770      	bx	lr
 800b822:	bf00      	nop
 800b824:	200000e8 	.word	0x200000e8

0800b828 <__libc_init_array>:
 800b828:	b570      	push	{r4, r5, r6, lr}
 800b82a:	4d0d      	ldr	r5, [pc, #52]	@ (800b860 <__libc_init_array+0x38>)
 800b82c:	4c0d      	ldr	r4, [pc, #52]	@ (800b864 <__libc_init_array+0x3c>)
 800b82e:	1b64      	subs	r4, r4, r5
 800b830:	10a4      	asrs	r4, r4, #2
 800b832:	2600      	movs	r6, #0
 800b834:	42a6      	cmp	r6, r4
 800b836:	d109      	bne.n	800b84c <__libc_init_array+0x24>
 800b838:	4d0b      	ldr	r5, [pc, #44]	@ (800b868 <__libc_init_array+0x40>)
 800b83a:	4c0c      	ldr	r4, [pc, #48]	@ (800b86c <__libc_init_array+0x44>)
 800b83c:	f001 fe2e 	bl	800d49c <_init>
 800b840:	1b64      	subs	r4, r4, r5
 800b842:	10a4      	asrs	r4, r4, #2
 800b844:	2600      	movs	r6, #0
 800b846:	42a6      	cmp	r6, r4
 800b848:	d105      	bne.n	800b856 <__libc_init_array+0x2e>
 800b84a:	bd70      	pop	{r4, r5, r6, pc}
 800b84c:	f855 3b04 	ldr.w	r3, [r5], #4
 800b850:	4798      	blx	r3
 800b852:	3601      	adds	r6, #1
 800b854:	e7ee      	b.n	800b834 <__libc_init_array+0xc>
 800b856:	f855 3b04 	ldr.w	r3, [r5], #4
 800b85a:	4798      	blx	r3
 800b85c:	3601      	adds	r6, #1
 800b85e:	e7f2      	b.n	800b846 <__libc_init_array+0x1e>
 800b860:	0800d974 	.word	0x0800d974
 800b864:	0800d974 	.word	0x0800d974
 800b868:	0800d974 	.word	0x0800d974
 800b86c:	0800d978 	.word	0x0800d978

0800b870 <__retarget_lock_init_recursive>:
 800b870:	4770      	bx	lr

0800b872 <__retarget_lock_acquire_recursive>:
 800b872:	4770      	bx	lr

0800b874 <__retarget_lock_release_recursive>:
 800b874:	4770      	bx	lr

0800b876 <quorem>:
 800b876:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b87a:	6903      	ldr	r3, [r0, #16]
 800b87c:	690c      	ldr	r4, [r1, #16]
 800b87e:	42a3      	cmp	r3, r4
 800b880:	4607      	mov	r7, r0
 800b882:	db7e      	blt.n	800b982 <quorem+0x10c>
 800b884:	3c01      	subs	r4, #1
 800b886:	f101 0814 	add.w	r8, r1, #20
 800b88a:	00a3      	lsls	r3, r4, #2
 800b88c:	f100 0514 	add.w	r5, r0, #20
 800b890:	9300      	str	r3, [sp, #0]
 800b892:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b896:	9301      	str	r3, [sp, #4]
 800b898:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b89c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b8a0:	3301      	adds	r3, #1
 800b8a2:	429a      	cmp	r2, r3
 800b8a4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b8a8:	fbb2 f6f3 	udiv	r6, r2, r3
 800b8ac:	d32e      	bcc.n	800b90c <quorem+0x96>
 800b8ae:	f04f 0a00 	mov.w	sl, #0
 800b8b2:	46c4      	mov	ip, r8
 800b8b4:	46ae      	mov	lr, r5
 800b8b6:	46d3      	mov	fp, sl
 800b8b8:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b8bc:	b298      	uxth	r0, r3
 800b8be:	fb06 a000 	mla	r0, r6, r0, sl
 800b8c2:	0c02      	lsrs	r2, r0, #16
 800b8c4:	0c1b      	lsrs	r3, r3, #16
 800b8c6:	fb06 2303 	mla	r3, r6, r3, r2
 800b8ca:	f8de 2000 	ldr.w	r2, [lr]
 800b8ce:	b280      	uxth	r0, r0
 800b8d0:	b292      	uxth	r2, r2
 800b8d2:	1a12      	subs	r2, r2, r0
 800b8d4:	445a      	add	r2, fp
 800b8d6:	f8de 0000 	ldr.w	r0, [lr]
 800b8da:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b8de:	b29b      	uxth	r3, r3
 800b8e0:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800b8e4:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800b8e8:	b292      	uxth	r2, r2
 800b8ea:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800b8ee:	45e1      	cmp	r9, ip
 800b8f0:	f84e 2b04 	str.w	r2, [lr], #4
 800b8f4:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800b8f8:	d2de      	bcs.n	800b8b8 <quorem+0x42>
 800b8fa:	9b00      	ldr	r3, [sp, #0]
 800b8fc:	58eb      	ldr	r3, [r5, r3]
 800b8fe:	b92b      	cbnz	r3, 800b90c <quorem+0x96>
 800b900:	9b01      	ldr	r3, [sp, #4]
 800b902:	3b04      	subs	r3, #4
 800b904:	429d      	cmp	r5, r3
 800b906:	461a      	mov	r2, r3
 800b908:	d32f      	bcc.n	800b96a <quorem+0xf4>
 800b90a:	613c      	str	r4, [r7, #16]
 800b90c:	4638      	mov	r0, r7
 800b90e:	f001 f97d 	bl	800cc0c <__mcmp>
 800b912:	2800      	cmp	r0, #0
 800b914:	db25      	blt.n	800b962 <quorem+0xec>
 800b916:	4629      	mov	r1, r5
 800b918:	2000      	movs	r0, #0
 800b91a:	f858 2b04 	ldr.w	r2, [r8], #4
 800b91e:	f8d1 c000 	ldr.w	ip, [r1]
 800b922:	fa1f fe82 	uxth.w	lr, r2
 800b926:	fa1f f38c 	uxth.w	r3, ip
 800b92a:	eba3 030e 	sub.w	r3, r3, lr
 800b92e:	4403      	add	r3, r0
 800b930:	0c12      	lsrs	r2, r2, #16
 800b932:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800b936:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800b93a:	b29b      	uxth	r3, r3
 800b93c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b940:	45c1      	cmp	r9, r8
 800b942:	f841 3b04 	str.w	r3, [r1], #4
 800b946:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b94a:	d2e6      	bcs.n	800b91a <quorem+0xa4>
 800b94c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b950:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b954:	b922      	cbnz	r2, 800b960 <quorem+0xea>
 800b956:	3b04      	subs	r3, #4
 800b958:	429d      	cmp	r5, r3
 800b95a:	461a      	mov	r2, r3
 800b95c:	d30b      	bcc.n	800b976 <quorem+0x100>
 800b95e:	613c      	str	r4, [r7, #16]
 800b960:	3601      	adds	r6, #1
 800b962:	4630      	mov	r0, r6
 800b964:	b003      	add	sp, #12
 800b966:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b96a:	6812      	ldr	r2, [r2, #0]
 800b96c:	3b04      	subs	r3, #4
 800b96e:	2a00      	cmp	r2, #0
 800b970:	d1cb      	bne.n	800b90a <quorem+0x94>
 800b972:	3c01      	subs	r4, #1
 800b974:	e7c6      	b.n	800b904 <quorem+0x8e>
 800b976:	6812      	ldr	r2, [r2, #0]
 800b978:	3b04      	subs	r3, #4
 800b97a:	2a00      	cmp	r2, #0
 800b97c:	d1ef      	bne.n	800b95e <quorem+0xe8>
 800b97e:	3c01      	subs	r4, #1
 800b980:	e7ea      	b.n	800b958 <quorem+0xe2>
 800b982:	2000      	movs	r0, #0
 800b984:	e7ee      	b.n	800b964 <quorem+0xee>
	...

0800b988 <_dtoa_r>:
 800b988:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b98c:	69c7      	ldr	r7, [r0, #28]
 800b98e:	b097      	sub	sp, #92	@ 0x5c
 800b990:	ed8d 0b04 	vstr	d0, [sp, #16]
 800b994:	ec55 4b10 	vmov	r4, r5, d0
 800b998:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800b99a:	9107      	str	r1, [sp, #28]
 800b99c:	4681      	mov	r9, r0
 800b99e:	920c      	str	r2, [sp, #48]	@ 0x30
 800b9a0:	9311      	str	r3, [sp, #68]	@ 0x44
 800b9a2:	b97f      	cbnz	r7, 800b9c4 <_dtoa_r+0x3c>
 800b9a4:	2010      	movs	r0, #16
 800b9a6:	f000 fe09 	bl	800c5bc <malloc>
 800b9aa:	4602      	mov	r2, r0
 800b9ac:	f8c9 001c 	str.w	r0, [r9, #28]
 800b9b0:	b920      	cbnz	r0, 800b9bc <_dtoa_r+0x34>
 800b9b2:	4ba9      	ldr	r3, [pc, #676]	@ (800bc58 <_dtoa_r+0x2d0>)
 800b9b4:	21ef      	movs	r1, #239	@ 0xef
 800b9b6:	48a9      	ldr	r0, [pc, #676]	@ (800bc5c <_dtoa_r+0x2d4>)
 800b9b8:	f001 fcc0 	bl	800d33c <__assert_func>
 800b9bc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800b9c0:	6007      	str	r7, [r0, #0]
 800b9c2:	60c7      	str	r7, [r0, #12]
 800b9c4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800b9c8:	6819      	ldr	r1, [r3, #0]
 800b9ca:	b159      	cbz	r1, 800b9e4 <_dtoa_r+0x5c>
 800b9cc:	685a      	ldr	r2, [r3, #4]
 800b9ce:	604a      	str	r2, [r1, #4]
 800b9d0:	2301      	movs	r3, #1
 800b9d2:	4093      	lsls	r3, r2
 800b9d4:	608b      	str	r3, [r1, #8]
 800b9d6:	4648      	mov	r0, r9
 800b9d8:	f000 fee6 	bl	800c7a8 <_Bfree>
 800b9dc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800b9e0:	2200      	movs	r2, #0
 800b9e2:	601a      	str	r2, [r3, #0]
 800b9e4:	1e2b      	subs	r3, r5, #0
 800b9e6:	bfb9      	ittee	lt
 800b9e8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800b9ec:	9305      	strlt	r3, [sp, #20]
 800b9ee:	2300      	movge	r3, #0
 800b9f0:	6033      	strge	r3, [r6, #0]
 800b9f2:	9f05      	ldr	r7, [sp, #20]
 800b9f4:	4b9a      	ldr	r3, [pc, #616]	@ (800bc60 <_dtoa_r+0x2d8>)
 800b9f6:	bfbc      	itt	lt
 800b9f8:	2201      	movlt	r2, #1
 800b9fa:	6032      	strlt	r2, [r6, #0]
 800b9fc:	43bb      	bics	r3, r7
 800b9fe:	d112      	bne.n	800ba26 <_dtoa_r+0x9e>
 800ba00:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800ba02:	f242 730f 	movw	r3, #9999	@ 0x270f
 800ba06:	6013      	str	r3, [r2, #0]
 800ba08:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ba0c:	4323      	orrs	r3, r4
 800ba0e:	f000 855a 	beq.w	800c4c6 <_dtoa_r+0xb3e>
 800ba12:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800ba14:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800bc74 <_dtoa_r+0x2ec>
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	f000 855c 	beq.w	800c4d6 <_dtoa_r+0xb4e>
 800ba1e:	f10a 0303 	add.w	r3, sl, #3
 800ba22:	f000 bd56 	b.w	800c4d2 <_dtoa_r+0xb4a>
 800ba26:	ed9d 7b04 	vldr	d7, [sp, #16]
 800ba2a:	2200      	movs	r2, #0
 800ba2c:	ec51 0b17 	vmov	r0, r1, d7
 800ba30:	2300      	movs	r3, #0
 800ba32:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800ba36:	f7f5 f86f 	bl	8000b18 <__aeabi_dcmpeq>
 800ba3a:	4680      	mov	r8, r0
 800ba3c:	b158      	cbz	r0, 800ba56 <_dtoa_r+0xce>
 800ba3e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800ba40:	2301      	movs	r3, #1
 800ba42:	6013      	str	r3, [r2, #0]
 800ba44:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800ba46:	b113      	cbz	r3, 800ba4e <_dtoa_r+0xc6>
 800ba48:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800ba4a:	4b86      	ldr	r3, [pc, #536]	@ (800bc64 <_dtoa_r+0x2dc>)
 800ba4c:	6013      	str	r3, [r2, #0]
 800ba4e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800bc78 <_dtoa_r+0x2f0>
 800ba52:	f000 bd40 	b.w	800c4d6 <_dtoa_r+0xb4e>
 800ba56:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800ba5a:	aa14      	add	r2, sp, #80	@ 0x50
 800ba5c:	a915      	add	r1, sp, #84	@ 0x54
 800ba5e:	4648      	mov	r0, r9
 800ba60:	f001 f984 	bl	800cd6c <__d2b>
 800ba64:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800ba68:	9002      	str	r0, [sp, #8]
 800ba6a:	2e00      	cmp	r6, #0
 800ba6c:	d078      	beq.n	800bb60 <_dtoa_r+0x1d8>
 800ba6e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ba70:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800ba74:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ba78:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800ba7c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800ba80:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800ba84:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800ba88:	4619      	mov	r1, r3
 800ba8a:	2200      	movs	r2, #0
 800ba8c:	4b76      	ldr	r3, [pc, #472]	@ (800bc68 <_dtoa_r+0x2e0>)
 800ba8e:	f7f4 fc23 	bl	80002d8 <__aeabi_dsub>
 800ba92:	a36b      	add	r3, pc, #428	@ (adr r3, 800bc40 <_dtoa_r+0x2b8>)
 800ba94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba98:	f7f4 fdd6 	bl	8000648 <__aeabi_dmul>
 800ba9c:	a36a      	add	r3, pc, #424	@ (adr r3, 800bc48 <_dtoa_r+0x2c0>)
 800ba9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800baa2:	f7f4 fc1b 	bl	80002dc <__adddf3>
 800baa6:	4604      	mov	r4, r0
 800baa8:	4630      	mov	r0, r6
 800baaa:	460d      	mov	r5, r1
 800baac:	f7f4 fd62 	bl	8000574 <__aeabi_i2d>
 800bab0:	a367      	add	r3, pc, #412	@ (adr r3, 800bc50 <_dtoa_r+0x2c8>)
 800bab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bab6:	f7f4 fdc7 	bl	8000648 <__aeabi_dmul>
 800baba:	4602      	mov	r2, r0
 800babc:	460b      	mov	r3, r1
 800babe:	4620      	mov	r0, r4
 800bac0:	4629      	mov	r1, r5
 800bac2:	f7f4 fc0b 	bl	80002dc <__adddf3>
 800bac6:	4604      	mov	r4, r0
 800bac8:	460d      	mov	r5, r1
 800baca:	f7f5 f86d 	bl	8000ba8 <__aeabi_d2iz>
 800bace:	2200      	movs	r2, #0
 800bad0:	4607      	mov	r7, r0
 800bad2:	2300      	movs	r3, #0
 800bad4:	4620      	mov	r0, r4
 800bad6:	4629      	mov	r1, r5
 800bad8:	f7f5 f828 	bl	8000b2c <__aeabi_dcmplt>
 800badc:	b140      	cbz	r0, 800baf0 <_dtoa_r+0x168>
 800bade:	4638      	mov	r0, r7
 800bae0:	f7f4 fd48 	bl	8000574 <__aeabi_i2d>
 800bae4:	4622      	mov	r2, r4
 800bae6:	462b      	mov	r3, r5
 800bae8:	f7f5 f816 	bl	8000b18 <__aeabi_dcmpeq>
 800baec:	b900      	cbnz	r0, 800baf0 <_dtoa_r+0x168>
 800baee:	3f01      	subs	r7, #1
 800baf0:	2f16      	cmp	r7, #22
 800baf2:	d852      	bhi.n	800bb9a <_dtoa_r+0x212>
 800baf4:	4b5d      	ldr	r3, [pc, #372]	@ (800bc6c <_dtoa_r+0x2e4>)
 800baf6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800bafa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bafe:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800bb02:	f7f5 f813 	bl	8000b2c <__aeabi_dcmplt>
 800bb06:	2800      	cmp	r0, #0
 800bb08:	d049      	beq.n	800bb9e <_dtoa_r+0x216>
 800bb0a:	3f01      	subs	r7, #1
 800bb0c:	2300      	movs	r3, #0
 800bb0e:	9310      	str	r3, [sp, #64]	@ 0x40
 800bb10:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800bb12:	1b9b      	subs	r3, r3, r6
 800bb14:	1e5a      	subs	r2, r3, #1
 800bb16:	bf45      	ittet	mi
 800bb18:	f1c3 0301 	rsbmi	r3, r3, #1
 800bb1c:	9300      	strmi	r3, [sp, #0]
 800bb1e:	2300      	movpl	r3, #0
 800bb20:	2300      	movmi	r3, #0
 800bb22:	9206      	str	r2, [sp, #24]
 800bb24:	bf54      	ite	pl
 800bb26:	9300      	strpl	r3, [sp, #0]
 800bb28:	9306      	strmi	r3, [sp, #24]
 800bb2a:	2f00      	cmp	r7, #0
 800bb2c:	db39      	blt.n	800bba2 <_dtoa_r+0x21a>
 800bb2e:	9b06      	ldr	r3, [sp, #24]
 800bb30:	970d      	str	r7, [sp, #52]	@ 0x34
 800bb32:	443b      	add	r3, r7
 800bb34:	9306      	str	r3, [sp, #24]
 800bb36:	2300      	movs	r3, #0
 800bb38:	9308      	str	r3, [sp, #32]
 800bb3a:	9b07      	ldr	r3, [sp, #28]
 800bb3c:	2b09      	cmp	r3, #9
 800bb3e:	d863      	bhi.n	800bc08 <_dtoa_r+0x280>
 800bb40:	2b05      	cmp	r3, #5
 800bb42:	bfc4      	itt	gt
 800bb44:	3b04      	subgt	r3, #4
 800bb46:	9307      	strgt	r3, [sp, #28]
 800bb48:	9b07      	ldr	r3, [sp, #28]
 800bb4a:	f1a3 0302 	sub.w	r3, r3, #2
 800bb4e:	bfcc      	ite	gt
 800bb50:	2400      	movgt	r4, #0
 800bb52:	2401      	movle	r4, #1
 800bb54:	2b03      	cmp	r3, #3
 800bb56:	d863      	bhi.n	800bc20 <_dtoa_r+0x298>
 800bb58:	e8df f003 	tbb	[pc, r3]
 800bb5c:	2b375452 	.word	0x2b375452
 800bb60:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800bb64:	441e      	add	r6, r3
 800bb66:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800bb6a:	2b20      	cmp	r3, #32
 800bb6c:	bfc1      	itttt	gt
 800bb6e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800bb72:	409f      	lslgt	r7, r3
 800bb74:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800bb78:	fa24 f303 	lsrgt.w	r3, r4, r3
 800bb7c:	bfd6      	itet	le
 800bb7e:	f1c3 0320 	rsble	r3, r3, #32
 800bb82:	ea47 0003 	orrgt.w	r0, r7, r3
 800bb86:	fa04 f003 	lslle.w	r0, r4, r3
 800bb8a:	f7f4 fce3 	bl	8000554 <__aeabi_ui2d>
 800bb8e:	2201      	movs	r2, #1
 800bb90:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800bb94:	3e01      	subs	r6, #1
 800bb96:	9212      	str	r2, [sp, #72]	@ 0x48
 800bb98:	e776      	b.n	800ba88 <_dtoa_r+0x100>
 800bb9a:	2301      	movs	r3, #1
 800bb9c:	e7b7      	b.n	800bb0e <_dtoa_r+0x186>
 800bb9e:	9010      	str	r0, [sp, #64]	@ 0x40
 800bba0:	e7b6      	b.n	800bb10 <_dtoa_r+0x188>
 800bba2:	9b00      	ldr	r3, [sp, #0]
 800bba4:	1bdb      	subs	r3, r3, r7
 800bba6:	9300      	str	r3, [sp, #0]
 800bba8:	427b      	negs	r3, r7
 800bbaa:	9308      	str	r3, [sp, #32]
 800bbac:	2300      	movs	r3, #0
 800bbae:	930d      	str	r3, [sp, #52]	@ 0x34
 800bbb0:	e7c3      	b.n	800bb3a <_dtoa_r+0x1b2>
 800bbb2:	2301      	movs	r3, #1
 800bbb4:	9309      	str	r3, [sp, #36]	@ 0x24
 800bbb6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800bbb8:	eb07 0b03 	add.w	fp, r7, r3
 800bbbc:	f10b 0301 	add.w	r3, fp, #1
 800bbc0:	2b01      	cmp	r3, #1
 800bbc2:	9303      	str	r3, [sp, #12]
 800bbc4:	bfb8      	it	lt
 800bbc6:	2301      	movlt	r3, #1
 800bbc8:	e006      	b.n	800bbd8 <_dtoa_r+0x250>
 800bbca:	2301      	movs	r3, #1
 800bbcc:	9309      	str	r3, [sp, #36]	@ 0x24
 800bbce:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	dd28      	ble.n	800bc26 <_dtoa_r+0x29e>
 800bbd4:	469b      	mov	fp, r3
 800bbd6:	9303      	str	r3, [sp, #12]
 800bbd8:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800bbdc:	2100      	movs	r1, #0
 800bbde:	2204      	movs	r2, #4
 800bbe0:	f102 0514 	add.w	r5, r2, #20
 800bbe4:	429d      	cmp	r5, r3
 800bbe6:	d926      	bls.n	800bc36 <_dtoa_r+0x2ae>
 800bbe8:	6041      	str	r1, [r0, #4]
 800bbea:	4648      	mov	r0, r9
 800bbec:	f000 fd9c 	bl	800c728 <_Balloc>
 800bbf0:	4682      	mov	sl, r0
 800bbf2:	2800      	cmp	r0, #0
 800bbf4:	d142      	bne.n	800bc7c <_dtoa_r+0x2f4>
 800bbf6:	4b1e      	ldr	r3, [pc, #120]	@ (800bc70 <_dtoa_r+0x2e8>)
 800bbf8:	4602      	mov	r2, r0
 800bbfa:	f240 11af 	movw	r1, #431	@ 0x1af
 800bbfe:	e6da      	b.n	800b9b6 <_dtoa_r+0x2e>
 800bc00:	2300      	movs	r3, #0
 800bc02:	e7e3      	b.n	800bbcc <_dtoa_r+0x244>
 800bc04:	2300      	movs	r3, #0
 800bc06:	e7d5      	b.n	800bbb4 <_dtoa_r+0x22c>
 800bc08:	2401      	movs	r4, #1
 800bc0a:	2300      	movs	r3, #0
 800bc0c:	9307      	str	r3, [sp, #28]
 800bc0e:	9409      	str	r4, [sp, #36]	@ 0x24
 800bc10:	f04f 3bff 	mov.w	fp, #4294967295
 800bc14:	2200      	movs	r2, #0
 800bc16:	f8cd b00c 	str.w	fp, [sp, #12]
 800bc1a:	2312      	movs	r3, #18
 800bc1c:	920c      	str	r2, [sp, #48]	@ 0x30
 800bc1e:	e7db      	b.n	800bbd8 <_dtoa_r+0x250>
 800bc20:	2301      	movs	r3, #1
 800bc22:	9309      	str	r3, [sp, #36]	@ 0x24
 800bc24:	e7f4      	b.n	800bc10 <_dtoa_r+0x288>
 800bc26:	f04f 0b01 	mov.w	fp, #1
 800bc2a:	f8cd b00c 	str.w	fp, [sp, #12]
 800bc2e:	465b      	mov	r3, fp
 800bc30:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800bc34:	e7d0      	b.n	800bbd8 <_dtoa_r+0x250>
 800bc36:	3101      	adds	r1, #1
 800bc38:	0052      	lsls	r2, r2, #1
 800bc3a:	e7d1      	b.n	800bbe0 <_dtoa_r+0x258>
 800bc3c:	f3af 8000 	nop.w
 800bc40:	636f4361 	.word	0x636f4361
 800bc44:	3fd287a7 	.word	0x3fd287a7
 800bc48:	8b60c8b3 	.word	0x8b60c8b3
 800bc4c:	3fc68a28 	.word	0x3fc68a28
 800bc50:	509f79fb 	.word	0x509f79fb
 800bc54:	3fd34413 	.word	0x3fd34413
 800bc58:	0800d635 	.word	0x0800d635
 800bc5c:	0800d64c 	.word	0x0800d64c
 800bc60:	7ff00000 	.word	0x7ff00000
 800bc64:	0800d605 	.word	0x0800d605
 800bc68:	3ff80000 	.word	0x3ff80000
 800bc6c:	0800d7a0 	.word	0x0800d7a0
 800bc70:	0800d6a4 	.word	0x0800d6a4
 800bc74:	0800d631 	.word	0x0800d631
 800bc78:	0800d604 	.word	0x0800d604
 800bc7c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800bc80:	6018      	str	r0, [r3, #0]
 800bc82:	9b03      	ldr	r3, [sp, #12]
 800bc84:	2b0e      	cmp	r3, #14
 800bc86:	f200 80a1 	bhi.w	800bdcc <_dtoa_r+0x444>
 800bc8a:	2c00      	cmp	r4, #0
 800bc8c:	f000 809e 	beq.w	800bdcc <_dtoa_r+0x444>
 800bc90:	2f00      	cmp	r7, #0
 800bc92:	dd33      	ble.n	800bcfc <_dtoa_r+0x374>
 800bc94:	4b9c      	ldr	r3, [pc, #624]	@ (800bf08 <_dtoa_r+0x580>)
 800bc96:	f007 020f 	and.w	r2, r7, #15
 800bc9a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bc9e:	ed93 7b00 	vldr	d7, [r3]
 800bca2:	05f8      	lsls	r0, r7, #23
 800bca4:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800bca8:	ea4f 1427 	mov.w	r4, r7, asr #4
 800bcac:	d516      	bpl.n	800bcdc <_dtoa_r+0x354>
 800bcae:	4b97      	ldr	r3, [pc, #604]	@ (800bf0c <_dtoa_r+0x584>)
 800bcb0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800bcb4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800bcb8:	f7f4 fdf0 	bl	800089c <__aeabi_ddiv>
 800bcbc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bcc0:	f004 040f 	and.w	r4, r4, #15
 800bcc4:	2603      	movs	r6, #3
 800bcc6:	4d91      	ldr	r5, [pc, #580]	@ (800bf0c <_dtoa_r+0x584>)
 800bcc8:	b954      	cbnz	r4, 800bce0 <_dtoa_r+0x358>
 800bcca:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800bcce:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bcd2:	f7f4 fde3 	bl	800089c <__aeabi_ddiv>
 800bcd6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bcda:	e028      	b.n	800bd2e <_dtoa_r+0x3a6>
 800bcdc:	2602      	movs	r6, #2
 800bcde:	e7f2      	b.n	800bcc6 <_dtoa_r+0x33e>
 800bce0:	07e1      	lsls	r1, r4, #31
 800bce2:	d508      	bpl.n	800bcf6 <_dtoa_r+0x36e>
 800bce4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800bce8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800bcec:	f7f4 fcac 	bl	8000648 <__aeabi_dmul>
 800bcf0:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800bcf4:	3601      	adds	r6, #1
 800bcf6:	1064      	asrs	r4, r4, #1
 800bcf8:	3508      	adds	r5, #8
 800bcfa:	e7e5      	b.n	800bcc8 <_dtoa_r+0x340>
 800bcfc:	f000 80af 	beq.w	800be5e <_dtoa_r+0x4d6>
 800bd00:	427c      	negs	r4, r7
 800bd02:	4b81      	ldr	r3, [pc, #516]	@ (800bf08 <_dtoa_r+0x580>)
 800bd04:	4d81      	ldr	r5, [pc, #516]	@ (800bf0c <_dtoa_r+0x584>)
 800bd06:	f004 020f 	and.w	r2, r4, #15
 800bd0a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bd0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd12:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800bd16:	f7f4 fc97 	bl	8000648 <__aeabi_dmul>
 800bd1a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bd1e:	1124      	asrs	r4, r4, #4
 800bd20:	2300      	movs	r3, #0
 800bd22:	2602      	movs	r6, #2
 800bd24:	2c00      	cmp	r4, #0
 800bd26:	f040 808f 	bne.w	800be48 <_dtoa_r+0x4c0>
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	d1d3      	bne.n	800bcd6 <_dtoa_r+0x34e>
 800bd2e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800bd30:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	f000 8094 	beq.w	800be62 <_dtoa_r+0x4da>
 800bd3a:	4b75      	ldr	r3, [pc, #468]	@ (800bf10 <_dtoa_r+0x588>)
 800bd3c:	2200      	movs	r2, #0
 800bd3e:	4620      	mov	r0, r4
 800bd40:	4629      	mov	r1, r5
 800bd42:	f7f4 fef3 	bl	8000b2c <__aeabi_dcmplt>
 800bd46:	2800      	cmp	r0, #0
 800bd48:	f000 808b 	beq.w	800be62 <_dtoa_r+0x4da>
 800bd4c:	9b03      	ldr	r3, [sp, #12]
 800bd4e:	2b00      	cmp	r3, #0
 800bd50:	f000 8087 	beq.w	800be62 <_dtoa_r+0x4da>
 800bd54:	f1bb 0f00 	cmp.w	fp, #0
 800bd58:	dd34      	ble.n	800bdc4 <_dtoa_r+0x43c>
 800bd5a:	4620      	mov	r0, r4
 800bd5c:	4b6d      	ldr	r3, [pc, #436]	@ (800bf14 <_dtoa_r+0x58c>)
 800bd5e:	2200      	movs	r2, #0
 800bd60:	4629      	mov	r1, r5
 800bd62:	f7f4 fc71 	bl	8000648 <__aeabi_dmul>
 800bd66:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bd6a:	f107 38ff 	add.w	r8, r7, #4294967295
 800bd6e:	3601      	adds	r6, #1
 800bd70:	465c      	mov	r4, fp
 800bd72:	4630      	mov	r0, r6
 800bd74:	f7f4 fbfe 	bl	8000574 <__aeabi_i2d>
 800bd78:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bd7c:	f7f4 fc64 	bl	8000648 <__aeabi_dmul>
 800bd80:	4b65      	ldr	r3, [pc, #404]	@ (800bf18 <_dtoa_r+0x590>)
 800bd82:	2200      	movs	r2, #0
 800bd84:	f7f4 faaa 	bl	80002dc <__adddf3>
 800bd88:	4605      	mov	r5, r0
 800bd8a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800bd8e:	2c00      	cmp	r4, #0
 800bd90:	d16a      	bne.n	800be68 <_dtoa_r+0x4e0>
 800bd92:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bd96:	4b61      	ldr	r3, [pc, #388]	@ (800bf1c <_dtoa_r+0x594>)
 800bd98:	2200      	movs	r2, #0
 800bd9a:	f7f4 fa9d 	bl	80002d8 <__aeabi_dsub>
 800bd9e:	4602      	mov	r2, r0
 800bda0:	460b      	mov	r3, r1
 800bda2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800bda6:	462a      	mov	r2, r5
 800bda8:	4633      	mov	r3, r6
 800bdaa:	f7f4 fedd 	bl	8000b68 <__aeabi_dcmpgt>
 800bdae:	2800      	cmp	r0, #0
 800bdb0:	f040 8298 	bne.w	800c2e4 <_dtoa_r+0x95c>
 800bdb4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bdb8:	462a      	mov	r2, r5
 800bdba:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800bdbe:	f7f4 feb5 	bl	8000b2c <__aeabi_dcmplt>
 800bdc2:	bb38      	cbnz	r0, 800be14 <_dtoa_r+0x48c>
 800bdc4:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800bdc8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800bdcc:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	f2c0 8157 	blt.w	800c082 <_dtoa_r+0x6fa>
 800bdd4:	2f0e      	cmp	r7, #14
 800bdd6:	f300 8154 	bgt.w	800c082 <_dtoa_r+0x6fa>
 800bdda:	4b4b      	ldr	r3, [pc, #300]	@ (800bf08 <_dtoa_r+0x580>)
 800bddc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800bde0:	ed93 7b00 	vldr	d7, [r3]
 800bde4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	ed8d 7b00 	vstr	d7, [sp]
 800bdec:	f280 80e5 	bge.w	800bfba <_dtoa_r+0x632>
 800bdf0:	9b03      	ldr	r3, [sp, #12]
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	f300 80e1 	bgt.w	800bfba <_dtoa_r+0x632>
 800bdf8:	d10c      	bne.n	800be14 <_dtoa_r+0x48c>
 800bdfa:	4b48      	ldr	r3, [pc, #288]	@ (800bf1c <_dtoa_r+0x594>)
 800bdfc:	2200      	movs	r2, #0
 800bdfe:	ec51 0b17 	vmov	r0, r1, d7
 800be02:	f7f4 fc21 	bl	8000648 <__aeabi_dmul>
 800be06:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800be0a:	f7f4 fea3 	bl	8000b54 <__aeabi_dcmpge>
 800be0e:	2800      	cmp	r0, #0
 800be10:	f000 8266 	beq.w	800c2e0 <_dtoa_r+0x958>
 800be14:	2400      	movs	r4, #0
 800be16:	4625      	mov	r5, r4
 800be18:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800be1a:	4656      	mov	r6, sl
 800be1c:	ea6f 0803 	mvn.w	r8, r3
 800be20:	2700      	movs	r7, #0
 800be22:	4621      	mov	r1, r4
 800be24:	4648      	mov	r0, r9
 800be26:	f000 fcbf 	bl	800c7a8 <_Bfree>
 800be2a:	2d00      	cmp	r5, #0
 800be2c:	f000 80bd 	beq.w	800bfaa <_dtoa_r+0x622>
 800be30:	b12f      	cbz	r7, 800be3e <_dtoa_r+0x4b6>
 800be32:	42af      	cmp	r7, r5
 800be34:	d003      	beq.n	800be3e <_dtoa_r+0x4b6>
 800be36:	4639      	mov	r1, r7
 800be38:	4648      	mov	r0, r9
 800be3a:	f000 fcb5 	bl	800c7a8 <_Bfree>
 800be3e:	4629      	mov	r1, r5
 800be40:	4648      	mov	r0, r9
 800be42:	f000 fcb1 	bl	800c7a8 <_Bfree>
 800be46:	e0b0      	b.n	800bfaa <_dtoa_r+0x622>
 800be48:	07e2      	lsls	r2, r4, #31
 800be4a:	d505      	bpl.n	800be58 <_dtoa_r+0x4d0>
 800be4c:	e9d5 2300 	ldrd	r2, r3, [r5]
 800be50:	f7f4 fbfa 	bl	8000648 <__aeabi_dmul>
 800be54:	3601      	adds	r6, #1
 800be56:	2301      	movs	r3, #1
 800be58:	1064      	asrs	r4, r4, #1
 800be5a:	3508      	adds	r5, #8
 800be5c:	e762      	b.n	800bd24 <_dtoa_r+0x39c>
 800be5e:	2602      	movs	r6, #2
 800be60:	e765      	b.n	800bd2e <_dtoa_r+0x3a6>
 800be62:	9c03      	ldr	r4, [sp, #12]
 800be64:	46b8      	mov	r8, r7
 800be66:	e784      	b.n	800bd72 <_dtoa_r+0x3ea>
 800be68:	4b27      	ldr	r3, [pc, #156]	@ (800bf08 <_dtoa_r+0x580>)
 800be6a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800be6c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800be70:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800be74:	4454      	add	r4, sl
 800be76:	2900      	cmp	r1, #0
 800be78:	d054      	beq.n	800bf24 <_dtoa_r+0x59c>
 800be7a:	4929      	ldr	r1, [pc, #164]	@ (800bf20 <_dtoa_r+0x598>)
 800be7c:	2000      	movs	r0, #0
 800be7e:	f7f4 fd0d 	bl	800089c <__aeabi_ddiv>
 800be82:	4633      	mov	r3, r6
 800be84:	462a      	mov	r2, r5
 800be86:	f7f4 fa27 	bl	80002d8 <__aeabi_dsub>
 800be8a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800be8e:	4656      	mov	r6, sl
 800be90:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800be94:	f7f4 fe88 	bl	8000ba8 <__aeabi_d2iz>
 800be98:	4605      	mov	r5, r0
 800be9a:	f7f4 fb6b 	bl	8000574 <__aeabi_i2d>
 800be9e:	4602      	mov	r2, r0
 800bea0:	460b      	mov	r3, r1
 800bea2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bea6:	f7f4 fa17 	bl	80002d8 <__aeabi_dsub>
 800beaa:	3530      	adds	r5, #48	@ 0x30
 800beac:	4602      	mov	r2, r0
 800beae:	460b      	mov	r3, r1
 800beb0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800beb4:	f806 5b01 	strb.w	r5, [r6], #1
 800beb8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800bebc:	f7f4 fe36 	bl	8000b2c <__aeabi_dcmplt>
 800bec0:	2800      	cmp	r0, #0
 800bec2:	d172      	bne.n	800bfaa <_dtoa_r+0x622>
 800bec4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bec8:	4911      	ldr	r1, [pc, #68]	@ (800bf10 <_dtoa_r+0x588>)
 800beca:	2000      	movs	r0, #0
 800becc:	f7f4 fa04 	bl	80002d8 <__aeabi_dsub>
 800bed0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800bed4:	f7f4 fe2a 	bl	8000b2c <__aeabi_dcmplt>
 800bed8:	2800      	cmp	r0, #0
 800beda:	f040 80b4 	bne.w	800c046 <_dtoa_r+0x6be>
 800bede:	42a6      	cmp	r6, r4
 800bee0:	f43f af70 	beq.w	800bdc4 <_dtoa_r+0x43c>
 800bee4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800bee8:	4b0a      	ldr	r3, [pc, #40]	@ (800bf14 <_dtoa_r+0x58c>)
 800beea:	2200      	movs	r2, #0
 800beec:	f7f4 fbac 	bl	8000648 <__aeabi_dmul>
 800bef0:	4b08      	ldr	r3, [pc, #32]	@ (800bf14 <_dtoa_r+0x58c>)
 800bef2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800bef6:	2200      	movs	r2, #0
 800bef8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800befc:	f7f4 fba4 	bl	8000648 <__aeabi_dmul>
 800bf00:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bf04:	e7c4      	b.n	800be90 <_dtoa_r+0x508>
 800bf06:	bf00      	nop
 800bf08:	0800d7a0 	.word	0x0800d7a0
 800bf0c:	0800d778 	.word	0x0800d778
 800bf10:	3ff00000 	.word	0x3ff00000
 800bf14:	40240000 	.word	0x40240000
 800bf18:	401c0000 	.word	0x401c0000
 800bf1c:	40140000 	.word	0x40140000
 800bf20:	3fe00000 	.word	0x3fe00000
 800bf24:	4631      	mov	r1, r6
 800bf26:	4628      	mov	r0, r5
 800bf28:	f7f4 fb8e 	bl	8000648 <__aeabi_dmul>
 800bf2c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800bf30:	9413      	str	r4, [sp, #76]	@ 0x4c
 800bf32:	4656      	mov	r6, sl
 800bf34:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bf38:	f7f4 fe36 	bl	8000ba8 <__aeabi_d2iz>
 800bf3c:	4605      	mov	r5, r0
 800bf3e:	f7f4 fb19 	bl	8000574 <__aeabi_i2d>
 800bf42:	4602      	mov	r2, r0
 800bf44:	460b      	mov	r3, r1
 800bf46:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bf4a:	f7f4 f9c5 	bl	80002d8 <__aeabi_dsub>
 800bf4e:	3530      	adds	r5, #48	@ 0x30
 800bf50:	f806 5b01 	strb.w	r5, [r6], #1
 800bf54:	4602      	mov	r2, r0
 800bf56:	460b      	mov	r3, r1
 800bf58:	42a6      	cmp	r6, r4
 800bf5a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800bf5e:	f04f 0200 	mov.w	r2, #0
 800bf62:	d124      	bne.n	800bfae <_dtoa_r+0x626>
 800bf64:	4baf      	ldr	r3, [pc, #700]	@ (800c224 <_dtoa_r+0x89c>)
 800bf66:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800bf6a:	f7f4 f9b7 	bl	80002dc <__adddf3>
 800bf6e:	4602      	mov	r2, r0
 800bf70:	460b      	mov	r3, r1
 800bf72:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bf76:	f7f4 fdf7 	bl	8000b68 <__aeabi_dcmpgt>
 800bf7a:	2800      	cmp	r0, #0
 800bf7c:	d163      	bne.n	800c046 <_dtoa_r+0x6be>
 800bf7e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800bf82:	49a8      	ldr	r1, [pc, #672]	@ (800c224 <_dtoa_r+0x89c>)
 800bf84:	2000      	movs	r0, #0
 800bf86:	f7f4 f9a7 	bl	80002d8 <__aeabi_dsub>
 800bf8a:	4602      	mov	r2, r0
 800bf8c:	460b      	mov	r3, r1
 800bf8e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bf92:	f7f4 fdcb 	bl	8000b2c <__aeabi_dcmplt>
 800bf96:	2800      	cmp	r0, #0
 800bf98:	f43f af14 	beq.w	800bdc4 <_dtoa_r+0x43c>
 800bf9c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800bf9e:	1e73      	subs	r3, r6, #1
 800bfa0:	9313      	str	r3, [sp, #76]	@ 0x4c
 800bfa2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800bfa6:	2b30      	cmp	r3, #48	@ 0x30
 800bfa8:	d0f8      	beq.n	800bf9c <_dtoa_r+0x614>
 800bfaa:	4647      	mov	r7, r8
 800bfac:	e03b      	b.n	800c026 <_dtoa_r+0x69e>
 800bfae:	4b9e      	ldr	r3, [pc, #632]	@ (800c228 <_dtoa_r+0x8a0>)
 800bfb0:	f7f4 fb4a 	bl	8000648 <__aeabi_dmul>
 800bfb4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bfb8:	e7bc      	b.n	800bf34 <_dtoa_r+0x5ac>
 800bfba:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800bfbe:	4656      	mov	r6, sl
 800bfc0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bfc4:	4620      	mov	r0, r4
 800bfc6:	4629      	mov	r1, r5
 800bfc8:	f7f4 fc68 	bl	800089c <__aeabi_ddiv>
 800bfcc:	f7f4 fdec 	bl	8000ba8 <__aeabi_d2iz>
 800bfd0:	4680      	mov	r8, r0
 800bfd2:	f7f4 facf 	bl	8000574 <__aeabi_i2d>
 800bfd6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bfda:	f7f4 fb35 	bl	8000648 <__aeabi_dmul>
 800bfde:	4602      	mov	r2, r0
 800bfe0:	460b      	mov	r3, r1
 800bfe2:	4620      	mov	r0, r4
 800bfe4:	4629      	mov	r1, r5
 800bfe6:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800bfea:	f7f4 f975 	bl	80002d8 <__aeabi_dsub>
 800bfee:	f806 4b01 	strb.w	r4, [r6], #1
 800bff2:	9d03      	ldr	r5, [sp, #12]
 800bff4:	eba6 040a 	sub.w	r4, r6, sl
 800bff8:	42a5      	cmp	r5, r4
 800bffa:	4602      	mov	r2, r0
 800bffc:	460b      	mov	r3, r1
 800bffe:	d133      	bne.n	800c068 <_dtoa_r+0x6e0>
 800c000:	f7f4 f96c 	bl	80002dc <__adddf3>
 800c004:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c008:	4604      	mov	r4, r0
 800c00a:	460d      	mov	r5, r1
 800c00c:	f7f4 fdac 	bl	8000b68 <__aeabi_dcmpgt>
 800c010:	b9c0      	cbnz	r0, 800c044 <_dtoa_r+0x6bc>
 800c012:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c016:	4620      	mov	r0, r4
 800c018:	4629      	mov	r1, r5
 800c01a:	f7f4 fd7d 	bl	8000b18 <__aeabi_dcmpeq>
 800c01e:	b110      	cbz	r0, 800c026 <_dtoa_r+0x69e>
 800c020:	f018 0f01 	tst.w	r8, #1
 800c024:	d10e      	bne.n	800c044 <_dtoa_r+0x6bc>
 800c026:	9902      	ldr	r1, [sp, #8]
 800c028:	4648      	mov	r0, r9
 800c02a:	f000 fbbd 	bl	800c7a8 <_Bfree>
 800c02e:	2300      	movs	r3, #0
 800c030:	7033      	strb	r3, [r6, #0]
 800c032:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800c034:	3701      	adds	r7, #1
 800c036:	601f      	str	r7, [r3, #0]
 800c038:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	f000 824b 	beq.w	800c4d6 <_dtoa_r+0xb4e>
 800c040:	601e      	str	r6, [r3, #0]
 800c042:	e248      	b.n	800c4d6 <_dtoa_r+0xb4e>
 800c044:	46b8      	mov	r8, r7
 800c046:	4633      	mov	r3, r6
 800c048:	461e      	mov	r6, r3
 800c04a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c04e:	2a39      	cmp	r2, #57	@ 0x39
 800c050:	d106      	bne.n	800c060 <_dtoa_r+0x6d8>
 800c052:	459a      	cmp	sl, r3
 800c054:	d1f8      	bne.n	800c048 <_dtoa_r+0x6c0>
 800c056:	2230      	movs	r2, #48	@ 0x30
 800c058:	f108 0801 	add.w	r8, r8, #1
 800c05c:	f88a 2000 	strb.w	r2, [sl]
 800c060:	781a      	ldrb	r2, [r3, #0]
 800c062:	3201      	adds	r2, #1
 800c064:	701a      	strb	r2, [r3, #0]
 800c066:	e7a0      	b.n	800bfaa <_dtoa_r+0x622>
 800c068:	4b6f      	ldr	r3, [pc, #444]	@ (800c228 <_dtoa_r+0x8a0>)
 800c06a:	2200      	movs	r2, #0
 800c06c:	f7f4 faec 	bl	8000648 <__aeabi_dmul>
 800c070:	2200      	movs	r2, #0
 800c072:	2300      	movs	r3, #0
 800c074:	4604      	mov	r4, r0
 800c076:	460d      	mov	r5, r1
 800c078:	f7f4 fd4e 	bl	8000b18 <__aeabi_dcmpeq>
 800c07c:	2800      	cmp	r0, #0
 800c07e:	d09f      	beq.n	800bfc0 <_dtoa_r+0x638>
 800c080:	e7d1      	b.n	800c026 <_dtoa_r+0x69e>
 800c082:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c084:	2a00      	cmp	r2, #0
 800c086:	f000 80ea 	beq.w	800c25e <_dtoa_r+0x8d6>
 800c08a:	9a07      	ldr	r2, [sp, #28]
 800c08c:	2a01      	cmp	r2, #1
 800c08e:	f300 80cd 	bgt.w	800c22c <_dtoa_r+0x8a4>
 800c092:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800c094:	2a00      	cmp	r2, #0
 800c096:	f000 80c1 	beq.w	800c21c <_dtoa_r+0x894>
 800c09a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800c09e:	9c08      	ldr	r4, [sp, #32]
 800c0a0:	9e00      	ldr	r6, [sp, #0]
 800c0a2:	9a00      	ldr	r2, [sp, #0]
 800c0a4:	441a      	add	r2, r3
 800c0a6:	9200      	str	r2, [sp, #0]
 800c0a8:	9a06      	ldr	r2, [sp, #24]
 800c0aa:	2101      	movs	r1, #1
 800c0ac:	441a      	add	r2, r3
 800c0ae:	4648      	mov	r0, r9
 800c0b0:	9206      	str	r2, [sp, #24]
 800c0b2:	f000 fc2d 	bl	800c910 <__i2b>
 800c0b6:	4605      	mov	r5, r0
 800c0b8:	b166      	cbz	r6, 800c0d4 <_dtoa_r+0x74c>
 800c0ba:	9b06      	ldr	r3, [sp, #24]
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	dd09      	ble.n	800c0d4 <_dtoa_r+0x74c>
 800c0c0:	42b3      	cmp	r3, r6
 800c0c2:	9a00      	ldr	r2, [sp, #0]
 800c0c4:	bfa8      	it	ge
 800c0c6:	4633      	movge	r3, r6
 800c0c8:	1ad2      	subs	r2, r2, r3
 800c0ca:	9200      	str	r2, [sp, #0]
 800c0cc:	9a06      	ldr	r2, [sp, #24]
 800c0ce:	1af6      	subs	r6, r6, r3
 800c0d0:	1ad3      	subs	r3, r2, r3
 800c0d2:	9306      	str	r3, [sp, #24]
 800c0d4:	9b08      	ldr	r3, [sp, #32]
 800c0d6:	b30b      	cbz	r3, 800c11c <_dtoa_r+0x794>
 800c0d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	f000 80c6 	beq.w	800c26c <_dtoa_r+0x8e4>
 800c0e0:	2c00      	cmp	r4, #0
 800c0e2:	f000 80c0 	beq.w	800c266 <_dtoa_r+0x8de>
 800c0e6:	4629      	mov	r1, r5
 800c0e8:	4622      	mov	r2, r4
 800c0ea:	4648      	mov	r0, r9
 800c0ec:	f000 fcc8 	bl	800ca80 <__pow5mult>
 800c0f0:	9a02      	ldr	r2, [sp, #8]
 800c0f2:	4601      	mov	r1, r0
 800c0f4:	4605      	mov	r5, r0
 800c0f6:	4648      	mov	r0, r9
 800c0f8:	f000 fc20 	bl	800c93c <__multiply>
 800c0fc:	9902      	ldr	r1, [sp, #8]
 800c0fe:	4680      	mov	r8, r0
 800c100:	4648      	mov	r0, r9
 800c102:	f000 fb51 	bl	800c7a8 <_Bfree>
 800c106:	9b08      	ldr	r3, [sp, #32]
 800c108:	1b1b      	subs	r3, r3, r4
 800c10a:	9308      	str	r3, [sp, #32]
 800c10c:	f000 80b1 	beq.w	800c272 <_dtoa_r+0x8ea>
 800c110:	9a08      	ldr	r2, [sp, #32]
 800c112:	4641      	mov	r1, r8
 800c114:	4648      	mov	r0, r9
 800c116:	f000 fcb3 	bl	800ca80 <__pow5mult>
 800c11a:	9002      	str	r0, [sp, #8]
 800c11c:	2101      	movs	r1, #1
 800c11e:	4648      	mov	r0, r9
 800c120:	f000 fbf6 	bl	800c910 <__i2b>
 800c124:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c126:	4604      	mov	r4, r0
 800c128:	2b00      	cmp	r3, #0
 800c12a:	f000 81d8 	beq.w	800c4de <_dtoa_r+0xb56>
 800c12e:	461a      	mov	r2, r3
 800c130:	4601      	mov	r1, r0
 800c132:	4648      	mov	r0, r9
 800c134:	f000 fca4 	bl	800ca80 <__pow5mult>
 800c138:	9b07      	ldr	r3, [sp, #28]
 800c13a:	2b01      	cmp	r3, #1
 800c13c:	4604      	mov	r4, r0
 800c13e:	f300 809f 	bgt.w	800c280 <_dtoa_r+0x8f8>
 800c142:	9b04      	ldr	r3, [sp, #16]
 800c144:	2b00      	cmp	r3, #0
 800c146:	f040 8097 	bne.w	800c278 <_dtoa_r+0x8f0>
 800c14a:	9b05      	ldr	r3, [sp, #20]
 800c14c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c150:	2b00      	cmp	r3, #0
 800c152:	f040 8093 	bne.w	800c27c <_dtoa_r+0x8f4>
 800c156:	9b05      	ldr	r3, [sp, #20]
 800c158:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c15c:	0d1b      	lsrs	r3, r3, #20
 800c15e:	051b      	lsls	r3, r3, #20
 800c160:	b133      	cbz	r3, 800c170 <_dtoa_r+0x7e8>
 800c162:	9b00      	ldr	r3, [sp, #0]
 800c164:	3301      	adds	r3, #1
 800c166:	9300      	str	r3, [sp, #0]
 800c168:	9b06      	ldr	r3, [sp, #24]
 800c16a:	3301      	adds	r3, #1
 800c16c:	9306      	str	r3, [sp, #24]
 800c16e:	2301      	movs	r3, #1
 800c170:	9308      	str	r3, [sp, #32]
 800c172:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c174:	2b00      	cmp	r3, #0
 800c176:	f000 81b8 	beq.w	800c4ea <_dtoa_r+0xb62>
 800c17a:	6923      	ldr	r3, [r4, #16]
 800c17c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c180:	6918      	ldr	r0, [r3, #16]
 800c182:	f000 fb79 	bl	800c878 <__hi0bits>
 800c186:	f1c0 0020 	rsb	r0, r0, #32
 800c18a:	9b06      	ldr	r3, [sp, #24]
 800c18c:	4418      	add	r0, r3
 800c18e:	f010 001f 	ands.w	r0, r0, #31
 800c192:	f000 8082 	beq.w	800c29a <_dtoa_r+0x912>
 800c196:	f1c0 0320 	rsb	r3, r0, #32
 800c19a:	2b04      	cmp	r3, #4
 800c19c:	dd73      	ble.n	800c286 <_dtoa_r+0x8fe>
 800c19e:	9b00      	ldr	r3, [sp, #0]
 800c1a0:	f1c0 001c 	rsb	r0, r0, #28
 800c1a4:	4403      	add	r3, r0
 800c1a6:	9300      	str	r3, [sp, #0]
 800c1a8:	9b06      	ldr	r3, [sp, #24]
 800c1aa:	4403      	add	r3, r0
 800c1ac:	4406      	add	r6, r0
 800c1ae:	9306      	str	r3, [sp, #24]
 800c1b0:	9b00      	ldr	r3, [sp, #0]
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	dd05      	ble.n	800c1c2 <_dtoa_r+0x83a>
 800c1b6:	9902      	ldr	r1, [sp, #8]
 800c1b8:	461a      	mov	r2, r3
 800c1ba:	4648      	mov	r0, r9
 800c1bc:	f000 fcba 	bl	800cb34 <__lshift>
 800c1c0:	9002      	str	r0, [sp, #8]
 800c1c2:	9b06      	ldr	r3, [sp, #24]
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	dd05      	ble.n	800c1d4 <_dtoa_r+0x84c>
 800c1c8:	4621      	mov	r1, r4
 800c1ca:	461a      	mov	r2, r3
 800c1cc:	4648      	mov	r0, r9
 800c1ce:	f000 fcb1 	bl	800cb34 <__lshift>
 800c1d2:	4604      	mov	r4, r0
 800c1d4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d061      	beq.n	800c29e <_dtoa_r+0x916>
 800c1da:	9802      	ldr	r0, [sp, #8]
 800c1dc:	4621      	mov	r1, r4
 800c1de:	f000 fd15 	bl	800cc0c <__mcmp>
 800c1e2:	2800      	cmp	r0, #0
 800c1e4:	da5b      	bge.n	800c29e <_dtoa_r+0x916>
 800c1e6:	2300      	movs	r3, #0
 800c1e8:	9902      	ldr	r1, [sp, #8]
 800c1ea:	220a      	movs	r2, #10
 800c1ec:	4648      	mov	r0, r9
 800c1ee:	f000 fafd 	bl	800c7ec <__multadd>
 800c1f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c1f4:	9002      	str	r0, [sp, #8]
 800c1f6:	f107 38ff 	add.w	r8, r7, #4294967295
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	f000 8177 	beq.w	800c4ee <_dtoa_r+0xb66>
 800c200:	4629      	mov	r1, r5
 800c202:	2300      	movs	r3, #0
 800c204:	220a      	movs	r2, #10
 800c206:	4648      	mov	r0, r9
 800c208:	f000 faf0 	bl	800c7ec <__multadd>
 800c20c:	f1bb 0f00 	cmp.w	fp, #0
 800c210:	4605      	mov	r5, r0
 800c212:	dc6f      	bgt.n	800c2f4 <_dtoa_r+0x96c>
 800c214:	9b07      	ldr	r3, [sp, #28]
 800c216:	2b02      	cmp	r3, #2
 800c218:	dc49      	bgt.n	800c2ae <_dtoa_r+0x926>
 800c21a:	e06b      	b.n	800c2f4 <_dtoa_r+0x96c>
 800c21c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800c21e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800c222:	e73c      	b.n	800c09e <_dtoa_r+0x716>
 800c224:	3fe00000 	.word	0x3fe00000
 800c228:	40240000 	.word	0x40240000
 800c22c:	9b03      	ldr	r3, [sp, #12]
 800c22e:	1e5c      	subs	r4, r3, #1
 800c230:	9b08      	ldr	r3, [sp, #32]
 800c232:	42a3      	cmp	r3, r4
 800c234:	db09      	blt.n	800c24a <_dtoa_r+0x8c2>
 800c236:	1b1c      	subs	r4, r3, r4
 800c238:	9b03      	ldr	r3, [sp, #12]
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	f6bf af30 	bge.w	800c0a0 <_dtoa_r+0x718>
 800c240:	9b00      	ldr	r3, [sp, #0]
 800c242:	9a03      	ldr	r2, [sp, #12]
 800c244:	1a9e      	subs	r6, r3, r2
 800c246:	2300      	movs	r3, #0
 800c248:	e72b      	b.n	800c0a2 <_dtoa_r+0x71a>
 800c24a:	9b08      	ldr	r3, [sp, #32]
 800c24c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800c24e:	9408      	str	r4, [sp, #32]
 800c250:	1ae3      	subs	r3, r4, r3
 800c252:	441a      	add	r2, r3
 800c254:	9e00      	ldr	r6, [sp, #0]
 800c256:	9b03      	ldr	r3, [sp, #12]
 800c258:	920d      	str	r2, [sp, #52]	@ 0x34
 800c25a:	2400      	movs	r4, #0
 800c25c:	e721      	b.n	800c0a2 <_dtoa_r+0x71a>
 800c25e:	9c08      	ldr	r4, [sp, #32]
 800c260:	9e00      	ldr	r6, [sp, #0]
 800c262:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800c264:	e728      	b.n	800c0b8 <_dtoa_r+0x730>
 800c266:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800c26a:	e751      	b.n	800c110 <_dtoa_r+0x788>
 800c26c:	9a08      	ldr	r2, [sp, #32]
 800c26e:	9902      	ldr	r1, [sp, #8]
 800c270:	e750      	b.n	800c114 <_dtoa_r+0x78c>
 800c272:	f8cd 8008 	str.w	r8, [sp, #8]
 800c276:	e751      	b.n	800c11c <_dtoa_r+0x794>
 800c278:	2300      	movs	r3, #0
 800c27a:	e779      	b.n	800c170 <_dtoa_r+0x7e8>
 800c27c:	9b04      	ldr	r3, [sp, #16]
 800c27e:	e777      	b.n	800c170 <_dtoa_r+0x7e8>
 800c280:	2300      	movs	r3, #0
 800c282:	9308      	str	r3, [sp, #32]
 800c284:	e779      	b.n	800c17a <_dtoa_r+0x7f2>
 800c286:	d093      	beq.n	800c1b0 <_dtoa_r+0x828>
 800c288:	9a00      	ldr	r2, [sp, #0]
 800c28a:	331c      	adds	r3, #28
 800c28c:	441a      	add	r2, r3
 800c28e:	9200      	str	r2, [sp, #0]
 800c290:	9a06      	ldr	r2, [sp, #24]
 800c292:	441a      	add	r2, r3
 800c294:	441e      	add	r6, r3
 800c296:	9206      	str	r2, [sp, #24]
 800c298:	e78a      	b.n	800c1b0 <_dtoa_r+0x828>
 800c29a:	4603      	mov	r3, r0
 800c29c:	e7f4      	b.n	800c288 <_dtoa_r+0x900>
 800c29e:	9b03      	ldr	r3, [sp, #12]
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	46b8      	mov	r8, r7
 800c2a4:	dc20      	bgt.n	800c2e8 <_dtoa_r+0x960>
 800c2a6:	469b      	mov	fp, r3
 800c2a8:	9b07      	ldr	r3, [sp, #28]
 800c2aa:	2b02      	cmp	r3, #2
 800c2ac:	dd1e      	ble.n	800c2ec <_dtoa_r+0x964>
 800c2ae:	f1bb 0f00 	cmp.w	fp, #0
 800c2b2:	f47f adb1 	bne.w	800be18 <_dtoa_r+0x490>
 800c2b6:	4621      	mov	r1, r4
 800c2b8:	465b      	mov	r3, fp
 800c2ba:	2205      	movs	r2, #5
 800c2bc:	4648      	mov	r0, r9
 800c2be:	f000 fa95 	bl	800c7ec <__multadd>
 800c2c2:	4601      	mov	r1, r0
 800c2c4:	4604      	mov	r4, r0
 800c2c6:	9802      	ldr	r0, [sp, #8]
 800c2c8:	f000 fca0 	bl	800cc0c <__mcmp>
 800c2cc:	2800      	cmp	r0, #0
 800c2ce:	f77f ada3 	ble.w	800be18 <_dtoa_r+0x490>
 800c2d2:	4656      	mov	r6, sl
 800c2d4:	2331      	movs	r3, #49	@ 0x31
 800c2d6:	f806 3b01 	strb.w	r3, [r6], #1
 800c2da:	f108 0801 	add.w	r8, r8, #1
 800c2de:	e59f      	b.n	800be20 <_dtoa_r+0x498>
 800c2e0:	9c03      	ldr	r4, [sp, #12]
 800c2e2:	46b8      	mov	r8, r7
 800c2e4:	4625      	mov	r5, r4
 800c2e6:	e7f4      	b.n	800c2d2 <_dtoa_r+0x94a>
 800c2e8:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800c2ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	f000 8101 	beq.w	800c4f6 <_dtoa_r+0xb6e>
 800c2f4:	2e00      	cmp	r6, #0
 800c2f6:	dd05      	ble.n	800c304 <_dtoa_r+0x97c>
 800c2f8:	4629      	mov	r1, r5
 800c2fa:	4632      	mov	r2, r6
 800c2fc:	4648      	mov	r0, r9
 800c2fe:	f000 fc19 	bl	800cb34 <__lshift>
 800c302:	4605      	mov	r5, r0
 800c304:	9b08      	ldr	r3, [sp, #32]
 800c306:	2b00      	cmp	r3, #0
 800c308:	d05c      	beq.n	800c3c4 <_dtoa_r+0xa3c>
 800c30a:	6869      	ldr	r1, [r5, #4]
 800c30c:	4648      	mov	r0, r9
 800c30e:	f000 fa0b 	bl	800c728 <_Balloc>
 800c312:	4606      	mov	r6, r0
 800c314:	b928      	cbnz	r0, 800c322 <_dtoa_r+0x99a>
 800c316:	4b82      	ldr	r3, [pc, #520]	@ (800c520 <_dtoa_r+0xb98>)
 800c318:	4602      	mov	r2, r0
 800c31a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800c31e:	f7ff bb4a 	b.w	800b9b6 <_dtoa_r+0x2e>
 800c322:	692a      	ldr	r2, [r5, #16]
 800c324:	3202      	adds	r2, #2
 800c326:	0092      	lsls	r2, r2, #2
 800c328:	f105 010c 	add.w	r1, r5, #12
 800c32c:	300c      	adds	r0, #12
 800c32e:	f000 fff7 	bl	800d320 <memcpy>
 800c332:	2201      	movs	r2, #1
 800c334:	4631      	mov	r1, r6
 800c336:	4648      	mov	r0, r9
 800c338:	f000 fbfc 	bl	800cb34 <__lshift>
 800c33c:	f10a 0301 	add.w	r3, sl, #1
 800c340:	9300      	str	r3, [sp, #0]
 800c342:	eb0a 030b 	add.w	r3, sl, fp
 800c346:	9308      	str	r3, [sp, #32]
 800c348:	9b04      	ldr	r3, [sp, #16]
 800c34a:	f003 0301 	and.w	r3, r3, #1
 800c34e:	462f      	mov	r7, r5
 800c350:	9306      	str	r3, [sp, #24]
 800c352:	4605      	mov	r5, r0
 800c354:	9b00      	ldr	r3, [sp, #0]
 800c356:	9802      	ldr	r0, [sp, #8]
 800c358:	4621      	mov	r1, r4
 800c35a:	f103 3bff 	add.w	fp, r3, #4294967295
 800c35e:	f7ff fa8a 	bl	800b876 <quorem>
 800c362:	4603      	mov	r3, r0
 800c364:	3330      	adds	r3, #48	@ 0x30
 800c366:	9003      	str	r0, [sp, #12]
 800c368:	4639      	mov	r1, r7
 800c36a:	9802      	ldr	r0, [sp, #8]
 800c36c:	9309      	str	r3, [sp, #36]	@ 0x24
 800c36e:	f000 fc4d 	bl	800cc0c <__mcmp>
 800c372:	462a      	mov	r2, r5
 800c374:	9004      	str	r0, [sp, #16]
 800c376:	4621      	mov	r1, r4
 800c378:	4648      	mov	r0, r9
 800c37a:	f000 fc63 	bl	800cc44 <__mdiff>
 800c37e:	68c2      	ldr	r2, [r0, #12]
 800c380:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c382:	4606      	mov	r6, r0
 800c384:	bb02      	cbnz	r2, 800c3c8 <_dtoa_r+0xa40>
 800c386:	4601      	mov	r1, r0
 800c388:	9802      	ldr	r0, [sp, #8]
 800c38a:	f000 fc3f 	bl	800cc0c <__mcmp>
 800c38e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c390:	4602      	mov	r2, r0
 800c392:	4631      	mov	r1, r6
 800c394:	4648      	mov	r0, r9
 800c396:	920c      	str	r2, [sp, #48]	@ 0x30
 800c398:	9309      	str	r3, [sp, #36]	@ 0x24
 800c39a:	f000 fa05 	bl	800c7a8 <_Bfree>
 800c39e:	9b07      	ldr	r3, [sp, #28]
 800c3a0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800c3a2:	9e00      	ldr	r6, [sp, #0]
 800c3a4:	ea42 0103 	orr.w	r1, r2, r3
 800c3a8:	9b06      	ldr	r3, [sp, #24]
 800c3aa:	4319      	orrs	r1, r3
 800c3ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c3ae:	d10d      	bne.n	800c3cc <_dtoa_r+0xa44>
 800c3b0:	2b39      	cmp	r3, #57	@ 0x39
 800c3b2:	d027      	beq.n	800c404 <_dtoa_r+0xa7c>
 800c3b4:	9a04      	ldr	r2, [sp, #16]
 800c3b6:	2a00      	cmp	r2, #0
 800c3b8:	dd01      	ble.n	800c3be <_dtoa_r+0xa36>
 800c3ba:	9b03      	ldr	r3, [sp, #12]
 800c3bc:	3331      	adds	r3, #49	@ 0x31
 800c3be:	f88b 3000 	strb.w	r3, [fp]
 800c3c2:	e52e      	b.n	800be22 <_dtoa_r+0x49a>
 800c3c4:	4628      	mov	r0, r5
 800c3c6:	e7b9      	b.n	800c33c <_dtoa_r+0x9b4>
 800c3c8:	2201      	movs	r2, #1
 800c3ca:	e7e2      	b.n	800c392 <_dtoa_r+0xa0a>
 800c3cc:	9904      	ldr	r1, [sp, #16]
 800c3ce:	2900      	cmp	r1, #0
 800c3d0:	db04      	blt.n	800c3dc <_dtoa_r+0xa54>
 800c3d2:	9807      	ldr	r0, [sp, #28]
 800c3d4:	4301      	orrs	r1, r0
 800c3d6:	9806      	ldr	r0, [sp, #24]
 800c3d8:	4301      	orrs	r1, r0
 800c3da:	d120      	bne.n	800c41e <_dtoa_r+0xa96>
 800c3dc:	2a00      	cmp	r2, #0
 800c3de:	ddee      	ble.n	800c3be <_dtoa_r+0xa36>
 800c3e0:	9902      	ldr	r1, [sp, #8]
 800c3e2:	9300      	str	r3, [sp, #0]
 800c3e4:	2201      	movs	r2, #1
 800c3e6:	4648      	mov	r0, r9
 800c3e8:	f000 fba4 	bl	800cb34 <__lshift>
 800c3ec:	4621      	mov	r1, r4
 800c3ee:	9002      	str	r0, [sp, #8]
 800c3f0:	f000 fc0c 	bl	800cc0c <__mcmp>
 800c3f4:	2800      	cmp	r0, #0
 800c3f6:	9b00      	ldr	r3, [sp, #0]
 800c3f8:	dc02      	bgt.n	800c400 <_dtoa_r+0xa78>
 800c3fa:	d1e0      	bne.n	800c3be <_dtoa_r+0xa36>
 800c3fc:	07da      	lsls	r2, r3, #31
 800c3fe:	d5de      	bpl.n	800c3be <_dtoa_r+0xa36>
 800c400:	2b39      	cmp	r3, #57	@ 0x39
 800c402:	d1da      	bne.n	800c3ba <_dtoa_r+0xa32>
 800c404:	2339      	movs	r3, #57	@ 0x39
 800c406:	f88b 3000 	strb.w	r3, [fp]
 800c40a:	4633      	mov	r3, r6
 800c40c:	461e      	mov	r6, r3
 800c40e:	3b01      	subs	r3, #1
 800c410:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800c414:	2a39      	cmp	r2, #57	@ 0x39
 800c416:	d04e      	beq.n	800c4b6 <_dtoa_r+0xb2e>
 800c418:	3201      	adds	r2, #1
 800c41a:	701a      	strb	r2, [r3, #0]
 800c41c:	e501      	b.n	800be22 <_dtoa_r+0x49a>
 800c41e:	2a00      	cmp	r2, #0
 800c420:	dd03      	ble.n	800c42a <_dtoa_r+0xaa2>
 800c422:	2b39      	cmp	r3, #57	@ 0x39
 800c424:	d0ee      	beq.n	800c404 <_dtoa_r+0xa7c>
 800c426:	3301      	adds	r3, #1
 800c428:	e7c9      	b.n	800c3be <_dtoa_r+0xa36>
 800c42a:	9a00      	ldr	r2, [sp, #0]
 800c42c:	9908      	ldr	r1, [sp, #32]
 800c42e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800c432:	428a      	cmp	r2, r1
 800c434:	d028      	beq.n	800c488 <_dtoa_r+0xb00>
 800c436:	9902      	ldr	r1, [sp, #8]
 800c438:	2300      	movs	r3, #0
 800c43a:	220a      	movs	r2, #10
 800c43c:	4648      	mov	r0, r9
 800c43e:	f000 f9d5 	bl	800c7ec <__multadd>
 800c442:	42af      	cmp	r7, r5
 800c444:	9002      	str	r0, [sp, #8]
 800c446:	f04f 0300 	mov.w	r3, #0
 800c44a:	f04f 020a 	mov.w	r2, #10
 800c44e:	4639      	mov	r1, r7
 800c450:	4648      	mov	r0, r9
 800c452:	d107      	bne.n	800c464 <_dtoa_r+0xadc>
 800c454:	f000 f9ca 	bl	800c7ec <__multadd>
 800c458:	4607      	mov	r7, r0
 800c45a:	4605      	mov	r5, r0
 800c45c:	9b00      	ldr	r3, [sp, #0]
 800c45e:	3301      	adds	r3, #1
 800c460:	9300      	str	r3, [sp, #0]
 800c462:	e777      	b.n	800c354 <_dtoa_r+0x9cc>
 800c464:	f000 f9c2 	bl	800c7ec <__multadd>
 800c468:	4629      	mov	r1, r5
 800c46a:	4607      	mov	r7, r0
 800c46c:	2300      	movs	r3, #0
 800c46e:	220a      	movs	r2, #10
 800c470:	4648      	mov	r0, r9
 800c472:	f000 f9bb 	bl	800c7ec <__multadd>
 800c476:	4605      	mov	r5, r0
 800c478:	e7f0      	b.n	800c45c <_dtoa_r+0xad4>
 800c47a:	f1bb 0f00 	cmp.w	fp, #0
 800c47e:	bfcc      	ite	gt
 800c480:	465e      	movgt	r6, fp
 800c482:	2601      	movle	r6, #1
 800c484:	4456      	add	r6, sl
 800c486:	2700      	movs	r7, #0
 800c488:	9902      	ldr	r1, [sp, #8]
 800c48a:	9300      	str	r3, [sp, #0]
 800c48c:	2201      	movs	r2, #1
 800c48e:	4648      	mov	r0, r9
 800c490:	f000 fb50 	bl	800cb34 <__lshift>
 800c494:	4621      	mov	r1, r4
 800c496:	9002      	str	r0, [sp, #8]
 800c498:	f000 fbb8 	bl	800cc0c <__mcmp>
 800c49c:	2800      	cmp	r0, #0
 800c49e:	dcb4      	bgt.n	800c40a <_dtoa_r+0xa82>
 800c4a0:	d102      	bne.n	800c4a8 <_dtoa_r+0xb20>
 800c4a2:	9b00      	ldr	r3, [sp, #0]
 800c4a4:	07db      	lsls	r3, r3, #31
 800c4a6:	d4b0      	bmi.n	800c40a <_dtoa_r+0xa82>
 800c4a8:	4633      	mov	r3, r6
 800c4aa:	461e      	mov	r6, r3
 800c4ac:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c4b0:	2a30      	cmp	r2, #48	@ 0x30
 800c4b2:	d0fa      	beq.n	800c4aa <_dtoa_r+0xb22>
 800c4b4:	e4b5      	b.n	800be22 <_dtoa_r+0x49a>
 800c4b6:	459a      	cmp	sl, r3
 800c4b8:	d1a8      	bne.n	800c40c <_dtoa_r+0xa84>
 800c4ba:	2331      	movs	r3, #49	@ 0x31
 800c4bc:	f108 0801 	add.w	r8, r8, #1
 800c4c0:	f88a 3000 	strb.w	r3, [sl]
 800c4c4:	e4ad      	b.n	800be22 <_dtoa_r+0x49a>
 800c4c6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c4c8:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800c524 <_dtoa_r+0xb9c>
 800c4cc:	b11b      	cbz	r3, 800c4d6 <_dtoa_r+0xb4e>
 800c4ce:	f10a 0308 	add.w	r3, sl, #8
 800c4d2:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800c4d4:	6013      	str	r3, [r2, #0]
 800c4d6:	4650      	mov	r0, sl
 800c4d8:	b017      	add	sp, #92	@ 0x5c
 800c4da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c4de:	9b07      	ldr	r3, [sp, #28]
 800c4e0:	2b01      	cmp	r3, #1
 800c4e2:	f77f ae2e 	ble.w	800c142 <_dtoa_r+0x7ba>
 800c4e6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c4e8:	9308      	str	r3, [sp, #32]
 800c4ea:	2001      	movs	r0, #1
 800c4ec:	e64d      	b.n	800c18a <_dtoa_r+0x802>
 800c4ee:	f1bb 0f00 	cmp.w	fp, #0
 800c4f2:	f77f aed9 	ble.w	800c2a8 <_dtoa_r+0x920>
 800c4f6:	4656      	mov	r6, sl
 800c4f8:	9802      	ldr	r0, [sp, #8]
 800c4fa:	4621      	mov	r1, r4
 800c4fc:	f7ff f9bb 	bl	800b876 <quorem>
 800c500:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800c504:	f806 3b01 	strb.w	r3, [r6], #1
 800c508:	eba6 020a 	sub.w	r2, r6, sl
 800c50c:	4593      	cmp	fp, r2
 800c50e:	ddb4      	ble.n	800c47a <_dtoa_r+0xaf2>
 800c510:	9902      	ldr	r1, [sp, #8]
 800c512:	2300      	movs	r3, #0
 800c514:	220a      	movs	r2, #10
 800c516:	4648      	mov	r0, r9
 800c518:	f000 f968 	bl	800c7ec <__multadd>
 800c51c:	9002      	str	r0, [sp, #8]
 800c51e:	e7eb      	b.n	800c4f8 <_dtoa_r+0xb70>
 800c520:	0800d6a4 	.word	0x0800d6a4
 800c524:	0800d628 	.word	0x0800d628

0800c528 <_free_r>:
 800c528:	b538      	push	{r3, r4, r5, lr}
 800c52a:	4605      	mov	r5, r0
 800c52c:	2900      	cmp	r1, #0
 800c52e:	d041      	beq.n	800c5b4 <_free_r+0x8c>
 800c530:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c534:	1f0c      	subs	r4, r1, #4
 800c536:	2b00      	cmp	r3, #0
 800c538:	bfb8      	it	lt
 800c53a:	18e4      	addlt	r4, r4, r3
 800c53c:	f000 f8e8 	bl	800c710 <__malloc_lock>
 800c540:	4a1d      	ldr	r2, [pc, #116]	@ (800c5b8 <_free_r+0x90>)
 800c542:	6813      	ldr	r3, [r2, #0]
 800c544:	b933      	cbnz	r3, 800c554 <_free_r+0x2c>
 800c546:	6063      	str	r3, [r4, #4]
 800c548:	6014      	str	r4, [r2, #0]
 800c54a:	4628      	mov	r0, r5
 800c54c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c550:	f000 b8e4 	b.w	800c71c <__malloc_unlock>
 800c554:	42a3      	cmp	r3, r4
 800c556:	d908      	bls.n	800c56a <_free_r+0x42>
 800c558:	6820      	ldr	r0, [r4, #0]
 800c55a:	1821      	adds	r1, r4, r0
 800c55c:	428b      	cmp	r3, r1
 800c55e:	bf01      	itttt	eq
 800c560:	6819      	ldreq	r1, [r3, #0]
 800c562:	685b      	ldreq	r3, [r3, #4]
 800c564:	1809      	addeq	r1, r1, r0
 800c566:	6021      	streq	r1, [r4, #0]
 800c568:	e7ed      	b.n	800c546 <_free_r+0x1e>
 800c56a:	461a      	mov	r2, r3
 800c56c:	685b      	ldr	r3, [r3, #4]
 800c56e:	b10b      	cbz	r3, 800c574 <_free_r+0x4c>
 800c570:	42a3      	cmp	r3, r4
 800c572:	d9fa      	bls.n	800c56a <_free_r+0x42>
 800c574:	6811      	ldr	r1, [r2, #0]
 800c576:	1850      	adds	r0, r2, r1
 800c578:	42a0      	cmp	r0, r4
 800c57a:	d10b      	bne.n	800c594 <_free_r+0x6c>
 800c57c:	6820      	ldr	r0, [r4, #0]
 800c57e:	4401      	add	r1, r0
 800c580:	1850      	adds	r0, r2, r1
 800c582:	4283      	cmp	r3, r0
 800c584:	6011      	str	r1, [r2, #0]
 800c586:	d1e0      	bne.n	800c54a <_free_r+0x22>
 800c588:	6818      	ldr	r0, [r3, #0]
 800c58a:	685b      	ldr	r3, [r3, #4]
 800c58c:	6053      	str	r3, [r2, #4]
 800c58e:	4408      	add	r0, r1
 800c590:	6010      	str	r0, [r2, #0]
 800c592:	e7da      	b.n	800c54a <_free_r+0x22>
 800c594:	d902      	bls.n	800c59c <_free_r+0x74>
 800c596:	230c      	movs	r3, #12
 800c598:	602b      	str	r3, [r5, #0]
 800c59a:	e7d6      	b.n	800c54a <_free_r+0x22>
 800c59c:	6820      	ldr	r0, [r4, #0]
 800c59e:	1821      	adds	r1, r4, r0
 800c5a0:	428b      	cmp	r3, r1
 800c5a2:	bf04      	itt	eq
 800c5a4:	6819      	ldreq	r1, [r3, #0]
 800c5a6:	685b      	ldreq	r3, [r3, #4]
 800c5a8:	6063      	str	r3, [r4, #4]
 800c5aa:	bf04      	itt	eq
 800c5ac:	1809      	addeq	r1, r1, r0
 800c5ae:	6021      	streq	r1, [r4, #0]
 800c5b0:	6054      	str	r4, [r2, #4]
 800c5b2:	e7ca      	b.n	800c54a <_free_r+0x22>
 800c5b4:	bd38      	pop	{r3, r4, r5, pc}
 800c5b6:	bf00      	nop
 800c5b8:	200013d0 	.word	0x200013d0

0800c5bc <malloc>:
 800c5bc:	4b02      	ldr	r3, [pc, #8]	@ (800c5c8 <malloc+0xc>)
 800c5be:	4601      	mov	r1, r0
 800c5c0:	6818      	ldr	r0, [r3, #0]
 800c5c2:	f000 b825 	b.w	800c610 <_malloc_r>
 800c5c6:	bf00      	nop
 800c5c8:	200000e8 	.word	0x200000e8

0800c5cc <sbrk_aligned>:
 800c5cc:	b570      	push	{r4, r5, r6, lr}
 800c5ce:	4e0f      	ldr	r6, [pc, #60]	@ (800c60c <sbrk_aligned+0x40>)
 800c5d0:	460c      	mov	r4, r1
 800c5d2:	6831      	ldr	r1, [r6, #0]
 800c5d4:	4605      	mov	r5, r0
 800c5d6:	b911      	cbnz	r1, 800c5de <sbrk_aligned+0x12>
 800c5d8:	f000 fe92 	bl	800d300 <_sbrk_r>
 800c5dc:	6030      	str	r0, [r6, #0]
 800c5de:	4621      	mov	r1, r4
 800c5e0:	4628      	mov	r0, r5
 800c5e2:	f000 fe8d 	bl	800d300 <_sbrk_r>
 800c5e6:	1c43      	adds	r3, r0, #1
 800c5e8:	d103      	bne.n	800c5f2 <sbrk_aligned+0x26>
 800c5ea:	f04f 34ff 	mov.w	r4, #4294967295
 800c5ee:	4620      	mov	r0, r4
 800c5f0:	bd70      	pop	{r4, r5, r6, pc}
 800c5f2:	1cc4      	adds	r4, r0, #3
 800c5f4:	f024 0403 	bic.w	r4, r4, #3
 800c5f8:	42a0      	cmp	r0, r4
 800c5fa:	d0f8      	beq.n	800c5ee <sbrk_aligned+0x22>
 800c5fc:	1a21      	subs	r1, r4, r0
 800c5fe:	4628      	mov	r0, r5
 800c600:	f000 fe7e 	bl	800d300 <_sbrk_r>
 800c604:	3001      	adds	r0, #1
 800c606:	d1f2      	bne.n	800c5ee <sbrk_aligned+0x22>
 800c608:	e7ef      	b.n	800c5ea <sbrk_aligned+0x1e>
 800c60a:	bf00      	nop
 800c60c:	200013cc 	.word	0x200013cc

0800c610 <_malloc_r>:
 800c610:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c614:	1ccd      	adds	r5, r1, #3
 800c616:	f025 0503 	bic.w	r5, r5, #3
 800c61a:	3508      	adds	r5, #8
 800c61c:	2d0c      	cmp	r5, #12
 800c61e:	bf38      	it	cc
 800c620:	250c      	movcc	r5, #12
 800c622:	2d00      	cmp	r5, #0
 800c624:	4606      	mov	r6, r0
 800c626:	db01      	blt.n	800c62c <_malloc_r+0x1c>
 800c628:	42a9      	cmp	r1, r5
 800c62a:	d904      	bls.n	800c636 <_malloc_r+0x26>
 800c62c:	230c      	movs	r3, #12
 800c62e:	6033      	str	r3, [r6, #0]
 800c630:	2000      	movs	r0, #0
 800c632:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c636:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c70c <_malloc_r+0xfc>
 800c63a:	f000 f869 	bl	800c710 <__malloc_lock>
 800c63e:	f8d8 3000 	ldr.w	r3, [r8]
 800c642:	461c      	mov	r4, r3
 800c644:	bb44      	cbnz	r4, 800c698 <_malloc_r+0x88>
 800c646:	4629      	mov	r1, r5
 800c648:	4630      	mov	r0, r6
 800c64a:	f7ff ffbf 	bl	800c5cc <sbrk_aligned>
 800c64e:	1c43      	adds	r3, r0, #1
 800c650:	4604      	mov	r4, r0
 800c652:	d158      	bne.n	800c706 <_malloc_r+0xf6>
 800c654:	f8d8 4000 	ldr.w	r4, [r8]
 800c658:	4627      	mov	r7, r4
 800c65a:	2f00      	cmp	r7, #0
 800c65c:	d143      	bne.n	800c6e6 <_malloc_r+0xd6>
 800c65e:	2c00      	cmp	r4, #0
 800c660:	d04b      	beq.n	800c6fa <_malloc_r+0xea>
 800c662:	6823      	ldr	r3, [r4, #0]
 800c664:	4639      	mov	r1, r7
 800c666:	4630      	mov	r0, r6
 800c668:	eb04 0903 	add.w	r9, r4, r3
 800c66c:	f000 fe48 	bl	800d300 <_sbrk_r>
 800c670:	4581      	cmp	r9, r0
 800c672:	d142      	bne.n	800c6fa <_malloc_r+0xea>
 800c674:	6821      	ldr	r1, [r4, #0]
 800c676:	1a6d      	subs	r5, r5, r1
 800c678:	4629      	mov	r1, r5
 800c67a:	4630      	mov	r0, r6
 800c67c:	f7ff ffa6 	bl	800c5cc <sbrk_aligned>
 800c680:	3001      	adds	r0, #1
 800c682:	d03a      	beq.n	800c6fa <_malloc_r+0xea>
 800c684:	6823      	ldr	r3, [r4, #0]
 800c686:	442b      	add	r3, r5
 800c688:	6023      	str	r3, [r4, #0]
 800c68a:	f8d8 3000 	ldr.w	r3, [r8]
 800c68e:	685a      	ldr	r2, [r3, #4]
 800c690:	bb62      	cbnz	r2, 800c6ec <_malloc_r+0xdc>
 800c692:	f8c8 7000 	str.w	r7, [r8]
 800c696:	e00f      	b.n	800c6b8 <_malloc_r+0xa8>
 800c698:	6822      	ldr	r2, [r4, #0]
 800c69a:	1b52      	subs	r2, r2, r5
 800c69c:	d420      	bmi.n	800c6e0 <_malloc_r+0xd0>
 800c69e:	2a0b      	cmp	r2, #11
 800c6a0:	d917      	bls.n	800c6d2 <_malloc_r+0xc2>
 800c6a2:	1961      	adds	r1, r4, r5
 800c6a4:	42a3      	cmp	r3, r4
 800c6a6:	6025      	str	r5, [r4, #0]
 800c6a8:	bf18      	it	ne
 800c6aa:	6059      	strne	r1, [r3, #4]
 800c6ac:	6863      	ldr	r3, [r4, #4]
 800c6ae:	bf08      	it	eq
 800c6b0:	f8c8 1000 	streq.w	r1, [r8]
 800c6b4:	5162      	str	r2, [r4, r5]
 800c6b6:	604b      	str	r3, [r1, #4]
 800c6b8:	4630      	mov	r0, r6
 800c6ba:	f000 f82f 	bl	800c71c <__malloc_unlock>
 800c6be:	f104 000b 	add.w	r0, r4, #11
 800c6c2:	1d23      	adds	r3, r4, #4
 800c6c4:	f020 0007 	bic.w	r0, r0, #7
 800c6c8:	1ac2      	subs	r2, r0, r3
 800c6ca:	bf1c      	itt	ne
 800c6cc:	1a1b      	subne	r3, r3, r0
 800c6ce:	50a3      	strne	r3, [r4, r2]
 800c6d0:	e7af      	b.n	800c632 <_malloc_r+0x22>
 800c6d2:	6862      	ldr	r2, [r4, #4]
 800c6d4:	42a3      	cmp	r3, r4
 800c6d6:	bf0c      	ite	eq
 800c6d8:	f8c8 2000 	streq.w	r2, [r8]
 800c6dc:	605a      	strne	r2, [r3, #4]
 800c6de:	e7eb      	b.n	800c6b8 <_malloc_r+0xa8>
 800c6e0:	4623      	mov	r3, r4
 800c6e2:	6864      	ldr	r4, [r4, #4]
 800c6e4:	e7ae      	b.n	800c644 <_malloc_r+0x34>
 800c6e6:	463c      	mov	r4, r7
 800c6e8:	687f      	ldr	r7, [r7, #4]
 800c6ea:	e7b6      	b.n	800c65a <_malloc_r+0x4a>
 800c6ec:	461a      	mov	r2, r3
 800c6ee:	685b      	ldr	r3, [r3, #4]
 800c6f0:	42a3      	cmp	r3, r4
 800c6f2:	d1fb      	bne.n	800c6ec <_malloc_r+0xdc>
 800c6f4:	2300      	movs	r3, #0
 800c6f6:	6053      	str	r3, [r2, #4]
 800c6f8:	e7de      	b.n	800c6b8 <_malloc_r+0xa8>
 800c6fa:	230c      	movs	r3, #12
 800c6fc:	6033      	str	r3, [r6, #0]
 800c6fe:	4630      	mov	r0, r6
 800c700:	f000 f80c 	bl	800c71c <__malloc_unlock>
 800c704:	e794      	b.n	800c630 <_malloc_r+0x20>
 800c706:	6005      	str	r5, [r0, #0]
 800c708:	e7d6      	b.n	800c6b8 <_malloc_r+0xa8>
 800c70a:	bf00      	nop
 800c70c:	200013d0 	.word	0x200013d0

0800c710 <__malloc_lock>:
 800c710:	4801      	ldr	r0, [pc, #4]	@ (800c718 <__malloc_lock+0x8>)
 800c712:	f7ff b8ae 	b.w	800b872 <__retarget_lock_acquire_recursive>
 800c716:	bf00      	nop
 800c718:	200013c8 	.word	0x200013c8

0800c71c <__malloc_unlock>:
 800c71c:	4801      	ldr	r0, [pc, #4]	@ (800c724 <__malloc_unlock+0x8>)
 800c71e:	f7ff b8a9 	b.w	800b874 <__retarget_lock_release_recursive>
 800c722:	bf00      	nop
 800c724:	200013c8 	.word	0x200013c8

0800c728 <_Balloc>:
 800c728:	b570      	push	{r4, r5, r6, lr}
 800c72a:	69c6      	ldr	r6, [r0, #28]
 800c72c:	4604      	mov	r4, r0
 800c72e:	460d      	mov	r5, r1
 800c730:	b976      	cbnz	r6, 800c750 <_Balloc+0x28>
 800c732:	2010      	movs	r0, #16
 800c734:	f7ff ff42 	bl	800c5bc <malloc>
 800c738:	4602      	mov	r2, r0
 800c73a:	61e0      	str	r0, [r4, #28]
 800c73c:	b920      	cbnz	r0, 800c748 <_Balloc+0x20>
 800c73e:	4b18      	ldr	r3, [pc, #96]	@ (800c7a0 <_Balloc+0x78>)
 800c740:	4818      	ldr	r0, [pc, #96]	@ (800c7a4 <_Balloc+0x7c>)
 800c742:	216b      	movs	r1, #107	@ 0x6b
 800c744:	f000 fdfa 	bl	800d33c <__assert_func>
 800c748:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c74c:	6006      	str	r6, [r0, #0]
 800c74e:	60c6      	str	r6, [r0, #12]
 800c750:	69e6      	ldr	r6, [r4, #28]
 800c752:	68f3      	ldr	r3, [r6, #12]
 800c754:	b183      	cbz	r3, 800c778 <_Balloc+0x50>
 800c756:	69e3      	ldr	r3, [r4, #28]
 800c758:	68db      	ldr	r3, [r3, #12]
 800c75a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c75e:	b9b8      	cbnz	r0, 800c790 <_Balloc+0x68>
 800c760:	2101      	movs	r1, #1
 800c762:	fa01 f605 	lsl.w	r6, r1, r5
 800c766:	1d72      	adds	r2, r6, #5
 800c768:	0092      	lsls	r2, r2, #2
 800c76a:	4620      	mov	r0, r4
 800c76c:	f000 fe04 	bl	800d378 <_calloc_r>
 800c770:	b160      	cbz	r0, 800c78c <_Balloc+0x64>
 800c772:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c776:	e00e      	b.n	800c796 <_Balloc+0x6e>
 800c778:	2221      	movs	r2, #33	@ 0x21
 800c77a:	2104      	movs	r1, #4
 800c77c:	4620      	mov	r0, r4
 800c77e:	f000 fdfb 	bl	800d378 <_calloc_r>
 800c782:	69e3      	ldr	r3, [r4, #28]
 800c784:	60f0      	str	r0, [r6, #12]
 800c786:	68db      	ldr	r3, [r3, #12]
 800c788:	2b00      	cmp	r3, #0
 800c78a:	d1e4      	bne.n	800c756 <_Balloc+0x2e>
 800c78c:	2000      	movs	r0, #0
 800c78e:	bd70      	pop	{r4, r5, r6, pc}
 800c790:	6802      	ldr	r2, [r0, #0]
 800c792:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c796:	2300      	movs	r3, #0
 800c798:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c79c:	e7f7      	b.n	800c78e <_Balloc+0x66>
 800c79e:	bf00      	nop
 800c7a0:	0800d635 	.word	0x0800d635
 800c7a4:	0800d6b5 	.word	0x0800d6b5

0800c7a8 <_Bfree>:
 800c7a8:	b570      	push	{r4, r5, r6, lr}
 800c7aa:	69c6      	ldr	r6, [r0, #28]
 800c7ac:	4605      	mov	r5, r0
 800c7ae:	460c      	mov	r4, r1
 800c7b0:	b976      	cbnz	r6, 800c7d0 <_Bfree+0x28>
 800c7b2:	2010      	movs	r0, #16
 800c7b4:	f7ff ff02 	bl	800c5bc <malloc>
 800c7b8:	4602      	mov	r2, r0
 800c7ba:	61e8      	str	r0, [r5, #28]
 800c7bc:	b920      	cbnz	r0, 800c7c8 <_Bfree+0x20>
 800c7be:	4b09      	ldr	r3, [pc, #36]	@ (800c7e4 <_Bfree+0x3c>)
 800c7c0:	4809      	ldr	r0, [pc, #36]	@ (800c7e8 <_Bfree+0x40>)
 800c7c2:	218f      	movs	r1, #143	@ 0x8f
 800c7c4:	f000 fdba 	bl	800d33c <__assert_func>
 800c7c8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c7cc:	6006      	str	r6, [r0, #0]
 800c7ce:	60c6      	str	r6, [r0, #12]
 800c7d0:	b13c      	cbz	r4, 800c7e2 <_Bfree+0x3a>
 800c7d2:	69eb      	ldr	r3, [r5, #28]
 800c7d4:	6862      	ldr	r2, [r4, #4]
 800c7d6:	68db      	ldr	r3, [r3, #12]
 800c7d8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c7dc:	6021      	str	r1, [r4, #0]
 800c7de:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c7e2:	bd70      	pop	{r4, r5, r6, pc}
 800c7e4:	0800d635 	.word	0x0800d635
 800c7e8:	0800d6b5 	.word	0x0800d6b5

0800c7ec <__multadd>:
 800c7ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c7f0:	690d      	ldr	r5, [r1, #16]
 800c7f2:	4607      	mov	r7, r0
 800c7f4:	460c      	mov	r4, r1
 800c7f6:	461e      	mov	r6, r3
 800c7f8:	f101 0c14 	add.w	ip, r1, #20
 800c7fc:	2000      	movs	r0, #0
 800c7fe:	f8dc 3000 	ldr.w	r3, [ip]
 800c802:	b299      	uxth	r1, r3
 800c804:	fb02 6101 	mla	r1, r2, r1, r6
 800c808:	0c1e      	lsrs	r6, r3, #16
 800c80a:	0c0b      	lsrs	r3, r1, #16
 800c80c:	fb02 3306 	mla	r3, r2, r6, r3
 800c810:	b289      	uxth	r1, r1
 800c812:	3001      	adds	r0, #1
 800c814:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c818:	4285      	cmp	r5, r0
 800c81a:	f84c 1b04 	str.w	r1, [ip], #4
 800c81e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c822:	dcec      	bgt.n	800c7fe <__multadd+0x12>
 800c824:	b30e      	cbz	r6, 800c86a <__multadd+0x7e>
 800c826:	68a3      	ldr	r3, [r4, #8]
 800c828:	42ab      	cmp	r3, r5
 800c82a:	dc19      	bgt.n	800c860 <__multadd+0x74>
 800c82c:	6861      	ldr	r1, [r4, #4]
 800c82e:	4638      	mov	r0, r7
 800c830:	3101      	adds	r1, #1
 800c832:	f7ff ff79 	bl	800c728 <_Balloc>
 800c836:	4680      	mov	r8, r0
 800c838:	b928      	cbnz	r0, 800c846 <__multadd+0x5a>
 800c83a:	4602      	mov	r2, r0
 800c83c:	4b0c      	ldr	r3, [pc, #48]	@ (800c870 <__multadd+0x84>)
 800c83e:	480d      	ldr	r0, [pc, #52]	@ (800c874 <__multadd+0x88>)
 800c840:	21ba      	movs	r1, #186	@ 0xba
 800c842:	f000 fd7b 	bl	800d33c <__assert_func>
 800c846:	6922      	ldr	r2, [r4, #16]
 800c848:	3202      	adds	r2, #2
 800c84a:	f104 010c 	add.w	r1, r4, #12
 800c84e:	0092      	lsls	r2, r2, #2
 800c850:	300c      	adds	r0, #12
 800c852:	f000 fd65 	bl	800d320 <memcpy>
 800c856:	4621      	mov	r1, r4
 800c858:	4638      	mov	r0, r7
 800c85a:	f7ff ffa5 	bl	800c7a8 <_Bfree>
 800c85e:	4644      	mov	r4, r8
 800c860:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c864:	3501      	adds	r5, #1
 800c866:	615e      	str	r6, [r3, #20]
 800c868:	6125      	str	r5, [r4, #16]
 800c86a:	4620      	mov	r0, r4
 800c86c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c870:	0800d6a4 	.word	0x0800d6a4
 800c874:	0800d6b5 	.word	0x0800d6b5

0800c878 <__hi0bits>:
 800c878:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800c87c:	4603      	mov	r3, r0
 800c87e:	bf36      	itet	cc
 800c880:	0403      	lslcc	r3, r0, #16
 800c882:	2000      	movcs	r0, #0
 800c884:	2010      	movcc	r0, #16
 800c886:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c88a:	bf3c      	itt	cc
 800c88c:	021b      	lslcc	r3, r3, #8
 800c88e:	3008      	addcc	r0, #8
 800c890:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c894:	bf3c      	itt	cc
 800c896:	011b      	lslcc	r3, r3, #4
 800c898:	3004      	addcc	r0, #4
 800c89a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c89e:	bf3c      	itt	cc
 800c8a0:	009b      	lslcc	r3, r3, #2
 800c8a2:	3002      	addcc	r0, #2
 800c8a4:	2b00      	cmp	r3, #0
 800c8a6:	db05      	blt.n	800c8b4 <__hi0bits+0x3c>
 800c8a8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800c8ac:	f100 0001 	add.w	r0, r0, #1
 800c8b0:	bf08      	it	eq
 800c8b2:	2020      	moveq	r0, #32
 800c8b4:	4770      	bx	lr

0800c8b6 <__lo0bits>:
 800c8b6:	6803      	ldr	r3, [r0, #0]
 800c8b8:	4602      	mov	r2, r0
 800c8ba:	f013 0007 	ands.w	r0, r3, #7
 800c8be:	d00b      	beq.n	800c8d8 <__lo0bits+0x22>
 800c8c0:	07d9      	lsls	r1, r3, #31
 800c8c2:	d421      	bmi.n	800c908 <__lo0bits+0x52>
 800c8c4:	0798      	lsls	r0, r3, #30
 800c8c6:	bf49      	itett	mi
 800c8c8:	085b      	lsrmi	r3, r3, #1
 800c8ca:	089b      	lsrpl	r3, r3, #2
 800c8cc:	2001      	movmi	r0, #1
 800c8ce:	6013      	strmi	r3, [r2, #0]
 800c8d0:	bf5c      	itt	pl
 800c8d2:	6013      	strpl	r3, [r2, #0]
 800c8d4:	2002      	movpl	r0, #2
 800c8d6:	4770      	bx	lr
 800c8d8:	b299      	uxth	r1, r3
 800c8da:	b909      	cbnz	r1, 800c8e0 <__lo0bits+0x2a>
 800c8dc:	0c1b      	lsrs	r3, r3, #16
 800c8de:	2010      	movs	r0, #16
 800c8e0:	b2d9      	uxtb	r1, r3
 800c8e2:	b909      	cbnz	r1, 800c8e8 <__lo0bits+0x32>
 800c8e4:	3008      	adds	r0, #8
 800c8e6:	0a1b      	lsrs	r3, r3, #8
 800c8e8:	0719      	lsls	r1, r3, #28
 800c8ea:	bf04      	itt	eq
 800c8ec:	091b      	lsreq	r3, r3, #4
 800c8ee:	3004      	addeq	r0, #4
 800c8f0:	0799      	lsls	r1, r3, #30
 800c8f2:	bf04      	itt	eq
 800c8f4:	089b      	lsreq	r3, r3, #2
 800c8f6:	3002      	addeq	r0, #2
 800c8f8:	07d9      	lsls	r1, r3, #31
 800c8fa:	d403      	bmi.n	800c904 <__lo0bits+0x4e>
 800c8fc:	085b      	lsrs	r3, r3, #1
 800c8fe:	f100 0001 	add.w	r0, r0, #1
 800c902:	d003      	beq.n	800c90c <__lo0bits+0x56>
 800c904:	6013      	str	r3, [r2, #0]
 800c906:	4770      	bx	lr
 800c908:	2000      	movs	r0, #0
 800c90a:	4770      	bx	lr
 800c90c:	2020      	movs	r0, #32
 800c90e:	4770      	bx	lr

0800c910 <__i2b>:
 800c910:	b510      	push	{r4, lr}
 800c912:	460c      	mov	r4, r1
 800c914:	2101      	movs	r1, #1
 800c916:	f7ff ff07 	bl	800c728 <_Balloc>
 800c91a:	4602      	mov	r2, r0
 800c91c:	b928      	cbnz	r0, 800c92a <__i2b+0x1a>
 800c91e:	4b05      	ldr	r3, [pc, #20]	@ (800c934 <__i2b+0x24>)
 800c920:	4805      	ldr	r0, [pc, #20]	@ (800c938 <__i2b+0x28>)
 800c922:	f240 1145 	movw	r1, #325	@ 0x145
 800c926:	f000 fd09 	bl	800d33c <__assert_func>
 800c92a:	2301      	movs	r3, #1
 800c92c:	6144      	str	r4, [r0, #20]
 800c92e:	6103      	str	r3, [r0, #16]
 800c930:	bd10      	pop	{r4, pc}
 800c932:	bf00      	nop
 800c934:	0800d6a4 	.word	0x0800d6a4
 800c938:	0800d6b5 	.word	0x0800d6b5

0800c93c <__multiply>:
 800c93c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c940:	4617      	mov	r7, r2
 800c942:	690a      	ldr	r2, [r1, #16]
 800c944:	693b      	ldr	r3, [r7, #16]
 800c946:	429a      	cmp	r2, r3
 800c948:	bfa8      	it	ge
 800c94a:	463b      	movge	r3, r7
 800c94c:	4689      	mov	r9, r1
 800c94e:	bfa4      	itt	ge
 800c950:	460f      	movge	r7, r1
 800c952:	4699      	movge	r9, r3
 800c954:	693d      	ldr	r5, [r7, #16]
 800c956:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c95a:	68bb      	ldr	r3, [r7, #8]
 800c95c:	6879      	ldr	r1, [r7, #4]
 800c95e:	eb05 060a 	add.w	r6, r5, sl
 800c962:	42b3      	cmp	r3, r6
 800c964:	b085      	sub	sp, #20
 800c966:	bfb8      	it	lt
 800c968:	3101      	addlt	r1, #1
 800c96a:	f7ff fedd 	bl	800c728 <_Balloc>
 800c96e:	b930      	cbnz	r0, 800c97e <__multiply+0x42>
 800c970:	4602      	mov	r2, r0
 800c972:	4b41      	ldr	r3, [pc, #260]	@ (800ca78 <__multiply+0x13c>)
 800c974:	4841      	ldr	r0, [pc, #260]	@ (800ca7c <__multiply+0x140>)
 800c976:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800c97a:	f000 fcdf 	bl	800d33c <__assert_func>
 800c97e:	f100 0414 	add.w	r4, r0, #20
 800c982:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800c986:	4623      	mov	r3, r4
 800c988:	2200      	movs	r2, #0
 800c98a:	4573      	cmp	r3, lr
 800c98c:	d320      	bcc.n	800c9d0 <__multiply+0x94>
 800c98e:	f107 0814 	add.w	r8, r7, #20
 800c992:	f109 0114 	add.w	r1, r9, #20
 800c996:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800c99a:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800c99e:	9302      	str	r3, [sp, #8]
 800c9a0:	1beb      	subs	r3, r5, r7
 800c9a2:	3b15      	subs	r3, #21
 800c9a4:	f023 0303 	bic.w	r3, r3, #3
 800c9a8:	3304      	adds	r3, #4
 800c9aa:	3715      	adds	r7, #21
 800c9ac:	42bd      	cmp	r5, r7
 800c9ae:	bf38      	it	cc
 800c9b0:	2304      	movcc	r3, #4
 800c9b2:	9301      	str	r3, [sp, #4]
 800c9b4:	9b02      	ldr	r3, [sp, #8]
 800c9b6:	9103      	str	r1, [sp, #12]
 800c9b8:	428b      	cmp	r3, r1
 800c9ba:	d80c      	bhi.n	800c9d6 <__multiply+0x9a>
 800c9bc:	2e00      	cmp	r6, #0
 800c9be:	dd03      	ble.n	800c9c8 <__multiply+0x8c>
 800c9c0:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	d055      	beq.n	800ca74 <__multiply+0x138>
 800c9c8:	6106      	str	r6, [r0, #16]
 800c9ca:	b005      	add	sp, #20
 800c9cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c9d0:	f843 2b04 	str.w	r2, [r3], #4
 800c9d4:	e7d9      	b.n	800c98a <__multiply+0x4e>
 800c9d6:	f8b1 a000 	ldrh.w	sl, [r1]
 800c9da:	f1ba 0f00 	cmp.w	sl, #0
 800c9de:	d01f      	beq.n	800ca20 <__multiply+0xe4>
 800c9e0:	46c4      	mov	ip, r8
 800c9e2:	46a1      	mov	r9, r4
 800c9e4:	2700      	movs	r7, #0
 800c9e6:	f85c 2b04 	ldr.w	r2, [ip], #4
 800c9ea:	f8d9 3000 	ldr.w	r3, [r9]
 800c9ee:	fa1f fb82 	uxth.w	fp, r2
 800c9f2:	b29b      	uxth	r3, r3
 800c9f4:	fb0a 330b 	mla	r3, sl, fp, r3
 800c9f8:	443b      	add	r3, r7
 800c9fa:	f8d9 7000 	ldr.w	r7, [r9]
 800c9fe:	0c12      	lsrs	r2, r2, #16
 800ca00:	0c3f      	lsrs	r7, r7, #16
 800ca02:	fb0a 7202 	mla	r2, sl, r2, r7
 800ca06:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800ca0a:	b29b      	uxth	r3, r3
 800ca0c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ca10:	4565      	cmp	r5, ip
 800ca12:	f849 3b04 	str.w	r3, [r9], #4
 800ca16:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800ca1a:	d8e4      	bhi.n	800c9e6 <__multiply+0xaa>
 800ca1c:	9b01      	ldr	r3, [sp, #4]
 800ca1e:	50e7      	str	r7, [r4, r3]
 800ca20:	9b03      	ldr	r3, [sp, #12]
 800ca22:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800ca26:	3104      	adds	r1, #4
 800ca28:	f1b9 0f00 	cmp.w	r9, #0
 800ca2c:	d020      	beq.n	800ca70 <__multiply+0x134>
 800ca2e:	6823      	ldr	r3, [r4, #0]
 800ca30:	4647      	mov	r7, r8
 800ca32:	46a4      	mov	ip, r4
 800ca34:	f04f 0a00 	mov.w	sl, #0
 800ca38:	f8b7 b000 	ldrh.w	fp, [r7]
 800ca3c:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800ca40:	fb09 220b 	mla	r2, r9, fp, r2
 800ca44:	4452      	add	r2, sl
 800ca46:	b29b      	uxth	r3, r3
 800ca48:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ca4c:	f84c 3b04 	str.w	r3, [ip], #4
 800ca50:	f857 3b04 	ldr.w	r3, [r7], #4
 800ca54:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ca58:	f8bc 3000 	ldrh.w	r3, [ip]
 800ca5c:	fb09 330a 	mla	r3, r9, sl, r3
 800ca60:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800ca64:	42bd      	cmp	r5, r7
 800ca66:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ca6a:	d8e5      	bhi.n	800ca38 <__multiply+0xfc>
 800ca6c:	9a01      	ldr	r2, [sp, #4]
 800ca6e:	50a3      	str	r3, [r4, r2]
 800ca70:	3404      	adds	r4, #4
 800ca72:	e79f      	b.n	800c9b4 <__multiply+0x78>
 800ca74:	3e01      	subs	r6, #1
 800ca76:	e7a1      	b.n	800c9bc <__multiply+0x80>
 800ca78:	0800d6a4 	.word	0x0800d6a4
 800ca7c:	0800d6b5 	.word	0x0800d6b5

0800ca80 <__pow5mult>:
 800ca80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ca84:	4615      	mov	r5, r2
 800ca86:	f012 0203 	ands.w	r2, r2, #3
 800ca8a:	4607      	mov	r7, r0
 800ca8c:	460e      	mov	r6, r1
 800ca8e:	d007      	beq.n	800caa0 <__pow5mult+0x20>
 800ca90:	4c25      	ldr	r4, [pc, #148]	@ (800cb28 <__pow5mult+0xa8>)
 800ca92:	3a01      	subs	r2, #1
 800ca94:	2300      	movs	r3, #0
 800ca96:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ca9a:	f7ff fea7 	bl	800c7ec <__multadd>
 800ca9e:	4606      	mov	r6, r0
 800caa0:	10ad      	asrs	r5, r5, #2
 800caa2:	d03d      	beq.n	800cb20 <__pow5mult+0xa0>
 800caa4:	69fc      	ldr	r4, [r7, #28]
 800caa6:	b97c      	cbnz	r4, 800cac8 <__pow5mult+0x48>
 800caa8:	2010      	movs	r0, #16
 800caaa:	f7ff fd87 	bl	800c5bc <malloc>
 800caae:	4602      	mov	r2, r0
 800cab0:	61f8      	str	r0, [r7, #28]
 800cab2:	b928      	cbnz	r0, 800cac0 <__pow5mult+0x40>
 800cab4:	4b1d      	ldr	r3, [pc, #116]	@ (800cb2c <__pow5mult+0xac>)
 800cab6:	481e      	ldr	r0, [pc, #120]	@ (800cb30 <__pow5mult+0xb0>)
 800cab8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800cabc:	f000 fc3e 	bl	800d33c <__assert_func>
 800cac0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800cac4:	6004      	str	r4, [r0, #0]
 800cac6:	60c4      	str	r4, [r0, #12]
 800cac8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800cacc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800cad0:	b94c      	cbnz	r4, 800cae6 <__pow5mult+0x66>
 800cad2:	f240 2171 	movw	r1, #625	@ 0x271
 800cad6:	4638      	mov	r0, r7
 800cad8:	f7ff ff1a 	bl	800c910 <__i2b>
 800cadc:	2300      	movs	r3, #0
 800cade:	f8c8 0008 	str.w	r0, [r8, #8]
 800cae2:	4604      	mov	r4, r0
 800cae4:	6003      	str	r3, [r0, #0]
 800cae6:	f04f 0900 	mov.w	r9, #0
 800caea:	07eb      	lsls	r3, r5, #31
 800caec:	d50a      	bpl.n	800cb04 <__pow5mult+0x84>
 800caee:	4631      	mov	r1, r6
 800caf0:	4622      	mov	r2, r4
 800caf2:	4638      	mov	r0, r7
 800caf4:	f7ff ff22 	bl	800c93c <__multiply>
 800caf8:	4631      	mov	r1, r6
 800cafa:	4680      	mov	r8, r0
 800cafc:	4638      	mov	r0, r7
 800cafe:	f7ff fe53 	bl	800c7a8 <_Bfree>
 800cb02:	4646      	mov	r6, r8
 800cb04:	106d      	asrs	r5, r5, #1
 800cb06:	d00b      	beq.n	800cb20 <__pow5mult+0xa0>
 800cb08:	6820      	ldr	r0, [r4, #0]
 800cb0a:	b938      	cbnz	r0, 800cb1c <__pow5mult+0x9c>
 800cb0c:	4622      	mov	r2, r4
 800cb0e:	4621      	mov	r1, r4
 800cb10:	4638      	mov	r0, r7
 800cb12:	f7ff ff13 	bl	800c93c <__multiply>
 800cb16:	6020      	str	r0, [r4, #0]
 800cb18:	f8c0 9000 	str.w	r9, [r0]
 800cb1c:	4604      	mov	r4, r0
 800cb1e:	e7e4      	b.n	800caea <__pow5mult+0x6a>
 800cb20:	4630      	mov	r0, r6
 800cb22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cb26:	bf00      	nop
 800cb28:	0800d768 	.word	0x0800d768
 800cb2c:	0800d635 	.word	0x0800d635
 800cb30:	0800d6b5 	.word	0x0800d6b5

0800cb34 <__lshift>:
 800cb34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cb38:	460c      	mov	r4, r1
 800cb3a:	6849      	ldr	r1, [r1, #4]
 800cb3c:	6923      	ldr	r3, [r4, #16]
 800cb3e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800cb42:	68a3      	ldr	r3, [r4, #8]
 800cb44:	4607      	mov	r7, r0
 800cb46:	4691      	mov	r9, r2
 800cb48:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800cb4c:	f108 0601 	add.w	r6, r8, #1
 800cb50:	42b3      	cmp	r3, r6
 800cb52:	db0b      	blt.n	800cb6c <__lshift+0x38>
 800cb54:	4638      	mov	r0, r7
 800cb56:	f7ff fde7 	bl	800c728 <_Balloc>
 800cb5a:	4605      	mov	r5, r0
 800cb5c:	b948      	cbnz	r0, 800cb72 <__lshift+0x3e>
 800cb5e:	4602      	mov	r2, r0
 800cb60:	4b28      	ldr	r3, [pc, #160]	@ (800cc04 <__lshift+0xd0>)
 800cb62:	4829      	ldr	r0, [pc, #164]	@ (800cc08 <__lshift+0xd4>)
 800cb64:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800cb68:	f000 fbe8 	bl	800d33c <__assert_func>
 800cb6c:	3101      	adds	r1, #1
 800cb6e:	005b      	lsls	r3, r3, #1
 800cb70:	e7ee      	b.n	800cb50 <__lshift+0x1c>
 800cb72:	2300      	movs	r3, #0
 800cb74:	f100 0114 	add.w	r1, r0, #20
 800cb78:	f100 0210 	add.w	r2, r0, #16
 800cb7c:	4618      	mov	r0, r3
 800cb7e:	4553      	cmp	r3, sl
 800cb80:	db33      	blt.n	800cbea <__lshift+0xb6>
 800cb82:	6920      	ldr	r0, [r4, #16]
 800cb84:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800cb88:	f104 0314 	add.w	r3, r4, #20
 800cb8c:	f019 091f 	ands.w	r9, r9, #31
 800cb90:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800cb94:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800cb98:	d02b      	beq.n	800cbf2 <__lshift+0xbe>
 800cb9a:	f1c9 0e20 	rsb	lr, r9, #32
 800cb9e:	468a      	mov	sl, r1
 800cba0:	2200      	movs	r2, #0
 800cba2:	6818      	ldr	r0, [r3, #0]
 800cba4:	fa00 f009 	lsl.w	r0, r0, r9
 800cba8:	4310      	orrs	r0, r2
 800cbaa:	f84a 0b04 	str.w	r0, [sl], #4
 800cbae:	f853 2b04 	ldr.w	r2, [r3], #4
 800cbb2:	459c      	cmp	ip, r3
 800cbb4:	fa22 f20e 	lsr.w	r2, r2, lr
 800cbb8:	d8f3      	bhi.n	800cba2 <__lshift+0x6e>
 800cbba:	ebac 0304 	sub.w	r3, ip, r4
 800cbbe:	3b15      	subs	r3, #21
 800cbc0:	f023 0303 	bic.w	r3, r3, #3
 800cbc4:	3304      	adds	r3, #4
 800cbc6:	f104 0015 	add.w	r0, r4, #21
 800cbca:	4560      	cmp	r0, ip
 800cbcc:	bf88      	it	hi
 800cbce:	2304      	movhi	r3, #4
 800cbd0:	50ca      	str	r2, [r1, r3]
 800cbd2:	b10a      	cbz	r2, 800cbd8 <__lshift+0xa4>
 800cbd4:	f108 0602 	add.w	r6, r8, #2
 800cbd8:	3e01      	subs	r6, #1
 800cbda:	4638      	mov	r0, r7
 800cbdc:	612e      	str	r6, [r5, #16]
 800cbde:	4621      	mov	r1, r4
 800cbe0:	f7ff fde2 	bl	800c7a8 <_Bfree>
 800cbe4:	4628      	mov	r0, r5
 800cbe6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cbea:	f842 0f04 	str.w	r0, [r2, #4]!
 800cbee:	3301      	adds	r3, #1
 800cbf0:	e7c5      	b.n	800cb7e <__lshift+0x4a>
 800cbf2:	3904      	subs	r1, #4
 800cbf4:	f853 2b04 	ldr.w	r2, [r3], #4
 800cbf8:	f841 2f04 	str.w	r2, [r1, #4]!
 800cbfc:	459c      	cmp	ip, r3
 800cbfe:	d8f9      	bhi.n	800cbf4 <__lshift+0xc0>
 800cc00:	e7ea      	b.n	800cbd8 <__lshift+0xa4>
 800cc02:	bf00      	nop
 800cc04:	0800d6a4 	.word	0x0800d6a4
 800cc08:	0800d6b5 	.word	0x0800d6b5

0800cc0c <__mcmp>:
 800cc0c:	690a      	ldr	r2, [r1, #16]
 800cc0e:	4603      	mov	r3, r0
 800cc10:	6900      	ldr	r0, [r0, #16]
 800cc12:	1a80      	subs	r0, r0, r2
 800cc14:	b530      	push	{r4, r5, lr}
 800cc16:	d10e      	bne.n	800cc36 <__mcmp+0x2a>
 800cc18:	3314      	adds	r3, #20
 800cc1a:	3114      	adds	r1, #20
 800cc1c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800cc20:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800cc24:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800cc28:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800cc2c:	4295      	cmp	r5, r2
 800cc2e:	d003      	beq.n	800cc38 <__mcmp+0x2c>
 800cc30:	d205      	bcs.n	800cc3e <__mcmp+0x32>
 800cc32:	f04f 30ff 	mov.w	r0, #4294967295
 800cc36:	bd30      	pop	{r4, r5, pc}
 800cc38:	42a3      	cmp	r3, r4
 800cc3a:	d3f3      	bcc.n	800cc24 <__mcmp+0x18>
 800cc3c:	e7fb      	b.n	800cc36 <__mcmp+0x2a>
 800cc3e:	2001      	movs	r0, #1
 800cc40:	e7f9      	b.n	800cc36 <__mcmp+0x2a>
	...

0800cc44 <__mdiff>:
 800cc44:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc48:	4689      	mov	r9, r1
 800cc4a:	4606      	mov	r6, r0
 800cc4c:	4611      	mov	r1, r2
 800cc4e:	4648      	mov	r0, r9
 800cc50:	4614      	mov	r4, r2
 800cc52:	f7ff ffdb 	bl	800cc0c <__mcmp>
 800cc56:	1e05      	subs	r5, r0, #0
 800cc58:	d112      	bne.n	800cc80 <__mdiff+0x3c>
 800cc5a:	4629      	mov	r1, r5
 800cc5c:	4630      	mov	r0, r6
 800cc5e:	f7ff fd63 	bl	800c728 <_Balloc>
 800cc62:	4602      	mov	r2, r0
 800cc64:	b928      	cbnz	r0, 800cc72 <__mdiff+0x2e>
 800cc66:	4b3f      	ldr	r3, [pc, #252]	@ (800cd64 <__mdiff+0x120>)
 800cc68:	f240 2137 	movw	r1, #567	@ 0x237
 800cc6c:	483e      	ldr	r0, [pc, #248]	@ (800cd68 <__mdiff+0x124>)
 800cc6e:	f000 fb65 	bl	800d33c <__assert_func>
 800cc72:	2301      	movs	r3, #1
 800cc74:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800cc78:	4610      	mov	r0, r2
 800cc7a:	b003      	add	sp, #12
 800cc7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc80:	bfbc      	itt	lt
 800cc82:	464b      	movlt	r3, r9
 800cc84:	46a1      	movlt	r9, r4
 800cc86:	4630      	mov	r0, r6
 800cc88:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800cc8c:	bfba      	itte	lt
 800cc8e:	461c      	movlt	r4, r3
 800cc90:	2501      	movlt	r5, #1
 800cc92:	2500      	movge	r5, #0
 800cc94:	f7ff fd48 	bl	800c728 <_Balloc>
 800cc98:	4602      	mov	r2, r0
 800cc9a:	b918      	cbnz	r0, 800cca4 <__mdiff+0x60>
 800cc9c:	4b31      	ldr	r3, [pc, #196]	@ (800cd64 <__mdiff+0x120>)
 800cc9e:	f240 2145 	movw	r1, #581	@ 0x245
 800cca2:	e7e3      	b.n	800cc6c <__mdiff+0x28>
 800cca4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800cca8:	6926      	ldr	r6, [r4, #16]
 800ccaa:	60c5      	str	r5, [r0, #12]
 800ccac:	f109 0310 	add.w	r3, r9, #16
 800ccb0:	f109 0514 	add.w	r5, r9, #20
 800ccb4:	f104 0e14 	add.w	lr, r4, #20
 800ccb8:	f100 0b14 	add.w	fp, r0, #20
 800ccbc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800ccc0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800ccc4:	9301      	str	r3, [sp, #4]
 800ccc6:	46d9      	mov	r9, fp
 800ccc8:	f04f 0c00 	mov.w	ip, #0
 800cccc:	9b01      	ldr	r3, [sp, #4]
 800ccce:	f85e 0b04 	ldr.w	r0, [lr], #4
 800ccd2:	f853 af04 	ldr.w	sl, [r3, #4]!
 800ccd6:	9301      	str	r3, [sp, #4]
 800ccd8:	fa1f f38a 	uxth.w	r3, sl
 800ccdc:	4619      	mov	r1, r3
 800ccde:	b283      	uxth	r3, r0
 800cce0:	1acb      	subs	r3, r1, r3
 800cce2:	0c00      	lsrs	r0, r0, #16
 800cce4:	4463      	add	r3, ip
 800cce6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800ccea:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800ccee:	b29b      	uxth	r3, r3
 800ccf0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800ccf4:	4576      	cmp	r6, lr
 800ccf6:	f849 3b04 	str.w	r3, [r9], #4
 800ccfa:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ccfe:	d8e5      	bhi.n	800cccc <__mdiff+0x88>
 800cd00:	1b33      	subs	r3, r6, r4
 800cd02:	3b15      	subs	r3, #21
 800cd04:	f023 0303 	bic.w	r3, r3, #3
 800cd08:	3415      	adds	r4, #21
 800cd0a:	3304      	adds	r3, #4
 800cd0c:	42a6      	cmp	r6, r4
 800cd0e:	bf38      	it	cc
 800cd10:	2304      	movcc	r3, #4
 800cd12:	441d      	add	r5, r3
 800cd14:	445b      	add	r3, fp
 800cd16:	461e      	mov	r6, r3
 800cd18:	462c      	mov	r4, r5
 800cd1a:	4544      	cmp	r4, r8
 800cd1c:	d30e      	bcc.n	800cd3c <__mdiff+0xf8>
 800cd1e:	f108 0103 	add.w	r1, r8, #3
 800cd22:	1b49      	subs	r1, r1, r5
 800cd24:	f021 0103 	bic.w	r1, r1, #3
 800cd28:	3d03      	subs	r5, #3
 800cd2a:	45a8      	cmp	r8, r5
 800cd2c:	bf38      	it	cc
 800cd2e:	2100      	movcc	r1, #0
 800cd30:	440b      	add	r3, r1
 800cd32:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800cd36:	b191      	cbz	r1, 800cd5e <__mdiff+0x11a>
 800cd38:	6117      	str	r7, [r2, #16]
 800cd3a:	e79d      	b.n	800cc78 <__mdiff+0x34>
 800cd3c:	f854 1b04 	ldr.w	r1, [r4], #4
 800cd40:	46e6      	mov	lr, ip
 800cd42:	0c08      	lsrs	r0, r1, #16
 800cd44:	fa1c fc81 	uxtah	ip, ip, r1
 800cd48:	4471      	add	r1, lr
 800cd4a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800cd4e:	b289      	uxth	r1, r1
 800cd50:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800cd54:	f846 1b04 	str.w	r1, [r6], #4
 800cd58:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800cd5c:	e7dd      	b.n	800cd1a <__mdiff+0xd6>
 800cd5e:	3f01      	subs	r7, #1
 800cd60:	e7e7      	b.n	800cd32 <__mdiff+0xee>
 800cd62:	bf00      	nop
 800cd64:	0800d6a4 	.word	0x0800d6a4
 800cd68:	0800d6b5 	.word	0x0800d6b5

0800cd6c <__d2b>:
 800cd6c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800cd70:	460f      	mov	r7, r1
 800cd72:	2101      	movs	r1, #1
 800cd74:	ec59 8b10 	vmov	r8, r9, d0
 800cd78:	4616      	mov	r6, r2
 800cd7a:	f7ff fcd5 	bl	800c728 <_Balloc>
 800cd7e:	4604      	mov	r4, r0
 800cd80:	b930      	cbnz	r0, 800cd90 <__d2b+0x24>
 800cd82:	4602      	mov	r2, r0
 800cd84:	4b23      	ldr	r3, [pc, #140]	@ (800ce14 <__d2b+0xa8>)
 800cd86:	4824      	ldr	r0, [pc, #144]	@ (800ce18 <__d2b+0xac>)
 800cd88:	f240 310f 	movw	r1, #783	@ 0x30f
 800cd8c:	f000 fad6 	bl	800d33c <__assert_func>
 800cd90:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800cd94:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800cd98:	b10d      	cbz	r5, 800cd9e <__d2b+0x32>
 800cd9a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800cd9e:	9301      	str	r3, [sp, #4]
 800cda0:	f1b8 0300 	subs.w	r3, r8, #0
 800cda4:	d023      	beq.n	800cdee <__d2b+0x82>
 800cda6:	4668      	mov	r0, sp
 800cda8:	9300      	str	r3, [sp, #0]
 800cdaa:	f7ff fd84 	bl	800c8b6 <__lo0bits>
 800cdae:	e9dd 1200 	ldrd	r1, r2, [sp]
 800cdb2:	b1d0      	cbz	r0, 800cdea <__d2b+0x7e>
 800cdb4:	f1c0 0320 	rsb	r3, r0, #32
 800cdb8:	fa02 f303 	lsl.w	r3, r2, r3
 800cdbc:	430b      	orrs	r3, r1
 800cdbe:	40c2      	lsrs	r2, r0
 800cdc0:	6163      	str	r3, [r4, #20]
 800cdc2:	9201      	str	r2, [sp, #4]
 800cdc4:	9b01      	ldr	r3, [sp, #4]
 800cdc6:	61a3      	str	r3, [r4, #24]
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	bf0c      	ite	eq
 800cdcc:	2201      	moveq	r2, #1
 800cdce:	2202      	movne	r2, #2
 800cdd0:	6122      	str	r2, [r4, #16]
 800cdd2:	b1a5      	cbz	r5, 800cdfe <__d2b+0x92>
 800cdd4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800cdd8:	4405      	add	r5, r0
 800cdda:	603d      	str	r5, [r7, #0]
 800cddc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800cde0:	6030      	str	r0, [r6, #0]
 800cde2:	4620      	mov	r0, r4
 800cde4:	b003      	add	sp, #12
 800cde6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cdea:	6161      	str	r1, [r4, #20]
 800cdec:	e7ea      	b.n	800cdc4 <__d2b+0x58>
 800cdee:	a801      	add	r0, sp, #4
 800cdf0:	f7ff fd61 	bl	800c8b6 <__lo0bits>
 800cdf4:	9b01      	ldr	r3, [sp, #4]
 800cdf6:	6163      	str	r3, [r4, #20]
 800cdf8:	3020      	adds	r0, #32
 800cdfa:	2201      	movs	r2, #1
 800cdfc:	e7e8      	b.n	800cdd0 <__d2b+0x64>
 800cdfe:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ce02:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800ce06:	6038      	str	r0, [r7, #0]
 800ce08:	6918      	ldr	r0, [r3, #16]
 800ce0a:	f7ff fd35 	bl	800c878 <__hi0bits>
 800ce0e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ce12:	e7e5      	b.n	800cde0 <__d2b+0x74>
 800ce14:	0800d6a4 	.word	0x0800d6a4
 800ce18:	0800d6b5 	.word	0x0800d6b5

0800ce1c <__sfputc_r>:
 800ce1c:	6893      	ldr	r3, [r2, #8]
 800ce1e:	3b01      	subs	r3, #1
 800ce20:	2b00      	cmp	r3, #0
 800ce22:	b410      	push	{r4}
 800ce24:	6093      	str	r3, [r2, #8]
 800ce26:	da08      	bge.n	800ce3a <__sfputc_r+0x1e>
 800ce28:	6994      	ldr	r4, [r2, #24]
 800ce2a:	42a3      	cmp	r3, r4
 800ce2c:	db01      	blt.n	800ce32 <__sfputc_r+0x16>
 800ce2e:	290a      	cmp	r1, #10
 800ce30:	d103      	bne.n	800ce3a <__sfputc_r+0x1e>
 800ce32:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ce36:	f7fe bc0a 	b.w	800b64e <__swbuf_r>
 800ce3a:	6813      	ldr	r3, [r2, #0]
 800ce3c:	1c58      	adds	r0, r3, #1
 800ce3e:	6010      	str	r0, [r2, #0]
 800ce40:	7019      	strb	r1, [r3, #0]
 800ce42:	4608      	mov	r0, r1
 800ce44:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ce48:	4770      	bx	lr

0800ce4a <__sfputs_r>:
 800ce4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce4c:	4606      	mov	r6, r0
 800ce4e:	460f      	mov	r7, r1
 800ce50:	4614      	mov	r4, r2
 800ce52:	18d5      	adds	r5, r2, r3
 800ce54:	42ac      	cmp	r4, r5
 800ce56:	d101      	bne.n	800ce5c <__sfputs_r+0x12>
 800ce58:	2000      	movs	r0, #0
 800ce5a:	e007      	b.n	800ce6c <__sfputs_r+0x22>
 800ce5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ce60:	463a      	mov	r2, r7
 800ce62:	4630      	mov	r0, r6
 800ce64:	f7ff ffda 	bl	800ce1c <__sfputc_r>
 800ce68:	1c43      	adds	r3, r0, #1
 800ce6a:	d1f3      	bne.n	800ce54 <__sfputs_r+0xa>
 800ce6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ce70 <_vfiprintf_r>:
 800ce70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce74:	460d      	mov	r5, r1
 800ce76:	b09d      	sub	sp, #116	@ 0x74
 800ce78:	4614      	mov	r4, r2
 800ce7a:	4698      	mov	r8, r3
 800ce7c:	4606      	mov	r6, r0
 800ce7e:	b118      	cbz	r0, 800ce88 <_vfiprintf_r+0x18>
 800ce80:	6a03      	ldr	r3, [r0, #32]
 800ce82:	b90b      	cbnz	r3, 800ce88 <_vfiprintf_r+0x18>
 800ce84:	f7fe fafa 	bl	800b47c <__sinit>
 800ce88:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ce8a:	07d9      	lsls	r1, r3, #31
 800ce8c:	d405      	bmi.n	800ce9a <_vfiprintf_r+0x2a>
 800ce8e:	89ab      	ldrh	r3, [r5, #12]
 800ce90:	059a      	lsls	r2, r3, #22
 800ce92:	d402      	bmi.n	800ce9a <_vfiprintf_r+0x2a>
 800ce94:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ce96:	f7fe fcec 	bl	800b872 <__retarget_lock_acquire_recursive>
 800ce9a:	89ab      	ldrh	r3, [r5, #12]
 800ce9c:	071b      	lsls	r3, r3, #28
 800ce9e:	d501      	bpl.n	800cea4 <_vfiprintf_r+0x34>
 800cea0:	692b      	ldr	r3, [r5, #16]
 800cea2:	b99b      	cbnz	r3, 800cecc <_vfiprintf_r+0x5c>
 800cea4:	4629      	mov	r1, r5
 800cea6:	4630      	mov	r0, r6
 800cea8:	f7fe fc10 	bl	800b6cc <__swsetup_r>
 800ceac:	b170      	cbz	r0, 800cecc <_vfiprintf_r+0x5c>
 800ceae:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ceb0:	07dc      	lsls	r4, r3, #31
 800ceb2:	d504      	bpl.n	800cebe <_vfiprintf_r+0x4e>
 800ceb4:	f04f 30ff 	mov.w	r0, #4294967295
 800ceb8:	b01d      	add	sp, #116	@ 0x74
 800ceba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cebe:	89ab      	ldrh	r3, [r5, #12]
 800cec0:	0598      	lsls	r0, r3, #22
 800cec2:	d4f7      	bmi.n	800ceb4 <_vfiprintf_r+0x44>
 800cec4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cec6:	f7fe fcd5 	bl	800b874 <__retarget_lock_release_recursive>
 800ceca:	e7f3      	b.n	800ceb4 <_vfiprintf_r+0x44>
 800cecc:	2300      	movs	r3, #0
 800cece:	9309      	str	r3, [sp, #36]	@ 0x24
 800ced0:	2320      	movs	r3, #32
 800ced2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ced6:	f8cd 800c 	str.w	r8, [sp, #12]
 800ceda:	2330      	movs	r3, #48	@ 0x30
 800cedc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800d08c <_vfiprintf_r+0x21c>
 800cee0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800cee4:	f04f 0901 	mov.w	r9, #1
 800cee8:	4623      	mov	r3, r4
 800ceea:	469a      	mov	sl, r3
 800ceec:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cef0:	b10a      	cbz	r2, 800cef6 <_vfiprintf_r+0x86>
 800cef2:	2a25      	cmp	r2, #37	@ 0x25
 800cef4:	d1f9      	bne.n	800ceea <_vfiprintf_r+0x7a>
 800cef6:	ebba 0b04 	subs.w	fp, sl, r4
 800cefa:	d00b      	beq.n	800cf14 <_vfiprintf_r+0xa4>
 800cefc:	465b      	mov	r3, fp
 800cefe:	4622      	mov	r2, r4
 800cf00:	4629      	mov	r1, r5
 800cf02:	4630      	mov	r0, r6
 800cf04:	f7ff ffa1 	bl	800ce4a <__sfputs_r>
 800cf08:	3001      	adds	r0, #1
 800cf0a:	f000 80a7 	beq.w	800d05c <_vfiprintf_r+0x1ec>
 800cf0e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cf10:	445a      	add	r2, fp
 800cf12:	9209      	str	r2, [sp, #36]	@ 0x24
 800cf14:	f89a 3000 	ldrb.w	r3, [sl]
 800cf18:	2b00      	cmp	r3, #0
 800cf1a:	f000 809f 	beq.w	800d05c <_vfiprintf_r+0x1ec>
 800cf1e:	2300      	movs	r3, #0
 800cf20:	f04f 32ff 	mov.w	r2, #4294967295
 800cf24:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cf28:	f10a 0a01 	add.w	sl, sl, #1
 800cf2c:	9304      	str	r3, [sp, #16]
 800cf2e:	9307      	str	r3, [sp, #28]
 800cf30:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800cf34:	931a      	str	r3, [sp, #104]	@ 0x68
 800cf36:	4654      	mov	r4, sl
 800cf38:	2205      	movs	r2, #5
 800cf3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cf3e:	4853      	ldr	r0, [pc, #332]	@ (800d08c <_vfiprintf_r+0x21c>)
 800cf40:	f7f3 f96e 	bl	8000220 <memchr>
 800cf44:	9a04      	ldr	r2, [sp, #16]
 800cf46:	b9d8      	cbnz	r0, 800cf80 <_vfiprintf_r+0x110>
 800cf48:	06d1      	lsls	r1, r2, #27
 800cf4a:	bf44      	itt	mi
 800cf4c:	2320      	movmi	r3, #32
 800cf4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cf52:	0713      	lsls	r3, r2, #28
 800cf54:	bf44      	itt	mi
 800cf56:	232b      	movmi	r3, #43	@ 0x2b
 800cf58:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cf5c:	f89a 3000 	ldrb.w	r3, [sl]
 800cf60:	2b2a      	cmp	r3, #42	@ 0x2a
 800cf62:	d015      	beq.n	800cf90 <_vfiprintf_r+0x120>
 800cf64:	9a07      	ldr	r2, [sp, #28]
 800cf66:	4654      	mov	r4, sl
 800cf68:	2000      	movs	r0, #0
 800cf6a:	f04f 0c0a 	mov.w	ip, #10
 800cf6e:	4621      	mov	r1, r4
 800cf70:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cf74:	3b30      	subs	r3, #48	@ 0x30
 800cf76:	2b09      	cmp	r3, #9
 800cf78:	d94b      	bls.n	800d012 <_vfiprintf_r+0x1a2>
 800cf7a:	b1b0      	cbz	r0, 800cfaa <_vfiprintf_r+0x13a>
 800cf7c:	9207      	str	r2, [sp, #28]
 800cf7e:	e014      	b.n	800cfaa <_vfiprintf_r+0x13a>
 800cf80:	eba0 0308 	sub.w	r3, r0, r8
 800cf84:	fa09 f303 	lsl.w	r3, r9, r3
 800cf88:	4313      	orrs	r3, r2
 800cf8a:	9304      	str	r3, [sp, #16]
 800cf8c:	46a2      	mov	sl, r4
 800cf8e:	e7d2      	b.n	800cf36 <_vfiprintf_r+0xc6>
 800cf90:	9b03      	ldr	r3, [sp, #12]
 800cf92:	1d19      	adds	r1, r3, #4
 800cf94:	681b      	ldr	r3, [r3, #0]
 800cf96:	9103      	str	r1, [sp, #12]
 800cf98:	2b00      	cmp	r3, #0
 800cf9a:	bfbb      	ittet	lt
 800cf9c:	425b      	neglt	r3, r3
 800cf9e:	f042 0202 	orrlt.w	r2, r2, #2
 800cfa2:	9307      	strge	r3, [sp, #28]
 800cfa4:	9307      	strlt	r3, [sp, #28]
 800cfa6:	bfb8      	it	lt
 800cfa8:	9204      	strlt	r2, [sp, #16]
 800cfaa:	7823      	ldrb	r3, [r4, #0]
 800cfac:	2b2e      	cmp	r3, #46	@ 0x2e
 800cfae:	d10a      	bne.n	800cfc6 <_vfiprintf_r+0x156>
 800cfb0:	7863      	ldrb	r3, [r4, #1]
 800cfb2:	2b2a      	cmp	r3, #42	@ 0x2a
 800cfb4:	d132      	bne.n	800d01c <_vfiprintf_r+0x1ac>
 800cfb6:	9b03      	ldr	r3, [sp, #12]
 800cfb8:	1d1a      	adds	r2, r3, #4
 800cfba:	681b      	ldr	r3, [r3, #0]
 800cfbc:	9203      	str	r2, [sp, #12]
 800cfbe:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800cfc2:	3402      	adds	r4, #2
 800cfc4:	9305      	str	r3, [sp, #20]
 800cfc6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800d09c <_vfiprintf_r+0x22c>
 800cfca:	7821      	ldrb	r1, [r4, #0]
 800cfcc:	2203      	movs	r2, #3
 800cfce:	4650      	mov	r0, sl
 800cfd0:	f7f3 f926 	bl	8000220 <memchr>
 800cfd4:	b138      	cbz	r0, 800cfe6 <_vfiprintf_r+0x176>
 800cfd6:	9b04      	ldr	r3, [sp, #16]
 800cfd8:	eba0 000a 	sub.w	r0, r0, sl
 800cfdc:	2240      	movs	r2, #64	@ 0x40
 800cfde:	4082      	lsls	r2, r0
 800cfe0:	4313      	orrs	r3, r2
 800cfe2:	3401      	adds	r4, #1
 800cfe4:	9304      	str	r3, [sp, #16]
 800cfe6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cfea:	4829      	ldr	r0, [pc, #164]	@ (800d090 <_vfiprintf_r+0x220>)
 800cfec:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800cff0:	2206      	movs	r2, #6
 800cff2:	f7f3 f915 	bl	8000220 <memchr>
 800cff6:	2800      	cmp	r0, #0
 800cff8:	d03f      	beq.n	800d07a <_vfiprintf_r+0x20a>
 800cffa:	4b26      	ldr	r3, [pc, #152]	@ (800d094 <_vfiprintf_r+0x224>)
 800cffc:	bb1b      	cbnz	r3, 800d046 <_vfiprintf_r+0x1d6>
 800cffe:	9b03      	ldr	r3, [sp, #12]
 800d000:	3307      	adds	r3, #7
 800d002:	f023 0307 	bic.w	r3, r3, #7
 800d006:	3308      	adds	r3, #8
 800d008:	9303      	str	r3, [sp, #12]
 800d00a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d00c:	443b      	add	r3, r7
 800d00e:	9309      	str	r3, [sp, #36]	@ 0x24
 800d010:	e76a      	b.n	800cee8 <_vfiprintf_r+0x78>
 800d012:	fb0c 3202 	mla	r2, ip, r2, r3
 800d016:	460c      	mov	r4, r1
 800d018:	2001      	movs	r0, #1
 800d01a:	e7a8      	b.n	800cf6e <_vfiprintf_r+0xfe>
 800d01c:	2300      	movs	r3, #0
 800d01e:	3401      	adds	r4, #1
 800d020:	9305      	str	r3, [sp, #20]
 800d022:	4619      	mov	r1, r3
 800d024:	f04f 0c0a 	mov.w	ip, #10
 800d028:	4620      	mov	r0, r4
 800d02a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d02e:	3a30      	subs	r2, #48	@ 0x30
 800d030:	2a09      	cmp	r2, #9
 800d032:	d903      	bls.n	800d03c <_vfiprintf_r+0x1cc>
 800d034:	2b00      	cmp	r3, #0
 800d036:	d0c6      	beq.n	800cfc6 <_vfiprintf_r+0x156>
 800d038:	9105      	str	r1, [sp, #20]
 800d03a:	e7c4      	b.n	800cfc6 <_vfiprintf_r+0x156>
 800d03c:	fb0c 2101 	mla	r1, ip, r1, r2
 800d040:	4604      	mov	r4, r0
 800d042:	2301      	movs	r3, #1
 800d044:	e7f0      	b.n	800d028 <_vfiprintf_r+0x1b8>
 800d046:	ab03      	add	r3, sp, #12
 800d048:	9300      	str	r3, [sp, #0]
 800d04a:	462a      	mov	r2, r5
 800d04c:	4b12      	ldr	r3, [pc, #72]	@ (800d098 <_vfiprintf_r+0x228>)
 800d04e:	a904      	add	r1, sp, #16
 800d050:	4630      	mov	r0, r6
 800d052:	f7fd fdd1 	bl	800abf8 <_printf_float>
 800d056:	4607      	mov	r7, r0
 800d058:	1c78      	adds	r0, r7, #1
 800d05a:	d1d6      	bne.n	800d00a <_vfiprintf_r+0x19a>
 800d05c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d05e:	07d9      	lsls	r1, r3, #31
 800d060:	d405      	bmi.n	800d06e <_vfiprintf_r+0x1fe>
 800d062:	89ab      	ldrh	r3, [r5, #12]
 800d064:	059a      	lsls	r2, r3, #22
 800d066:	d402      	bmi.n	800d06e <_vfiprintf_r+0x1fe>
 800d068:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d06a:	f7fe fc03 	bl	800b874 <__retarget_lock_release_recursive>
 800d06e:	89ab      	ldrh	r3, [r5, #12]
 800d070:	065b      	lsls	r3, r3, #25
 800d072:	f53f af1f 	bmi.w	800ceb4 <_vfiprintf_r+0x44>
 800d076:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d078:	e71e      	b.n	800ceb8 <_vfiprintf_r+0x48>
 800d07a:	ab03      	add	r3, sp, #12
 800d07c:	9300      	str	r3, [sp, #0]
 800d07e:	462a      	mov	r2, r5
 800d080:	4b05      	ldr	r3, [pc, #20]	@ (800d098 <_vfiprintf_r+0x228>)
 800d082:	a904      	add	r1, sp, #16
 800d084:	4630      	mov	r0, r6
 800d086:	f7fe f84f 	bl	800b128 <_printf_i>
 800d08a:	e7e4      	b.n	800d056 <_vfiprintf_r+0x1e6>
 800d08c:	0800d70e 	.word	0x0800d70e
 800d090:	0800d718 	.word	0x0800d718
 800d094:	0800abf9 	.word	0x0800abf9
 800d098:	0800ce4b 	.word	0x0800ce4b
 800d09c:	0800d714 	.word	0x0800d714

0800d0a0 <__sflush_r>:
 800d0a0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d0a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d0a8:	0716      	lsls	r6, r2, #28
 800d0aa:	4605      	mov	r5, r0
 800d0ac:	460c      	mov	r4, r1
 800d0ae:	d454      	bmi.n	800d15a <__sflush_r+0xba>
 800d0b0:	684b      	ldr	r3, [r1, #4]
 800d0b2:	2b00      	cmp	r3, #0
 800d0b4:	dc02      	bgt.n	800d0bc <__sflush_r+0x1c>
 800d0b6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	dd48      	ble.n	800d14e <__sflush_r+0xae>
 800d0bc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d0be:	2e00      	cmp	r6, #0
 800d0c0:	d045      	beq.n	800d14e <__sflush_r+0xae>
 800d0c2:	2300      	movs	r3, #0
 800d0c4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d0c8:	682f      	ldr	r7, [r5, #0]
 800d0ca:	6a21      	ldr	r1, [r4, #32]
 800d0cc:	602b      	str	r3, [r5, #0]
 800d0ce:	d030      	beq.n	800d132 <__sflush_r+0x92>
 800d0d0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d0d2:	89a3      	ldrh	r3, [r4, #12]
 800d0d4:	0759      	lsls	r1, r3, #29
 800d0d6:	d505      	bpl.n	800d0e4 <__sflush_r+0x44>
 800d0d8:	6863      	ldr	r3, [r4, #4]
 800d0da:	1ad2      	subs	r2, r2, r3
 800d0dc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d0de:	b10b      	cbz	r3, 800d0e4 <__sflush_r+0x44>
 800d0e0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d0e2:	1ad2      	subs	r2, r2, r3
 800d0e4:	2300      	movs	r3, #0
 800d0e6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d0e8:	6a21      	ldr	r1, [r4, #32]
 800d0ea:	4628      	mov	r0, r5
 800d0ec:	47b0      	blx	r6
 800d0ee:	1c43      	adds	r3, r0, #1
 800d0f0:	89a3      	ldrh	r3, [r4, #12]
 800d0f2:	d106      	bne.n	800d102 <__sflush_r+0x62>
 800d0f4:	6829      	ldr	r1, [r5, #0]
 800d0f6:	291d      	cmp	r1, #29
 800d0f8:	d82b      	bhi.n	800d152 <__sflush_r+0xb2>
 800d0fa:	4a2a      	ldr	r2, [pc, #168]	@ (800d1a4 <__sflush_r+0x104>)
 800d0fc:	40ca      	lsrs	r2, r1
 800d0fe:	07d6      	lsls	r6, r2, #31
 800d100:	d527      	bpl.n	800d152 <__sflush_r+0xb2>
 800d102:	2200      	movs	r2, #0
 800d104:	6062      	str	r2, [r4, #4]
 800d106:	04d9      	lsls	r1, r3, #19
 800d108:	6922      	ldr	r2, [r4, #16]
 800d10a:	6022      	str	r2, [r4, #0]
 800d10c:	d504      	bpl.n	800d118 <__sflush_r+0x78>
 800d10e:	1c42      	adds	r2, r0, #1
 800d110:	d101      	bne.n	800d116 <__sflush_r+0x76>
 800d112:	682b      	ldr	r3, [r5, #0]
 800d114:	b903      	cbnz	r3, 800d118 <__sflush_r+0x78>
 800d116:	6560      	str	r0, [r4, #84]	@ 0x54
 800d118:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d11a:	602f      	str	r7, [r5, #0]
 800d11c:	b1b9      	cbz	r1, 800d14e <__sflush_r+0xae>
 800d11e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d122:	4299      	cmp	r1, r3
 800d124:	d002      	beq.n	800d12c <__sflush_r+0x8c>
 800d126:	4628      	mov	r0, r5
 800d128:	f7ff f9fe 	bl	800c528 <_free_r>
 800d12c:	2300      	movs	r3, #0
 800d12e:	6363      	str	r3, [r4, #52]	@ 0x34
 800d130:	e00d      	b.n	800d14e <__sflush_r+0xae>
 800d132:	2301      	movs	r3, #1
 800d134:	4628      	mov	r0, r5
 800d136:	47b0      	blx	r6
 800d138:	4602      	mov	r2, r0
 800d13a:	1c50      	adds	r0, r2, #1
 800d13c:	d1c9      	bne.n	800d0d2 <__sflush_r+0x32>
 800d13e:	682b      	ldr	r3, [r5, #0]
 800d140:	2b00      	cmp	r3, #0
 800d142:	d0c6      	beq.n	800d0d2 <__sflush_r+0x32>
 800d144:	2b1d      	cmp	r3, #29
 800d146:	d001      	beq.n	800d14c <__sflush_r+0xac>
 800d148:	2b16      	cmp	r3, #22
 800d14a:	d11e      	bne.n	800d18a <__sflush_r+0xea>
 800d14c:	602f      	str	r7, [r5, #0]
 800d14e:	2000      	movs	r0, #0
 800d150:	e022      	b.n	800d198 <__sflush_r+0xf8>
 800d152:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d156:	b21b      	sxth	r3, r3
 800d158:	e01b      	b.n	800d192 <__sflush_r+0xf2>
 800d15a:	690f      	ldr	r7, [r1, #16]
 800d15c:	2f00      	cmp	r7, #0
 800d15e:	d0f6      	beq.n	800d14e <__sflush_r+0xae>
 800d160:	0793      	lsls	r3, r2, #30
 800d162:	680e      	ldr	r6, [r1, #0]
 800d164:	bf08      	it	eq
 800d166:	694b      	ldreq	r3, [r1, #20]
 800d168:	600f      	str	r7, [r1, #0]
 800d16a:	bf18      	it	ne
 800d16c:	2300      	movne	r3, #0
 800d16e:	eba6 0807 	sub.w	r8, r6, r7
 800d172:	608b      	str	r3, [r1, #8]
 800d174:	f1b8 0f00 	cmp.w	r8, #0
 800d178:	dde9      	ble.n	800d14e <__sflush_r+0xae>
 800d17a:	6a21      	ldr	r1, [r4, #32]
 800d17c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800d17e:	4643      	mov	r3, r8
 800d180:	463a      	mov	r2, r7
 800d182:	4628      	mov	r0, r5
 800d184:	47b0      	blx	r6
 800d186:	2800      	cmp	r0, #0
 800d188:	dc08      	bgt.n	800d19c <__sflush_r+0xfc>
 800d18a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d18e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d192:	81a3      	strh	r3, [r4, #12]
 800d194:	f04f 30ff 	mov.w	r0, #4294967295
 800d198:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d19c:	4407      	add	r7, r0
 800d19e:	eba8 0800 	sub.w	r8, r8, r0
 800d1a2:	e7e7      	b.n	800d174 <__sflush_r+0xd4>
 800d1a4:	20400001 	.word	0x20400001

0800d1a8 <_fflush_r>:
 800d1a8:	b538      	push	{r3, r4, r5, lr}
 800d1aa:	690b      	ldr	r3, [r1, #16]
 800d1ac:	4605      	mov	r5, r0
 800d1ae:	460c      	mov	r4, r1
 800d1b0:	b913      	cbnz	r3, 800d1b8 <_fflush_r+0x10>
 800d1b2:	2500      	movs	r5, #0
 800d1b4:	4628      	mov	r0, r5
 800d1b6:	bd38      	pop	{r3, r4, r5, pc}
 800d1b8:	b118      	cbz	r0, 800d1c2 <_fflush_r+0x1a>
 800d1ba:	6a03      	ldr	r3, [r0, #32]
 800d1bc:	b90b      	cbnz	r3, 800d1c2 <_fflush_r+0x1a>
 800d1be:	f7fe f95d 	bl	800b47c <__sinit>
 800d1c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d1c6:	2b00      	cmp	r3, #0
 800d1c8:	d0f3      	beq.n	800d1b2 <_fflush_r+0xa>
 800d1ca:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d1cc:	07d0      	lsls	r0, r2, #31
 800d1ce:	d404      	bmi.n	800d1da <_fflush_r+0x32>
 800d1d0:	0599      	lsls	r1, r3, #22
 800d1d2:	d402      	bmi.n	800d1da <_fflush_r+0x32>
 800d1d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d1d6:	f7fe fb4c 	bl	800b872 <__retarget_lock_acquire_recursive>
 800d1da:	4628      	mov	r0, r5
 800d1dc:	4621      	mov	r1, r4
 800d1de:	f7ff ff5f 	bl	800d0a0 <__sflush_r>
 800d1e2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d1e4:	07da      	lsls	r2, r3, #31
 800d1e6:	4605      	mov	r5, r0
 800d1e8:	d4e4      	bmi.n	800d1b4 <_fflush_r+0xc>
 800d1ea:	89a3      	ldrh	r3, [r4, #12]
 800d1ec:	059b      	lsls	r3, r3, #22
 800d1ee:	d4e1      	bmi.n	800d1b4 <_fflush_r+0xc>
 800d1f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d1f2:	f7fe fb3f 	bl	800b874 <__retarget_lock_release_recursive>
 800d1f6:	e7dd      	b.n	800d1b4 <_fflush_r+0xc>

0800d1f8 <__swhatbuf_r>:
 800d1f8:	b570      	push	{r4, r5, r6, lr}
 800d1fa:	460c      	mov	r4, r1
 800d1fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d200:	2900      	cmp	r1, #0
 800d202:	b096      	sub	sp, #88	@ 0x58
 800d204:	4615      	mov	r5, r2
 800d206:	461e      	mov	r6, r3
 800d208:	da0d      	bge.n	800d226 <__swhatbuf_r+0x2e>
 800d20a:	89a3      	ldrh	r3, [r4, #12]
 800d20c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800d210:	f04f 0100 	mov.w	r1, #0
 800d214:	bf14      	ite	ne
 800d216:	2340      	movne	r3, #64	@ 0x40
 800d218:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800d21c:	2000      	movs	r0, #0
 800d21e:	6031      	str	r1, [r6, #0]
 800d220:	602b      	str	r3, [r5, #0]
 800d222:	b016      	add	sp, #88	@ 0x58
 800d224:	bd70      	pop	{r4, r5, r6, pc}
 800d226:	466a      	mov	r2, sp
 800d228:	f000 f848 	bl	800d2bc <_fstat_r>
 800d22c:	2800      	cmp	r0, #0
 800d22e:	dbec      	blt.n	800d20a <__swhatbuf_r+0x12>
 800d230:	9901      	ldr	r1, [sp, #4]
 800d232:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800d236:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800d23a:	4259      	negs	r1, r3
 800d23c:	4159      	adcs	r1, r3
 800d23e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d242:	e7eb      	b.n	800d21c <__swhatbuf_r+0x24>

0800d244 <__smakebuf_r>:
 800d244:	898b      	ldrh	r3, [r1, #12]
 800d246:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d248:	079d      	lsls	r5, r3, #30
 800d24a:	4606      	mov	r6, r0
 800d24c:	460c      	mov	r4, r1
 800d24e:	d507      	bpl.n	800d260 <__smakebuf_r+0x1c>
 800d250:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800d254:	6023      	str	r3, [r4, #0]
 800d256:	6123      	str	r3, [r4, #16]
 800d258:	2301      	movs	r3, #1
 800d25a:	6163      	str	r3, [r4, #20]
 800d25c:	b003      	add	sp, #12
 800d25e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d260:	ab01      	add	r3, sp, #4
 800d262:	466a      	mov	r2, sp
 800d264:	f7ff ffc8 	bl	800d1f8 <__swhatbuf_r>
 800d268:	9f00      	ldr	r7, [sp, #0]
 800d26a:	4605      	mov	r5, r0
 800d26c:	4639      	mov	r1, r7
 800d26e:	4630      	mov	r0, r6
 800d270:	f7ff f9ce 	bl	800c610 <_malloc_r>
 800d274:	b948      	cbnz	r0, 800d28a <__smakebuf_r+0x46>
 800d276:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d27a:	059a      	lsls	r2, r3, #22
 800d27c:	d4ee      	bmi.n	800d25c <__smakebuf_r+0x18>
 800d27e:	f023 0303 	bic.w	r3, r3, #3
 800d282:	f043 0302 	orr.w	r3, r3, #2
 800d286:	81a3      	strh	r3, [r4, #12]
 800d288:	e7e2      	b.n	800d250 <__smakebuf_r+0xc>
 800d28a:	89a3      	ldrh	r3, [r4, #12]
 800d28c:	6020      	str	r0, [r4, #0]
 800d28e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d292:	81a3      	strh	r3, [r4, #12]
 800d294:	9b01      	ldr	r3, [sp, #4]
 800d296:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800d29a:	b15b      	cbz	r3, 800d2b4 <__smakebuf_r+0x70>
 800d29c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d2a0:	4630      	mov	r0, r6
 800d2a2:	f000 f81d 	bl	800d2e0 <_isatty_r>
 800d2a6:	b128      	cbz	r0, 800d2b4 <__smakebuf_r+0x70>
 800d2a8:	89a3      	ldrh	r3, [r4, #12]
 800d2aa:	f023 0303 	bic.w	r3, r3, #3
 800d2ae:	f043 0301 	orr.w	r3, r3, #1
 800d2b2:	81a3      	strh	r3, [r4, #12]
 800d2b4:	89a3      	ldrh	r3, [r4, #12]
 800d2b6:	431d      	orrs	r5, r3
 800d2b8:	81a5      	strh	r5, [r4, #12]
 800d2ba:	e7cf      	b.n	800d25c <__smakebuf_r+0x18>

0800d2bc <_fstat_r>:
 800d2bc:	b538      	push	{r3, r4, r5, lr}
 800d2be:	4d07      	ldr	r5, [pc, #28]	@ (800d2dc <_fstat_r+0x20>)
 800d2c0:	2300      	movs	r3, #0
 800d2c2:	4604      	mov	r4, r0
 800d2c4:	4608      	mov	r0, r1
 800d2c6:	4611      	mov	r1, r2
 800d2c8:	602b      	str	r3, [r5, #0]
 800d2ca:	f7f4 fcf5 	bl	8001cb8 <_fstat>
 800d2ce:	1c43      	adds	r3, r0, #1
 800d2d0:	d102      	bne.n	800d2d8 <_fstat_r+0x1c>
 800d2d2:	682b      	ldr	r3, [r5, #0]
 800d2d4:	b103      	cbz	r3, 800d2d8 <_fstat_r+0x1c>
 800d2d6:	6023      	str	r3, [r4, #0]
 800d2d8:	bd38      	pop	{r3, r4, r5, pc}
 800d2da:	bf00      	nop
 800d2dc:	200013c4 	.word	0x200013c4

0800d2e0 <_isatty_r>:
 800d2e0:	b538      	push	{r3, r4, r5, lr}
 800d2e2:	4d06      	ldr	r5, [pc, #24]	@ (800d2fc <_isatty_r+0x1c>)
 800d2e4:	2300      	movs	r3, #0
 800d2e6:	4604      	mov	r4, r0
 800d2e8:	4608      	mov	r0, r1
 800d2ea:	602b      	str	r3, [r5, #0]
 800d2ec:	f7f4 fcf4 	bl	8001cd8 <_isatty>
 800d2f0:	1c43      	adds	r3, r0, #1
 800d2f2:	d102      	bne.n	800d2fa <_isatty_r+0x1a>
 800d2f4:	682b      	ldr	r3, [r5, #0]
 800d2f6:	b103      	cbz	r3, 800d2fa <_isatty_r+0x1a>
 800d2f8:	6023      	str	r3, [r4, #0]
 800d2fa:	bd38      	pop	{r3, r4, r5, pc}
 800d2fc:	200013c4 	.word	0x200013c4

0800d300 <_sbrk_r>:
 800d300:	b538      	push	{r3, r4, r5, lr}
 800d302:	4d06      	ldr	r5, [pc, #24]	@ (800d31c <_sbrk_r+0x1c>)
 800d304:	2300      	movs	r3, #0
 800d306:	4604      	mov	r4, r0
 800d308:	4608      	mov	r0, r1
 800d30a:	602b      	str	r3, [r5, #0]
 800d30c:	f7f4 fcfc 	bl	8001d08 <_sbrk>
 800d310:	1c43      	adds	r3, r0, #1
 800d312:	d102      	bne.n	800d31a <_sbrk_r+0x1a>
 800d314:	682b      	ldr	r3, [r5, #0]
 800d316:	b103      	cbz	r3, 800d31a <_sbrk_r+0x1a>
 800d318:	6023      	str	r3, [r4, #0]
 800d31a:	bd38      	pop	{r3, r4, r5, pc}
 800d31c:	200013c4 	.word	0x200013c4

0800d320 <memcpy>:
 800d320:	440a      	add	r2, r1
 800d322:	4291      	cmp	r1, r2
 800d324:	f100 33ff 	add.w	r3, r0, #4294967295
 800d328:	d100      	bne.n	800d32c <memcpy+0xc>
 800d32a:	4770      	bx	lr
 800d32c:	b510      	push	{r4, lr}
 800d32e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d332:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d336:	4291      	cmp	r1, r2
 800d338:	d1f9      	bne.n	800d32e <memcpy+0xe>
 800d33a:	bd10      	pop	{r4, pc}

0800d33c <__assert_func>:
 800d33c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d33e:	4614      	mov	r4, r2
 800d340:	461a      	mov	r2, r3
 800d342:	4b09      	ldr	r3, [pc, #36]	@ (800d368 <__assert_func+0x2c>)
 800d344:	681b      	ldr	r3, [r3, #0]
 800d346:	4605      	mov	r5, r0
 800d348:	68d8      	ldr	r0, [r3, #12]
 800d34a:	b14c      	cbz	r4, 800d360 <__assert_func+0x24>
 800d34c:	4b07      	ldr	r3, [pc, #28]	@ (800d36c <__assert_func+0x30>)
 800d34e:	9100      	str	r1, [sp, #0]
 800d350:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d354:	4906      	ldr	r1, [pc, #24]	@ (800d370 <__assert_func+0x34>)
 800d356:	462b      	mov	r3, r5
 800d358:	f000 f842 	bl	800d3e0 <fiprintf>
 800d35c:	f000 f852 	bl	800d404 <abort>
 800d360:	4b04      	ldr	r3, [pc, #16]	@ (800d374 <__assert_func+0x38>)
 800d362:	461c      	mov	r4, r3
 800d364:	e7f3      	b.n	800d34e <__assert_func+0x12>
 800d366:	bf00      	nop
 800d368:	200000e8 	.word	0x200000e8
 800d36c:	0800d729 	.word	0x0800d729
 800d370:	0800d736 	.word	0x0800d736
 800d374:	0800d764 	.word	0x0800d764

0800d378 <_calloc_r>:
 800d378:	b570      	push	{r4, r5, r6, lr}
 800d37a:	fba1 5402 	umull	r5, r4, r1, r2
 800d37e:	b934      	cbnz	r4, 800d38e <_calloc_r+0x16>
 800d380:	4629      	mov	r1, r5
 800d382:	f7ff f945 	bl	800c610 <_malloc_r>
 800d386:	4606      	mov	r6, r0
 800d388:	b928      	cbnz	r0, 800d396 <_calloc_r+0x1e>
 800d38a:	4630      	mov	r0, r6
 800d38c:	bd70      	pop	{r4, r5, r6, pc}
 800d38e:	220c      	movs	r2, #12
 800d390:	6002      	str	r2, [r0, #0]
 800d392:	2600      	movs	r6, #0
 800d394:	e7f9      	b.n	800d38a <_calloc_r+0x12>
 800d396:	462a      	mov	r2, r5
 800d398:	4621      	mov	r1, r4
 800d39a:	f7fe f9ed 	bl	800b778 <memset>
 800d39e:	e7f4      	b.n	800d38a <_calloc_r+0x12>

0800d3a0 <__ascii_mbtowc>:
 800d3a0:	b082      	sub	sp, #8
 800d3a2:	b901      	cbnz	r1, 800d3a6 <__ascii_mbtowc+0x6>
 800d3a4:	a901      	add	r1, sp, #4
 800d3a6:	b142      	cbz	r2, 800d3ba <__ascii_mbtowc+0x1a>
 800d3a8:	b14b      	cbz	r3, 800d3be <__ascii_mbtowc+0x1e>
 800d3aa:	7813      	ldrb	r3, [r2, #0]
 800d3ac:	600b      	str	r3, [r1, #0]
 800d3ae:	7812      	ldrb	r2, [r2, #0]
 800d3b0:	1e10      	subs	r0, r2, #0
 800d3b2:	bf18      	it	ne
 800d3b4:	2001      	movne	r0, #1
 800d3b6:	b002      	add	sp, #8
 800d3b8:	4770      	bx	lr
 800d3ba:	4610      	mov	r0, r2
 800d3bc:	e7fb      	b.n	800d3b6 <__ascii_mbtowc+0x16>
 800d3be:	f06f 0001 	mvn.w	r0, #1
 800d3c2:	e7f8      	b.n	800d3b6 <__ascii_mbtowc+0x16>

0800d3c4 <__ascii_wctomb>:
 800d3c4:	4603      	mov	r3, r0
 800d3c6:	4608      	mov	r0, r1
 800d3c8:	b141      	cbz	r1, 800d3dc <__ascii_wctomb+0x18>
 800d3ca:	2aff      	cmp	r2, #255	@ 0xff
 800d3cc:	d904      	bls.n	800d3d8 <__ascii_wctomb+0x14>
 800d3ce:	228a      	movs	r2, #138	@ 0x8a
 800d3d0:	601a      	str	r2, [r3, #0]
 800d3d2:	f04f 30ff 	mov.w	r0, #4294967295
 800d3d6:	4770      	bx	lr
 800d3d8:	700a      	strb	r2, [r1, #0]
 800d3da:	2001      	movs	r0, #1
 800d3dc:	4770      	bx	lr
	...

0800d3e0 <fiprintf>:
 800d3e0:	b40e      	push	{r1, r2, r3}
 800d3e2:	b503      	push	{r0, r1, lr}
 800d3e4:	4601      	mov	r1, r0
 800d3e6:	ab03      	add	r3, sp, #12
 800d3e8:	4805      	ldr	r0, [pc, #20]	@ (800d400 <fiprintf+0x20>)
 800d3ea:	f853 2b04 	ldr.w	r2, [r3], #4
 800d3ee:	6800      	ldr	r0, [r0, #0]
 800d3f0:	9301      	str	r3, [sp, #4]
 800d3f2:	f7ff fd3d 	bl	800ce70 <_vfiprintf_r>
 800d3f6:	b002      	add	sp, #8
 800d3f8:	f85d eb04 	ldr.w	lr, [sp], #4
 800d3fc:	b003      	add	sp, #12
 800d3fe:	4770      	bx	lr
 800d400:	200000e8 	.word	0x200000e8

0800d404 <abort>:
 800d404:	b508      	push	{r3, lr}
 800d406:	2006      	movs	r0, #6
 800d408:	f000 f82c 	bl	800d464 <raise>
 800d40c:	2001      	movs	r0, #1
 800d40e:	f7f4 fc03 	bl	8001c18 <_exit>

0800d412 <_raise_r>:
 800d412:	291f      	cmp	r1, #31
 800d414:	b538      	push	{r3, r4, r5, lr}
 800d416:	4605      	mov	r5, r0
 800d418:	460c      	mov	r4, r1
 800d41a:	d904      	bls.n	800d426 <_raise_r+0x14>
 800d41c:	2316      	movs	r3, #22
 800d41e:	6003      	str	r3, [r0, #0]
 800d420:	f04f 30ff 	mov.w	r0, #4294967295
 800d424:	bd38      	pop	{r3, r4, r5, pc}
 800d426:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800d428:	b112      	cbz	r2, 800d430 <_raise_r+0x1e>
 800d42a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d42e:	b94b      	cbnz	r3, 800d444 <_raise_r+0x32>
 800d430:	4628      	mov	r0, r5
 800d432:	f000 f831 	bl	800d498 <_getpid_r>
 800d436:	4622      	mov	r2, r4
 800d438:	4601      	mov	r1, r0
 800d43a:	4628      	mov	r0, r5
 800d43c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d440:	f000 b818 	b.w	800d474 <_kill_r>
 800d444:	2b01      	cmp	r3, #1
 800d446:	d00a      	beq.n	800d45e <_raise_r+0x4c>
 800d448:	1c59      	adds	r1, r3, #1
 800d44a:	d103      	bne.n	800d454 <_raise_r+0x42>
 800d44c:	2316      	movs	r3, #22
 800d44e:	6003      	str	r3, [r0, #0]
 800d450:	2001      	movs	r0, #1
 800d452:	e7e7      	b.n	800d424 <_raise_r+0x12>
 800d454:	2100      	movs	r1, #0
 800d456:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800d45a:	4620      	mov	r0, r4
 800d45c:	4798      	blx	r3
 800d45e:	2000      	movs	r0, #0
 800d460:	e7e0      	b.n	800d424 <_raise_r+0x12>
	...

0800d464 <raise>:
 800d464:	4b02      	ldr	r3, [pc, #8]	@ (800d470 <raise+0xc>)
 800d466:	4601      	mov	r1, r0
 800d468:	6818      	ldr	r0, [r3, #0]
 800d46a:	f7ff bfd2 	b.w	800d412 <_raise_r>
 800d46e:	bf00      	nop
 800d470:	200000e8 	.word	0x200000e8

0800d474 <_kill_r>:
 800d474:	b538      	push	{r3, r4, r5, lr}
 800d476:	4d07      	ldr	r5, [pc, #28]	@ (800d494 <_kill_r+0x20>)
 800d478:	2300      	movs	r3, #0
 800d47a:	4604      	mov	r4, r0
 800d47c:	4608      	mov	r0, r1
 800d47e:	4611      	mov	r1, r2
 800d480:	602b      	str	r3, [r5, #0]
 800d482:	f7f4 fbb9 	bl	8001bf8 <_kill>
 800d486:	1c43      	adds	r3, r0, #1
 800d488:	d102      	bne.n	800d490 <_kill_r+0x1c>
 800d48a:	682b      	ldr	r3, [r5, #0]
 800d48c:	b103      	cbz	r3, 800d490 <_kill_r+0x1c>
 800d48e:	6023      	str	r3, [r4, #0]
 800d490:	bd38      	pop	{r3, r4, r5, pc}
 800d492:	bf00      	nop
 800d494:	200013c4 	.word	0x200013c4

0800d498 <_getpid_r>:
 800d498:	f7f4 bba6 	b.w	8001be8 <_getpid>

0800d49c <_init>:
 800d49c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d49e:	bf00      	nop
 800d4a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d4a2:	bc08      	pop	{r3}
 800d4a4:	469e      	mov	lr, r3
 800d4a6:	4770      	bx	lr

0800d4a8 <_fini>:
 800d4a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d4aa:	bf00      	nop
 800d4ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d4ae:	bc08      	pop	{r3}
 800d4b0:	469e      	mov	lr, r3
 800d4b2:	4770      	bx	lr
