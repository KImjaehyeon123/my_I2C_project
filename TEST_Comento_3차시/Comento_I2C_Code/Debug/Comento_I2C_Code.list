
Comento_I2C_Code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009a28  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000260  08009c00  08009c00  0000ac00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009e60  08009e60  0000b138  2**0
                  CONTENTS
  4 .ARM          00000008  08009e60  08009e60  0000ae60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009e68  08009e68  0000b138  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009e68  08009e68  0000ae68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009e6c  08009e6c  0000ae6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000138  20000000  08009e70  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001120  20000138  08009fa8  0000b138  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001258  08009fa8  0000b258  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b138  2**0
                  CONTENTS, READONLY
 12 .debug_info   000189cc  00000000  00000000  0000b168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003ca9  00000000  00000000  00023b34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015a0  00000000  00000000  000277e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000010b2  00000000  00000000  00028d80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000268f3  00000000  00000000  00029e32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c7fe  00000000  00000000  00050725  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dde61  00000000  00000000  0006cf23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014ad84  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006148  00000000  00000000  0014adc8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000a7  00000000  00000000  00150f10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000138 	.word	0x20000138
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08009be8 	.word	0x08009be8

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	2000013c 	.word	0x2000013c
 8000214:	08009be8 	.word	0x08009be8

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b988 	b.w	8000540 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	468e      	mov	lr, r1
 8000250:	4604      	mov	r4, r0
 8000252:	4688      	mov	r8, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4617      	mov	r7, r2
 800025c:	d962      	bls.n	8000324 <__udivmoddi4+0xdc>
 800025e:	fab2 f682 	clz	r6, r2
 8000262:	b14e      	cbz	r6, 8000278 <__udivmoddi4+0x30>
 8000264:	f1c6 0320 	rsb	r3, r6, #32
 8000268:	fa01 f806 	lsl.w	r8, r1, r6
 800026c:	fa20 f303 	lsr.w	r3, r0, r3
 8000270:	40b7      	lsls	r7, r6
 8000272:	ea43 0808 	orr.w	r8, r3, r8
 8000276:	40b4      	lsls	r4, r6
 8000278:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800027c:	fa1f fc87 	uxth.w	ip, r7
 8000280:	fbb8 f1fe 	udiv	r1, r8, lr
 8000284:	0c23      	lsrs	r3, r4, #16
 8000286:	fb0e 8811 	mls	r8, lr, r1, r8
 800028a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800028e:	fb01 f20c 	mul.w	r2, r1, ip
 8000292:	429a      	cmp	r2, r3
 8000294:	d909      	bls.n	80002aa <__udivmoddi4+0x62>
 8000296:	18fb      	adds	r3, r7, r3
 8000298:	f101 30ff 	add.w	r0, r1, #4294967295
 800029c:	f080 80ea 	bcs.w	8000474 <__udivmoddi4+0x22c>
 80002a0:	429a      	cmp	r2, r3
 80002a2:	f240 80e7 	bls.w	8000474 <__udivmoddi4+0x22c>
 80002a6:	3902      	subs	r1, #2
 80002a8:	443b      	add	r3, r7
 80002aa:	1a9a      	subs	r2, r3, r2
 80002ac:	b2a3      	uxth	r3, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002ba:	fb00 fc0c 	mul.w	ip, r0, ip
 80002be:	459c      	cmp	ip, r3
 80002c0:	d909      	bls.n	80002d6 <__udivmoddi4+0x8e>
 80002c2:	18fb      	adds	r3, r7, r3
 80002c4:	f100 32ff 	add.w	r2, r0, #4294967295
 80002c8:	f080 80d6 	bcs.w	8000478 <__udivmoddi4+0x230>
 80002cc:	459c      	cmp	ip, r3
 80002ce:	f240 80d3 	bls.w	8000478 <__udivmoddi4+0x230>
 80002d2:	443b      	add	r3, r7
 80002d4:	3802      	subs	r0, #2
 80002d6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002da:	eba3 030c 	sub.w	r3, r3, ip
 80002de:	2100      	movs	r1, #0
 80002e0:	b11d      	cbz	r5, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40f3      	lsrs	r3, r6
 80002e4:	2200      	movs	r2, #0
 80002e6:	e9c5 3200 	strd	r3, r2, [r5]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d905      	bls.n	80002fe <__udivmoddi4+0xb6>
 80002f2:	b10d      	cbz	r5, 80002f8 <__udivmoddi4+0xb0>
 80002f4:	e9c5 0100 	strd	r0, r1, [r5]
 80002f8:	2100      	movs	r1, #0
 80002fa:	4608      	mov	r0, r1
 80002fc:	e7f5      	b.n	80002ea <__udivmoddi4+0xa2>
 80002fe:	fab3 f183 	clz	r1, r3
 8000302:	2900      	cmp	r1, #0
 8000304:	d146      	bne.n	8000394 <__udivmoddi4+0x14c>
 8000306:	4573      	cmp	r3, lr
 8000308:	d302      	bcc.n	8000310 <__udivmoddi4+0xc8>
 800030a:	4282      	cmp	r2, r0
 800030c:	f200 8105 	bhi.w	800051a <__udivmoddi4+0x2d2>
 8000310:	1a84      	subs	r4, r0, r2
 8000312:	eb6e 0203 	sbc.w	r2, lr, r3
 8000316:	2001      	movs	r0, #1
 8000318:	4690      	mov	r8, r2
 800031a:	2d00      	cmp	r5, #0
 800031c:	d0e5      	beq.n	80002ea <__udivmoddi4+0xa2>
 800031e:	e9c5 4800 	strd	r4, r8, [r5]
 8000322:	e7e2      	b.n	80002ea <__udivmoddi4+0xa2>
 8000324:	2a00      	cmp	r2, #0
 8000326:	f000 8090 	beq.w	800044a <__udivmoddi4+0x202>
 800032a:	fab2 f682 	clz	r6, r2
 800032e:	2e00      	cmp	r6, #0
 8000330:	f040 80a4 	bne.w	800047c <__udivmoddi4+0x234>
 8000334:	1a8a      	subs	r2, r1, r2
 8000336:	0c03      	lsrs	r3, r0, #16
 8000338:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800033c:	b280      	uxth	r0, r0
 800033e:	b2bc      	uxth	r4, r7
 8000340:	2101      	movs	r1, #1
 8000342:	fbb2 fcfe 	udiv	ip, r2, lr
 8000346:	fb0e 221c 	mls	r2, lr, ip, r2
 800034a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800034e:	fb04 f20c 	mul.w	r2, r4, ip
 8000352:	429a      	cmp	r2, r3
 8000354:	d907      	bls.n	8000366 <__udivmoddi4+0x11e>
 8000356:	18fb      	adds	r3, r7, r3
 8000358:	f10c 38ff 	add.w	r8, ip, #4294967295
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x11c>
 800035e:	429a      	cmp	r2, r3
 8000360:	f200 80e0 	bhi.w	8000524 <__udivmoddi4+0x2dc>
 8000364:	46c4      	mov	ip, r8
 8000366:	1a9b      	subs	r3, r3, r2
 8000368:	fbb3 f2fe 	udiv	r2, r3, lr
 800036c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000370:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000374:	fb02 f404 	mul.w	r4, r2, r4
 8000378:	429c      	cmp	r4, r3
 800037a:	d907      	bls.n	800038c <__udivmoddi4+0x144>
 800037c:	18fb      	adds	r3, r7, r3
 800037e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x142>
 8000384:	429c      	cmp	r4, r3
 8000386:	f200 80ca 	bhi.w	800051e <__udivmoddi4+0x2d6>
 800038a:	4602      	mov	r2, r0
 800038c:	1b1b      	subs	r3, r3, r4
 800038e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000392:	e7a5      	b.n	80002e0 <__udivmoddi4+0x98>
 8000394:	f1c1 0620 	rsb	r6, r1, #32
 8000398:	408b      	lsls	r3, r1
 800039a:	fa22 f706 	lsr.w	r7, r2, r6
 800039e:	431f      	orrs	r7, r3
 80003a0:	fa0e f401 	lsl.w	r4, lr, r1
 80003a4:	fa20 f306 	lsr.w	r3, r0, r6
 80003a8:	fa2e fe06 	lsr.w	lr, lr, r6
 80003ac:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003b0:	4323      	orrs	r3, r4
 80003b2:	fa00 f801 	lsl.w	r8, r0, r1
 80003b6:	fa1f fc87 	uxth.w	ip, r7
 80003ba:	fbbe f0f9 	udiv	r0, lr, r9
 80003be:	0c1c      	lsrs	r4, r3, #16
 80003c0:	fb09 ee10 	mls	lr, r9, r0, lr
 80003c4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003c8:	fb00 fe0c 	mul.w	lr, r0, ip
 80003cc:	45a6      	cmp	lr, r4
 80003ce:	fa02 f201 	lsl.w	r2, r2, r1
 80003d2:	d909      	bls.n	80003e8 <__udivmoddi4+0x1a0>
 80003d4:	193c      	adds	r4, r7, r4
 80003d6:	f100 3aff 	add.w	sl, r0, #4294967295
 80003da:	f080 809c 	bcs.w	8000516 <__udivmoddi4+0x2ce>
 80003de:	45a6      	cmp	lr, r4
 80003e0:	f240 8099 	bls.w	8000516 <__udivmoddi4+0x2ce>
 80003e4:	3802      	subs	r0, #2
 80003e6:	443c      	add	r4, r7
 80003e8:	eba4 040e 	sub.w	r4, r4, lr
 80003ec:	fa1f fe83 	uxth.w	lr, r3
 80003f0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003f4:	fb09 4413 	mls	r4, r9, r3, r4
 80003f8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003fc:	fb03 fc0c 	mul.w	ip, r3, ip
 8000400:	45a4      	cmp	ip, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1ce>
 8000404:	193c      	adds	r4, r7, r4
 8000406:	f103 3eff 	add.w	lr, r3, #4294967295
 800040a:	f080 8082 	bcs.w	8000512 <__udivmoddi4+0x2ca>
 800040e:	45a4      	cmp	ip, r4
 8000410:	d97f      	bls.n	8000512 <__udivmoddi4+0x2ca>
 8000412:	3b02      	subs	r3, #2
 8000414:	443c      	add	r4, r7
 8000416:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800041a:	eba4 040c 	sub.w	r4, r4, ip
 800041e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000422:	4564      	cmp	r4, ip
 8000424:	4673      	mov	r3, lr
 8000426:	46e1      	mov	r9, ip
 8000428:	d362      	bcc.n	80004f0 <__udivmoddi4+0x2a8>
 800042a:	d05f      	beq.n	80004ec <__udivmoddi4+0x2a4>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x1fe>
 800042e:	ebb8 0203 	subs.w	r2, r8, r3
 8000432:	eb64 0409 	sbc.w	r4, r4, r9
 8000436:	fa04 f606 	lsl.w	r6, r4, r6
 800043a:	fa22 f301 	lsr.w	r3, r2, r1
 800043e:	431e      	orrs	r6, r3
 8000440:	40cc      	lsrs	r4, r1
 8000442:	e9c5 6400 	strd	r6, r4, [r5]
 8000446:	2100      	movs	r1, #0
 8000448:	e74f      	b.n	80002ea <__udivmoddi4+0xa2>
 800044a:	fbb1 fcf2 	udiv	ip, r1, r2
 800044e:	0c01      	lsrs	r1, r0, #16
 8000450:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000454:	b280      	uxth	r0, r0
 8000456:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800045a:	463b      	mov	r3, r7
 800045c:	4638      	mov	r0, r7
 800045e:	463c      	mov	r4, r7
 8000460:	46b8      	mov	r8, r7
 8000462:	46be      	mov	lr, r7
 8000464:	2620      	movs	r6, #32
 8000466:	fbb1 f1f7 	udiv	r1, r1, r7
 800046a:	eba2 0208 	sub.w	r2, r2, r8
 800046e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000472:	e766      	b.n	8000342 <__udivmoddi4+0xfa>
 8000474:	4601      	mov	r1, r0
 8000476:	e718      	b.n	80002aa <__udivmoddi4+0x62>
 8000478:	4610      	mov	r0, r2
 800047a:	e72c      	b.n	80002d6 <__udivmoddi4+0x8e>
 800047c:	f1c6 0220 	rsb	r2, r6, #32
 8000480:	fa2e f302 	lsr.w	r3, lr, r2
 8000484:	40b7      	lsls	r7, r6
 8000486:	40b1      	lsls	r1, r6
 8000488:	fa20 f202 	lsr.w	r2, r0, r2
 800048c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000490:	430a      	orrs	r2, r1
 8000492:	fbb3 f8fe 	udiv	r8, r3, lr
 8000496:	b2bc      	uxth	r4, r7
 8000498:	fb0e 3318 	mls	r3, lr, r8, r3
 800049c:	0c11      	lsrs	r1, r2, #16
 800049e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a2:	fb08 f904 	mul.w	r9, r8, r4
 80004a6:	40b0      	lsls	r0, r6
 80004a8:	4589      	cmp	r9, r1
 80004aa:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004ae:	b280      	uxth	r0, r0
 80004b0:	d93e      	bls.n	8000530 <__udivmoddi4+0x2e8>
 80004b2:	1879      	adds	r1, r7, r1
 80004b4:	f108 3cff 	add.w	ip, r8, #4294967295
 80004b8:	d201      	bcs.n	80004be <__udivmoddi4+0x276>
 80004ba:	4589      	cmp	r9, r1
 80004bc:	d81f      	bhi.n	80004fe <__udivmoddi4+0x2b6>
 80004be:	eba1 0109 	sub.w	r1, r1, r9
 80004c2:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c6:	fb09 f804 	mul.w	r8, r9, r4
 80004ca:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ce:	b292      	uxth	r2, r2
 80004d0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004d4:	4542      	cmp	r2, r8
 80004d6:	d229      	bcs.n	800052c <__udivmoddi4+0x2e4>
 80004d8:	18ba      	adds	r2, r7, r2
 80004da:	f109 31ff 	add.w	r1, r9, #4294967295
 80004de:	d2c4      	bcs.n	800046a <__udivmoddi4+0x222>
 80004e0:	4542      	cmp	r2, r8
 80004e2:	d2c2      	bcs.n	800046a <__udivmoddi4+0x222>
 80004e4:	f1a9 0102 	sub.w	r1, r9, #2
 80004e8:	443a      	add	r2, r7
 80004ea:	e7be      	b.n	800046a <__udivmoddi4+0x222>
 80004ec:	45f0      	cmp	r8, lr
 80004ee:	d29d      	bcs.n	800042c <__udivmoddi4+0x1e4>
 80004f0:	ebbe 0302 	subs.w	r3, lr, r2
 80004f4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004f8:	3801      	subs	r0, #1
 80004fa:	46e1      	mov	r9, ip
 80004fc:	e796      	b.n	800042c <__udivmoddi4+0x1e4>
 80004fe:	eba7 0909 	sub.w	r9, r7, r9
 8000502:	4449      	add	r1, r9
 8000504:	f1a8 0c02 	sub.w	ip, r8, #2
 8000508:	fbb1 f9fe 	udiv	r9, r1, lr
 800050c:	fb09 f804 	mul.w	r8, r9, r4
 8000510:	e7db      	b.n	80004ca <__udivmoddi4+0x282>
 8000512:	4673      	mov	r3, lr
 8000514:	e77f      	b.n	8000416 <__udivmoddi4+0x1ce>
 8000516:	4650      	mov	r0, sl
 8000518:	e766      	b.n	80003e8 <__udivmoddi4+0x1a0>
 800051a:	4608      	mov	r0, r1
 800051c:	e6fd      	b.n	800031a <__udivmoddi4+0xd2>
 800051e:	443b      	add	r3, r7
 8000520:	3a02      	subs	r2, #2
 8000522:	e733      	b.n	800038c <__udivmoddi4+0x144>
 8000524:	f1ac 0c02 	sub.w	ip, ip, #2
 8000528:	443b      	add	r3, r7
 800052a:	e71c      	b.n	8000366 <__udivmoddi4+0x11e>
 800052c:	4649      	mov	r1, r9
 800052e:	e79c      	b.n	800046a <__udivmoddi4+0x222>
 8000530:	eba1 0109 	sub.w	r1, r1, r9
 8000534:	46c4      	mov	ip, r8
 8000536:	fbb1 f9fe 	udiv	r9, r1, lr
 800053a:	fb09 f804 	mul.w	r8, r9, r4
 800053e:	e7c4      	b.n	80004ca <__udivmoddi4+0x282>

08000540 <__aeabi_idiv0>:
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop

08000544 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b082      	sub	sp, #8
 8000548:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800054a:	f000 fe77 	bl	800123c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800054e:	f000 f8f1 	bl	8000734 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000552:	f000 faa5 	bl	8000aa0 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000556:	f000 fa79 	bl	8000a4c <MX_USART3_UART_Init>
  MX_CAN1_Init();
 800055a:	f000 f9a9 	bl	80008b0 <MX_CAN1_Init>
  MX_I2C1_Init();
 800055e:	f000 f9db 	bl	8000918 <MX_I2C1_Init>
  MX_SPI2_Init();
 8000562:	f000 fa07 	bl	8000974 <MX_SPI2_Init>
  MX_SPI3_Init();
 8000566:	f000 fa3b 	bl	80009e0 <MX_SPI3_Init>
  MX_ADC1_Init();
 800056a:	f000 f94f 	bl	800080c <MX_ADC1_Init>
  MX_USB_DEVICE_Init();
 800056e:	f008 f9ef 	bl	8008950 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  uint8_t i2c_tx_data = 0;
 8000572:	2300      	movs	r3, #0
 8000574:	71fb      	strb	r3, [r7, #7]
  uint8_t i2c_tx_addr = 0;
 8000576:	2300      	movs	r3, #0
 8000578:	71bb      	strb	r3, [r7, #6]
  uint8_t i2c_rx_data = 0;
 800057a:	2300      	movs	r3, #0
 800057c:	717b      	strb	r3, [r7, #5]
  uint8_t i2c_rx_addr = 0;
 800057e:	2300      	movs	r3, #0
 8000580:	713b      	strb	r3, [r7, #4]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	    test1.field.a = 1;
 8000582:	783b      	ldrb	r3, [r7, #0]
 8000584:	f043 0301 	orr.w	r3, r3, #1
 8000588:	703b      	strb	r3, [r7, #0]
	    i2c_tx_data = test1.Pmic_data;
 800058a:	783b      	ldrb	r3, [r7, #0]
 800058c:	71fb      	strb	r3, [r7, #7]
    /* USER CODE END WHILE */

	    Test_Buck_Output_WhiteBox(); //WhiteBox 예시1 함수
 800058e:	f000 f80d 	bl	80005ac <Test_Buck_Output_WhiteBox>
	    Test_Temp_Warning_WhiteBox(); //WhiteBox 예시2 함수
 8000592:	f000 f853 	bl	800063c <Test_Temp_Warning_WhiteBox>
	    Test_Buck_Output_BlackBox(); //BlackBox 예시1 함수
 8000596:	f000 f881 	bl	800069c <Test_Buck_Output_BlackBox>
	    Test_Temp_Warning_BlackBox(); //BlackBox 예시2 함수
 800059a:	f000 f8a5 	bl	80006e8 <Test_Temp_Warning_BlackBox>

	    HAL_Delay(1000);      // 1초마다 체크
 800059e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80005a2:	f000 febd 	bl	8001320 <HAL_Delay>
  {
 80005a6:	bf00      	nop
 80005a8:	e7eb      	b.n	8000582 <main+0x3e>
	...

080005ac <Test_Buck_Output_WhiteBox>:
  return 0;
  /* USER CODE END 3 */
}

void Test_Buck_Output_WhiteBox(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b086      	sub	sp, #24
 80005b0:	af04      	add	r7, sp, #16
    uint8_t reg_val = 0; //레지스터 값 저장용 변수
 80005b2:	2300      	movs	r3, #0
 80005b4:	71fb      	strb	r3, [r7, #7]

    // 1. VR_FAULT 확인
    // - VR_FAULT_REG_ADDR 주소에 해당하는 레지스터를 I2C로 읽음
    // - Bit 0이 1이면 Buck 출력에 이상이 있는 상태로 판단
    HAL_I2C_Mem_Read(&hi2c1, SLAVEADDR << 1, VR_FAULT_REG_ADDR, I2C_MEMADD_SIZE_8BIT, &reg_val, 1, HAL_MAX_DELAY);
 80005b6:	f04f 33ff 	mov.w	r3, #4294967295
 80005ba:	9302      	str	r3, [sp, #8]
 80005bc:	2301      	movs	r3, #1
 80005be:	9301      	str	r3, [sp, #4]
 80005c0:	1dfb      	adds	r3, r7, #7
 80005c2:	9300      	str	r3, [sp, #0]
 80005c4:	2301      	movs	r3, #1
 80005c6:	2201      	movs	r2, #1
 80005c8:	21c0      	movs	r1, #192	@ 0xc0
 80005ca:	4817      	ldr	r0, [pc, #92]	@ (8000628 <Test_Buck_Output_WhiteBox+0x7c>)
 80005cc:	f001 fe56 	bl	800227c <HAL_I2C_Mem_Read>
    if (reg_val & 0x01) {
 80005d0:	79fb      	ldrb	r3, [r7, #7]
 80005d2:	f003 0301 	and.w	r3, r3, #1
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d002      	beq.n	80005e0 <Test_Buck_Output_WhiteBox+0x34>
        printf("WhiteBox: VR_FAULT detected!\r\n");
 80005da:	4814      	ldr	r0, [pc, #80]	@ (800062c <Test_Buck_Output_WhiteBox+0x80>)
 80005dc:	f008 ff70 	bl	80094c0 <puts>
    }

    // 2. PG(Power Good) 상태 확인
    // - PG 상태를 나타내는 레지스터를 읽음
    // - Bit 0이 0이면 PMIC 출력이 안정적이지 않음을 의미 (즉, fault)
    HAL_I2C_Mem_Read(&hi2c1, SLAVEADDR << 1, PG_REG_ADDR, I2C_MEMADD_SIZE_8BIT, &reg_val, 1, HAL_MAX_DELAY);
 80005e0:	f04f 33ff 	mov.w	r3, #4294967295
 80005e4:	9302      	str	r3, [sp, #8]
 80005e6:	2301      	movs	r3, #1
 80005e8:	9301      	str	r3, [sp, #4]
 80005ea:	1dfb      	adds	r3, r7, #7
 80005ec:	9300      	str	r3, [sp, #0]
 80005ee:	2301      	movs	r3, #1
 80005f0:	2202      	movs	r2, #2
 80005f2:	21c0      	movs	r1, #192	@ 0xc0
 80005f4:	480c      	ldr	r0, [pc, #48]	@ (8000628 <Test_Buck_Output_WhiteBox+0x7c>)
 80005f6:	f001 fe41 	bl	800227c <HAL_I2C_Mem_Read>
    if ((reg_val & 0x01) == 0) {
 80005fa:	79fb      	ldrb	r3, [r7, #7]
 80005fc:	f003 0301 	and.w	r3, r3, #1
 8000600:	2b00      	cmp	r3, #0
 8000602:	d102      	bne.n	800060a <Test_Buck_Output_WhiteBox+0x5e>
        printf("WhiteBox: PG bit is LOW (fault)\r\n");
 8000604:	480a      	ldr	r0, [pc, #40]	@ (8000630 <Test_Buck_Output_WhiteBox+0x84>)
 8000606:	f008 ff5b 	bl	80094c0 <puts>
    }

    // 3. INT 핀 상태 확인
    // - 외부 인터럽트 핀(GPIO) 상태를 읽음
    // - INT 핀이 LOW일 경우, PMIC 내부에서 오류가 발생하여 인터럽트를 발생시켰다는 의미
    if (HAL_GPIO_ReadPin(INT_GPIO_PORT, INT_GPIO_PIN) == GPIO_PIN_RESET) {
 800060a:	2102      	movs	r1, #2
 800060c:	4809      	ldr	r0, [pc, #36]	@ (8000634 <Test_Buck_Output_WhiteBox+0x88>)
 800060e:	f001 fcbf 	bl	8001f90 <HAL_GPIO_ReadPin>
 8000612:	4603      	mov	r3, r0
 8000614:	2b00      	cmp	r3, #0
 8000616:	d102      	bne.n	800061e <Test_Buck_Output_WhiteBox+0x72>
        printf("WhiteBox: INT pin is LOW (active)\r\n");
 8000618:	4807      	ldr	r0, [pc, #28]	@ (8000638 <Test_Buck_Output_WhiteBox+0x8c>)
 800061a:	f008 ff51 	bl	80094c0 <puts>
    }
}
 800061e:	bf00      	nop
 8000620:	3708      	adds	r7, #8
 8000622:	46bd      	mov	sp, r7
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	200001c4 	.word	0x200001c4
 800062c:	08009c00 	.word	0x08009c00
 8000630:	08009c20 	.word	0x08009c20
 8000634:	40020800 	.word	0x40020800
 8000638:	08009c44 	.word	0x08009c44

0800063c <Test_Temp_Warning_WhiteBox>:

void Test_Temp_Warning_WhiteBox(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b086      	sub	sp, #24
 8000640:	af04      	add	r7, sp, #16
    uint8_t reg_val = 0; //레지스터 값 저장용 벼니수
 8000642:	2300      	movs	r3, #0
 8000644:	71fb      	strb	r3, [r7, #7]

    // TEMP_WARNING_MSK 비트 확인
    // - TEMP_WARN_REG_ADDR 주소의 레지스터를 읽음
    // - Bit 0 (또는 정의된 위치)가 1이면 온도 경고 상태 발생
    HAL_I2C_Mem_Read(&hi2c1, SLAVEADDR << 1, TEMP_WARN_REG_ADDR, I2C_MEMADD_SIZE_8BIT, &reg_val, 1, HAL_MAX_DELAY);
 8000646:	f04f 33ff 	mov.w	r3, #4294967295
 800064a:	9302      	str	r3, [sp, #8]
 800064c:	2301      	movs	r3, #1
 800064e:	9301      	str	r3, [sp, #4]
 8000650:	1dfb      	adds	r3, r7, #7
 8000652:	9300      	str	r3, [sp, #0]
 8000654:	2301      	movs	r3, #1
 8000656:	2245      	movs	r2, #69	@ 0x45
 8000658:	21c0      	movs	r1, #192	@ 0xc0
 800065a:	480c      	ldr	r0, [pc, #48]	@ (800068c <Test_Temp_Warning_WhiteBox+0x50>)
 800065c:	f001 fe0e 	bl	800227c <HAL_I2C_Mem_Read>
    if (reg_val & 0x01) {
 8000660:	79fb      	ldrb	r3, [r7, #7]
 8000662:	f003 0301 	and.w	r3, r3, #1
 8000666:	2b00      	cmp	r3, #0
 8000668:	d002      	beq.n	8000670 <Test_Temp_Warning_WhiteBox+0x34>
        printf("WhiteBox: TEMP_WARNING_MSK is set\r\n");
 800066a:	4809      	ldr	r0, [pc, #36]	@ (8000690 <Test_Temp_Warning_WhiteBox+0x54>)
 800066c:	f008 ff28 	bl	80094c0 <puts>
    }
    // INT 핀 상태 확인
    // - 온도 경고 발생 시 PMIC는 INT 핀을 LOW로 설정할 수 있음
    // - GPIO 핀을 통해 실제 INT 신호가 활성화되었는지 확인
    if (HAL_GPIO_ReadPin(INT_GPIO_PORT, INT_GPIO_PIN) == GPIO_PIN_RESET) {
 8000670:	2102      	movs	r1, #2
 8000672:	4808      	ldr	r0, [pc, #32]	@ (8000694 <Test_Temp_Warning_WhiteBox+0x58>)
 8000674:	f001 fc8c 	bl	8001f90 <HAL_GPIO_ReadPin>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d102      	bne.n	8000684 <Test_Temp_Warning_WhiteBox+0x48>
        printf("WhiteBox: INT pin is LOW (active due to temp)\r\n");
 800067e:	4806      	ldr	r0, [pc, #24]	@ (8000698 <Test_Temp_Warning_WhiteBox+0x5c>)
 8000680:	f008 ff1e 	bl	80094c0 <puts>
    }
}
 8000684:	bf00      	nop
 8000686:	3708      	adds	r7, #8
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}
 800068c:	200001c4 	.word	0x200001c4
 8000690:	08009c68 	.word	0x08009c68
 8000694:	40020800 	.word	0x40020800
 8000698:	08009c8c 	.word	0x08009c8c

0800069c <Test_Buck_Output_BlackBox>:

void Test_Buck_Output_BlackBox(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b082      	sub	sp, #8
 80006a0:	af00      	add	r7, sp, #0
	//PG핀 및 INT핀의 상태를 GPIO로 읽어서 LOW라면 출력 이상 및 인터럽트 알림
    GPIO_PinState pg = HAL_GPIO_ReadPin(PG_GPIO_PORT, PG_GPIO_PIN);
 80006a2:	2104      	movs	r1, #4
 80006a4:	480d      	ldr	r0, [pc, #52]	@ (80006dc <Test_Buck_Output_BlackBox+0x40>)
 80006a6:	f001 fc73 	bl	8001f90 <HAL_GPIO_ReadPin>
 80006aa:	4603      	mov	r3, r0
 80006ac:	71fb      	strb	r3, [r7, #7]
    GPIO_PinState int_pin = HAL_GPIO_ReadPin(INT_GPIO_PORT, INT_GPIO_PIN);
 80006ae:	2102      	movs	r1, #2
 80006b0:	480a      	ldr	r0, [pc, #40]	@ (80006dc <Test_Buck_Output_BlackBox+0x40>)
 80006b2:	f001 fc6d 	bl	8001f90 <HAL_GPIO_ReadPin>
 80006b6:	4603      	mov	r3, r0
 80006b8:	71bb      	strb	r3, [r7, #6]

    if (pg == GPIO_PIN_RESET) {
 80006ba:	79fb      	ldrb	r3, [r7, #7]
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d102      	bne.n	80006c6 <Test_Buck_Output_BlackBox+0x2a>
        printf("BlackBox: PG pin is LOW (fault detected)\r\n");
 80006c0:	4807      	ldr	r0, [pc, #28]	@ (80006e0 <Test_Buck_Output_BlackBox+0x44>)
 80006c2:	f008 fefd 	bl	80094c0 <puts>
    }

    if (int_pin == GPIO_PIN_RESET) {
 80006c6:	79bb      	ldrb	r3, [r7, #6]
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d102      	bne.n	80006d2 <Test_Buck_Output_BlackBox+0x36>
        printf("BlackBox: INT pin is LOW (interrupt active)\r\n");
 80006cc:	4805      	ldr	r0, [pc, #20]	@ (80006e4 <Test_Buck_Output_BlackBox+0x48>)
 80006ce:	f008 fef7 	bl	80094c0 <puts>
    }
}
 80006d2:	bf00      	nop
 80006d4:	3708      	adds	r7, #8
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	40020800 	.word	0x40020800
 80006e0:	08009cbc 	.word	0x08009cbc
 80006e4:	08009ce8 	.word	0x08009ce8

080006e8 <Test_Temp_Warning_BlackBox>:

void Test_Temp_Warning_BlackBox(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b082      	sub	sp, #8
 80006ec:	af00      	add	r7, sp, #0
    GPIO_PinState int_pin = HAL_GPIO_ReadPin(INT_GPIO_PORT, INT_GPIO_PIN);
 80006ee:	2102      	movs	r1, #2
 80006f0:	480d      	ldr	r0, [pc, #52]	@ (8000728 <Test_Temp_Warning_BlackBox+0x40>)
 80006f2:	f001 fc4d 	bl	8001f90 <HAL_GPIO_ReadPin>
 80006f6:	4603      	mov	r3, r0
 80006f8:	71fb      	strb	r3, [r7, #7]
    GPIO_PinState pg_pin = HAL_GPIO_ReadPin(PG_GPIO_PORT, PG_GPIO_PIN);
 80006fa:	2104      	movs	r1, #4
 80006fc:	480a      	ldr	r0, [pc, #40]	@ (8000728 <Test_Temp_Warning_BlackBox+0x40>)
 80006fe:	f001 fc47 	bl	8001f90 <HAL_GPIO_ReadPin>
 8000702:	4603      	mov	r3, r0
 8000704:	71bb      	strb	r3, [r7, #6]

    if (int_pin == GPIO_PIN_RESET) {
 8000706:	79fb      	ldrb	r3, [r7, #7]
 8000708:	2b00      	cmp	r3, #0
 800070a:	d108      	bne.n	800071e <Test_Temp_Warning_BlackBox+0x36>
        printf("BlackBox: INT pin is LOW (active due to temperature or other fault)\r\n");
 800070c:	4807      	ldr	r0, [pc, #28]	@ (800072c <Test_Temp_Warning_BlackBox+0x44>)
 800070e:	f008 fed7 	bl	80094c0 <puts>

        //인터럽트가 발생하고 추가로 전압에도 문제가 생기면 알려주는 부분
        if (pg_pin == GPIO_PIN_RESET) {
 8000712:	79bb      	ldrb	r3, [r7, #6]
 8000714:	2b00      	cmp	r3, #0
 8000716:	d102      	bne.n	800071e <Test_Temp_Warning_BlackBox+0x36>
            printf("BlackBox: PG pin is also LOW (output may be affected)\r\n");
 8000718:	4805      	ldr	r0, [pc, #20]	@ (8000730 <Test_Temp_Warning_BlackBox+0x48>)
 800071a:	f008 fed1 	bl	80094c0 <puts>
        }
    }
}
 800071e:	bf00      	nop
 8000720:	3708      	adds	r7, #8
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	40020800 	.word	0x40020800
 800072c:	08009d18 	.word	0x08009d18
 8000730:	08009d60 	.word	0x08009d60

08000734 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b094      	sub	sp, #80	@ 0x50
 8000738:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800073a:	f107 031c 	add.w	r3, r7, #28
 800073e:	2234      	movs	r2, #52	@ 0x34
 8000740:	2100      	movs	r1, #0
 8000742:	4618      	mov	r0, r3
 8000744:	f008 ff9c 	bl	8009680 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000748:	f107 0308 	add.w	r3, r7, #8
 800074c:	2200      	movs	r2, #0
 800074e:	601a      	str	r2, [r3, #0]
 8000750:	605a      	str	r2, [r3, #4]
 8000752:	609a      	str	r2, [r3, #8]
 8000754:	60da      	str	r2, [r3, #12]
 8000756:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000758:	2300      	movs	r3, #0
 800075a:	607b      	str	r3, [r7, #4]
 800075c:	4b29      	ldr	r3, [pc, #164]	@ (8000804 <SystemClock_Config+0xd0>)
 800075e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000760:	4a28      	ldr	r2, [pc, #160]	@ (8000804 <SystemClock_Config+0xd0>)
 8000762:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000766:	6413      	str	r3, [r2, #64]	@ 0x40
 8000768:	4b26      	ldr	r3, [pc, #152]	@ (8000804 <SystemClock_Config+0xd0>)
 800076a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800076c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000770:	607b      	str	r3, [r7, #4]
 8000772:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000774:	2300      	movs	r3, #0
 8000776:	603b      	str	r3, [r7, #0]
 8000778:	4b23      	ldr	r3, [pc, #140]	@ (8000808 <SystemClock_Config+0xd4>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	4a22      	ldr	r2, [pc, #136]	@ (8000808 <SystemClock_Config+0xd4>)
 800077e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000782:	6013      	str	r3, [r2, #0]
 8000784:	4b20      	ldr	r3, [pc, #128]	@ (8000808 <SystemClock_Config+0xd4>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800078c:	603b      	str	r3, [r7, #0]
 800078e:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000790:	2301      	movs	r3, #1
 8000792:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000794:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000798:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800079a:	2302      	movs	r3, #2
 800079c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800079e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80007a2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80007a4:	2308      	movs	r3, #8
 80007a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 384;
 80007a8:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80007ac:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80007ae:	2304      	movs	r3, #4
 80007b0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80007b2:	2308      	movs	r3, #8
 80007b4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80007b6:	2302      	movs	r3, #2
 80007b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007ba:	f107 031c 	add.w	r3, r7, #28
 80007be:	4618      	mov	r0, r3
 80007c0:	f004 f864 	bl	800488c <HAL_RCC_OscConfig>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80007ca:	f000 fa17 	bl	8000bfc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007ce:	230f      	movs	r3, #15
 80007d0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007d2:	2302      	movs	r3, #2
 80007d4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007d6:	2300      	movs	r3, #0
 80007d8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007da:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007de:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007e0:	2300      	movs	r3, #0
 80007e2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80007e4:	f107 0308 	add.w	r3, r7, #8
 80007e8:	2103      	movs	r1, #3
 80007ea:	4618      	mov	r0, r3
 80007ec:	f003 fba2 	bl	8003f34 <HAL_RCC_ClockConfig>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80007f6:	f000 fa01 	bl	8000bfc <Error_Handler>
  }
}
 80007fa:	bf00      	nop
 80007fc:	3750      	adds	r7, #80	@ 0x50
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	40023800 	.word	0x40023800
 8000808:	40007000 	.word	0x40007000

0800080c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b084      	sub	sp, #16
 8000810:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000812:	463b      	mov	r3, r7
 8000814:	2200      	movs	r2, #0
 8000816:	601a      	str	r2, [r3, #0]
 8000818:	605a      	str	r2, [r3, #4]
 800081a:	609a      	str	r2, [r3, #8]
 800081c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800081e:	4b21      	ldr	r3, [pc, #132]	@ (80008a4 <MX_ADC1_Init+0x98>)
 8000820:	4a21      	ldr	r2, [pc, #132]	@ (80008a8 <MX_ADC1_Init+0x9c>)
 8000822:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000824:	4b1f      	ldr	r3, [pc, #124]	@ (80008a4 <MX_ADC1_Init+0x98>)
 8000826:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800082a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800082c:	4b1d      	ldr	r3, [pc, #116]	@ (80008a4 <MX_ADC1_Init+0x98>)
 800082e:	2200      	movs	r2, #0
 8000830:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000832:	4b1c      	ldr	r3, [pc, #112]	@ (80008a4 <MX_ADC1_Init+0x98>)
 8000834:	2200      	movs	r2, #0
 8000836:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000838:	4b1a      	ldr	r3, [pc, #104]	@ (80008a4 <MX_ADC1_Init+0x98>)
 800083a:	2200      	movs	r2, #0
 800083c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800083e:	4b19      	ldr	r3, [pc, #100]	@ (80008a4 <MX_ADC1_Init+0x98>)
 8000840:	2200      	movs	r2, #0
 8000842:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000846:	4b17      	ldr	r3, [pc, #92]	@ (80008a4 <MX_ADC1_Init+0x98>)
 8000848:	2200      	movs	r2, #0
 800084a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800084c:	4b15      	ldr	r3, [pc, #84]	@ (80008a4 <MX_ADC1_Init+0x98>)
 800084e:	4a17      	ldr	r2, [pc, #92]	@ (80008ac <MX_ADC1_Init+0xa0>)
 8000850:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000852:	4b14      	ldr	r3, [pc, #80]	@ (80008a4 <MX_ADC1_Init+0x98>)
 8000854:	2200      	movs	r2, #0
 8000856:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000858:	4b12      	ldr	r3, [pc, #72]	@ (80008a4 <MX_ADC1_Init+0x98>)
 800085a:	2201      	movs	r2, #1
 800085c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800085e:	4b11      	ldr	r3, [pc, #68]	@ (80008a4 <MX_ADC1_Init+0x98>)
 8000860:	2200      	movs	r2, #0
 8000862:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000866:	4b0f      	ldr	r3, [pc, #60]	@ (80008a4 <MX_ADC1_Init+0x98>)
 8000868:	2201      	movs	r2, #1
 800086a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800086c:	480d      	ldr	r0, [pc, #52]	@ (80008a4 <MX_ADC1_Init+0x98>)
 800086e:	f000 fd7b 	bl	8001368 <HAL_ADC_Init>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d001      	beq.n	800087c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000878:	f000 f9c0 	bl	8000bfc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800087c:	2301      	movs	r3, #1
 800087e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000880:	2301      	movs	r3, #1
 8000882:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000884:	2300      	movs	r3, #0
 8000886:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000888:	463b      	mov	r3, r7
 800088a:	4619      	mov	r1, r3
 800088c:	4805      	ldr	r0, [pc, #20]	@ (80008a4 <MX_ADC1_Init+0x98>)
 800088e:	f000 fdaf 	bl	80013f0 <HAL_ADC_ConfigChannel>
 8000892:	4603      	mov	r3, r0
 8000894:	2b00      	cmp	r3, #0
 8000896:	d001      	beq.n	800089c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000898:	f000 f9b0 	bl	8000bfc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800089c:	bf00      	nop
 800089e:	3710      	adds	r7, #16
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	20000154 	.word	0x20000154
 80008a8:	40012000 	.word	0x40012000
 80008ac:	0f000001 	.word	0x0f000001

080008b0 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80008b4:	4b16      	ldr	r3, [pc, #88]	@ (8000910 <MX_CAN1_Init+0x60>)
 80008b6:	4a17      	ldr	r2, [pc, #92]	@ (8000914 <MX_CAN1_Init+0x64>)
 80008b8:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 80008ba:	4b15      	ldr	r3, [pc, #84]	@ (8000910 <MX_CAN1_Init+0x60>)
 80008bc:	2210      	movs	r2, #16
 80008be:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80008c0:	4b13      	ldr	r3, [pc, #76]	@ (8000910 <MX_CAN1_Init+0x60>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80008c6:	4b12      	ldr	r3, [pc, #72]	@ (8000910 <MX_CAN1_Init+0x60>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 80008cc:	4b10      	ldr	r3, [pc, #64]	@ (8000910 <MX_CAN1_Init+0x60>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80008d2:	4b0f      	ldr	r3, [pc, #60]	@ (8000910 <MX_CAN1_Init+0x60>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80008d8:	4b0d      	ldr	r3, [pc, #52]	@ (8000910 <MX_CAN1_Init+0x60>)
 80008da:	2200      	movs	r2, #0
 80008dc:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80008de:	4b0c      	ldr	r3, [pc, #48]	@ (8000910 <MX_CAN1_Init+0x60>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80008e4:	4b0a      	ldr	r3, [pc, #40]	@ (8000910 <MX_CAN1_Init+0x60>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80008ea:	4b09      	ldr	r3, [pc, #36]	@ (8000910 <MX_CAN1_Init+0x60>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80008f0:	4b07      	ldr	r3, [pc, #28]	@ (8000910 <MX_CAN1_Init+0x60>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80008f6:	4b06      	ldr	r3, [pc, #24]	@ (8000910 <MX_CAN1_Init+0x60>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80008fc:	4804      	ldr	r0, [pc, #16]	@ (8000910 <MX_CAN1_Init+0x60>)
 80008fe:	f000 ffa5 	bl	800184c <HAL_CAN_Init>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	d001      	beq.n	800090c <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 8000908:	f000 f978 	bl	8000bfc <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 800090c:	bf00      	nop
 800090e:	bd80      	pop	{r7, pc}
 8000910:	2000019c 	.word	0x2000019c
 8000914:	40006400 	.word	0x40006400

08000918 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800091c:	4b12      	ldr	r3, [pc, #72]	@ (8000968 <MX_I2C1_Init+0x50>)
 800091e:	4a13      	ldr	r2, [pc, #76]	@ (800096c <MX_I2C1_Init+0x54>)
 8000920:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000922:	4b11      	ldr	r3, [pc, #68]	@ (8000968 <MX_I2C1_Init+0x50>)
 8000924:	4a12      	ldr	r2, [pc, #72]	@ (8000970 <MX_I2C1_Init+0x58>)
 8000926:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000928:	4b0f      	ldr	r3, [pc, #60]	@ (8000968 <MX_I2C1_Init+0x50>)
 800092a:	2200      	movs	r2, #0
 800092c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800092e:	4b0e      	ldr	r3, [pc, #56]	@ (8000968 <MX_I2C1_Init+0x50>)
 8000930:	2200      	movs	r2, #0
 8000932:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000934:	4b0c      	ldr	r3, [pc, #48]	@ (8000968 <MX_I2C1_Init+0x50>)
 8000936:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800093a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800093c:	4b0a      	ldr	r3, [pc, #40]	@ (8000968 <MX_I2C1_Init+0x50>)
 800093e:	2200      	movs	r2, #0
 8000940:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000942:	4b09      	ldr	r3, [pc, #36]	@ (8000968 <MX_I2C1_Init+0x50>)
 8000944:	2200      	movs	r2, #0
 8000946:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000948:	4b07      	ldr	r3, [pc, #28]	@ (8000968 <MX_I2C1_Init+0x50>)
 800094a:	2200      	movs	r2, #0
 800094c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800094e:	4b06      	ldr	r3, [pc, #24]	@ (8000968 <MX_I2C1_Init+0x50>)
 8000950:	2200      	movs	r2, #0
 8000952:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000954:	4804      	ldr	r0, [pc, #16]	@ (8000968 <MX_I2C1_Init+0x50>)
 8000956:	f001 fb4d 	bl	8001ff4 <HAL_I2C_Init>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d001      	beq.n	8000964 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000960:	f000 f94c 	bl	8000bfc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000964:	bf00      	nop
 8000966:	bd80      	pop	{r7, pc}
 8000968:	200001c4 	.word	0x200001c4
 800096c:	40005400 	.word	0x40005400
 8000970:	000186a0 	.word	0x000186a0

08000974 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000978:	4b17      	ldr	r3, [pc, #92]	@ (80009d8 <MX_SPI2_Init+0x64>)
 800097a:	4a18      	ldr	r2, [pc, #96]	@ (80009dc <MX_SPI2_Init+0x68>)
 800097c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800097e:	4b16      	ldr	r3, [pc, #88]	@ (80009d8 <MX_SPI2_Init+0x64>)
 8000980:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000984:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000986:	4b14      	ldr	r3, [pc, #80]	@ (80009d8 <MX_SPI2_Init+0x64>)
 8000988:	2200      	movs	r2, #0
 800098a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800098c:	4b12      	ldr	r3, [pc, #72]	@ (80009d8 <MX_SPI2_Init+0x64>)
 800098e:	2200      	movs	r2, #0
 8000990:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000992:	4b11      	ldr	r3, [pc, #68]	@ (80009d8 <MX_SPI2_Init+0x64>)
 8000994:	2200      	movs	r2, #0
 8000996:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000998:	4b0f      	ldr	r3, [pc, #60]	@ (80009d8 <MX_SPI2_Init+0x64>)
 800099a:	2200      	movs	r2, #0
 800099c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800099e:	4b0e      	ldr	r3, [pc, #56]	@ (80009d8 <MX_SPI2_Init+0x64>)
 80009a0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80009a4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80009a6:	4b0c      	ldr	r3, [pc, #48]	@ (80009d8 <MX_SPI2_Init+0x64>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009ac:	4b0a      	ldr	r3, [pc, #40]	@ (80009d8 <MX_SPI2_Init+0x64>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80009b2:	4b09      	ldr	r3, [pc, #36]	@ (80009d8 <MX_SPI2_Init+0x64>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009b8:	4b07      	ldr	r3, [pc, #28]	@ (80009d8 <MX_SPI2_Init+0x64>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 80009be:	4b06      	ldr	r3, [pc, #24]	@ (80009d8 <MX_SPI2_Init+0x64>)
 80009c0:	220a      	movs	r2, #10
 80009c2:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80009c4:	4804      	ldr	r0, [pc, #16]	@ (80009d8 <MX_SPI2_Init+0x64>)
 80009c6:	f004 f9e5 	bl	8004d94 <HAL_SPI_Init>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d001      	beq.n	80009d4 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80009d0:	f000 f914 	bl	8000bfc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80009d4:	bf00      	nop
 80009d6:	bd80      	pop	{r7, pc}
 80009d8:	20000218 	.word	0x20000218
 80009dc:	40003800 	.word	0x40003800

080009e0 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80009e4:	4b17      	ldr	r3, [pc, #92]	@ (8000a44 <MX_SPI3_Init+0x64>)
 80009e6:	4a18      	ldr	r2, [pc, #96]	@ (8000a48 <MX_SPI3_Init+0x68>)
 80009e8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80009ea:	4b16      	ldr	r3, [pc, #88]	@ (8000a44 <MX_SPI3_Init+0x64>)
 80009ec:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80009f0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80009f2:	4b14      	ldr	r3, [pc, #80]	@ (8000a44 <MX_SPI3_Init+0x64>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80009f8:	4b12      	ldr	r3, [pc, #72]	@ (8000a44 <MX_SPI3_Init+0x64>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009fe:	4b11      	ldr	r3, [pc, #68]	@ (8000a44 <MX_SPI3_Init+0x64>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a04:	4b0f      	ldr	r3, [pc, #60]	@ (8000a44 <MX_SPI3_Init+0x64>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000a0a:	4b0e      	ldr	r3, [pc, #56]	@ (8000a44 <MX_SPI3_Init+0x64>)
 8000a0c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000a10:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000a12:	4b0c      	ldr	r3, [pc, #48]	@ (8000a44 <MX_SPI3_Init+0x64>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a18:	4b0a      	ldr	r3, [pc, #40]	@ (8000a44 <MX_SPI3_Init+0x64>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a1e:	4b09      	ldr	r3, [pc, #36]	@ (8000a44 <MX_SPI3_Init+0x64>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a24:	4b07      	ldr	r3, [pc, #28]	@ (8000a44 <MX_SPI3_Init+0x64>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 10;
 8000a2a:	4b06      	ldr	r3, [pc, #24]	@ (8000a44 <MX_SPI3_Init+0x64>)
 8000a2c:	220a      	movs	r2, #10
 8000a2e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000a30:	4804      	ldr	r0, [pc, #16]	@ (8000a44 <MX_SPI3_Init+0x64>)
 8000a32:	f004 f9af 	bl	8004d94 <HAL_SPI_Init>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d001      	beq.n	8000a40 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8000a3c:	f000 f8de 	bl	8000bfc <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000a40:	bf00      	nop
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	20000270 	.word	0x20000270
 8000a48:	40003c00 	.word	0x40003c00

08000a4c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a50:	4b11      	ldr	r3, [pc, #68]	@ (8000a98 <MX_USART3_UART_Init+0x4c>)
 8000a52:	4a12      	ldr	r2, [pc, #72]	@ (8000a9c <MX_USART3_UART_Init+0x50>)
 8000a54:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000a56:	4b10      	ldr	r3, [pc, #64]	@ (8000a98 <MX_USART3_UART_Init+0x4c>)
 8000a58:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a5c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a5e:	4b0e      	ldr	r3, [pc, #56]	@ (8000a98 <MX_USART3_UART_Init+0x4c>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a64:	4b0c      	ldr	r3, [pc, #48]	@ (8000a98 <MX_USART3_UART_Init+0x4c>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a6a:	4b0b      	ldr	r3, [pc, #44]	@ (8000a98 <MX_USART3_UART_Init+0x4c>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a70:	4b09      	ldr	r3, [pc, #36]	@ (8000a98 <MX_USART3_UART_Init+0x4c>)
 8000a72:	220c      	movs	r2, #12
 8000a74:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a76:	4b08      	ldr	r3, [pc, #32]	@ (8000a98 <MX_USART3_UART_Init+0x4c>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a7c:	4b06      	ldr	r3, [pc, #24]	@ (8000a98 <MX_USART3_UART_Init+0x4c>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a82:	4805      	ldr	r0, [pc, #20]	@ (8000a98 <MX_USART3_UART_Init+0x4c>)
 8000a84:	f004 fa0f 	bl	8004ea6 <HAL_UART_Init>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d001      	beq.n	8000a92 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000a8e:	f000 f8b5 	bl	8000bfc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a92:	bf00      	nop
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	200002c8 	.word	0x200002c8
 8000a9c:	40004800 	.word	0x40004800

08000aa0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b08c      	sub	sp, #48	@ 0x30
 8000aa4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa6:	f107 031c 	add.w	r3, r7, #28
 8000aaa:	2200      	movs	r2, #0
 8000aac:	601a      	str	r2, [r3, #0]
 8000aae:	605a      	str	r2, [r3, #4]
 8000ab0:	609a      	str	r2, [r3, #8]
 8000ab2:	60da      	str	r2, [r3, #12]
 8000ab4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	61bb      	str	r3, [r7, #24]
 8000aba:	4b4c      	ldr	r3, [pc, #304]	@ (8000bec <MX_GPIO_Init+0x14c>)
 8000abc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000abe:	4a4b      	ldr	r2, [pc, #300]	@ (8000bec <MX_GPIO_Init+0x14c>)
 8000ac0:	f043 0304 	orr.w	r3, r3, #4
 8000ac4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ac6:	4b49      	ldr	r3, [pc, #292]	@ (8000bec <MX_GPIO_Init+0x14c>)
 8000ac8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aca:	f003 0304 	and.w	r3, r3, #4
 8000ace:	61bb      	str	r3, [r7, #24]
 8000ad0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	617b      	str	r3, [r7, #20]
 8000ad6:	4b45      	ldr	r3, [pc, #276]	@ (8000bec <MX_GPIO_Init+0x14c>)
 8000ad8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ada:	4a44      	ldr	r2, [pc, #272]	@ (8000bec <MX_GPIO_Init+0x14c>)
 8000adc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ae0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ae2:	4b42      	ldr	r3, [pc, #264]	@ (8000bec <MX_GPIO_Init+0x14c>)
 8000ae4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ae6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000aea:	617b      	str	r3, [r7, #20]
 8000aec:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aee:	2300      	movs	r3, #0
 8000af0:	613b      	str	r3, [r7, #16]
 8000af2:	4b3e      	ldr	r3, [pc, #248]	@ (8000bec <MX_GPIO_Init+0x14c>)
 8000af4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000af6:	4a3d      	ldr	r2, [pc, #244]	@ (8000bec <MX_GPIO_Init+0x14c>)
 8000af8:	f043 0301 	orr.w	r3, r3, #1
 8000afc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000afe:	4b3b      	ldr	r3, [pc, #236]	@ (8000bec <MX_GPIO_Init+0x14c>)
 8000b00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b02:	f003 0301 	and.w	r3, r3, #1
 8000b06:	613b      	str	r3, [r7, #16]
 8000b08:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	60fb      	str	r3, [r7, #12]
 8000b0e:	4b37      	ldr	r3, [pc, #220]	@ (8000bec <MX_GPIO_Init+0x14c>)
 8000b10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b12:	4a36      	ldr	r2, [pc, #216]	@ (8000bec <MX_GPIO_Init+0x14c>)
 8000b14:	f043 0302 	orr.w	r3, r3, #2
 8000b18:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b1a:	4b34      	ldr	r3, [pc, #208]	@ (8000bec <MX_GPIO_Init+0x14c>)
 8000b1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b1e:	f003 0302 	and.w	r3, r3, #2
 8000b22:	60fb      	str	r3, [r7, #12]
 8000b24:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b26:	2300      	movs	r3, #0
 8000b28:	60bb      	str	r3, [r7, #8]
 8000b2a:	4b30      	ldr	r3, [pc, #192]	@ (8000bec <MX_GPIO_Init+0x14c>)
 8000b2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b2e:	4a2f      	ldr	r2, [pc, #188]	@ (8000bec <MX_GPIO_Init+0x14c>)
 8000b30:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000b34:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b36:	4b2d      	ldr	r3, [pc, #180]	@ (8000bec <MX_GPIO_Init+0x14c>)
 8000b38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000b3e:	60bb      	str	r3, [r7, #8]
 8000b40:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b42:	2300      	movs	r3, #0
 8000b44:	607b      	str	r3, [r7, #4]
 8000b46:	4b29      	ldr	r3, [pc, #164]	@ (8000bec <MX_GPIO_Init+0x14c>)
 8000b48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b4a:	4a28      	ldr	r2, [pc, #160]	@ (8000bec <MX_GPIO_Init+0x14c>)
 8000b4c:	f043 0308 	orr.w	r3, r3, #8
 8000b50:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b52:	4b26      	ldr	r3, [pc, #152]	@ (8000bec <MX_GPIO_Init+0x14c>)
 8000b54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b56:	f003 0308 	and.w	r3, r3, #8
 8000b5a:	607b      	str	r3, [r7, #4]
 8000b5c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000b5e:	2200      	movs	r2, #0
 8000b60:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000b64:	4822      	ldr	r0, [pc, #136]	@ (8000bf0 <MX_GPIO_Init+0x150>)
 8000b66:	f001 fa2b 	bl	8001fc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	2140      	movs	r1, #64	@ 0x40
 8000b6e:	4821      	ldr	r0, [pc, #132]	@ (8000bf4 <MX_GPIO_Init+0x154>)
 8000b70:	f001 fa26 	bl	8001fc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000b74:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b7a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000b7e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b80:	2300      	movs	r3, #0
 8000b82:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000b84:	f107 031c 	add.w	r3, r7, #28
 8000b88:	4619      	mov	r1, r3
 8000b8a:	481b      	ldr	r0, [pc, #108]	@ (8000bf8 <MX_GPIO_Init+0x158>)
 8000b8c:	f001 f86c 	bl	8001c68 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000b90:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000b94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b96:	2301      	movs	r3, #1
 8000b98:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ba2:	f107 031c 	add.w	r3, r7, #28
 8000ba6:	4619      	mov	r1, r3
 8000ba8:	4811      	ldr	r0, [pc, #68]	@ (8000bf0 <MX_GPIO_Init+0x150>)
 8000baa:	f001 f85d 	bl	8001c68 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000bae:	2340      	movs	r3, #64	@ 0x40
 8000bb0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000bbe:	f107 031c 	add.w	r3, r7, #28
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	480b      	ldr	r0, [pc, #44]	@ (8000bf4 <MX_GPIO_Init+0x154>)
 8000bc6:	f001 f84f 	bl	8001c68 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000bca:	2380      	movs	r3, #128	@ 0x80
 8000bcc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000bd6:	f107 031c 	add.w	r3, r7, #28
 8000bda:	4619      	mov	r1, r3
 8000bdc:	4805      	ldr	r0, [pc, #20]	@ (8000bf4 <MX_GPIO_Init+0x154>)
 8000bde:	f001 f843 	bl	8001c68 <HAL_GPIO_Init>

}
 8000be2:	bf00      	nop
 8000be4:	3730      	adds	r7, #48	@ 0x30
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	40023800 	.word	0x40023800
 8000bf0:	40020400 	.word	0x40020400
 8000bf4:	40021800 	.word	0x40021800
 8000bf8:	40020800 	.word	0x40020800

08000bfc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c00:	b672      	cpsid	i
}
 8000c02:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c04:	bf00      	nop
 8000c06:	e7fd      	b.n	8000c04 <Error_Handler+0x8>

08000c08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	b083      	sub	sp, #12
 8000c0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c0e:	2300      	movs	r3, #0
 8000c10:	607b      	str	r3, [r7, #4]
 8000c12:	4b10      	ldr	r3, [pc, #64]	@ (8000c54 <HAL_MspInit+0x4c>)
 8000c14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c16:	4a0f      	ldr	r2, [pc, #60]	@ (8000c54 <HAL_MspInit+0x4c>)
 8000c18:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c1c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c1e:	4b0d      	ldr	r3, [pc, #52]	@ (8000c54 <HAL_MspInit+0x4c>)
 8000c20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c22:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c26:	607b      	str	r3, [r7, #4]
 8000c28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	603b      	str	r3, [r7, #0]
 8000c2e:	4b09      	ldr	r3, [pc, #36]	@ (8000c54 <HAL_MspInit+0x4c>)
 8000c30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c32:	4a08      	ldr	r2, [pc, #32]	@ (8000c54 <HAL_MspInit+0x4c>)
 8000c34:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c38:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c3a:	4b06      	ldr	r3, [pc, #24]	@ (8000c54 <HAL_MspInit+0x4c>)
 8000c3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c42:	603b      	str	r3, [r7, #0]
 8000c44:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c46:	bf00      	nop
 8000c48:	370c      	adds	r7, #12
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c50:	4770      	bx	lr
 8000c52:	bf00      	nop
 8000c54:	40023800 	.word	0x40023800

08000c58 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b08a      	sub	sp, #40	@ 0x28
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c60:	f107 0314 	add.w	r3, r7, #20
 8000c64:	2200      	movs	r2, #0
 8000c66:	601a      	str	r2, [r3, #0]
 8000c68:	605a      	str	r2, [r3, #4]
 8000c6a:	609a      	str	r2, [r3, #8]
 8000c6c:	60da      	str	r2, [r3, #12]
 8000c6e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	4a17      	ldr	r2, [pc, #92]	@ (8000cd4 <HAL_ADC_MspInit+0x7c>)
 8000c76:	4293      	cmp	r3, r2
 8000c78:	d127      	bne.n	8000cca <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	613b      	str	r3, [r7, #16]
 8000c7e:	4b16      	ldr	r3, [pc, #88]	@ (8000cd8 <HAL_ADC_MspInit+0x80>)
 8000c80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c82:	4a15      	ldr	r2, [pc, #84]	@ (8000cd8 <HAL_ADC_MspInit+0x80>)
 8000c84:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c88:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c8a:	4b13      	ldr	r3, [pc, #76]	@ (8000cd8 <HAL_ADC_MspInit+0x80>)
 8000c8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000c92:	613b      	str	r3, [r7, #16]
 8000c94:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c96:	2300      	movs	r3, #0
 8000c98:	60fb      	str	r3, [r7, #12]
 8000c9a:	4b0f      	ldr	r3, [pc, #60]	@ (8000cd8 <HAL_ADC_MspInit+0x80>)
 8000c9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c9e:	4a0e      	ldr	r2, [pc, #56]	@ (8000cd8 <HAL_ADC_MspInit+0x80>)
 8000ca0:	f043 0301 	orr.w	r3, r3, #1
 8000ca4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ca6:	4b0c      	ldr	r3, [pc, #48]	@ (8000cd8 <HAL_ADC_MspInit+0x80>)
 8000ca8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000caa:	f003 0301 	and.w	r3, r3, #1
 8000cae:	60fb      	str	r3, [r7, #12]
 8000cb0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000cb2:	2302      	movs	r3, #2
 8000cb4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000cb6:	2303      	movs	r3, #3
 8000cb8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cbe:	f107 0314 	add.w	r3, r7, #20
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	4805      	ldr	r0, [pc, #20]	@ (8000cdc <HAL_ADC_MspInit+0x84>)
 8000cc6:	f000 ffcf 	bl	8001c68 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000cca:	bf00      	nop
 8000ccc:	3728      	adds	r7, #40	@ 0x28
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	40012000 	.word	0x40012000
 8000cd8:	40023800 	.word	0x40023800
 8000cdc:	40020000 	.word	0x40020000

08000ce0 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b08a      	sub	sp, #40	@ 0x28
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce8:	f107 0314 	add.w	r3, r7, #20
 8000cec:	2200      	movs	r2, #0
 8000cee:	601a      	str	r2, [r3, #0]
 8000cf0:	605a      	str	r2, [r3, #4]
 8000cf2:	609a      	str	r2, [r3, #8]
 8000cf4:	60da      	str	r2, [r3, #12]
 8000cf6:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	4a19      	ldr	r2, [pc, #100]	@ (8000d64 <HAL_CAN_MspInit+0x84>)
 8000cfe:	4293      	cmp	r3, r2
 8000d00:	d12b      	bne.n	8000d5a <HAL_CAN_MspInit+0x7a>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000d02:	2300      	movs	r3, #0
 8000d04:	613b      	str	r3, [r7, #16]
 8000d06:	4b18      	ldr	r3, [pc, #96]	@ (8000d68 <HAL_CAN_MspInit+0x88>)
 8000d08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d0a:	4a17      	ldr	r2, [pc, #92]	@ (8000d68 <HAL_CAN_MspInit+0x88>)
 8000d0c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000d10:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d12:	4b15      	ldr	r3, [pc, #84]	@ (8000d68 <HAL_CAN_MspInit+0x88>)
 8000d14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000d1a:	613b      	str	r3, [r7, #16]
 8000d1c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d1e:	2300      	movs	r3, #0
 8000d20:	60fb      	str	r3, [r7, #12]
 8000d22:	4b11      	ldr	r3, [pc, #68]	@ (8000d68 <HAL_CAN_MspInit+0x88>)
 8000d24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d26:	4a10      	ldr	r2, [pc, #64]	@ (8000d68 <HAL_CAN_MspInit+0x88>)
 8000d28:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000d2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d2e:	4b0e      	ldr	r3, [pc, #56]	@ (8000d68 <HAL_CAN_MspInit+0x88>)
 8000d30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000d36:	60fb      	str	r3, [r7, #12]
 8000d38:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PG0     ------> CAN1_RX
    PG1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000d3a:	2303      	movs	r3, #3
 8000d3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d3e:	2302      	movs	r3, #2
 8000d40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d42:	2300      	movs	r3, #0
 8000d44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d46:	2303      	movs	r3, #3
 8000d48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000d4a:	2309      	movs	r3, #9
 8000d4c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d4e:	f107 0314 	add.w	r3, r7, #20
 8000d52:	4619      	mov	r1, r3
 8000d54:	4805      	ldr	r0, [pc, #20]	@ (8000d6c <HAL_CAN_MspInit+0x8c>)
 8000d56:	f000 ff87 	bl	8001c68 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000d5a:	bf00      	nop
 8000d5c:	3728      	adds	r7, #40	@ 0x28
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	40006400 	.word	0x40006400
 8000d68:	40023800 	.word	0x40023800
 8000d6c:	40021800 	.word	0x40021800

08000d70 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b08a      	sub	sp, #40	@ 0x28
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d78:	f107 0314 	add.w	r3, r7, #20
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	601a      	str	r2, [r3, #0]
 8000d80:	605a      	str	r2, [r3, #4]
 8000d82:	609a      	str	r2, [r3, #8]
 8000d84:	60da      	str	r2, [r3, #12]
 8000d86:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	4a19      	ldr	r2, [pc, #100]	@ (8000df4 <HAL_I2C_MspInit+0x84>)
 8000d8e:	4293      	cmp	r3, r2
 8000d90:	d12c      	bne.n	8000dec <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d92:	2300      	movs	r3, #0
 8000d94:	613b      	str	r3, [r7, #16]
 8000d96:	4b18      	ldr	r3, [pc, #96]	@ (8000df8 <HAL_I2C_MspInit+0x88>)
 8000d98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d9a:	4a17      	ldr	r2, [pc, #92]	@ (8000df8 <HAL_I2C_MspInit+0x88>)
 8000d9c:	f043 0302 	orr.w	r3, r3, #2
 8000da0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000da2:	4b15      	ldr	r3, [pc, #84]	@ (8000df8 <HAL_I2C_MspInit+0x88>)
 8000da4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000da6:	f003 0302 	and.w	r3, r3, #2
 8000daa:	613b      	str	r3, [r7, #16]
 8000dac:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8000dae:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000db2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000db4:	2312      	movs	r3, #18
 8000db6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db8:	2300      	movs	r3, #0
 8000dba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dbc:	2303      	movs	r3, #3
 8000dbe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000dc0:	2304      	movs	r3, #4
 8000dc2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dc4:	f107 0314 	add.w	r3, r7, #20
 8000dc8:	4619      	mov	r1, r3
 8000dca:	480c      	ldr	r0, [pc, #48]	@ (8000dfc <HAL_I2C_MspInit+0x8c>)
 8000dcc:	f000 ff4c 	bl	8001c68 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	60fb      	str	r3, [r7, #12]
 8000dd4:	4b08      	ldr	r3, [pc, #32]	@ (8000df8 <HAL_I2C_MspInit+0x88>)
 8000dd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dd8:	4a07      	ldr	r2, [pc, #28]	@ (8000df8 <HAL_I2C_MspInit+0x88>)
 8000dda:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000dde:	6413      	str	r3, [r2, #64]	@ 0x40
 8000de0:	4b05      	ldr	r3, [pc, #20]	@ (8000df8 <HAL_I2C_MspInit+0x88>)
 8000de2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000de4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000de8:	60fb      	str	r3, [r7, #12]
 8000dea:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000dec:	bf00      	nop
 8000dee:	3728      	adds	r7, #40	@ 0x28
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}
 8000df4:	40005400 	.word	0x40005400
 8000df8:	40023800 	.word	0x40023800
 8000dfc:	40020400 	.word	0x40020400

08000e00 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b08e      	sub	sp, #56	@ 0x38
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e08:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	601a      	str	r2, [r3, #0]
 8000e10:	605a      	str	r2, [r3, #4]
 8000e12:	609a      	str	r2, [r3, #8]
 8000e14:	60da      	str	r2, [r3, #12]
 8000e16:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	4a51      	ldr	r2, [pc, #324]	@ (8000f64 <HAL_SPI_MspInit+0x164>)
 8000e1e:	4293      	cmp	r3, r2
 8000e20:	d14b      	bne.n	8000eba <HAL_SPI_MspInit+0xba>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000e22:	2300      	movs	r3, #0
 8000e24:	623b      	str	r3, [r7, #32]
 8000e26:	4b50      	ldr	r3, [pc, #320]	@ (8000f68 <HAL_SPI_MspInit+0x168>)
 8000e28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e2a:	4a4f      	ldr	r2, [pc, #316]	@ (8000f68 <HAL_SPI_MspInit+0x168>)
 8000e2c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e30:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e32:	4b4d      	ldr	r3, [pc, #308]	@ (8000f68 <HAL_SPI_MspInit+0x168>)
 8000e34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e36:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e3a:	623b      	str	r3, [r7, #32]
 8000e3c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e3e:	2300      	movs	r3, #0
 8000e40:	61fb      	str	r3, [r7, #28]
 8000e42:	4b49      	ldr	r3, [pc, #292]	@ (8000f68 <HAL_SPI_MspInit+0x168>)
 8000e44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e46:	4a48      	ldr	r2, [pc, #288]	@ (8000f68 <HAL_SPI_MspInit+0x168>)
 8000e48:	f043 0304 	orr.w	r3, r3, #4
 8000e4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e4e:	4b46      	ldr	r3, [pc, #280]	@ (8000f68 <HAL_SPI_MspInit+0x168>)
 8000e50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e52:	f003 0304 	and.w	r3, r3, #4
 8000e56:	61fb      	str	r3, [r7, #28]
 8000e58:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	61bb      	str	r3, [r7, #24]
 8000e5e:	4b42      	ldr	r3, [pc, #264]	@ (8000f68 <HAL_SPI_MspInit+0x168>)
 8000e60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e62:	4a41      	ldr	r2, [pc, #260]	@ (8000f68 <HAL_SPI_MspInit+0x168>)
 8000e64:	f043 0302 	orr.w	r3, r3, #2
 8000e68:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e6a:	4b3f      	ldr	r3, [pc, #252]	@ (8000f68 <HAL_SPI_MspInit+0x168>)
 8000e6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e6e:	f003 0302 	and.w	r3, r3, #2
 8000e72:	61bb      	str	r3, [r7, #24]
 8000e74:	69bb      	ldr	r3, [r7, #24]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000e76:	230c      	movs	r3, #12
 8000e78:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e7a:	2302      	movs	r3, #2
 8000e7c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e82:	2303      	movs	r3, #3
 8000e84:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000e86:	2305      	movs	r3, #5
 8000e88:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e8a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e8e:	4619      	mov	r1, r3
 8000e90:	4836      	ldr	r0, [pc, #216]	@ (8000f6c <HAL_SPI_MspInit+0x16c>)
 8000e92:	f000 fee9 	bl	8001c68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000e96:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000e9a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e9c:	2302      	movs	r3, #2
 8000e9e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ea4:	2303      	movs	r3, #3
 8000ea6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000ea8:	2305      	movs	r3, #5
 8000eaa:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	482f      	ldr	r0, [pc, #188]	@ (8000f70 <HAL_SPI_MspInit+0x170>)
 8000eb4:	f000 fed8 	bl	8001c68 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000eb8:	e050      	b.n	8000f5c <HAL_SPI_MspInit+0x15c>
  else if(hspi->Instance==SPI3)
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	4a2d      	ldr	r2, [pc, #180]	@ (8000f74 <HAL_SPI_MspInit+0x174>)
 8000ec0:	4293      	cmp	r3, r2
 8000ec2:	d14b      	bne.n	8000f5c <HAL_SPI_MspInit+0x15c>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	617b      	str	r3, [r7, #20]
 8000ec8:	4b27      	ldr	r3, [pc, #156]	@ (8000f68 <HAL_SPI_MspInit+0x168>)
 8000eca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ecc:	4a26      	ldr	r2, [pc, #152]	@ (8000f68 <HAL_SPI_MspInit+0x168>)
 8000ece:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000ed2:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ed4:	4b24      	ldr	r3, [pc, #144]	@ (8000f68 <HAL_SPI_MspInit+0x168>)
 8000ed6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ed8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000edc:	617b      	str	r3, [r7, #20]
 8000ede:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	613b      	str	r3, [r7, #16]
 8000ee4:	4b20      	ldr	r3, [pc, #128]	@ (8000f68 <HAL_SPI_MspInit+0x168>)
 8000ee6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ee8:	4a1f      	ldr	r2, [pc, #124]	@ (8000f68 <HAL_SPI_MspInit+0x168>)
 8000eea:	f043 0302 	orr.w	r3, r3, #2
 8000eee:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ef0:	4b1d      	ldr	r3, [pc, #116]	@ (8000f68 <HAL_SPI_MspInit+0x168>)
 8000ef2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ef4:	f003 0302 	and.w	r3, r3, #2
 8000ef8:	613b      	str	r3, [r7, #16]
 8000efa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000efc:	2300      	movs	r3, #0
 8000efe:	60fb      	str	r3, [r7, #12]
 8000f00:	4b19      	ldr	r3, [pc, #100]	@ (8000f68 <HAL_SPI_MspInit+0x168>)
 8000f02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f04:	4a18      	ldr	r2, [pc, #96]	@ (8000f68 <HAL_SPI_MspInit+0x168>)
 8000f06:	f043 0304 	orr.w	r3, r3, #4
 8000f0a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f0c:	4b16      	ldr	r3, [pc, #88]	@ (8000f68 <HAL_SPI_MspInit+0x168>)
 8000f0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f10:	f003 0304 	and.w	r3, r3, #4
 8000f14:	60fb      	str	r3, [r7, #12]
 8000f16:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000f18:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f1c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f1e:	2302      	movs	r3, #2
 8000f20:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f22:	2300      	movs	r3, #0
 8000f24:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f26:	2303      	movs	r3, #3
 8000f28:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8000f2a:	2307      	movs	r3, #7
 8000f2c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f2e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f32:	4619      	mov	r1, r3
 8000f34:	480e      	ldr	r0, [pc, #56]	@ (8000f70 <HAL_SPI_MspInit+0x170>)
 8000f36:	f000 fe97 	bl	8001c68 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000f3a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000f3e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f40:	2302      	movs	r3, #2
 8000f42:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f44:	2300      	movs	r3, #0
 8000f46:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f48:	2303      	movs	r3, #3
 8000f4a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000f4c:	2306      	movs	r3, #6
 8000f4e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f50:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f54:	4619      	mov	r1, r3
 8000f56:	4805      	ldr	r0, [pc, #20]	@ (8000f6c <HAL_SPI_MspInit+0x16c>)
 8000f58:	f000 fe86 	bl	8001c68 <HAL_GPIO_Init>
}
 8000f5c:	bf00      	nop
 8000f5e:	3738      	adds	r7, #56	@ 0x38
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	40003800 	.word	0x40003800
 8000f68:	40023800 	.word	0x40023800
 8000f6c:	40020800 	.word	0x40020800
 8000f70:	40020400 	.word	0x40020400
 8000f74:	40003c00 	.word	0x40003c00

08000f78 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b08a      	sub	sp, #40	@ 0x28
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f80:	f107 0314 	add.w	r3, r7, #20
 8000f84:	2200      	movs	r2, #0
 8000f86:	601a      	str	r2, [r3, #0]
 8000f88:	605a      	str	r2, [r3, #4]
 8000f8a:	609a      	str	r2, [r3, #8]
 8000f8c:	60da      	str	r2, [r3, #12]
 8000f8e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	4a19      	ldr	r2, [pc, #100]	@ (8000ffc <HAL_UART_MspInit+0x84>)
 8000f96:	4293      	cmp	r3, r2
 8000f98:	d12c      	bne.n	8000ff4 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	613b      	str	r3, [r7, #16]
 8000f9e:	4b18      	ldr	r3, [pc, #96]	@ (8001000 <HAL_UART_MspInit+0x88>)
 8000fa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fa2:	4a17      	ldr	r2, [pc, #92]	@ (8001000 <HAL_UART_MspInit+0x88>)
 8000fa4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000fa8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000faa:	4b15      	ldr	r3, [pc, #84]	@ (8001000 <HAL_UART_MspInit+0x88>)
 8000fac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fae:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000fb2:	613b      	str	r3, [r7, #16]
 8000fb4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	60fb      	str	r3, [r7, #12]
 8000fba:	4b11      	ldr	r3, [pc, #68]	@ (8001000 <HAL_UART_MspInit+0x88>)
 8000fbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fbe:	4a10      	ldr	r2, [pc, #64]	@ (8001000 <HAL_UART_MspInit+0x88>)
 8000fc0:	f043 0308 	orr.w	r3, r3, #8
 8000fc4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fc6:	4b0e      	ldr	r3, [pc, #56]	@ (8001000 <HAL_UART_MspInit+0x88>)
 8000fc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fca:	f003 0308 	and.w	r3, r3, #8
 8000fce:	60fb      	str	r3, [r7, #12]
 8000fd0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000fd2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000fd6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fd8:	2302      	movs	r3, #2
 8000fda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fe0:	2303      	movs	r3, #3
 8000fe2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000fe4:	2307      	movs	r3, #7
 8000fe6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fe8:	f107 0314 	add.w	r3, r7, #20
 8000fec:	4619      	mov	r1, r3
 8000fee:	4805      	ldr	r0, [pc, #20]	@ (8001004 <HAL_UART_MspInit+0x8c>)
 8000ff0:	f000 fe3a 	bl	8001c68 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000ff4:	bf00      	nop
 8000ff6:	3728      	adds	r7, #40	@ 0x28
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	40004800 	.word	0x40004800
 8001000:	40023800 	.word	0x40023800
 8001004:	40020c00 	.word	0x40020c00

08001008 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800100c:	bf00      	nop
 800100e:	e7fd      	b.n	800100c <NMI_Handler+0x4>

08001010 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001014:	bf00      	nop
 8001016:	e7fd      	b.n	8001014 <HardFault_Handler+0x4>

08001018 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800101c:	bf00      	nop
 800101e:	e7fd      	b.n	800101c <MemManage_Handler+0x4>

08001020 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001024:	bf00      	nop
 8001026:	e7fd      	b.n	8001024 <BusFault_Handler+0x4>

08001028 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800102c:	bf00      	nop
 800102e:	e7fd      	b.n	800102c <UsageFault_Handler+0x4>

08001030 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001034:	bf00      	nop
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr

0800103e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800103e:	b480      	push	{r7}
 8001040:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001042:	bf00      	nop
 8001044:	46bd      	mov	sp, r7
 8001046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104a:	4770      	bx	lr

0800104c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001050:	bf00      	nop
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr

0800105a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800105a:	b580      	push	{r7, lr}
 800105c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800105e:	f000 f93f 	bl	80012e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001062:	bf00      	nop
 8001064:	bd80      	pop	{r7, pc}
	...

08001068 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800106c:	4802      	ldr	r0, [pc, #8]	@ (8001078 <OTG_FS_IRQHandler+0x10>)
 800106e:	f001 ff3f 	bl	8002ef0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001072:	bf00      	nop
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	200008e4 	.word	0x200008e4

0800107c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b086      	sub	sp, #24
 8001080:	af00      	add	r7, sp, #0
 8001082:	60f8      	str	r0, [r7, #12]
 8001084:	60b9      	str	r1, [r7, #8]
 8001086:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001088:	2300      	movs	r3, #0
 800108a:	617b      	str	r3, [r7, #20]
 800108c:	e00a      	b.n	80010a4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800108e:	f3af 8000 	nop.w
 8001092:	4601      	mov	r1, r0
 8001094:	68bb      	ldr	r3, [r7, #8]
 8001096:	1c5a      	adds	r2, r3, #1
 8001098:	60ba      	str	r2, [r7, #8]
 800109a:	b2ca      	uxtb	r2, r1
 800109c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800109e:	697b      	ldr	r3, [r7, #20]
 80010a0:	3301      	adds	r3, #1
 80010a2:	617b      	str	r3, [r7, #20]
 80010a4:	697a      	ldr	r2, [r7, #20]
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	429a      	cmp	r2, r3
 80010aa:	dbf0      	blt.n	800108e <_read+0x12>
	}

return len;
 80010ac:	687b      	ldr	r3, [r7, #4]
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	3718      	adds	r7, #24
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}

080010b6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80010b6:	b580      	push	{r7, lr}
 80010b8:	b086      	sub	sp, #24
 80010ba:	af00      	add	r7, sp, #0
 80010bc:	60f8      	str	r0, [r7, #12]
 80010be:	60b9      	str	r1, [r7, #8]
 80010c0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010c2:	2300      	movs	r3, #0
 80010c4:	617b      	str	r3, [r7, #20]
 80010c6:	e009      	b.n	80010dc <_write+0x26>
	{
		__io_putchar(*ptr++);
 80010c8:	68bb      	ldr	r3, [r7, #8]
 80010ca:	1c5a      	adds	r2, r3, #1
 80010cc:	60ba      	str	r2, [r7, #8]
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	4618      	mov	r0, r3
 80010d2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010d6:	697b      	ldr	r3, [r7, #20]
 80010d8:	3301      	adds	r3, #1
 80010da:	617b      	str	r3, [r7, #20]
 80010dc:	697a      	ldr	r2, [r7, #20]
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	429a      	cmp	r2, r3
 80010e2:	dbf1      	blt.n	80010c8 <_write+0x12>
	}
	return len;
 80010e4:	687b      	ldr	r3, [r7, #4]
}
 80010e6:	4618      	mov	r0, r3
 80010e8:	3718      	adds	r7, #24
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}

080010ee <_close>:

int _close(int file)
{
 80010ee:	b480      	push	{r7}
 80010f0:	b083      	sub	sp, #12
 80010f2:	af00      	add	r7, sp, #0
 80010f4:	6078      	str	r0, [r7, #4]
	return -1;
 80010f6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	370c      	adds	r7, #12
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr

08001106 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001106:	b480      	push	{r7}
 8001108:	b083      	sub	sp, #12
 800110a:	af00      	add	r7, sp, #0
 800110c:	6078      	str	r0, [r7, #4]
 800110e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001116:	605a      	str	r2, [r3, #4]
	return 0;
 8001118:	2300      	movs	r3, #0
}
 800111a:	4618      	mov	r0, r3
 800111c:	370c      	adds	r7, #12
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr

08001126 <_isatty>:

int _isatty(int file)
{
 8001126:	b480      	push	{r7}
 8001128:	b083      	sub	sp, #12
 800112a:	af00      	add	r7, sp, #0
 800112c:	6078      	str	r0, [r7, #4]
	return 1;
 800112e:	2301      	movs	r3, #1
}
 8001130:	4618      	mov	r0, r3
 8001132:	370c      	adds	r7, #12
 8001134:	46bd      	mov	sp, r7
 8001136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113a:	4770      	bx	lr

0800113c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800113c:	b480      	push	{r7}
 800113e:	b085      	sub	sp, #20
 8001140:	af00      	add	r7, sp, #0
 8001142:	60f8      	str	r0, [r7, #12]
 8001144:	60b9      	str	r1, [r7, #8]
 8001146:	607a      	str	r2, [r7, #4]
	return 0;
 8001148:	2300      	movs	r3, #0
}
 800114a:	4618      	mov	r0, r3
 800114c:	3714      	adds	r7, #20
 800114e:	46bd      	mov	sp, r7
 8001150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001154:	4770      	bx	lr
	...

08001158 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b086      	sub	sp, #24
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001160:	4a14      	ldr	r2, [pc, #80]	@ (80011b4 <_sbrk+0x5c>)
 8001162:	4b15      	ldr	r3, [pc, #84]	@ (80011b8 <_sbrk+0x60>)
 8001164:	1ad3      	subs	r3, r2, r3
 8001166:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001168:	697b      	ldr	r3, [r7, #20]
 800116a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800116c:	4b13      	ldr	r3, [pc, #76]	@ (80011bc <_sbrk+0x64>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	2b00      	cmp	r3, #0
 8001172:	d102      	bne.n	800117a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001174:	4b11      	ldr	r3, [pc, #68]	@ (80011bc <_sbrk+0x64>)
 8001176:	4a12      	ldr	r2, [pc, #72]	@ (80011c0 <_sbrk+0x68>)
 8001178:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800117a:	4b10      	ldr	r3, [pc, #64]	@ (80011bc <_sbrk+0x64>)
 800117c:	681a      	ldr	r2, [r3, #0]
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	4413      	add	r3, r2
 8001182:	693a      	ldr	r2, [r7, #16]
 8001184:	429a      	cmp	r2, r3
 8001186:	d207      	bcs.n	8001198 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001188:	f008 fac8 	bl	800971c <__errno>
 800118c:	4603      	mov	r3, r0
 800118e:	220c      	movs	r2, #12
 8001190:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001192:	f04f 33ff 	mov.w	r3, #4294967295
 8001196:	e009      	b.n	80011ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001198:	4b08      	ldr	r3, [pc, #32]	@ (80011bc <_sbrk+0x64>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800119e:	4b07      	ldr	r3, [pc, #28]	@ (80011bc <_sbrk+0x64>)
 80011a0:	681a      	ldr	r2, [r3, #0]
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	4413      	add	r3, r2
 80011a6:	4a05      	ldr	r2, [pc, #20]	@ (80011bc <_sbrk+0x64>)
 80011a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011aa:	68fb      	ldr	r3, [r7, #12]
}
 80011ac:	4618      	mov	r0, r3
 80011ae:	3718      	adds	r7, #24
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	20050000 	.word	0x20050000
 80011b8:	00000400 	.word	0x00000400
 80011bc:	2000030c 	.word	0x2000030c
 80011c0:	20001258 	.word	0x20001258

080011c4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011c8:	4b06      	ldr	r3, [pc, #24]	@ (80011e4 <SystemInit+0x20>)
 80011ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80011ce:	4a05      	ldr	r2, [pc, #20]	@ (80011e4 <SystemInit+0x20>)
 80011d0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80011d4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011d8:	bf00      	nop
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr
 80011e2:	bf00      	nop
 80011e4:	e000ed00 	.word	0xe000ed00

080011e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 80011e8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001220 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011ec:	480d      	ldr	r0, [pc, #52]	@ (8001224 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80011ee:	490e      	ldr	r1, [pc, #56]	@ (8001228 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80011f0:	4a0e      	ldr	r2, [pc, #56]	@ (800122c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80011f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011f4:	e002      	b.n	80011fc <LoopCopyDataInit>

080011f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011fa:	3304      	adds	r3, #4

080011fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001200:	d3f9      	bcc.n	80011f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001202:	4a0b      	ldr	r2, [pc, #44]	@ (8001230 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001204:	4c0b      	ldr	r4, [pc, #44]	@ (8001234 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001206:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001208:	e001      	b.n	800120e <LoopFillZerobss>

0800120a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800120a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800120c:	3204      	adds	r2, #4

0800120e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800120e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001210:	d3fb      	bcc.n	800120a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001212:	f7ff ffd7 	bl	80011c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001216:	f008 fa87 	bl	8009728 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800121a:	f7ff f993 	bl	8000544 <main>
  bx  lr    
 800121e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001220:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001224:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001228:	20000138 	.word	0x20000138
  ldr r2, =_sidata
 800122c:	08009e70 	.word	0x08009e70
  ldr r2, =_sbss
 8001230:	20000138 	.word	0x20000138
  ldr r4, =_ebss
 8001234:	20001258 	.word	0x20001258

08001238 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001238:	e7fe      	b.n	8001238 <ADC_IRQHandler>
	...

0800123c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001240:	4b0e      	ldr	r3, [pc, #56]	@ (800127c <HAL_Init+0x40>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4a0d      	ldr	r2, [pc, #52]	@ (800127c <HAL_Init+0x40>)
 8001246:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800124a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800124c:	4b0b      	ldr	r3, [pc, #44]	@ (800127c <HAL_Init+0x40>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4a0a      	ldr	r2, [pc, #40]	@ (800127c <HAL_Init+0x40>)
 8001252:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001256:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001258:	4b08      	ldr	r3, [pc, #32]	@ (800127c <HAL_Init+0x40>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4a07      	ldr	r2, [pc, #28]	@ (800127c <HAL_Init+0x40>)
 800125e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001262:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001264:	2003      	movs	r0, #3
 8001266:	f000 fcbd 	bl	8001be4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800126a:	2000      	movs	r0, #0
 800126c:	f000 f808 	bl	8001280 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001270:	f7ff fcca 	bl	8000c08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001274:	2300      	movs	r3, #0
}
 8001276:	4618      	mov	r0, r3
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	40023c00 	.word	0x40023c00

08001280 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b082      	sub	sp, #8
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001288:	4b12      	ldr	r3, [pc, #72]	@ (80012d4 <HAL_InitTick+0x54>)
 800128a:	681a      	ldr	r2, [r3, #0]
 800128c:	4b12      	ldr	r3, [pc, #72]	@ (80012d8 <HAL_InitTick+0x58>)
 800128e:	781b      	ldrb	r3, [r3, #0]
 8001290:	4619      	mov	r1, r3
 8001292:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001296:	fbb3 f3f1 	udiv	r3, r3, r1
 800129a:	fbb2 f3f3 	udiv	r3, r2, r3
 800129e:	4618      	mov	r0, r3
 80012a0:	f000 fcd5 	bl	8001c4e <HAL_SYSTICK_Config>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d001      	beq.n	80012ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012aa:	2301      	movs	r3, #1
 80012ac:	e00e      	b.n	80012cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	2b0f      	cmp	r3, #15
 80012b2:	d80a      	bhi.n	80012ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012b4:	2200      	movs	r2, #0
 80012b6:	6879      	ldr	r1, [r7, #4]
 80012b8:	f04f 30ff 	mov.w	r0, #4294967295
 80012bc:	f000 fc9d 	bl	8001bfa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012c0:	4a06      	ldr	r2, [pc, #24]	@ (80012dc <HAL_InitTick+0x5c>)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012c6:	2300      	movs	r3, #0
 80012c8:	e000      	b.n	80012cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012ca:	2301      	movs	r3, #1
}
 80012cc:	4618      	mov	r0, r3
 80012ce:	3708      	adds	r7, #8
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	20000000 	.word	0x20000000
 80012d8:	20000008 	.word	0x20000008
 80012dc:	20000004 	.word	0x20000004

080012e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012e4:	4b06      	ldr	r3, [pc, #24]	@ (8001300 <HAL_IncTick+0x20>)
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	461a      	mov	r2, r3
 80012ea:	4b06      	ldr	r3, [pc, #24]	@ (8001304 <HAL_IncTick+0x24>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	4413      	add	r3, r2
 80012f0:	4a04      	ldr	r2, [pc, #16]	@ (8001304 <HAL_IncTick+0x24>)
 80012f2:	6013      	str	r3, [r2, #0]
}
 80012f4:	bf00      	nop
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr
 80012fe:	bf00      	nop
 8001300:	20000008 	.word	0x20000008
 8001304:	20000310 	.word	0x20000310

08001308 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0
  return uwTick;
 800130c:	4b03      	ldr	r3, [pc, #12]	@ (800131c <HAL_GetTick+0x14>)
 800130e:	681b      	ldr	r3, [r3, #0]
}
 8001310:	4618      	mov	r0, r3
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr
 800131a:	bf00      	nop
 800131c:	20000310 	.word	0x20000310

08001320 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b084      	sub	sp, #16
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001328:	f7ff ffee 	bl	8001308 <HAL_GetTick>
 800132c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001338:	d005      	beq.n	8001346 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800133a:	4b0a      	ldr	r3, [pc, #40]	@ (8001364 <HAL_Delay+0x44>)
 800133c:	781b      	ldrb	r3, [r3, #0]
 800133e:	461a      	mov	r2, r3
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	4413      	add	r3, r2
 8001344:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001346:	bf00      	nop
 8001348:	f7ff ffde 	bl	8001308 <HAL_GetTick>
 800134c:	4602      	mov	r2, r0
 800134e:	68bb      	ldr	r3, [r7, #8]
 8001350:	1ad3      	subs	r3, r2, r3
 8001352:	68fa      	ldr	r2, [r7, #12]
 8001354:	429a      	cmp	r2, r3
 8001356:	d8f7      	bhi.n	8001348 <HAL_Delay+0x28>
  {
  }
}
 8001358:	bf00      	nop
 800135a:	bf00      	nop
 800135c:	3710      	adds	r7, #16
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	20000008 	.word	0x20000008

08001368 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b084      	sub	sp, #16
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001370:	2300      	movs	r3, #0
 8001372:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d101      	bne.n	800137e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800137a:	2301      	movs	r3, #1
 800137c:	e033      	b.n	80013e6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001382:	2b00      	cmp	r3, #0
 8001384:	d109      	bne.n	800139a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001386:	6878      	ldr	r0, [r7, #4]
 8001388:	f7ff fc66 	bl	8000c58 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	2200      	movs	r2, #0
 8001390:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	2200      	movs	r2, #0
 8001396:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800139e:	f003 0310 	and.w	r3, r3, #16
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d118      	bne.n	80013d8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013aa:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80013ae:	f023 0302 	bic.w	r3, r3, #2
 80013b2:	f043 0202 	orr.w	r2, r3, #2
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80013ba:	6878      	ldr	r0, [r7, #4]
 80013bc:	f000 f94a 	bl	8001654 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	2200      	movs	r2, #0
 80013c4:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013ca:	f023 0303 	bic.w	r3, r3, #3
 80013ce:	f043 0201 	orr.w	r2, r3, #1
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	641a      	str	r2, [r3, #64]	@ 0x40
 80013d6:	e001      	b.n	80013dc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80013d8:	2301      	movs	r3, #1
 80013da:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	2200      	movs	r2, #0
 80013e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80013e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	3710      	adds	r7, #16
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
	...

080013f0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b085      	sub	sp, #20
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
 80013f8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80013fa:	2300      	movs	r3, #0
 80013fc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001404:	2b01      	cmp	r3, #1
 8001406:	d101      	bne.n	800140c <HAL_ADC_ConfigChannel+0x1c>
 8001408:	2302      	movs	r3, #2
 800140a:	e113      	b.n	8001634 <HAL_ADC_ConfigChannel+0x244>
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	2201      	movs	r2, #1
 8001410:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	2b09      	cmp	r3, #9
 800141a:	d925      	bls.n	8001468 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	68d9      	ldr	r1, [r3, #12]
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	b29b      	uxth	r3, r3
 8001428:	461a      	mov	r2, r3
 800142a:	4613      	mov	r3, r2
 800142c:	005b      	lsls	r3, r3, #1
 800142e:	4413      	add	r3, r2
 8001430:	3b1e      	subs	r3, #30
 8001432:	2207      	movs	r2, #7
 8001434:	fa02 f303 	lsl.w	r3, r2, r3
 8001438:	43da      	mvns	r2, r3
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	400a      	ands	r2, r1
 8001440:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	68d9      	ldr	r1, [r3, #12]
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	689a      	ldr	r2, [r3, #8]
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	b29b      	uxth	r3, r3
 8001452:	4618      	mov	r0, r3
 8001454:	4603      	mov	r3, r0
 8001456:	005b      	lsls	r3, r3, #1
 8001458:	4403      	add	r3, r0
 800145a:	3b1e      	subs	r3, #30
 800145c:	409a      	lsls	r2, r3
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	430a      	orrs	r2, r1
 8001464:	60da      	str	r2, [r3, #12]
 8001466:	e022      	b.n	80014ae <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	6919      	ldr	r1, [r3, #16]
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	b29b      	uxth	r3, r3
 8001474:	461a      	mov	r2, r3
 8001476:	4613      	mov	r3, r2
 8001478:	005b      	lsls	r3, r3, #1
 800147a:	4413      	add	r3, r2
 800147c:	2207      	movs	r2, #7
 800147e:	fa02 f303 	lsl.w	r3, r2, r3
 8001482:	43da      	mvns	r2, r3
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	400a      	ands	r2, r1
 800148a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	6919      	ldr	r1, [r3, #16]
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	689a      	ldr	r2, [r3, #8]
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	b29b      	uxth	r3, r3
 800149c:	4618      	mov	r0, r3
 800149e:	4603      	mov	r3, r0
 80014a0:	005b      	lsls	r3, r3, #1
 80014a2:	4403      	add	r3, r0
 80014a4:	409a      	lsls	r2, r3
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	430a      	orrs	r2, r1
 80014ac:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	2b06      	cmp	r3, #6
 80014b4:	d824      	bhi.n	8001500 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	685a      	ldr	r2, [r3, #4]
 80014c0:	4613      	mov	r3, r2
 80014c2:	009b      	lsls	r3, r3, #2
 80014c4:	4413      	add	r3, r2
 80014c6:	3b05      	subs	r3, #5
 80014c8:	221f      	movs	r2, #31
 80014ca:	fa02 f303 	lsl.w	r3, r2, r3
 80014ce:	43da      	mvns	r2, r3
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	400a      	ands	r2, r1
 80014d6:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	b29b      	uxth	r3, r3
 80014e4:	4618      	mov	r0, r3
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	685a      	ldr	r2, [r3, #4]
 80014ea:	4613      	mov	r3, r2
 80014ec:	009b      	lsls	r3, r3, #2
 80014ee:	4413      	add	r3, r2
 80014f0:	3b05      	subs	r3, #5
 80014f2:	fa00 f203 	lsl.w	r2, r0, r3
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	430a      	orrs	r2, r1
 80014fc:	635a      	str	r2, [r3, #52]	@ 0x34
 80014fe:	e04c      	b.n	800159a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	2b0c      	cmp	r3, #12
 8001506:	d824      	bhi.n	8001552 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	685a      	ldr	r2, [r3, #4]
 8001512:	4613      	mov	r3, r2
 8001514:	009b      	lsls	r3, r3, #2
 8001516:	4413      	add	r3, r2
 8001518:	3b23      	subs	r3, #35	@ 0x23
 800151a:	221f      	movs	r2, #31
 800151c:	fa02 f303 	lsl.w	r3, r2, r3
 8001520:	43da      	mvns	r2, r3
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	400a      	ands	r2, r1
 8001528:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	b29b      	uxth	r3, r3
 8001536:	4618      	mov	r0, r3
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	685a      	ldr	r2, [r3, #4]
 800153c:	4613      	mov	r3, r2
 800153e:	009b      	lsls	r3, r3, #2
 8001540:	4413      	add	r3, r2
 8001542:	3b23      	subs	r3, #35	@ 0x23
 8001544:	fa00 f203 	lsl.w	r2, r0, r3
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	430a      	orrs	r2, r1
 800154e:	631a      	str	r2, [r3, #48]	@ 0x30
 8001550:	e023      	b.n	800159a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	685a      	ldr	r2, [r3, #4]
 800155c:	4613      	mov	r3, r2
 800155e:	009b      	lsls	r3, r3, #2
 8001560:	4413      	add	r3, r2
 8001562:	3b41      	subs	r3, #65	@ 0x41
 8001564:	221f      	movs	r2, #31
 8001566:	fa02 f303 	lsl.w	r3, r2, r3
 800156a:	43da      	mvns	r2, r3
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	400a      	ands	r2, r1
 8001572:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	b29b      	uxth	r3, r3
 8001580:	4618      	mov	r0, r3
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	685a      	ldr	r2, [r3, #4]
 8001586:	4613      	mov	r3, r2
 8001588:	009b      	lsls	r3, r3, #2
 800158a:	4413      	add	r3, r2
 800158c:	3b41      	subs	r3, #65	@ 0x41
 800158e:	fa00 f203 	lsl.w	r2, r0, r3
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	430a      	orrs	r2, r1
 8001598:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800159a:	4b29      	ldr	r3, [pc, #164]	@ (8001640 <HAL_ADC_ConfigChannel+0x250>)
 800159c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	4a28      	ldr	r2, [pc, #160]	@ (8001644 <HAL_ADC_ConfigChannel+0x254>)
 80015a4:	4293      	cmp	r3, r2
 80015a6:	d10f      	bne.n	80015c8 <HAL_ADC_ConfigChannel+0x1d8>
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	2b12      	cmp	r3, #18
 80015ae:	d10b      	bne.n	80015c8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a1d      	ldr	r2, [pc, #116]	@ (8001644 <HAL_ADC_ConfigChannel+0x254>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d12b      	bne.n	800162a <HAL_ADC_ConfigChannel+0x23a>
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4a1c      	ldr	r2, [pc, #112]	@ (8001648 <HAL_ADC_ConfigChannel+0x258>)
 80015d8:	4293      	cmp	r3, r2
 80015da:	d003      	beq.n	80015e4 <HAL_ADC_ConfigChannel+0x1f4>
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	2b11      	cmp	r3, #17
 80015e2:	d122      	bne.n	800162a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a11      	ldr	r2, [pc, #68]	@ (8001648 <HAL_ADC_ConfigChannel+0x258>)
 8001602:	4293      	cmp	r3, r2
 8001604:	d111      	bne.n	800162a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001606:	4b11      	ldr	r3, [pc, #68]	@ (800164c <HAL_ADC_ConfigChannel+0x25c>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4a11      	ldr	r2, [pc, #68]	@ (8001650 <HAL_ADC_ConfigChannel+0x260>)
 800160c:	fba2 2303 	umull	r2, r3, r2, r3
 8001610:	0c9a      	lsrs	r2, r3, #18
 8001612:	4613      	mov	r3, r2
 8001614:	009b      	lsls	r3, r3, #2
 8001616:	4413      	add	r3, r2
 8001618:	005b      	lsls	r3, r3, #1
 800161a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800161c:	e002      	b.n	8001624 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800161e:	68bb      	ldr	r3, [r7, #8]
 8001620:	3b01      	subs	r3, #1
 8001622:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001624:	68bb      	ldr	r3, [r7, #8]
 8001626:	2b00      	cmp	r3, #0
 8001628:	d1f9      	bne.n	800161e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	2200      	movs	r2, #0
 800162e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001632:	2300      	movs	r3, #0
}
 8001634:	4618      	mov	r0, r3
 8001636:	3714      	adds	r7, #20
 8001638:	46bd      	mov	sp, r7
 800163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163e:	4770      	bx	lr
 8001640:	40012300 	.word	0x40012300
 8001644:	40012000 	.word	0x40012000
 8001648:	10000012 	.word	0x10000012
 800164c:	20000000 	.word	0x20000000
 8001650:	431bde83 	.word	0x431bde83

08001654 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001654:	b480      	push	{r7}
 8001656:	b085      	sub	sp, #20
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800165c:	4b79      	ldr	r3, [pc, #484]	@ (8001844 <ADC_Init+0x1f0>)
 800165e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	685a      	ldr	r2, [r3, #4]
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	431a      	orrs	r2, r3
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	685a      	ldr	r2, [r3, #4]
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001688:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	6859      	ldr	r1, [r3, #4]
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	691b      	ldr	r3, [r3, #16]
 8001694:	021a      	lsls	r2, r3, #8
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	430a      	orrs	r2, r1
 800169c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	685a      	ldr	r2, [r3, #4]
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80016ac:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	6859      	ldr	r1, [r3, #4]
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	689a      	ldr	r2, [r3, #8]
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	430a      	orrs	r2, r1
 80016be:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	689a      	ldr	r2, [r3, #8]
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80016ce:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	6899      	ldr	r1, [r3, #8]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	68da      	ldr	r2, [r3, #12]
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	430a      	orrs	r2, r1
 80016e0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016e6:	4a58      	ldr	r2, [pc, #352]	@ (8001848 <ADC_Init+0x1f4>)
 80016e8:	4293      	cmp	r3, r2
 80016ea:	d022      	beq.n	8001732 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	689a      	ldr	r2, [r3, #8]
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80016fa:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	6899      	ldr	r1, [r3, #8]
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	430a      	orrs	r2, r1
 800170c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	689a      	ldr	r2, [r3, #8]
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800171c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	6899      	ldr	r1, [r3, #8]
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	430a      	orrs	r2, r1
 800172e:	609a      	str	r2, [r3, #8]
 8001730:	e00f      	b.n	8001752 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	689a      	ldr	r2, [r3, #8]
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001740:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	689a      	ldr	r2, [r3, #8]
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001750:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	689a      	ldr	r2, [r3, #8]
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f022 0202 	bic.w	r2, r2, #2
 8001760:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	6899      	ldr	r1, [r3, #8]
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	7e1b      	ldrb	r3, [r3, #24]
 800176c:	005a      	lsls	r2, r3, #1
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	430a      	orrs	r2, r1
 8001774:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	f893 3020 	ldrb.w	r3, [r3, #32]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d01b      	beq.n	80017b8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	685a      	ldr	r2, [r3, #4]
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800178e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	685a      	ldr	r2, [r3, #4]
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800179e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	6859      	ldr	r1, [r3, #4]
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017aa:	3b01      	subs	r3, #1
 80017ac:	035a      	lsls	r2, r3, #13
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	430a      	orrs	r2, r1
 80017b4:	605a      	str	r2, [r3, #4]
 80017b6:	e007      	b.n	80017c8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	685a      	ldr	r2, [r3, #4]
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80017c6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80017d6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	69db      	ldr	r3, [r3, #28]
 80017e2:	3b01      	subs	r3, #1
 80017e4:	051a      	lsls	r2, r3, #20
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	430a      	orrs	r2, r1
 80017ec:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	689a      	ldr	r2, [r3, #8]
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80017fc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	6899      	ldr	r1, [r3, #8]
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800180a:	025a      	lsls	r2, r3, #9
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	430a      	orrs	r2, r1
 8001812:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	689a      	ldr	r2, [r3, #8]
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001822:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	6899      	ldr	r1, [r3, #8]
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	695b      	ldr	r3, [r3, #20]
 800182e:	029a      	lsls	r2, r3, #10
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	430a      	orrs	r2, r1
 8001836:	609a      	str	r2, [r3, #8]
}
 8001838:	bf00      	nop
 800183a:	3714      	adds	r7, #20
 800183c:	46bd      	mov	sp, r7
 800183e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001842:	4770      	bx	lr
 8001844:	40012300 	.word	0x40012300
 8001848:	0f000001 	.word	0x0f000001

0800184c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b084      	sub	sp, #16
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d101      	bne.n	800185e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800185a:	2301      	movs	r3, #1
 800185c:	e0ed      	b.n	8001a3a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001864:	b2db      	uxtb	r3, r3
 8001866:	2b00      	cmp	r3, #0
 8001868:	d102      	bne.n	8001870 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800186a:	6878      	ldr	r0, [r7, #4]
 800186c:	f7ff fa38 	bl	8000ce0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	681a      	ldr	r2, [r3, #0]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f042 0201 	orr.w	r2, r2, #1
 800187e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001880:	f7ff fd42 	bl	8001308 <HAL_GetTick>
 8001884:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001886:	e012      	b.n	80018ae <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001888:	f7ff fd3e 	bl	8001308 <HAL_GetTick>
 800188c:	4602      	mov	r2, r0
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	1ad3      	subs	r3, r2, r3
 8001892:	2b0a      	cmp	r3, #10
 8001894:	d90b      	bls.n	80018ae <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800189a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	2205      	movs	r2, #5
 80018a6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80018aa:	2301      	movs	r3, #1
 80018ac:	e0c5      	b.n	8001a3a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	f003 0301 	and.w	r3, r3, #1
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d0e5      	beq.n	8001888 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	681a      	ldr	r2, [r3, #0]
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f022 0202 	bic.w	r2, r2, #2
 80018ca:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80018cc:	f7ff fd1c 	bl	8001308 <HAL_GetTick>
 80018d0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80018d2:	e012      	b.n	80018fa <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80018d4:	f7ff fd18 	bl	8001308 <HAL_GetTick>
 80018d8:	4602      	mov	r2, r0
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	1ad3      	subs	r3, r2, r3
 80018de:	2b0a      	cmp	r3, #10
 80018e0:	d90b      	bls.n	80018fa <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018e6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	2205      	movs	r2, #5
 80018f2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80018f6:	2301      	movs	r3, #1
 80018f8:	e09f      	b.n	8001a3a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	f003 0302 	and.w	r3, r3, #2
 8001904:	2b00      	cmp	r3, #0
 8001906:	d1e5      	bne.n	80018d4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	7e1b      	ldrb	r3, [r3, #24]
 800190c:	2b01      	cmp	r3, #1
 800190e:	d108      	bne.n	8001922 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	681a      	ldr	r2, [r3, #0]
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800191e:	601a      	str	r2, [r3, #0]
 8001920:	e007      	b.n	8001932 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	681a      	ldr	r2, [r3, #0]
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001930:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	7e5b      	ldrb	r3, [r3, #25]
 8001936:	2b01      	cmp	r3, #1
 8001938:	d108      	bne.n	800194c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	681a      	ldr	r2, [r3, #0]
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001948:	601a      	str	r2, [r3, #0]
 800194a:	e007      	b.n	800195c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	681a      	ldr	r2, [r3, #0]
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800195a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	7e9b      	ldrb	r3, [r3, #26]
 8001960:	2b01      	cmp	r3, #1
 8001962:	d108      	bne.n	8001976 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	681a      	ldr	r2, [r3, #0]
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f042 0220 	orr.w	r2, r2, #32
 8001972:	601a      	str	r2, [r3, #0]
 8001974:	e007      	b.n	8001986 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	681a      	ldr	r2, [r3, #0]
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f022 0220 	bic.w	r2, r2, #32
 8001984:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	7edb      	ldrb	r3, [r3, #27]
 800198a:	2b01      	cmp	r3, #1
 800198c:	d108      	bne.n	80019a0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	681a      	ldr	r2, [r3, #0]
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f022 0210 	bic.w	r2, r2, #16
 800199c:	601a      	str	r2, [r3, #0]
 800199e:	e007      	b.n	80019b0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	681a      	ldr	r2, [r3, #0]
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f042 0210 	orr.w	r2, r2, #16
 80019ae:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	7f1b      	ldrb	r3, [r3, #28]
 80019b4:	2b01      	cmp	r3, #1
 80019b6:	d108      	bne.n	80019ca <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	681a      	ldr	r2, [r3, #0]
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f042 0208 	orr.w	r2, r2, #8
 80019c6:	601a      	str	r2, [r3, #0]
 80019c8:	e007      	b.n	80019da <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	681a      	ldr	r2, [r3, #0]
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f022 0208 	bic.w	r2, r2, #8
 80019d8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	7f5b      	ldrb	r3, [r3, #29]
 80019de:	2b01      	cmp	r3, #1
 80019e0:	d108      	bne.n	80019f4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	681a      	ldr	r2, [r3, #0]
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f042 0204 	orr.w	r2, r2, #4
 80019f0:	601a      	str	r2, [r3, #0]
 80019f2:	e007      	b.n	8001a04 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	681a      	ldr	r2, [r3, #0]
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f022 0204 	bic.w	r2, r2, #4
 8001a02:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	689a      	ldr	r2, [r3, #8]
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	68db      	ldr	r3, [r3, #12]
 8001a0c:	431a      	orrs	r2, r3
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	691b      	ldr	r3, [r3, #16]
 8001a12:	431a      	orrs	r2, r3
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	695b      	ldr	r3, [r3, #20]
 8001a18:	ea42 0103 	orr.w	r1, r2, r3
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	1e5a      	subs	r2, r3, #1
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	430a      	orrs	r2, r1
 8001a28:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2201      	movs	r2, #1
 8001a34:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001a38:	2300      	movs	r3, #0
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	3710      	adds	r7, #16
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
	...

08001a44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b085      	sub	sp, #20
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	f003 0307 	and.w	r3, r3, #7
 8001a52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a54:	4b0c      	ldr	r3, [pc, #48]	@ (8001a88 <__NVIC_SetPriorityGrouping+0x44>)
 8001a56:	68db      	ldr	r3, [r3, #12]
 8001a58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a5a:	68ba      	ldr	r2, [r7, #8]
 8001a5c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001a60:	4013      	ands	r3, r2
 8001a62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a68:	68bb      	ldr	r3, [r7, #8]
 8001a6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a6c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001a70:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a76:	4a04      	ldr	r2, [pc, #16]	@ (8001a88 <__NVIC_SetPriorityGrouping+0x44>)
 8001a78:	68bb      	ldr	r3, [r7, #8]
 8001a7a:	60d3      	str	r3, [r2, #12]
}
 8001a7c:	bf00      	nop
 8001a7e:	3714      	adds	r7, #20
 8001a80:	46bd      	mov	sp, r7
 8001a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a86:	4770      	bx	lr
 8001a88:	e000ed00 	.word	0xe000ed00

08001a8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a90:	4b04      	ldr	r3, [pc, #16]	@ (8001aa4 <__NVIC_GetPriorityGrouping+0x18>)
 8001a92:	68db      	ldr	r3, [r3, #12]
 8001a94:	0a1b      	lsrs	r3, r3, #8
 8001a96:	f003 0307 	and.w	r3, r3, #7
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa2:	4770      	bx	lr
 8001aa4:	e000ed00 	.word	0xe000ed00

08001aa8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b083      	sub	sp, #12
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	4603      	mov	r3, r0
 8001ab0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ab2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	db0b      	blt.n	8001ad2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001aba:	79fb      	ldrb	r3, [r7, #7]
 8001abc:	f003 021f 	and.w	r2, r3, #31
 8001ac0:	4907      	ldr	r1, [pc, #28]	@ (8001ae0 <__NVIC_EnableIRQ+0x38>)
 8001ac2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ac6:	095b      	lsrs	r3, r3, #5
 8001ac8:	2001      	movs	r0, #1
 8001aca:	fa00 f202 	lsl.w	r2, r0, r2
 8001ace:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ad2:	bf00      	nop
 8001ad4:	370c      	adds	r7, #12
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001adc:	4770      	bx	lr
 8001ade:	bf00      	nop
 8001ae0:	e000e100 	.word	0xe000e100

08001ae4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b083      	sub	sp, #12
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	4603      	mov	r3, r0
 8001aec:	6039      	str	r1, [r7, #0]
 8001aee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001af0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	db0a      	blt.n	8001b0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	b2da      	uxtb	r2, r3
 8001afc:	490c      	ldr	r1, [pc, #48]	@ (8001b30 <__NVIC_SetPriority+0x4c>)
 8001afe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b02:	0112      	lsls	r2, r2, #4
 8001b04:	b2d2      	uxtb	r2, r2
 8001b06:	440b      	add	r3, r1
 8001b08:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b0c:	e00a      	b.n	8001b24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	b2da      	uxtb	r2, r3
 8001b12:	4908      	ldr	r1, [pc, #32]	@ (8001b34 <__NVIC_SetPriority+0x50>)
 8001b14:	79fb      	ldrb	r3, [r7, #7]
 8001b16:	f003 030f 	and.w	r3, r3, #15
 8001b1a:	3b04      	subs	r3, #4
 8001b1c:	0112      	lsls	r2, r2, #4
 8001b1e:	b2d2      	uxtb	r2, r2
 8001b20:	440b      	add	r3, r1
 8001b22:	761a      	strb	r2, [r3, #24]
}
 8001b24:	bf00      	nop
 8001b26:	370c      	adds	r7, #12
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2e:	4770      	bx	lr
 8001b30:	e000e100 	.word	0xe000e100
 8001b34:	e000ed00 	.word	0xe000ed00

08001b38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b089      	sub	sp, #36	@ 0x24
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	60f8      	str	r0, [r7, #12]
 8001b40:	60b9      	str	r1, [r7, #8]
 8001b42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	f003 0307 	and.w	r3, r3, #7
 8001b4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b4c:	69fb      	ldr	r3, [r7, #28]
 8001b4e:	f1c3 0307 	rsb	r3, r3, #7
 8001b52:	2b04      	cmp	r3, #4
 8001b54:	bf28      	it	cs
 8001b56:	2304      	movcs	r3, #4
 8001b58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b5a:	69fb      	ldr	r3, [r7, #28]
 8001b5c:	3304      	adds	r3, #4
 8001b5e:	2b06      	cmp	r3, #6
 8001b60:	d902      	bls.n	8001b68 <NVIC_EncodePriority+0x30>
 8001b62:	69fb      	ldr	r3, [r7, #28]
 8001b64:	3b03      	subs	r3, #3
 8001b66:	e000      	b.n	8001b6a <NVIC_EncodePriority+0x32>
 8001b68:	2300      	movs	r3, #0
 8001b6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b6c:	f04f 32ff 	mov.w	r2, #4294967295
 8001b70:	69bb      	ldr	r3, [r7, #24]
 8001b72:	fa02 f303 	lsl.w	r3, r2, r3
 8001b76:	43da      	mvns	r2, r3
 8001b78:	68bb      	ldr	r3, [r7, #8]
 8001b7a:	401a      	ands	r2, r3
 8001b7c:	697b      	ldr	r3, [r7, #20]
 8001b7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b80:	f04f 31ff 	mov.w	r1, #4294967295
 8001b84:	697b      	ldr	r3, [r7, #20]
 8001b86:	fa01 f303 	lsl.w	r3, r1, r3
 8001b8a:	43d9      	mvns	r1, r3
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b90:	4313      	orrs	r3, r2
         );
}
 8001b92:	4618      	mov	r0, r3
 8001b94:	3724      	adds	r7, #36	@ 0x24
 8001b96:	46bd      	mov	sp, r7
 8001b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9c:	4770      	bx	lr
	...

08001ba0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b082      	sub	sp, #8
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	3b01      	subs	r3, #1
 8001bac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001bb0:	d301      	bcc.n	8001bb6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	e00f      	b.n	8001bd6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bb6:	4a0a      	ldr	r2, [pc, #40]	@ (8001be0 <SysTick_Config+0x40>)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	3b01      	subs	r3, #1
 8001bbc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bbe:	210f      	movs	r1, #15
 8001bc0:	f04f 30ff 	mov.w	r0, #4294967295
 8001bc4:	f7ff ff8e 	bl	8001ae4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bc8:	4b05      	ldr	r3, [pc, #20]	@ (8001be0 <SysTick_Config+0x40>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bce:	4b04      	ldr	r3, [pc, #16]	@ (8001be0 <SysTick_Config+0x40>)
 8001bd0:	2207      	movs	r2, #7
 8001bd2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bd4:	2300      	movs	r3, #0
}
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	3708      	adds	r7, #8
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	e000e010 	.word	0xe000e010

08001be4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b082      	sub	sp, #8
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bec:	6878      	ldr	r0, [r7, #4]
 8001bee:	f7ff ff29 	bl	8001a44 <__NVIC_SetPriorityGrouping>
}
 8001bf2:	bf00      	nop
 8001bf4:	3708      	adds	r7, #8
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}

08001bfa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001bfa:	b580      	push	{r7, lr}
 8001bfc:	b086      	sub	sp, #24
 8001bfe:	af00      	add	r7, sp, #0
 8001c00:	4603      	mov	r3, r0
 8001c02:	60b9      	str	r1, [r7, #8]
 8001c04:	607a      	str	r2, [r7, #4]
 8001c06:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c0c:	f7ff ff3e 	bl	8001a8c <__NVIC_GetPriorityGrouping>
 8001c10:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c12:	687a      	ldr	r2, [r7, #4]
 8001c14:	68b9      	ldr	r1, [r7, #8]
 8001c16:	6978      	ldr	r0, [r7, #20]
 8001c18:	f7ff ff8e 	bl	8001b38 <NVIC_EncodePriority>
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c22:	4611      	mov	r1, r2
 8001c24:	4618      	mov	r0, r3
 8001c26:	f7ff ff5d 	bl	8001ae4 <__NVIC_SetPriority>
}
 8001c2a:	bf00      	nop
 8001c2c:	3718      	adds	r7, #24
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}

08001c32 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c32:	b580      	push	{r7, lr}
 8001c34:	b082      	sub	sp, #8
 8001c36:	af00      	add	r7, sp, #0
 8001c38:	4603      	mov	r3, r0
 8001c3a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c40:	4618      	mov	r0, r3
 8001c42:	f7ff ff31 	bl	8001aa8 <__NVIC_EnableIRQ>
}
 8001c46:	bf00      	nop
 8001c48:	3708      	adds	r7, #8
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}

08001c4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c4e:	b580      	push	{r7, lr}
 8001c50:	b082      	sub	sp, #8
 8001c52:	af00      	add	r7, sp, #0
 8001c54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c56:	6878      	ldr	r0, [r7, #4]
 8001c58:	f7ff ffa2 	bl	8001ba0 <SysTick_Config>
 8001c5c:	4603      	mov	r3, r0
}
 8001c5e:	4618      	mov	r0, r3
 8001c60:	3708      	adds	r7, #8
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}
	...

08001c68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b089      	sub	sp, #36	@ 0x24
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
 8001c70:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c72:	2300      	movs	r3, #0
 8001c74:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c76:	2300      	movs	r3, #0
 8001c78:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c7e:	2300      	movs	r3, #0
 8001c80:	61fb      	str	r3, [r7, #28]
 8001c82:	e165      	b.n	8001f50 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c84:	2201      	movs	r2, #1
 8001c86:	69fb      	ldr	r3, [r7, #28]
 8001c88:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	697a      	ldr	r2, [r7, #20]
 8001c94:	4013      	ands	r3, r2
 8001c96:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c98:	693a      	ldr	r2, [r7, #16]
 8001c9a:	697b      	ldr	r3, [r7, #20]
 8001c9c:	429a      	cmp	r2, r3
 8001c9e:	f040 8154 	bne.w	8001f4a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	f003 0303 	and.w	r3, r3, #3
 8001caa:	2b01      	cmp	r3, #1
 8001cac:	d005      	beq.n	8001cba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001cb6:	2b02      	cmp	r3, #2
 8001cb8:	d130      	bne.n	8001d1c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	689b      	ldr	r3, [r3, #8]
 8001cbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001cc0:	69fb      	ldr	r3, [r7, #28]
 8001cc2:	005b      	lsls	r3, r3, #1
 8001cc4:	2203      	movs	r2, #3
 8001cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cca:	43db      	mvns	r3, r3
 8001ccc:	69ba      	ldr	r2, [r7, #24]
 8001cce:	4013      	ands	r3, r2
 8001cd0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	68da      	ldr	r2, [r3, #12]
 8001cd6:	69fb      	ldr	r3, [r7, #28]
 8001cd8:	005b      	lsls	r3, r3, #1
 8001cda:	fa02 f303 	lsl.w	r3, r2, r3
 8001cde:	69ba      	ldr	r2, [r7, #24]
 8001ce0:	4313      	orrs	r3, r2
 8001ce2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	69ba      	ldr	r2, [r7, #24]
 8001ce8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001cf0:	2201      	movs	r2, #1
 8001cf2:	69fb      	ldr	r3, [r7, #28]
 8001cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf8:	43db      	mvns	r3, r3
 8001cfa:	69ba      	ldr	r2, [r7, #24]
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	091b      	lsrs	r3, r3, #4
 8001d06:	f003 0201 	and.w	r2, r3, #1
 8001d0a:	69fb      	ldr	r3, [r7, #28]
 8001d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d10:	69ba      	ldr	r2, [r7, #24]
 8001d12:	4313      	orrs	r3, r2
 8001d14:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	69ba      	ldr	r2, [r7, #24]
 8001d1a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	f003 0303 	and.w	r3, r3, #3
 8001d24:	2b03      	cmp	r3, #3
 8001d26:	d017      	beq.n	8001d58 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	68db      	ldr	r3, [r3, #12]
 8001d2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d2e:	69fb      	ldr	r3, [r7, #28]
 8001d30:	005b      	lsls	r3, r3, #1
 8001d32:	2203      	movs	r2, #3
 8001d34:	fa02 f303 	lsl.w	r3, r2, r3
 8001d38:	43db      	mvns	r3, r3
 8001d3a:	69ba      	ldr	r2, [r7, #24]
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	689a      	ldr	r2, [r3, #8]
 8001d44:	69fb      	ldr	r3, [r7, #28]
 8001d46:	005b      	lsls	r3, r3, #1
 8001d48:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4c:	69ba      	ldr	r2, [r7, #24]
 8001d4e:	4313      	orrs	r3, r2
 8001d50:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	69ba      	ldr	r2, [r7, #24]
 8001d56:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	f003 0303 	and.w	r3, r3, #3
 8001d60:	2b02      	cmp	r3, #2
 8001d62:	d123      	bne.n	8001dac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d64:	69fb      	ldr	r3, [r7, #28]
 8001d66:	08da      	lsrs	r2, r3, #3
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	3208      	adds	r2, #8
 8001d6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d70:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d72:	69fb      	ldr	r3, [r7, #28]
 8001d74:	f003 0307 	and.w	r3, r3, #7
 8001d78:	009b      	lsls	r3, r3, #2
 8001d7a:	220f      	movs	r2, #15
 8001d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d80:	43db      	mvns	r3, r3
 8001d82:	69ba      	ldr	r2, [r7, #24]
 8001d84:	4013      	ands	r3, r2
 8001d86:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	691a      	ldr	r2, [r3, #16]
 8001d8c:	69fb      	ldr	r3, [r7, #28]
 8001d8e:	f003 0307 	and.w	r3, r3, #7
 8001d92:	009b      	lsls	r3, r3, #2
 8001d94:	fa02 f303 	lsl.w	r3, r2, r3
 8001d98:	69ba      	ldr	r2, [r7, #24]
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d9e:	69fb      	ldr	r3, [r7, #28]
 8001da0:	08da      	lsrs	r2, r3, #3
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	3208      	adds	r2, #8
 8001da6:	69b9      	ldr	r1, [r7, #24]
 8001da8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001db2:	69fb      	ldr	r3, [r7, #28]
 8001db4:	005b      	lsls	r3, r3, #1
 8001db6:	2203      	movs	r2, #3
 8001db8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dbc:	43db      	mvns	r3, r3
 8001dbe:	69ba      	ldr	r2, [r7, #24]
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	f003 0203 	and.w	r2, r3, #3
 8001dcc:	69fb      	ldr	r3, [r7, #28]
 8001dce:	005b      	lsls	r3, r3, #1
 8001dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd4:	69ba      	ldr	r2, [r7, #24]
 8001dd6:	4313      	orrs	r3, r2
 8001dd8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	69ba      	ldr	r2, [r7, #24]
 8001dde:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	f000 80ae 	beq.w	8001f4a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dee:	2300      	movs	r3, #0
 8001df0:	60fb      	str	r3, [r7, #12]
 8001df2:	4b5d      	ldr	r3, [pc, #372]	@ (8001f68 <HAL_GPIO_Init+0x300>)
 8001df4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001df6:	4a5c      	ldr	r2, [pc, #368]	@ (8001f68 <HAL_GPIO_Init+0x300>)
 8001df8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001dfc:	6453      	str	r3, [r2, #68]	@ 0x44
 8001dfe:	4b5a      	ldr	r3, [pc, #360]	@ (8001f68 <HAL_GPIO_Init+0x300>)
 8001e00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e02:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e06:	60fb      	str	r3, [r7, #12]
 8001e08:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e0a:	4a58      	ldr	r2, [pc, #352]	@ (8001f6c <HAL_GPIO_Init+0x304>)
 8001e0c:	69fb      	ldr	r3, [r7, #28]
 8001e0e:	089b      	lsrs	r3, r3, #2
 8001e10:	3302      	adds	r3, #2
 8001e12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e16:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e18:	69fb      	ldr	r3, [r7, #28]
 8001e1a:	f003 0303 	and.w	r3, r3, #3
 8001e1e:	009b      	lsls	r3, r3, #2
 8001e20:	220f      	movs	r2, #15
 8001e22:	fa02 f303 	lsl.w	r3, r2, r3
 8001e26:	43db      	mvns	r3, r3
 8001e28:	69ba      	ldr	r2, [r7, #24]
 8001e2a:	4013      	ands	r3, r2
 8001e2c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	4a4f      	ldr	r2, [pc, #316]	@ (8001f70 <HAL_GPIO_Init+0x308>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d025      	beq.n	8001e82 <HAL_GPIO_Init+0x21a>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	4a4e      	ldr	r2, [pc, #312]	@ (8001f74 <HAL_GPIO_Init+0x30c>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d01f      	beq.n	8001e7e <HAL_GPIO_Init+0x216>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	4a4d      	ldr	r2, [pc, #308]	@ (8001f78 <HAL_GPIO_Init+0x310>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d019      	beq.n	8001e7a <HAL_GPIO_Init+0x212>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	4a4c      	ldr	r2, [pc, #304]	@ (8001f7c <HAL_GPIO_Init+0x314>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d013      	beq.n	8001e76 <HAL_GPIO_Init+0x20e>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	4a4b      	ldr	r2, [pc, #300]	@ (8001f80 <HAL_GPIO_Init+0x318>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d00d      	beq.n	8001e72 <HAL_GPIO_Init+0x20a>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	4a4a      	ldr	r2, [pc, #296]	@ (8001f84 <HAL_GPIO_Init+0x31c>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d007      	beq.n	8001e6e <HAL_GPIO_Init+0x206>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	4a49      	ldr	r2, [pc, #292]	@ (8001f88 <HAL_GPIO_Init+0x320>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d101      	bne.n	8001e6a <HAL_GPIO_Init+0x202>
 8001e66:	2306      	movs	r3, #6
 8001e68:	e00c      	b.n	8001e84 <HAL_GPIO_Init+0x21c>
 8001e6a:	2307      	movs	r3, #7
 8001e6c:	e00a      	b.n	8001e84 <HAL_GPIO_Init+0x21c>
 8001e6e:	2305      	movs	r3, #5
 8001e70:	e008      	b.n	8001e84 <HAL_GPIO_Init+0x21c>
 8001e72:	2304      	movs	r3, #4
 8001e74:	e006      	b.n	8001e84 <HAL_GPIO_Init+0x21c>
 8001e76:	2303      	movs	r3, #3
 8001e78:	e004      	b.n	8001e84 <HAL_GPIO_Init+0x21c>
 8001e7a:	2302      	movs	r3, #2
 8001e7c:	e002      	b.n	8001e84 <HAL_GPIO_Init+0x21c>
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e000      	b.n	8001e84 <HAL_GPIO_Init+0x21c>
 8001e82:	2300      	movs	r3, #0
 8001e84:	69fa      	ldr	r2, [r7, #28]
 8001e86:	f002 0203 	and.w	r2, r2, #3
 8001e8a:	0092      	lsls	r2, r2, #2
 8001e8c:	4093      	lsls	r3, r2
 8001e8e:	69ba      	ldr	r2, [r7, #24]
 8001e90:	4313      	orrs	r3, r2
 8001e92:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e94:	4935      	ldr	r1, [pc, #212]	@ (8001f6c <HAL_GPIO_Init+0x304>)
 8001e96:	69fb      	ldr	r3, [r7, #28]
 8001e98:	089b      	lsrs	r3, r3, #2
 8001e9a:	3302      	adds	r3, #2
 8001e9c:	69ba      	ldr	r2, [r7, #24]
 8001e9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ea2:	4b3a      	ldr	r3, [pc, #232]	@ (8001f8c <HAL_GPIO_Init+0x324>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ea8:	693b      	ldr	r3, [r7, #16]
 8001eaa:	43db      	mvns	r3, r3
 8001eac:	69ba      	ldr	r2, [r7, #24]
 8001eae:	4013      	ands	r3, r2
 8001eb0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d003      	beq.n	8001ec6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001ebe:	69ba      	ldr	r2, [r7, #24]
 8001ec0:	693b      	ldr	r3, [r7, #16]
 8001ec2:	4313      	orrs	r3, r2
 8001ec4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ec6:	4a31      	ldr	r2, [pc, #196]	@ (8001f8c <HAL_GPIO_Init+0x324>)
 8001ec8:	69bb      	ldr	r3, [r7, #24]
 8001eca:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001ecc:	4b2f      	ldr	r3, [pc, #188]	@ (8001f8c <HAL_GPIO_Init+0x324>)
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ed2:	693b      	ldr	r3, [r7, #16]
 8001ed4:	43db      	mvns	r3, r3
 8001ed6:	69ba      	ldr	r2, [r7, #24]
 8001ed8:	4013      	ands	r3, r2
 8001eda:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d003      	beq.n	8001ef0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001ee8:	69ba      	ldr	r2, [r7, #24]
 8001eea:	693b      	ldr	r3, [r7, #16]
 8001eec:	4313      	orrs	r3, r2
 8001eee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ef0:	4a26      	ldr	r2, [pc, #152]	@ (8001f8c <HAL_GPIO_Init+0x324>)
 8001ef2:	69bb      	ldr	r3, [r7, #24]
 8001ef4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ef6:	4b25      	ldr	r3, [pc, #148]	@ (8001f8c <HAL_GPIO_Init+0x324>)
 8001ef8:	689b      	ldr	r3, [r3, #8]
 8001efa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001efc:	693b      	ldr	r3, [r7, #16]
 8001efe:	43db      	mvns	r3, r3
 8001f00:	69ba      	ldr	r2, [r7, #24]
 8001f02:	4013      	ands	r3, r2
 8001f04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d003      	beq.n	8001f1a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001f12:	69ba      	ldr	r2, [r7, #24]
 8001f14:	693b      	ldr	r3, [r7, #16]
 8001f16:	4313      	orrs	r3, r2
 8001f18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f1a:	4a1c      	ldr	r2, [pc, #112]	@ (8001f8c <HAL_GPIO_Init+0x324>)
 8001f1c:	69bb      	ldr	r3, [r7, #24]
 8001f1e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f20:	4b1a      	ldr	r3, [pc, #104]	@ (8001f8c <HAL_GPIO_Init+0x324>)
 8001f22:	68db      	ldr	r3, [r3, #12]
 8001f24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f26:	693b      	ldr	r3, [r7, #16]
 8001f28:	43db      	mvns	r3, r3
 8001f2a:	69ba      	ldr	r2, [r7, #24]
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d003      	beq.n	8001f44 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001f3c:	69ba      	ldr	r2, [r7, #24]
 8001f3e:	693b      	ldr	r3, [r7, #16]
 8001f40:	4313      	orrs	r3, r2
 8001f42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f44:	4a11      	ldr	r2, [pc, #68]	@ (8001f8c <HAL_GPIO_Init+0x324>)
 8001f46:	69bb      	ldr	r3, [r7, #24]
 8001f48:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f4a:	69fb      	ldr	r3, [r7, #28]
 8001f4c:	3301      	adds	r3, #1
 8001f4e:	61fb      	str	r3, [r7, #28]
 8001f50:	69fb      	ldr	r3, [r7, #28]
 8001f52:	2b0f      	cmp	r3, #15
 8001f54:	f67f ae96 	bls.w	8001c84 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f58:	bf00      	nop
 8001f5a:	bf00      	nop
 8001f5c:	3724      	adds	r7, #36	@ 0x24
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f64:	4770      	bx	lr
 8001f66:	bf00      	nop
 8001f68:	40023800 	.word	0x40023800
 8001f6c:	40013800 	.word	0x40013800
 8001f70:	40020000 	.word	0x40020000
 8001f74:	40020400 	.word	0x40020400
 8001f78:	40020800 	.word	0x40020800
 8001f7c:	40020c00 	.word	0x40020c00
 8001f80:	40021000 	.word	0x40021000
 8001f84:	40021400 	.word	0x40021400
 8001f88:	40021800 	.word	0x40021800
 8001f8c:	40013c00 	.word	0x40013c00

08001f90 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b085      	sub	sp, #20
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
 8001f98:	460b      	mov	r3, r1
 8001f9a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	691a      	ldr	r2, [r3, #16]
 8001fa0:	887b      	ldrh	r3, [r7, #2]
 8001fa2:	4013      	ands	r3, r2
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d002      	beq.n	8001fae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	73fb      	strb	r3, [r7, #15]
 8001fac:	e001      	b.n	8001fb2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001fb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	3714      	adds	r7, #20
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbe:	4770      	bx	lr

08001fc0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b083      	sub	sp, #12
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
 8001fc8:	460b      	mov	r3, r1
 8001fca:	807b      	strh	r3, [r7, #2]
 8001fcc:	4613      	mov	r3, r2
 8001fce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001fd0:	787b      	ldrb	r3, [r7, #1]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d003      	beq.n	8001fde <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001fd6:	887a      	ldrh	r2, [r7, #2]
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001fdc:	e003      	b.n	8001fe6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001fde:	887b      	ldrh	r3, [r7, #2]
 8001fe0:	041a      	lsls	r2, r3, #16
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	619a      	str	r2, [r3, #24]
}
 8001fe6:	bf00      	nop
 8001fe8:	370c      	adds	r7, #12
 8001fea:	46bd      	mov	sp, r7
 8001fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff0:	4770      	bx	lr
	...

08001ff4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b084      	sub	sp, #16
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d101      	bne.n	8002006 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002002:	2301      	movs	r3, #1
 8002004:	e12b      	b.n	800225e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800200c:	b2db      	uxtb	r3, r3
 800200e:	2b00      	cmp	r3, #0
 8002010:	d106      	bne.n	8002020 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2200      	movs	r2, #0
 8002016:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800201a:	6878      	ldr	r0, [r7, #4]
 800201c:	f7fe fea8 	bl	8000d70 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2224      	movs	r2, #36	@ 0x24
 8002024:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	681a      	ldr	r2, [r3, #0]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f022 0201 	bic.w	r2, r2, #1
 8002036:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	681a      	ldr	r2, [r3, #0]
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002046:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	681a      	ldr	r2, [r3, #0]
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002056:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002058:	f002 f964 	bl	8004324 <HAL_RCC_GetPCLK1Freq>
 800205c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	4a81      	ldr	r2, [pc, #516]	@ (8002268 <HAL_I2C_Init+0x274>)
 8002064:	4293      	cmp	r3, r2
 8002066:	d807      	bhi.n	8002078 <HAL_I2C_Init+0x84>
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	4a80      	ldr	r2, [pc, #512]	@ (800226c <HAL_I2C_Init+0x278>)
 800206c:	4293      	cmp	r3, r2
 800206e:	bf94      	ite	ls
 8002070:	2301      	movls	r3, #1
 8002072:	2300      	movhi	r3, #0
 8002074:	b2db      	uxtb	r3, r3
 8002076:	e006      	b.n	8002086 <HAL_I2C_Init+0x92>
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	4a7d      	ldr	r2, [pc, #500]	@ (8002270 <HAL_I2C_Init+0x27c>)
 800207c:	4293      	cmp	r3, r2
 800207e:	bf94      	ite	ls
 8002080:	2301      	movls	r3, #1
 8002082:	2300      	movhi	r3, #0
 8002084:	b2db      	uxtb	r3, r3
 8002086:	2b00      	cmp	r3, #0
 8002088:	d001      	beq.n	800208e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	e0e7      	b.n	800225e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	4a78      	ldr	r2, [pc, #480]	@ (8002274 <HAL_I2C_Init+0x280>)
 8002092:	fba2 2303 	umull	r2, r3, r2, r3
 8002096:	0c9b      	lsrs	r3, r3, #18
 8002098:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	68ba      	ldr	r2, [r7, #8]
 80020aa:	430a      	orrs	r2, r1
 80020ac:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	6a1b      	ldr	r3, [r3, #32]
 80020b4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	4a6a      	ldr	r2, [pc, #424]	@ (8002268 <HAL_I2C_Init+0x274>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d802      	bhi.n	80020c8 <HAL_I2C_Init+0xd4>
 80020c2:	68bb      	ldr	r3, [r7, #8]
 80020c4:	3301      	adds	r3, #1
 80020c6:	e009      	b.n	80020dc <HAL_I2C_Init+0xe8>
 80020c8:	68bb      	ldr	r3, [r7, #8]
 80020ca:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80020ce:	fb02 f303 	mul.w	r3, r2, r3
 80020d2:	4a69      	ldr	r2, [pc, #420]	@ (8002278 <HAL_I2C_Init+0x284>)
 80020d4:	fba2 2303 	umull	r2, r3, r2, r3
 80020d8:	099b      	lsrs	r3, r3, #6
 80020da:	3301      	adds	r3, #1
 80020dc:	687a      	ldr	r2, [r7, #4]
 80020de:	6812      	ldr	r2, [r2, #0]
 80020e0:	430b      	orrs	r3, r1
 80020e2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	69db      	ldr	r3, [r3, #28]
 80020ea:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80020ee:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	495c      	ldr	r1, [pc, #368]	@ (8002268 <HAL_I2C_Init+0x274>)
 80020f8:	428b      	cmp	r3, r1
 80020fa:	d819      	bhi.n	8002130 <HAL_I2C_Init+0x13c>
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	1e59      	subs	r1, r3, #1
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	005b      	lsls	r3, r3, #1
 8002106:	fbb1 f3f3 	udiv	r3, r1, r3
 800210a:	1c59      	adds	r1, r3, #1
 800210c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002110:	400b      	ands	r3, r1
 8002112:	2b00      	cmp	r3, #0
 8002114:	d00a      	beq.n	800212c <HAL_I2C_Init+0x138>
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	1e59      	subs	r1, r3, #1
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	005b      	lsls	r3, r3, #1
 8002120:	fbb1 f3f3 	udiv	r3, r1, r3
 8002124:	3301      	adds	r3, #1
 8002126:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800212a:	e051      	b.n	80021d0 <HAL_I2C_Init+0x1dc>
 800212c:	2304      	movs	r3, #4
 800212e:	e04f      	b.n	80021d0 <HAL_I2C_Init+0x1dc>
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	689b      	ldr	r3, [r3, #8]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d111      	bne.n	800215c <HAL_I2C_Init+0x168>
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	1e58      	subs	r0, r3, #1
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6859      	ldr	r1, [r3, #4]
 8002140:	460b      	mov	r3, r1
 8002142:	005b      	lsls	r3, r3, #1
 8002144:	440b      	add	r3, r1
 8002146:	fbb0 f3f3 	udiv	r3, r0, r3
 800214a:	3301      	adds	r3, #1
 800214c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002150:	2b00      	cmp	r3, #0
 8002152:	bf0c      	ite	eq
 8002154:	2301      	moveq	r3, #1
 8002156:	2300      	movne	r3, #0
 8002158:	b2db      	uxtb	r3, r3
 800215a:	e012      	b.n	8002182 <HAL_I2C_Init+0x18e>
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	1e58      	subs	r0, r3, #1
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6859      	ldr	r1, [r3, #4]
 8002164:	460b      	mov	r3, r1
 8002166:	009b      	lsls	r3, r3, #2
 8002168:	440b      	add	r3, r1
 800216a:	0099      	lsls	r1, r3, #2
 800216c:	440b      	add	r3, r1
 800216e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002172:	3301      	adds	r3, #1
 8002174:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002178:	2b00      	cmp	r3, #0
 800217a:	bf0c      	ite	eq
 800217c:	2301      	moveq	r3, #1
 800217e:	2300      	movne	r3, #0
 8002180:	b2db      	uxtb	r3, r3
 8002182:	2b00      	cmp	r3, #0
 8002184:	d001      	beq.n	800218a <HAL_I2C_Init+0x196>
 8002186:	2301      	movs	r3, #1
 8002188:	e022      	b.n	80021d0 <HAL_I2C_Init+0x1dc>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	689b      	ldr	r3, [r3, #8]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d10e      	bne.n	80021b0 <HAL_I2C_Init+0x1bc>
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	1e58      	subs	r0, r3, #1
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6859      	ldr	r1, [r3, #4]
 800219a:	460b      	mov	r3, r1
 800219c:	005b      	lsls	r3, r3, #1
 800219e:	440b      	add	r3, r1
 80021a0:	fbb0 f3f3 	udiv	r3, r0, r3
 80021a4:	3301      	adds	r3, #1
 80021a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021aa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80021ae:	e00f      	b.n	80021d0 <HAL_I2C_Init+0x1dc>
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	1e58      	subs	r0, r3, #1
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6859      	ldr	r1, [r3, #4]
 80021b8:	460b      	mov	r3, r1
 80021ba:	009b      	lsls	r3, r3, #2
 80021bc:	440b      	add	r3, r1
 80021be:	0099      	lsls	r1, r3, #2
 80021c0:	440b      	add	r3, r1
 80021c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80021c6:	3301      	adds	r3, #1
 80021c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021cc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80021d0:	6879      	ldr	r1, [r7, #4]
 80021d2:	6809      	ldr	r1, [r1, #0]
 80021d4:	4313      	orrs	r3, r2
 80021d6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	69da      	ldr	r2, [r3, #28]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6a1b      	ldr	r3, [r3, #32]
 80021ea:	431a      	orrs	r2, r3
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	430a      	orrs	r2, r1
 80021f2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	689b      	ldr	r3, [r3, #8]
 80021fa:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80021fe:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002202:	687a      	ldr	r2, [r7, #4]
 8002204:	6911      	ldr	r1, [r2, #16]
 8002206:	687a      	ldr	r2, [r7, #4]
 8002208:	68d2      	ldr	r2, [r2, #12]
 800220a:	4311      	orrs	r1, r2
 800220c:	687a      	ldr	r2, [r7, #4]
 800220e:	6812      	ldr	r2, [r2, #0]
 8002210:	430b      	orrs	r3, r1
 8002212:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	68db      	ldr	r3, [r3, #12]
 800221a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	695a      	ldr	r2, [r3, #20]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	699b      	ldr	r3, [r3, #24]
 8002226:	431a      	orrs	r2, r3
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	430a      	orrs	r2, r1
 800222e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	681a      	ldr	r2, [r3, #0]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f042 0201 	orr.w	r2, r2, #1
 800223e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2200      	movs	r2, #0
 8002244:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2220      	movs	r2, #32
 800224a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2200      	movs	r2, #0
 8002252:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2200      	movs	r2, #0
 8002258:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800225c:	2300      	movs	r3, #0
}
 800225e:	4618      	mov	r0, r3
 8002260:	3710      	adds	r7, #16
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}
 8002266:	bf00      	nop
 8002268:	000186a0 	.word	0x000186a0
 800226c:	001e847f 	.word	0x001e847f
 8002270:	003d08ff 	.word	0x003d08ff
 8002274:	431bde83 	.word	0x431bde83
 8002278:	10624dd3 	.word	0x10624dd3

0800227c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b08c      	sub	sp, #48	@ 0x30
 8002280:	af02      	add	r7, sp, #8
 8002282:	60f8      	str	r0, [r7, #12]
 8002284:	4608      	mov	r0, r1
 8002286:	4611      	mov	r1, r2
 8002288:	461a      	mov	r2, r3
 800228a:	4603      	mov	r3, r0
 800228c:	817b      	strh	r3, [r7, #10]
 800228e:	460b      	mov	r3, r1
 8002290:	813b      	strh	r3, [r7, #8]
 8002292:	4613      	mov	r3, r2
 8002294:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002296:	f7ff f837 	bl	8001308 <HAL_GetTick>
 800229a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80022a2:	b2db      	uxtb	r3, r3
 80022a4:	2b20      	cmp	r3, #32
 80022a6:	f040 8208 	bne.w	80026ba <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80022aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022ac:	9300      	str	r3, [sp, #0]
 80022ae:	2319      	movs	r3, #25
 80022b0:	2201      	movs	r2, #1
 80022b2:	497b      	ldr	r1, [pc, #492]	@ (80024a0 <HAL_I2C_Mem_Read+0x224>)
 80022b4:	68f8      	ldr	r0, [r7, #12]
 80022b6:	f000 faef 	bl	8002898 <I2C_WaitOnFlagUntilTimeout>
 80022ba:	4603      	mov	r3, r0
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d001      	beq.n	80022c4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80022c0:	2302      	movs	r3, #2
 80022c2:	e1fb      	b.n	80026bc <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80022ca:	2b01      	cmp	r3, #1
 80022cc:	d101      	bne.n	80022d2 <HAL_I2C_Mem_Read+0x56>
 80022ce:	2302      	movs	r3, #2
 80022d0:	e1f4      	b.n	80026bc <HAL_I2C_Mem_Read+0x440>
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	2201      	movs	r2, #1
 80022d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f003 0301 	and.w	r3, r3, #1
 80022e4:	2b01      	cmp	r3, #1
 80022e6:	d007      	beq.n	80022f8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	681a      	ldr	r2, [r3, #0]
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f042 0201 	orr.w	r2, r2, #1
 80022f6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	681a      	ldr	r2, [r3, #0]
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002306:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	2222      	movs	r2, #34	@ 0x22
 800230c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	2240      	movs	r2, #64	@ 0x40
 8002314:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	2200      	movs	r2, #0
 800231c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002322:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8002328:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800232e:	b29a      	uxth	r2, r3
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	4a5b      	ldr	r2, [pc, #364]	@ (80024a4 <HAL_I2C_Mem_Read+0x228>)
 8002338:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800233a:	88f8      	ldrh	r0, [r7, #6]
 800233c:	893a      	ldrh	r2, [r7, #8]
 800233e:	8979      	ldrh	r1, [r7, #10]
 8002340:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002342:	9301      	str	r3, [sp, #4]
 8002344:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002346:	9300      	str	r3, [sp, #0]
 8002348:	4603      	mov	r3, r0
 800234a:	68f8      	ldr	r0, [r7, #12]
 800234c:	f000 f9bc 	bl	80026c8 <I2C_RequestMemoryRead>
 8002350:	4603      	mov	r3, r0
 8002352:	2b00      	cmp	r3, #0
 8002354:	d001      	beq.n	800235a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002356:	2301      	movs	r3, #1
 8002358:	e1b0      	b.n	80026bc <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800235e:	2b00      	cmp	r3, #0
 8002360:	d113      	bne.n	800238a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002362:	2300      	movs	r3, #0
 8002364:	623b      	str	r3, [r7, #32]
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	695b      	ldr	r3, [r3, #20]
 800236c:	623b      	str	r3, [r7, #32]
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	699b      	ldr	r3, [r3, #24]
 8002374:	623b      	str	r3, [r7, #32]
 8002376:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	681a      	ldr	r2, [r3, #0]
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002386:	601a      	str	r2, [r3, #0]
 8002388:	e184      	b.n	8002694 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800238e:	2b01      	cmp	r3, #1
 8002390:	d11b      	bne.n	80023ca <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	681a      	ldr	r2, [r3, #0]
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80023a0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023a2:	2300      	movs	r3, #0
 80023a4:	61fb      	str	r3, [r7, #28]
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	695b      	ldr	r3, [r3, #20]
 80023ac:	61fb      	str	r3, [r7, #28]
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	699b      	ldr	r3, [r3, #24]
 80023b4:	61fb      	str	r3, [r7, #28]
 80023b6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	681a      	ldr	r2, [r3, #0]
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80023c6:	601a      	str	r2, [r3, #0]
 80023c8:	e164      	b.n	8002694 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023ce:	2b02      	cmp	r3, #2
 80023d0:	d11b      	bne.n	800240a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	681a      	ldr	r2, [r3, #0]
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80023e0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	681a      	ldr	r2, [r3, #0]
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80023f0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023f2:	2300      	movs	r3, #0
 80023f4:	61bb      	str	r3, [r7, #24]
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	695b      	ldr	r3, [r3, #20]
 80023fc:	61bb      	str	r3, [r7, #24]
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	699b      	ldr	r3, [r3, #24]
 8002404:	61bb      	str	r3, [r7, #24]
 8002406:	69bb      	ldr	r3, [r7, #24]
 8002408:	e144      	b.n	8002694 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800240a:	2300      	movs	r3, #0
 800240c:	617b      	str	r3, [r7, #20]
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	695b      	ldr	r3, [r3, #20]
 8002414:	617b      	str	r3, [r7, #20]
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	699b      	ldr	r3, [r3, #24]
 800241c:	617b      	str	r3, [r7, #20]
 800241e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002420:	e138      	b.n	8002694 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002426:	2b03      	cmp	r3, #3
 8002428:	f200 80f1 	bhi.w	800260e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002430:	2b01      	cmp	r3, #1
 8002432:	d123      	bne.n	800247c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002434:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002436:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002438:	68f8      	ldr	r0, [r7, #12]
 800243a:	f000 fb44 	bl	8002ac6 <I2C_WaitOnRXNEFlagUntilTimeout>
 800243e:	4603      	mov	r3, r0
 8002440:	2b00      	cmp	r3, #0
 8002442:	d001      	beq.n	8002448 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002444:	2301      	movs	r3, #1
 8002446:	e139      	b.n	80026bc <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	691a      	ldr	r2, [r3, #16]
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002452:	b2d2      	uxtb	r2, r2
 8002454:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800245a:	1c5a      	adds	r2, r3, #1
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002464:	3b01      	subs	r3, #1
 8002466:	b29a      	uxth	r2, r3
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002470:	b29b      	uxth	r3, r3
 8002472:	3b01      	subs	r3, #1
 8002474:	b29a      	uxth	r2, r3
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800247a:	e10b      	b.n	8002694 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002480:	2b02      	cmp	r3, #2
 8002482:	d14e      	bne.n	8002522 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002484:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002486:	9300      	str	r3, [sp, #0]
 8002488:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800248a:	2200      	movs	r2, #0
 800248c:	4906      	ldr	r1, [pc, #24]	@ (80024a8 <HAL_I2C_Mem_Read+0x22c>)
 800248e:	68f8      	ldr	r0, [r7, #12]
 8002490:	f000 fa02 	bl	8002898 <I2C_WaitOnFlagUntilTimeout>
 8002494:	4603      	mov	r3, r0
 8002496:	2b00      	cmp	r3, #0
 8002498:	d008      	beq.n	80024ac <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	e10e      	b.n	80026bc <HAL_I2C_Mem_Read+0x440>
 800249e:	bf00      	nop
 80024a0:	00100002 	.word	0x00100002
 80024a4:	ffff0000 	.word	0xffff0000
 80024a8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	681a      	ldr	r2, [r3, #0]
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80024ba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	691a      	ldr	r2, [r3, #16]
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024c6:	b2d2      	uxtb	r2, r2
 80024c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024ce:	1c5a      	adds	r2, r3, #1
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024d8:	3b01      	subs	r3, #1
 80024da:	b29a      	uxth	r2, r3
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024e4:	b29b      	uxth	r3, r3
 80024e6:	3b01      	subs	r3, #1
 80024e8:	b29a      	uxth	r2, r3
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	691a      	ldr	r2, [r3, #16]
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024f8:	b2d2      	uxtb	r2, r2
 80024fa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002500:	1c5a      	adds	r2, r3, #1
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800250a:	3b01      	subs	r3, #1
 800250c:	b29a      	uxth	r2, r3
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002516:	b29b      	uxth	r3, r3
 8002518:	3b01      	subs	r3, #1
 800251a:	b29a      	uxth	r2, r3
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002520:	e0b8      	b.n	8002694 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002522:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002524:	9300      	str	r3, [sp, #0]
 8002526:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002528:	2200      	movs	r2, #0
 800252a:	4966      	ldr	r1, [pc, #408]	@ (80026c4 <HAL_I2C_Mem_Read+0x448>)
 800252c:	68f8      	ldr	r0, [r7, #12]
 800252e:	f000 f9b3 	bl	8002898 <I2C_WaitOnFlagUntilTimeout>
 8002532:	4603      	mov	r3, r0
 8002534:	2b00      	cmp	r3, #0
 8002536:	d001      	beq.n	800253c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002538:	2301      	movs	r3, #1
 800253a:	e0bf      	b.n	80026bc <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	681a      	ldr	r2, [r3, #0]
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800254a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	691a      	ldr	r2, [r3, #16]
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002556:	b2d2      	uxtb	r2, r2
 8002558:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800255e:	1c5a      	adds	r2, r3, #1
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002568:	3b01      	subs	r3, #1
 800256a:	b29a      	uxth	r2, r3
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002574:	b29b      	uxth	r3, r3
 8002576:	3b01      	subs	r3, #1
 8002578:	b29a      	uxth	r2, r3
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800257e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002580:	9300      	str	r3, [sp, #0]
 8002582:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002584:	2200      	movs	r2, #0
 8002586:	494f      	ldr	r1, [pc, #316]	@ (80026c4 <HAL_I2C_Mem_Read+0x448>)
 8002588:	68f8      	ldr	r0, [r7, #12]
 800258a:	f000 f985 	bl	8002898 <I2C_WaitOnFlagUntilTimeout>
 800258e:	4603      	mov	r3, r0
 8002590:	2b00      	cmp	r3, #0
 8002592:	d001      	beq.n	8002598 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002594:	2301      	movs	r3, #1
 8002596:	e091      	b.n	80026bc <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	681a      	ldr	r2, [r3, #0]
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80025a6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	691a      	ldr	r2, [r3, #16]
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025b2:	b2d2      	uxtb	r2, r2
 80025b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025ba:	1c5a      	adds	r2, r3, #1
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025c4:	3b01      	subs	r3, #1
 80025c6:	b29a      	uxth	r2, r3
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025d0:	b29b      	uxth	r3, r3
 80025d2:	3b01      	subs	r3, #1
 80025d4:	b29a      	uxth	r2, r3
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	691a      	ldr	r2, [r3, #16]
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025e4:	b2d2      	uxtb	r2, r2
 80025e6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025ec:	1c5a      	adds	r2, r3, #1
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025f6:	3b01      	subs	r3, #1
 80025f8:	b29a      	uxth	r2, r3
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002602:	b29b      	uxth	r3, r3
 8002604:	3b01      	subs	r3, #1
 8002606:	b29a      	uxth	r2, r3
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800260c:	e042      	b.n	8002694 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800260e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002610:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002612:	68f8      	ldr	r0, [r7, #12]
 8002614:	f000 fa57 	bl	8002ac6 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002618:	4603      	mov	r3, r0
 800261a:	2b00      	cmp	r3, #0
 800261c:	d001      	beq.n	8002622 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800261e:	2301      	movs	r3, #1
 8002620:	e04c      	b.n	80026bc <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	691a      	ldr	r2, [r3, #16]
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800262c:	b2d2      	uxtb	r2, r2
 800262e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002634:	1c5a      	adds	r2, r3, #1
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800263e:	3b01      	subs	r3, #1
 8002640:	b29a      	uxth	r2, r3
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800264a:	b29b      	uxth	r3, r3
 800264c:	3b01      	subs	r3, #1
 800264e:	b29a      	uxth	r2, r3
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	695b      	ldr	r3, [r3, #20]
 800265a:	f003 0304 	and.w	r3, r3, #4
 800265e:	2b04      	cmp	r3, #4
 8002660:	d118      	bne.n	8002694 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	691a      	ldr	r2, [r3, #16]
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800266c:	b2d2      	uxtb	r2, r2
 800266e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002674:	1c5a      	adds	r2, r3, #1
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800267e:	3b01      	subs	r3, #1
 8002680:	b29a      	uxth	r2, r3
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800268a:	b29b      	uxth	r3, r3
 800268c:	3b01      	subs	r3, #1
 800268e:	b29a      	uxth	r2, r3
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002698:	2b00      	cmp	r3, #0
 800269a:	f47f aec2 	bne.w	8002422 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	2220      	movs	r2, #32
 80026a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	2200      	movs	r2, #0
 80026aa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	2200      	movs	r2, #0
 80026b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80026b6:	2300      	movs	r3, #0
 80026b8:	e000      	b.n	80026bc <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80026ba:	2302      	movs	r3, #2
  }
}
 80026bc:	4618      	mov	r0, r3
 80026be:	3728      	adds	r7, #40	@ 0x28
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd80      	pop	{r7, pc}
 80026c4:	00010004 	.word	0x00010004

080026c8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b088      	sub	sp, #32
 80026cc:	af02      	add	r7, sp, #8
 80026ce:	60f8      	str	r0, [r7, #12]
 80026d0:	4608      	mov	r0, r1
 80026d2:	4611      	mov	r1, r2
 80026d4:	461a      	mov	r2, r3
 80026d6:	4603      	mov	r3, r0
 80026d8:	817b      	strh	r3, [r7, #10]
 80026da:	460b      	mov	r3, r1
 80026dc:	813b      	strh	r3, [r7, #8]
 80026de:	4613      	mov	r3, r2
 80026e0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	681a      	ldr	r2, [r3, #0]
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80026f0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	681a      	ldr	r2, [r3, #0]
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002700:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002702:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002704:	9300      	str	r3, [sp, #0]
 8002706:	6a3b      	ldr	r3, [r7, #32]
 8002708:	2200      	movs	r2, #0
 800270a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800270e:	68f8      	ldr	r0, [r7, #12]
 8002710:	f000 f8c2 	bl	8002898 <I2C_WaitOnFlagUntilTimeout>
 8002714:	4603      	mov	r3, r0
 8002716:	2b00      	cmp	r3, #0
 8002718:	d00d      	beq.n	8002736 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002724:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002728:	d103      	bne.n	8002732 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002730:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002732:	2303      	movs	r3, #3
 8002734:	e0aa      	b.n	800288c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002736:	897b      	ldrh	r3, [r7, #10]
 8002738:	b2db      	uxtb	r3, r3
 800273a:	461a      	mov	r2, r3
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002744:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002748:	6a3a      	ldr	r2, [r7, #32]
 800274a:	4952      	ldr	r1, [pc, #328]	@ (8002894 <I2C_RequestMemoryRead+0x1cc>)
 800274c:	68f8      	ldr	r0, [r7, #12]
 800274e:	f000 f8fa 	bl	8002946 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002752:	4603      	mov	r3, r0
 8002754:	2b00      	cmp	r3, #0
 8002756:	d001      	beq.n	800275c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002758:	2301      	movs	r3, #1
 800275a:	e097      	b.n	800288c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800275c:	2300      	movs	r3, #0
 800275e:	617b      	str	r3, [r7, #20]
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	695b      	ldr	r3, [r3, #20]
 8002766:	617b      	str	r3, [r7, #20]
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	699b      	ldr	r3, [r3, #24]
 800276e:	617b      	str	r3, [r7, #20]
 8002770:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002772:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002774:	6a39      	ldr	r1, [r7, #32]
 8002776:	68f8      	ldr	r0, [r7, #12]
 8002778:	f000 f964 	bl	8002a44 <I2C_WaitOnTXEFlagUntilTimeout>
 800277c:	4603      	mov	r3, r0
 800277e:	2b00      	cmp	r3, #0
 8002780:	d00d      	beq.n	800279e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002786:	2b04      	cmp	r3, #4
 8002788:	d107      	bne.n	800279a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	681a      	ldr	r2, [r3, #0]
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002798:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800279a:	2301      	movs	r3, #1
 800279c:	e076      	b.n	800288c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800279e:	88fb      	ldrh	r3, [r7, #6]
 80027a0:	2b01      	cmp	r3, #1
 80027a2:	d105      	bne.n	80027b0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80027a4:	893b      	ldrh	r3, [r7, #8]
 80027a6:	b2da      	uxtb	r2, r3
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	611a      	str	r2, [r3, #16]
 80027ae:	e021      	b.n	80027f4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80027b0:	893b      	ldrh	r3, [r7, #8]
 80027b2:	0a1b      	lsrs	r3, r3, #8
 80027b4:	b29b      	uxth	r3, r3
 80027b6:	b2da      	uxtb	r2, r3
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80027be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80027c0:	6a39      	ldr	r1, [r7, #32]
 80027c2:	68f8      	ldr	r0, [r7, #12]
 80027c4:	f000 f93e 	bl	8002a44 <I2C_WaitOnTXEFlagUntilTimeout>
 80027c8:	4603      	mov	r3, r0
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d00d      	beq.n	80027ea <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027d2:	2b04      	cmp	r3, #4
 80027d4:	d107      	bne.n	80027e6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	681a      	ldr	r2, [r3, #0]
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80027e4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80027e6:	2301      	movs	r3, #1
 80027e8:	e050      	b.n	800288c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80027ea:	893b      	ldrh	r3, [r7, #8]
 80027ec:	b2da      	uxtb	r2, r3
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80027f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80027f6:	6a39      	ldr	r1, [r7, #32]
 80027f8:	68f8      	ldr	r0, [r7, #12]
 80027fa:	f000 f923 	bl	8002a44 <I2C_WaitOnTXEFlagUntilTimeout>
 80027fe:	4603      	mov	r3, r0
 8002800:	2b00      	cmp	r3, #0
 8002802:	d00d      	beq.n	8002820 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002808:	2b04      	cmp	r3, #4
 800280a:	d107      	bne.n	800281c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	681a      	ldr	r2, [r3, #0]
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800281a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800281c:	2301      	movs	r3, #1
 800281e:	e035      	b.n	800288c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	681a      	ldr	r2, [r3, #0]
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800282e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002830:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002832:	9300      	str	r3, [sp, #0]
 8002834:	6a3b      	ldr	r3, [r7, #32]
 8002836:	2200      	movs	r2, #0
 8002838:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800283c:	68f8      	ldr	r0, [r7, #12]
 800283e:	f000 f82b 	bl	8002898 <I2C_WaitOnFlagUntilTimeout>
 8002842:	4603      	mov	r3, r0
 8002844:	2b00      	cmp	r3, #0
 8002846:	d00d      	beq.n	8002864 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002852:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002856:	d103      	bne.n	8002860 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800285e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002860:	2303      	movs	r3, #3
 8002862:	e013      	b.n	800288c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002864:	897b      	ldrh	r3, [r7, #10]
 8002866:	b2db      	uxtb	r3, r3
 8002868:	f043 0301 	orr.w	r3, r3, #1
 800286c:	b2da      	uxtb	r2, r3
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002874:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002876:	6a3a      	ldr	r2, [r7, #32]
 8002878:	4906      	ldr	r1, [pc, #24]	@ (8002894 <I2C_RequestMemoryRead+0x1cc>)
 800287a:	68f8      	ldr	r0, [r7, #12]
 800287c:	f000 f863 	bl	8002946 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002880:	4603      	mov	r3, r0
 8002882:	2b00      	cmp	r3, #0
 8002884:	d001      	beq.n	800288a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002886:	2301      	movs	r3, #1
 8002888:	e000      	b.n	800288c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800288a:	2300      	movs	r3, #0
}
 800288c:	4618      	mov	r0, r3
 800288e:	3718      	adds	r7, #24
 8002890:	46bd      	mov	sp, r7
 8002892:	bd80      	pop	{r7, pc}
 8002894:	00010002 	.word	0x00010002

08002898 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b084      	sub	sp, #16
 800289c:	af00      	add	r7, sp, #0
 800289e:	60f8      	str	r0, [r7, #12]
 80028a0:	60b9      	str	r1, [r7, #8]
 80028a2:	603b      	str	r3, [r7, #0]
 80028a4:	4613      	mov	r3, r2
 80028a6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80028a8:	e025      	b.n	80028f6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028b0:	d021      	beq.n	80028f6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028b2:	f7fe fd29 	bl	8001308 <HAL_GetTick>
 80028b6:	4602      	mov	r2, r0
 80028b8:	69bb      	ldr	r3, [r7, #24]
 80028ba:	1ad3      	subs	r3, r2, r3
 80028bc:	683a      	ldr	r2, [r7, #0]
 80028be:	429a      	cmp	r2, r3
 80028c0:	d302      	bcc.n	80028c8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d116      	bne.n	80028f6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	2200      	movs	r2, #0
 80028cc:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	2220      	movs	r2, #32
 80028d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	2200      	movs	r2, #0
 80028da:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028e2:	f043 0220 	orr.w	r2, r3, #32
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	2200      	movs	r2, #0
 80028ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80028f2:	2301      	movs	r3, #1
 80028f4:	e023      	b.n	800293e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80028f6:	68bb      	ldr	r3, [r7, #8]
 80028f8:	0c1b      	lsrs	r3, r3, #16
 80028fa:	b2db      	uxtb	r3, r3
 80028fc:	2b01      	cmp	r3, #1
 80028fe:	d10d      	bne.n	800291c <I2C_WaitOnFlagUntilTimeout+0x84>
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	695b      	ldr	r3, [r3, #20]
 8002906:	43da      	mvns	r2, r3
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	4013      	ands	r3, r2
 800290c:	b29b      	uxth	r3, r3
 800290e:	2b00      	cmp	r3, #0
 8002910:	bf0c      	ite	eq
 8002912:	2301      	moveq	r3, #1
 8002914:	2300      	movne	r3, #0
 8002916:	b2db      	uxtb	r3, r3
 8002918:	461a      	mov	r2, r3
 800291a:	e00c      	b.n	8002936 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	699b      	ldr	r3, [r3, #24]
 8002922:	43da      	mvns	r2, r3
 8002924:	68bb      	ldr	r3, [r7, #8]
 8002926:	4013      	ands	r3, r2
 8002928:	b29b      	uxth	r3, r3
 800292a:	2b00      	cmp	r3, #0
 800292c:	bf0c      	ite	eq
 800292e:	2301      	moveq	r3, #1
 8002930:	2300      	movne	r3, #0
 8002932:	b2db      	uxtb	r3, r3
 8002934:	461a      	mov	r2, r3
 8002936:	79fb      	ldrb	r3, [r7, #7]
 8002938:	429a      	cmp	r2, r3
 800293a:	d0b6      	beq.n	80028aa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800293c:	2300      	movs	r3, #0
}
 800293e:	4618      	mov	r0, r3
 8002940:	3710      	adds	r7, #16
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}

08002946 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002946:	b580      	push	{r7, lr}
 8002948:	b084      	sub	sp, #16
 800294a:	af00      	add	r7, sp, #0
 800294c:	60f8      	str	r0, [r7, #12]
 800294e:	60b9      	str	r1, [r7, #8]
 8002950:	607a      	str	r2, [r7, #4]
 8002952:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002954:	e051      	b.n	80029fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	695b      	ldr	r3, [r3, #20]
 800295c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002960:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002964:	d123      	bne.n	80029ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	681a      	ldr	r2, [r3, #0]
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002974:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800297e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	2200      	movs	r2, #0
 8002984:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	2220      	movs	r2, #32
 800298a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	2200      	movs	r2, #0
 8002992:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800299a:	f043 0204 	orr.w	r2, r3, #4
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	2200      	movs	r2, #0
 80029a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	e046      	b.n	8002a3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029b4:	d021      	beq.n	80029fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029b6:	f7fe fca7 	bl	8001308 <HAL_GetTick>
 80029ba:	4602      	mov	r2, r0
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	1ad3      	subs	r3, r2, r3
 80029c0:	687a      	ldr	r2, [r7, #4]
 80029c2:	429a      	cmp	r2, r3
 80029c4:	d302      	bcc.n	80029cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d116      	bne.n	80029fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	2200      	movs	r2, #0
 80029d0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	2220      	movs	r2, #32
 80029d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	2200      	movs	r2, #0
 80029de:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029e6:	f043 0220 	orr.w	r2, r3, #32
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	2200      	movs	r2, #0
 80029f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80029f6:	2301      	movs	r3, #1
 80029f8:	e020      	b.n	8002a3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80029fa:	68bb      	ldr	r3, [r7, #8]
 80029fc:	0c1b      	lsrs	r3, r3, #16
 80029fe:	b2db      	uxtb	r3, r3
 8002a00:	2b01      	cmp	r3, #1
 8002a02:	d10c      	bne.n	8002a1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	695b      	ldr	r3, [r3, #20]
 8002a0a:	43da      	mvns	r2, r3
 8002a0c:	68bb      	ldr	r3, [r7, #8]
 8002a0e:	4013      	ands	r3, r2
 8002a10:	b29b      	uxth	r3, r3
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	bf14      	ite	ne
 8002a16:	2301      	movne	r3, #1
 8002a18:	2300      	moveq	r3, #0
 8002a1a:	b2db      	uxtb	r3, r3
 8002a1c:	e00b      	b.n	8002a36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	699b      	ldr	r3, [r3, #24]
 8002a24:	43da      	mvns	r2, r3
 8002a26:	68bb      	ldr	r3, [r7, #8]
 8002a28:	4013      	ands	r3, r2
 8002a2a:	b29b      	uxth	r3, r3
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	bf14      	ite	ne
 8002a30:	2301      	movne	r3, #1
 8002a32:	2300      	moveq	r3, #0
 8002a34:	b2db      	uxtb	r3, r3
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d18d      	bne.n	8002956 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002a3a:	2300      	movs	r3, #0
}
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	3710      	adds	r7, #16
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bd80      	pop	{r7, pc}

08002a44 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b084      	sub	sp, #16
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	60f8      	str	r0, [r7, #12]
 8002a4c:	60b9      	str	r1, [r7, #8]
 8002a4e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002a50:	e02d      	b.n	8002aae <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002a52:	68f8      	ldr	r0, [r7, #12]
 8002a54:	f000 f88d 	bl	8002b72 <I2C_IsAcknowledgeFailed>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d001      	beq.n	8002a62 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e02d      	b.n	8002abe <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a62:	68bb      	ldr	r3, [r7, #8]
 8002a64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a68:	d021      	beq.n	8002aae <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a6a:	f7fe fc4d 	bl	8001308 <HAL_GetTick>
 8002a6e:	4602      	mov	r2, r0
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	1ad3      	subs	r3, r2, r3
 8002a74:	68ba      	ldr	r2, [r7, #8]
 8002a76:	429a      	cmp	r2, r3
 8002a78:	d302      	bcc.n	8002a80 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002a7a:	68bb      	ldr	r3, [r7, #8]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d116      	bne.n	8002aae <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	2200      	movs	r2, #0
 8002a84:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	2220      	movs	r2, #32
 8002a8a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	2200      	movs	r2, #0
 8002a92:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a9a:	f043 0220 	orr.w	r2, r3, #32
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	e007      	b.n	8002abe <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	695b      	ldr	r3, [r3, #20]
 8002ab4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ab8:	2b80      	cmp	r3, #128	@ 0x80
 8002aba:	d1ca      	bne.n	8002a52 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002abc:	2300      	movs	r3, #0
}
 8002abe:	4618      	mov	r0, r3
 8002ac0:	3710      	adds	r7, #16
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}

08002ac6 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ac6:	b580      	push	{r7, lr}
 8002ac8:	b084      	sub	sp, #16
 8002aca:	af00      	add	r7, sp, #0
 8002acc:	60f8      	str	r0, [r7, #12]
 8002ace:	60b9      	str	r1, [r7, #8]
 8002ad0:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002ad2:	e042      	b.n	8002b5a <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	695b      	ldr	r3, [r3, #20]
 8002ada:	f003 0310 	and.w	r3, r3, #16
 8002ade:	2b10      	cmp	r3, #16
 8002ae0:	d119      	bne.n	8002b16 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f06f 0210 	mvn.w	r2, #16
 8002aea:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	2200      	movs	r2, #0
 8002af0:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	2220      	movs	r2, #32
 8002af6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	2200      	movs	r2, #0
 8002afe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002b12:	2301      	movs	r3, #1
 8002b14:	e029      	b.n	8002b6a <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b16:	f7fe fbf7 	bl	8001308 <HAL_GetTick>
 8002b1a:	4602      	mov	r2, r0
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	1ad3      	subs	r3, r2, r3
 8002b20:	68ba      	ldr	r2, [r7, #8]
 8002b22:	429a      	cmp	r2, r3
 8002b24:	d302      	bcc.n	8002b2c <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002b26:	68bb      	ldr	r3, [r7, #8]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d116      	bne.n	8002b5a <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	2200      	movs	r2, #0
 8002b30:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	2220      	movs	r2, #32
 8002b36:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b46:	f043 0220 	orr.w	r2, r3, #32
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	2200      	movs	r2, #0
 8002b52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002b56:	2301      	movs	r3, #1
 8002b58:	e007      	b.n	8002b6a <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	695b      	ldr	r3, [r3, #20]
 8002b60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b64:	2b40      	cmp	r3, #64	@ 0x40
 8002b66:	d1b5      	bne.n	8002ad4 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002b68:	2300      	movs	r3, #0
}
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	3710      	adds	r7, #16
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}

08002b72 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002b72:	b480      	push	{r7}
 8002b74:	b083      	sub	sp, #12
 8002b76:	af00      	add	r7, sp, #0
 8002b78:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	695b      	ldr	r3, [r3, #20]
 8002b80:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b84:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b88:	d11b      	bne.n	8002bc2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002b92:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2200      	movs	r2, #0
 8002b98:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2220      	movs	r2, #32
 8002b9e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bae:	f043 0204 	orr.w	r2, r3, #4
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2200      	movs	r2, #0
 8002bba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	e000      	b.n	8002bc4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002bc2:	2300      	movs	r3, #0
}
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	370c      	adds	r7, #12
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bce:	4770      	bx	lr

08002bd0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002bd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002bd2:	b08f      	sub	sp, #60	@ 0x3c
 8002bd4:	af0a      	add	r7, sp, #40	@ 0x28
 8002bd6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d101      	bne.n	8002be2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002bde:	2301      	movs	r3, #1
 8002be0:	e116      	b.n	8002e10 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	f893 33bd 	ldrb.w	r3, [r3, #957]	@ 0x3bd
 8002bee:	b2db      	uxtb	r3, r3
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d106      	bne.n	8002c02 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	f883 23bc 	strb.w	r2, [r3, #956]	@ 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002bfc:	6878      	ldr	r0, [r7, #4]
 8002bfe:	f006 f82d 	bl	8008c5c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2203      	movs	r2, #3
 8002c06:	f883 23bd 	strb.w	r2, [r3, #957]	@ 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002c0a:	68bb      	ldr	r3, [r7, #8]
 8002c0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d102      	bne.n	8002c1c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2200      	movs	r2, #0
 8002c1a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4618      	mov	r0, r3
 8002c22:	f002 fd26 	bl	8005672 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	603b      	str	r3, [r7, #0]
 8002c2c:	687e      	ldr	r6, [r7, #4]
 8002c2e:	466d      	mov	r5, sp
 8002c30:	f106 0410 	add.w	r4, r6, #16
 8002c34:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c36:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c38:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c3a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c3c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002c40:	e885 0003 	stmia.w	r5, {r0, r1}
 8002c44:	1d33      	adds	r3, r6, #4
 8002c46:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c48:	6838      	ldr	r0, [r7, #0]
 8002c4a:	f002 fbfd 	bl	8005448 <USB_CoreInit>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d005      	beq.n	8002c60 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2202      	movs	r2, #2
 8002c58:	f883 23bd 	strb.w	r2, [r3, #957]	@ 0x3bd
    return HAL_ERROR;
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	e0d7      	b.n	8002e10 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	2100      	movs	r1, #0
 8002c66:	4618      	mov	r0, r3
 8002c68:	f002 fd14 	bl	8005694 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	73fb      	strb	r3, [r7, #15]
 8002c70:	e04a      	b.n	8002d08 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002c72:	7bfa      	ldrb	r2, [r7, #15]
 8002c74:	6879      	ldr	r1, [r7, #4]
 8002c76:	4613      	mov	r3, r2
 8002c78:	00db      	lsls	r3, r3, #3
 8002c7a:	1a9b      	subs	r3, r3, r2
 8002c7c:	009b      	lsls	r3, r3, #2
 8002c7e:	440b      	add	r3, r1
 8002c80:	333d      	adds	r3, #61	@ 0x3d
 8002c82:	2201      	movs	r2, #1
 8002c84:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002c86:	7bfa      	ldrb	r2, [r7, #15]
 8002c88:	6879      	ldr	r1, [r7, #4]
 8002c8a:	4613      	mov	r3, r2
 8002c8c:	00db      	lsls	r3, r3, #3
 8002c8e:	1a9b      	subs	r3, r3, r2
 8002c90:	009b      	lsls	r3, r3, #2
 8002c92:	440b      	add	r3, r1
 8002c94:	333c      	adds	r3, #60	@ 0x3c
 8002c96:	7bfa      	ldrb	r2, [r7, #15]
 8002c98:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002c9a:	7bfa      	ldrb	r2, [r7, #15]
 8002c9c:	7bfb      	ldrb	r3, [r7, #15]
 8002c9e:	b298      	uxth	r0, r3
 8002ca0:	6879      	ldr	r1, [r7, #4]
 8002ca2:	4613      	mov	r3, r2
 8002ca4:	00db      	lsls	r3, r3, #3
 8002ca6:	1a9b      	subs	r3, r3, r2
 8002ca8:	009b      	lsls	r3, r3, #2
 8002caa:	440b      	add	r3, r1
 8002cac:	3342      	adds	r3, #66	@ 0x42
 8002cae:	4602      	mov	r2, r0
 8002cb0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002cb2:	7bfa      	ldrb	r2, [r7, #15]
 8002cb4:	6879      	ldr	r1, [r7, #4]
 8002cb6:	4613      	mov	r3, r2
 8002cb8:	00db      	lsls	r3, r3, #3
 8002cba:	1a9b      	subs	r3, r3, r2
 8002cbc:	009b      	lsls	r3, r3, #2
 8002cbe:	440b      	add	r3, r1
 8002cc0:	333f      	adds	r3, #63	@ 0x3f
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002cc6:	7bfa      	ldrb	r2, [r7, #15]
 8002cc8:	6879      	ldr	r1, [r7, #4]
 8002cca:	4613      	mov	r3, r2
 8002ccc:	00db      	lsls	r3, r3, #3
 8002cce:	1a9b      	subs	r3, r3, r2
 8002cd0:	009b      	lsls	r3, r3, #2
 8002cd2:	440b      	add	r3, r1
 8002cd4:	3344      	adds	r3, #68	@ 0x44
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002cda:	7bfa      	ldrb	r2, [r7, #15]
 8002cdc:	6879      	ldr	r1, [r7, #4]
 8002cde:	4613      	mov	r3, r2
 8002ce0:	00db      	lsls	r3, r3, #3
 8002ce2:	1a9b      	subs	r3, r3, r2
 8002ce4:	009b      	lsls	r3, r3, #2
 8002ce6:	440b      	add	r3, r1
 8002ce8:	3348      	adds	r3, #72	@ 0x48
 8002cea:	2200      	movs	r2, #0
 8002cec:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002cee:	7bfa      	ldrb	r2, [r7, #15]
 8002cf0:	6879      	ldr	r1, [r7, #4]
 8002cf2:	4613      	mov	r3, r2
 8002cf4:	00db      	lsls	r3, r3, #3
 8002cf6:	1a9b      	subs	r3, r3, r2
 8002cf8:	009b      	lsls	r3, r3, #2
 8002cfa:	440b      	add	r3, r1
 8002cfc:	3350      	adds	r3, #80	@ 0x50
 8002cfe:	2200      	movs	r2, #0
 8002d00:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d02:	7bfb      	ldrb	r3, [r7, #15]
 8002d04:	3301      	adds	r3, #1
 8002d06:	73fb      	strb	r3, [r7, #15]
 8002d08:	7bfa      	ldrb	r2, [r7, #15]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	429a      	cmp	r2, r3
 8002d10:	d3af      	bcc.n	8002c72 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d12:	2300      	movs	r3, #0
 8002d14:	73fb      	strb	r3, [r7, #15]
 8002d16:	e044      	b.n	8002da2 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002d18:	7bfa      	ldrb	r2, [r7, #15]
 8002d1a:	6879      	ldr	r1, [r7, #4]
 8002d1c:	4613      	mov	r3, r2
 8002d1e:	00db      	lsls	r3, r3, #3
 8002d20:	1a9b      	subs	r3, r3, r2
 8002d22:	009b      	lsls	r3, r3, #2
 8002d24:	440b      	add	r3, r1
 8002d26:	f203 13fd 	addw	r3, r3, #509	@ 0x1fd
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002d2e:	7bfa      	ldrb	r2, [r7, #15]
 8002d30:	6879      	ldr	r1, [r7, #4]
 8002d32:	4613      	mov	r3, r2
 8002d34:	00db      	lsls	r3, r3, #3
 8002d36:	1a9b      	subs	r3, r3, r2
 8002d38:	009b      	lsls	r3, r3, #2
 8002d3a:	440b      	add	r3, r1
 8002d3c:	f503 73fe 	add.w	r3, r3, #508	@ 0x1fc
 8002d40:	7bfa      	ldrb	r2, [r7, #15]
 8002d42:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002d44:	7bfa      	ldrb	r2, [r7, #15]
 8002d46:	6879      	ldr	r1, [r7, #4]
 8002d48:	4613      	mov	r3, r2
 8002d4a:	00db      	lsls	r3, r3, #3
 8002d4c:	1a9b      	subs	r3, r3, r2
 8002d4e:	009b      	lsls	r3, r3, #2
 8002d50:	440b      	add	r3, r1
 8002d52:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 8002d56:	2200      	movs	r2, #0
 8002d58:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002d5a:	7bfa      	ldrb	r2, [r7, #15]
 8002d5c:	6879      	ldr	r1, [r7, #4]
 8002d5e:	4613      	mov	r3, r2
 8002d60:	00db      	lsls	r3, r3, #3
 8002d62:	1a9b      	subs	r3, r3, r2
 8002d64:	009b      	lsls	r3, r3, #2
 8002d66:	440b      	add	r3, r1
 8002d68:	f503 7301 	add.w	r3, r3, #516	@ 0x204
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002d70:	7bfa      	ldrb	r2, [r7, #15]
 8002d72:	6879      	ldr	r1, [r7, #4]
 8002d74:	4613      	mov	r3, r2
 8002d76:	00db      	lsls	r3, r3, #3
 8002d78:	1a9b      	subs	r3, r3, r2
 8002d7a:	009b      	lsls	r3, r3, #2
 8002d7c:	440b      	add	r3, r1
 8002d7e:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8002d82:	2200      	movs	r2, #0
 8002d84:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002d86:	7bfa      	ldrb	r2, [r7, #15]
 8002d88:	6879      	ldr	r1, [r7, #4]
 8002d8a:	4613      	mov	r3, r2
 8002d8c:	00db      	lsls	r3, r3, #3
 8002d8e:	1a9b      	subs	r3, r3, r2
 8002d90:	009b      	lsls	r3, r3, #2
 8002d92:	440b      	add	r3, r1
 8002d94:	f503 7304 	add.w	r3, r3, #528	@ 0x210
 8002d98:	2200      	movs	r2, #0
 8002d9a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d9c:	7bfb      	ldrb	r3, [r7, #15]
 8002d9e:	3301      	adds	r3, #1
 8002da0:	73fb      	strb	r3, [r7, #15]
 8002da2:	7bfa      	ldrb	r2, [r7, #15]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	429a      	cmp	r2, r3
 8002daa:	d3b5      	bcc.n	8002d18 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	603b      	str	r3, [r7, #0]
 8002db2:	687e      	ldr	r6, [r7, #4]
 8002db4:	466d      	mov	r5, sp
 8002db6:	f106 0410 	add.w	r4, r6, #16
 8002dba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002dbc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002dbe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002dc0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002dc2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002dc6:	e885 0003 	stmia.w	r5, {r0, r1}
 8002dca:	1d33      	adds	r3, r6, #4
 8002dcc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002dce:	6838      	ldr	r0, [r7, #0]
 8002dd0:	f002 fcac 	bl	800572c <USB_DevInit>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d005      	beq.n	8002de6 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2202      	movs	r2, #2
 8002dde:	f883 23bd 	strb.w	r2, [r3, #957]	@ 0x3bd
    return HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
 8002de4:	e014      	b.n	8002e10 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2200      	movs	r2, #0
 8002dea:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2201      	movs	r2, #1
 8002df2:	f883 23bd 	strb.w	r2, [r3, #957]	@ 0x3bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dfa:	2b01      	cmp	r3, #1
 8002dfc:	d102      	bne.n	8002e04 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002dfe:	6878      	ldr	r0, [r7, #4]
 8002e00:	f001 f868 	bl	8003ed4 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4618      	mov	r0, r3
 8002e0a:	f003 fc3f 	bl	800668c <USB_DevDisconnect>

  return HAL_OK;
 8002e0e:	2300      	movs	r3, #0
}
 8002e10:	4618      	mov	r0, r3
 8002e12:	3714      	adds	r7, #20
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002e18 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b084      	sub	sp, #16
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	f893 33bc 	ldrb.w	r3, [r3, #956]	@ 0x3bc
 8002e2c:	2b01      	cmp	r3, #1
 8002e2e:	d101      	bne.n	8002e34 <HAL_PCD_Start+0x1c>
 8002e30:	2302      	movs	r3, #2
 8002e32:	e020      	b.n	8002e76 <HAL_PCD_Start+0x5e>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2201      	movs	r2, #1
 8002e38:	f883 23bc 	strb.w	r2, [r3, #956]	@ 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e40:	2b01      	cmp	r3, #1
 8002e42:	d109      	bne.n	8002e58 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002e48:	2b01      	cmp	r3, #1
 8002e4a:	d005      	beq.n	8002e58 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e50:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	f002 fbf7 	bl	8005650 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4618      	mov	r0, r3
 8002e68:	f003 fbef 	bl	800664a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2200      	movs	r2, #0
 8002e70:	f883 23bc 	strb.w	r2, [r3, #956]	@ 0x3bc

  return HAL_OK;
 8002e74:	2300      	movs	r3, #0
}
 8002e76:	4618      	mov	r0, r3
 8002e78:	3710      	adds	r7, #16
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}

08002e7e <HAL_PCD_Stop>:
  * @brief  Stop the USB device.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Stop(PCD_HandleTypeDef *hpcd)
{
 8002e7e:	b580      	push	{r7, lr}
 8002e80:	b084      	sub	sp, #16
 8002e82:	af00      	add	r7, sp, #0
 8002e84:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	f893 33bc 	ldrb.w	r3, [r3, #956]	@ 0x3bc
 8002e92:	2b01      	cmp	r3, #1
 8002e94:	d101      	bne.n	8002e9a <HAL_PCD_Stop+0x1c>
 8002e96:	2302      	movs	r3, #2
 8002e98:	e026      	b.n	8002ee8 <HAL_PCD_Stop+0x6a>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2201      	movs	r2, #1
 8002e9e:	f883 23bc 	strb.w	r2, [r3, #956]	@ 0x3bc
  __HAL_PCD_DISABLE(hpcd);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	f002 fbe3 	bl	8005672 <USB_DisableGlobalInt>
  (void)USB_DevDisconnect(hpcd->Instance);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	f003 fbeb 	bl	800668c <USB_DevDisconnect>

  (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	2110      	movs	r1, #16
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	f002 fd93 	bl	80059e8 <USB_FlushTxFifo>

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ec6:	2b01      	cmp	r3, #1
 8002ec8:	d109      	bne.n	8002ede <HAL_PCD_Stop+0x60>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002ece:	2b01      	cmp	r3, #1
 8002ed0:	d005      	beq.n	8002ede <HAL_PCD_Stop+0x60>
  {
    /* Disable USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ed6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_UNLOCK(hpcd);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	f883 23bc 	strb.w	r2, [r3, #956]	@ 0x3bc

  return HAL_OK;
 8002ee6:	2300      	movs	r3, #0
}
 8002ee8:	4618      	mov	r0, r3
 8002eea:	3710      	adds	r7, #16
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bd80      	pop	{r7, pc}

08002ef0 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002ef0:	b590      	push	{r4, r7, lr}
 8002ef2:	b08d      	sub	sp, #52	@ 0x34
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002efe:	6a3b      	ldr	r3, [r7, #32]
 8002f00:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4618      	mov	r0, r3
 8002f08:	f003 fc74 	bl	80067f4 <USB_GetMode>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	f040 83ca 	bne.w	80036a8 <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4618      	mov	r0, r3
 8002f1a:	f003 fbd8 	bl	80066ce <USB_ReadInterrupts>
 8002f1e:	4603      	mov	r3, r0
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	f000 83c0 	beq.w	80036a6 <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	f003 fbcf 	bl	80066ce <USB_ReadInterrupts>
 8002f30:	4603      	mov	r3, r0
 8002f32:	f003 0302 	and.w	r3, r3, #2
 8002f36:	2b02      	cmp	r3, #2
 8002f38:	d107      	bne.n	8002f4a <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	695a      	ldr	r2, [r3, #20]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f002 0202 	and.w	r2, r2, #2
 8002f48:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f003 fbbd 	bl	80066ce <USB_ReadInterrupts>
 8002f54:	4603      	mov	r3, r0
 8002f56:	f003 0310 	and.w	r3, r3, #16
 8002f5a:	2b10      	cmp	r3, #16
 8002f5c:	d161      	bne.n	8003022 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	699a      	ldr	r2, [r3, #24]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f022 0210 	bic.w	r2, r2, #16
 8002f6c:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8002f6e:	6a3b      	ldr	r3, [r7, #32]
 8002f70:	6a1b      	ldr	r3, [r3, #32]
 8002f72:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8002f74:	69bb      	ldr	r3, [r7, #24]
 8002f76:	f003 020f 	and.w	r2, r3, #15
 8002f7a:	4613      	mov	r3, r2
 8002f7c:	00db      	lsls	r3, r3, #3
 8002f7e:	1a9b      	subs	r3, r3, r2
 8002f80:	009b      	lsls	r3, r3, #2
 8002f82:	f503 73fc 	add.w	r3, r3, #504	@ 0x1f8
 8002f86:	687a      	ldr	r2, [r7, #4]
 8002f88:	4413      	add	r3, r2
 8002f8a:	3304      	adds	r3, #4
 8002f8c:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002f8e:	69bb      	ldr	r3, [r7, #24]
 8002f90:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8002f94:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002f98:	d124      	bne.n	8002fe4 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002f9a:	69ba      	ldr	r2, [r7, #24]
 8002f9c:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8002fa0:	4013      	ands	r3, r2
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d035      	beq.n	8003012 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002fa6:	697b      	ldr	r3, [r7, #20]
 8002fa8:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002faa:	69bb      	ldr	r3, [r7, #24]
 8002fac:	091b      	lsrs	r3, r3, #4
 8002fae:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002fb0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002fb4:	b29b      	uxth	r3, r3
 8002fb6:	461a      	mov	r2, r3
 8002fb8:	6a38      	ldr	r0, [r7, #32]
 8002fba:	f003 f9f4 	bl	80063a6 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002fbe:	697b      	ldr	r3, [r7, #20]
 8002fc0:	68da      	ldr	r2, [r3, #12]
 8002fc2:	69bb      	ldr	r3, [r7, #24]
 8002fc4:	091b      	lsrs	r3, r3, #4
 8002fc6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002fca:	441a      	add	r2, r3
 8002fcc:	697b      	ldr	r3, [r7, #20]
 8002fce:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002fd0:	697b      	ldr	r3, [r7, #20]
 8002fd2:	699a      	ldr	r2, [r3, #24]
 8002fd4:	69bb      	ldr	r3, [r7, #24]
 8002fd6:	091b      	lsrs	r3, r3, #4
 8002fd8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002fdc:	441a      	add	r2, r3
 8002fde:	697b      	ldr	r3, [r7, #20]
 8002fe0:	619a      	str	r2, [r3, #24]
 8002fe2:	e016      	b.n	8003012 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8002fe4:	69bb      	ldr	r3, [r7, #24]
 8002fe6:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8002fea:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002fee:	d110      	bne.n	8003012 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	f503 7371 	add.w	r3, r3, #964	@ 0x3c4
 8002ff6:	2208      	movs	r2, #8
 8002ff8:	4619      	mov	r1, r3
 8002ffa:	6a38      	ldr	r0, [r7, #32]
 8002ffc:	f003 f9d3 	bl	80063a6 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003000:	697b      	ldr	r3, [r7, #20]
 8003002:	699a      	ldr	r2, [r3, #24]
 8003004:	69bb      	ldr	r3, [r7, #24]
 8003006:	091b      	lsrs	r3, r3, #4
 8003008:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800300c:	441a      	add	r2, r3
 800300e:	697b      	ldr	r3, [r7, #20]
 8003010:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	699a      	ldr	r2, [r3, #24]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f042 0210 	orr.w	r2, r2, #16
 8003020:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4618      	mov	r0, r3
 8003028:	f003 fb51 	bl	80066ce <USB_ReadInterrupts>
 800302c:	4603      	mov	r3, r0
 800302e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003032:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003036:	d16e      	bne.n	8003116 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8003038:	2300      	movs	r3, #0
 800303a:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4618      	mov	r0, r3
 8003042:	f003 fb57 	bl	80066f4 <USB_ReadDevAllOutEpInterrupt>
 8003046:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8003048:	e062      	b.n	8003110 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 800304a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800304c:	f003 0301 	and.w	r3, r3, #1
 8003050:	2b00      	cmp	r3, #0
 8003052:	d057      	beq.n	8003104 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800305a:	b2d2      	uxtb	r2, r2
 800305c:	4611      	mov	r1, r2
 800305e:	4618      	mov	r0, r3
 8003060:	f003 fb7c 	bl	800675c <USB_ReadDevOutEPInterrupt>
 8003064:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003066:	693b      	ldr	r3, [r7, #16]
 8003068:	f003 0301 	and.w	r3, r3, #1
 800306c:	2b00      	cmp	r3, #0
 800306e:	d00c      	beq.n	800308a <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003070:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003072:	015a      	lsls	r2, r3, #5
 8003074:	69fb      	ldr	r3, [r7, #28]
 8003076:	4413      	add	r3, r2
 8003078:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800307c:	461a      	mov	r2, r3
 800307e:	2301      	movs	r3, #1
 8003080:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003082:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003084:	6878      	ldr	r0, [r7, #4]
 8003086:	f000 fd7b 	bl	8003b80 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800308a:	693b      	ldr	r3, [r7, #16]
 800308c:	f003 0308 	and.w	r3, r3, #8
 8003090:	2b00      	cmp	r3, #0
 8003092:	d00c      	beq.n	80030ae <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003094:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003096:	015a      	lsls	r2, r3, #5
 8003098:	69fb      	ldr	r3, [r7, #28]
 800309a:	4413      	add	r3, r2
 800309c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80030a0:	461a      	mov	r2, r3
 80030a2:	2308      	movs	r3, #8
 80030a4:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80030a6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80030a8:	6878      	ldr	r0, [r7, #4]
 80030aa:	f000 fe75 	bl	8003d98 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80030ae:	693b      	ldr	r3, [r7, #16]
 80030b0:	f003 0310 	and.w	r3, r3, #16
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d008      	beq.n	80030ca <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80030b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030ba:	015a      	lsls	r2, r3, #5
 80030bc:	69fb      	ldr	r3, [r7, #28]
 80030be:	4413      	add	r3, r2
 80030c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80030c4:	461a      	mov	r2, r3
 80030c6:	2310      	movs	r3, #16
 80030c8:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80030ca:	693b      	ldr	r3, [r7, #16]
 80030cc:	f003 0320 	and.w	r3, r3, #32
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d008      	beq.n	80030e6 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80030d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030d6:	015a      	lsls	r2, r3, #5
 80030d8:	69fb      	ldr	r3, [r7, #28]
 80030da:	4413      	add	r3, r2
 80030dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80030e0:	461a      	mov	r2, r3
 80030e2:	2320      	movs	r3, #32
 80030e4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80030e6:	693b      	ldr	r3, [r7, #16]
 80030e8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d009      	beq.n	8003104 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80030f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030f2:	015a      	lsls	r2, r3, #5
 80030f4:	69fb      	ldr	r3, [r7, #28]
 80030f6:	4413      	add	r3, r2
 80030f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80030fc:	461a      	mov	r2, r3
 80030fe:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003102:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003104:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003106:	3301      	adds	r3, #1
 8003108:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800310a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800310c:	085b      	lsrs	r3, r3, #1
 800310e:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003110:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003112:	2b00      	cmp	r3, #0
 8003114:	d199      	bne.n	800304a <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4618      	mov	r0, r3
 800311c:	f003 fad7 	bl	80066ce <USB_ReadInterrupts>
 8003120:	4603      	mov	r3, r0
 8003122:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003126:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800312a:	f040 80c0 	bne.w	80032ae <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4618      	mov	r0, r3
 8003134:	f003 faf8 	bl	8006728 <USB_ReadDevAllInEpInterrupt>
 8003138:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 800313a:	2300      	movs	r3, #0
 800313c:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 800313e:	e0b2      	b.n	80032a6 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003140:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003142:	f003 0301 	and.w	r3, r3, #1
 8003146:	2b00      	cmp	r3, #0
 8003148:	f000 80a7 	beq.w	800329a <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003152:	b2d2      	uxtb	r2, r2
 8003154:	4611      	mov	r1, r2
 8003156:	4618      	mov	r0, r3
 8003158:	f003 fb1e 	bl	8006798 <USB_ReadDevInEPInterrupt>
 800315c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800315e:	693b      	ldr	r3, [r7, #16]
 8003160:	f003 0301 	and.w	r3, r3, #1
 8003164:	2b00      	cmp	r3, #0
 8003166:	d057      	beq.n	8003218 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003168:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800316a:	f003 030f 	and.w	r3, r3, #15
 800316e:	2201      	movs	r2, #1
 8003170:	fa02 f303 	lsl.w	r3, r2, r3
 8003174:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003176:	69fb      	ldr	r3, [r7, #28]
 8003178:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800317c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	43db      	mvns	r3, r3
 8003182:	69f9      	ldr	r1, [r7, #28]
 8003184:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003188:	4013      	ands	r3, r2
 800318a:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800318c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800318e:	015a      	lsls	r2, r3, #5
 8003190:	69fb      	ldr	r3, [r7, #28]
 8003192:	4413      	add	r3, r2
 8003194:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003198:	461a      	mov	r2, r3
 800319a:	2301      	movs	r3, #1
 800319c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	691b      	ldr	r3, [r3, #16]
 80031a2:	2b01      	cmp	r3, #1
 80031a4:	d132      	bne.n	800320c <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80031a6:	6879      	ldr	r1, [r7, #4]
 80031a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80031aa:	4613      	mov	r3, r2
 80031ac:	00db      	lsls	r3, r3, #3
 80031ae:	1a9b      	subs	r3, r3, r2
 80031b0:	009b      	lsls	r3, r3, #2
 80031b2:	440b      	add	r3, r1
 80031b4:	3348      	adds	r3, #72	@ 0x48
 80031b6:	6819      	ldr	r1, [r3, #0]
 80031b8:	6878      	ldr	r0, [r7, #4]
 80031ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80031bc:	4613      	mov	r3, r2
 80031be:	00db      	lsls	r3, r3, #3
 80031c0:	1a9b      	subs	r3, r3, r2
 80031c2:	009b      	lsls	r3, r3, #2
 80031c4:	4403      	add	r3, r0
 80031c6:	3344      	adds	r3, #68	@ 0x44
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4419      	add	r1, r3
 80031cc:	6878      	ldr	r0, [r7, #4]
 80031ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80031d0:	4613      	mov	r3, r2
 80031d2:	00db      	lsls	r3, r3, #3
 80031d4:	1a9b      	subs	r3, r3, r2
 80031d6:	009b      	lsls	r3, r3, #2
 80031d8:	4403      	add	r3, r0
 80031da:	3348      	adds	r3, #72	@ 0x48
 80031dc:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80031de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d113      	bne.n	800320c <HAL_PCD_IRQHandler+0x31c>
 80031e4:	6879      	ldr	r1, [r7, #4]
 80031e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80031e8:	4613      	mov	r3, r2
 80031ea:	00db      	lsls	r3, r3, #3
 80031ec:	1a9b      	subs	r3, r3, r2
 80031ee:	009b      	lsls	r3, r3, #2
 80031f0:	440b      	add	r3, r1
 80031f2:	3350      	adds	r3, #80	@ 0x50
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d108      	bne.n	800320c <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6818      	ldr	r0, [r3, #0]
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	f503 7371 	add.w	r3, r3, #964	@ 0x3c4
 8003204:	461a      	mov	r2, r3
 8003206:	2101      	movs	r1, #1
 8003208:	f003 fb26 	bl	8006858 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800320c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800320e:	b2db      	uxtb	r3, r3
 8003210:	4619      	mov	r1, r3
 8003212:	6878      	ldr	r0, [r7, #4]
 8003214:	f005 fdc5 	bl	8008da2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003218:	693b      	ldr	r3, [r7, #16]
 800321a:	f003 0308 	and.w	r3, r3, #8
 800321e:	2b00      	cmp	r3, #0
 8003220:	d008      	beq.n	8003234 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003222:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003224:	015a      	lsls	r2, r3, #5
 8003226:	69fb      	ldr	r3, [r7, #28]
 8003228:	4413      	add	r3, r2
 800322a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800322e:	461a      	mov	r2, r3
 8003230:	2308      	movs	r3, #8
 8003232:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003234:	693b      	ldr	r3, [r7, #16]
 8003236:	f003 0310 	and.w	r3, r3, #16
 800323a:	2b00      	cmp	r3, #0
 800323c:	d008      	beq.n	8003250 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800323e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003240:	015a      	lsls	r2, r3, #5
 8003242:	69fb      	ldr	r3, [r7, #28]
 8003244:	4413      	add	r3, r2
 8003246:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800324a:	461a      	mov	r2, r3
 800324c:	2310      	movs	r3, #16
 800324e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003250:	693b      	ldr	r3, [r7, #16]
 8003252:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003256:	2b00      	cmp	r3, #0
 8003258:	d008      	beq.n	800326c <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800325a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800325c:	015a      	lsls	r2, r3, #5
 800325e:	69fb      	ldr	r3, [r7, #28]
 8003260:	4413      	add	r3, r2
 8003262:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003266:	461a      	mov	r2, r3
 8003268:	2340      	movs	r3, #64	@ 0x40
 800326a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800326c:	693b      	ldr	r3, [r7, #16]
 800326e:	f003 0302 	and.w	r3, r3, #2
 8003272:	2b00      	cmp	r3, #0
 8003274:	d008      	beq.n	8003288 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003276:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003278:	015a      	lsls	r2, r3, #5
 800327a:	69fb      	ldr	r3, [r7, #28]
 800327c:	4413      	add	r3, r2
 800327e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003282:	461a      	mov	r2, r3
 8003284:	2302      	movs	r3, #2
 8003286:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003288:	693b      	ldr	r3, [r7, #16]
 800328a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800328e:	2b00      	cmp	r3, #0
 8003290:	d003      	beq.n	800329a <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003292:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003294:	6878      	ldr	r0, [r7, #4]
 8003296:	f000 fbe6 	bl	8003a66 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800329a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800329c:	3301      	adds	r3, #1
 800329e:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80032a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032a2:	085b      	lsrs	r3, r3, #1
 80032a4:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80032a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	f47f af49 	bne.w	8003140 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4618      	mov	r0, r3
 80032b4:	f003 fa0b 	bl	80066ce <USB_ReadInterrupts>
 80032b8:	4603      	mov	r3, r0
 80032ba:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80032be:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80032c2:	d122      	bne.n	800330a <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80032c4:	69fb      	ldr	r3, [r7, #28]
 80032c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	69fa      	ldr	r2, [r7, #28]
 80032ce:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80032d2:	f023 0301 	bic.w	r3, r3, #1
 80032d6:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	f893 33f4 	ldrb.w	r3, [r3, #1012]	@ 0x3f4
 80032de:	2b01      	cmp	r3, #1
 80032e0:	d108      	bne.n	80032f4 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2200      	movs	r2, #0
 80032e6:	f883 23f4 	strb.w	r2, [r3, #1012]	@ 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80032ea:	2100      	movs	r1, #0
 80032ec:	6878      	ldr	r0, [r7, #4]
 80032ee:	f000 fe15 	bl	8003f1c <HAL_PCDEx_LPM_Callback>
 80032f2:	e002      	b.n	80032fa <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80032f4:	6878      	ldr	r0, [r7, #4]
 80032f6:	f005 fdc1 	bl	8008e7c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	695a      	ldr	r2, [r3, #20]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8003308:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4618      	mov	r0, r3
 8003310:	f003 f9dd 	bl	80066ce <USB_ReadInterrupts>
 8003314:	4603      	mov	r3, r0
 8003316:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800331a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800331e:	d112      	bne.n	8003346 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003320:	69fb      	ldr	r3, [r7, #28]
 8003322:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003326:	689b      	ldr	r3, [r3, #8]
 8003328:	f003 0301 	and.w	r3, r3, #1
 800332c:	2b01      	cmp	r3, #1
 800332e:	d102      	bne.n	8003336 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003330:	6878      	ldr	r0, [r7, #4]
 8003332:	f005 fd7d 	bl	8008e30 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	695a      	ldr	r2, [r3, #20]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8003344:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4618      	mov	r0, r3
 800334c:	f003 f9bf 	bl	80066ce <USB_ReadInterrupts>
 8003350:	4603      	mov	r3, r0
 8003352:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003356:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800335a:	d121      	bne.n	80033a0 <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	695a      	ldr	r2, [r3, #20]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 800336a:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	f893 33f4 	ldrb.w	r3, [r3, #1012]	@ 0x3f4
 8003372:	2b00      	cmp	r3, #0
 8003374:	d111      	bne.n	800339a <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2201      	movs	r2, #1
 800337a:	f883 23f4 	strb.w	r2, [r3, #1012]	@ 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003384:	089b      	lsrs	r3, r3, #2
 8003386:	f003 020f 	and.w	r2, r3, #15
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	f8c3 23f8 	str.w	r2, [r3, #1016]	@ 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003390:	2101      	movs	r1, #1
 8003392:	6878      	ldr	r0, [r7, #4]
 8003394:	f000 fdc2 	bl	8003f1c <HAL_PCDEx_LPM_Callback>
 8003398:	e002      	b.n	80033a0 <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800339a:	6878      	ldr	r0, [r7, #4]
 800339c:	f005 fd48 	bl	8008e30 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4618      	mov	r0, r3
 80033a6:	f003 f992 	bl	80066ce <USB_ReadInterrupts>
 80033aa:	4603      	mov	r3, r0
 80033ac:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80033b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80033b4:	f040 80c7 	bne.w	8003546 <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80033b8:	69fb      	ldr	r3, [r7, #28]
 80033ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	69fa      	ldr	r2, [r7, #28]
 80033c2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80033c6:	f023 0301 	bic.w	r3, r3, #1
 80033ca:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	2110      	movs	r1, #16
 80033d2:	4618      	mov	r0, r3
 80033d4:	f002 fb08 	bl	80059e8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80033d8:	2300      	movs	r3, #0
 80033da:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80033dc:	e056      	b.n	800348c <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80033de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033e0:	015a      	lsls	r2, r3, #5
 80033e2:	69fb      	ldr	r3, [r7, #28]
 80033e4:	4413      	add	r3, r2
 80033e6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80033ea:	461a      	mov	r2, r3
 80033ec:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80033f0:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80033f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033f4:	015a      	lsls	r2, r3, #5
 80033f6:	69fb      	ldr	r3, [r7, #28]
 80033f8:	4413      	add	r3, r2
 80033fa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003402:	0151      	lsls	r1, r2, #5
 8003404:	69fa      	ldr	r2, [r7, #28]
 8003406:	440a      	add	r2, r1
 8003408:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800340c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003410:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003412:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003414:	015a      	lsls	r2, r3, #5
 8003416:	69fb      	ldr	r3, [r7, #28]
 8003418:	4413      	add	r3, r2
 800341a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003422:	0151      	lsls	r1, r2, #5
 8003424:	69fa      	ldr	r2, [r7, #28]
 8003426:	440a      	add	r2, r1
 8003428:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800342c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003430:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003432:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003434:	015a      	lsls	r2, r3, #5
 8003436:	69fb      	ldr	r3, [r7, #28]
 8003438:	4413      	add	r3, r2
 800343a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800343e:	461a      	mov	r2, r3
 8003440:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003444:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003446:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003448:	015a      	lsls	r2, r3, #5
 800344a:	69fb      	ldr	r3, [r7, #28]
 800344c:	4413      	add	r3, r2
 800344e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003456:	0151      	lsls	r1, r2, #5
 8003458:	69fa      	ldr	r2, [r7, #28]
 800345a:	440a      	add	r2, r1
 800345c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003460:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003464:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003466:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003468:	015a      	lsls	r2, r3, #5
 800346a:	69fb      	ldr	r3, [r7, #28]
 800346c:	4413      	add	r3, r2
 800346e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003476:	0151      	lsls	r1, r2, #5
 8003478:	69fa      	ldr	r2, [r7, #28]
 800347a:	440a      	add	r2, r1
 800347c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003480:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003484:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003486:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003488:	3301      	adds	r3, #1
 800348a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003492:	429a      	cmp	r2, r3
 8003494:	d3a3      	bcc.n	80033de <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003496:	69fb      	ldr	r3, [r7, #28]
 8003498:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800349c:	69db      	ldr	r3, [r3, #28]
 800349e:	69fa      	ldr	r2, [r7, #28]
 80034a0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80034a4:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80034a8:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d016      	beq.n	80034e0 <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80034b2:	69fb      	ldr	r3, [r7, #28]
 80034b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80034b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80034bc:	69fa      	ldr	r2, [r7, #28]
 80034be:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80034c2:	f043 030b 	orr.w	r3, r3, #11
 80034c6:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80034ca:	69fb      	ldr	r3, [r7, #28]
 80034cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80034d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034d2:	69fa      	ldr	r2, [r7, #28]
 80034d4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80034d8:	f043 030b 	orr.w	r3, r3, #11
 80034dc:	6453      	str	r3, [r2, #68]	@ 0x44
 80034de:	e015      	b.n	800350c <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80034e0:	69fb      	ldr	r3, [r7, #28]
 80034e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80034e6:	695b      	ldr	r3, [r3, #20]
 80034e8:	69fa      	ldr	r2, [r7, #28]
 80034ea:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80034ee:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80034f2:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 80034f6:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80034f8:	69fb      	ldr	r3, [r7, #28]
 80034fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80034fe:	691b      	ldr	r3, [r3, #16]
 8003500:	69fa      	ldr	r2, [r7, #28]
 8003502:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003506:	f043 030b 	orr.w	r3, r3, #11
 800350a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800350c:	69fb      	ldr	r3, [r7, #28]
 800350e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	69fa      	ldr	r2, [r7, #28]
 8003516:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800351a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800351e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6818      	ldr	r0, [r3, #0]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	691b      	ldr	r3, [r3, #16]
 8003528:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	f503 7371 	add.w	r3, r3, #964	@ 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003530:	461a      	mov	r2, r3
 8003532:	f003 f991 	bl	8006858 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	695a      	ldr	r2, [r3, #20]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8003544:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4618      	mov	r0, r3
 800354c:	f003 f8bf 	bl	80066ce <USB_ReadInterrupts>
 8003550:	4603      	mov	r3, r0
 8003552:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003556:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800355a:	d124      	bne.n	80035a6 <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4618      	mov	r0, r3
 8003562:	f003 f955 	bl	8006810 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4618      	mov	r0, r3
 800356c:	f002 fa99 	bl	8005aa2 <USB_GetDevSpeed>
 8003570:	4603      	mov	r3, r0
 8003572:	461a      	mov	r2, r3
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681c      	ldr	r4, [r3, #0]
 800357c:	f000 fec6 	bl	800430c <HAL_RCC_GetHCLKFreq>
 8003580:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003586:	b2db      	uxtb	r3, r3
 8003588:	461a      	mov	r2, r3
 800358a:	4620      	mov	r0, r4
 800358c:	f001 ffbe 	bl	800550c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003590:	6878      	ldr	r0, [r7, #4]
 8003592:	f005 fc2e 	bl	8008df2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	695a      	ldr	r2, [r3, #20]
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80035a4:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4618      	mov	r0, r3
 80035ac:	f003 f88f 	bl	80066ce <USB_ReadInterrupts>
 80035b0:	4603      	mov	r3, r0
 80035b2:	f003 0308 	and.w	r3, r3, #8
 80035b6:	2b08      	cmp	r3, #8
 80035b8:	d10a      	bne.n	80035d0 <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80035ba:	6878      	ldr	r0, [r7, #4]
 80035bc:	f005 fc0b 	bl	8008dd6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	695a      	ldr	r2, [r3, #20]
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f002 0208 	and.w	r2, r2, #8
 80035ce:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4618      	mov	r0, r3
 80035d6:	f003 f87a 	bl	80066ce <USB_ReadInterrupts>
 80035da:	4603      	mov	r3, r0
 80035dc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80035e0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80035e4:	d10f      	bne.n	8003606 <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80035e6:	2300      	movs	r3, #0
 80035e8:	627b      	str	r3, [r7, #36]	@ 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80035ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035ec:	b2db      	uxtb	r3, r3
 80035ee:	4619      	mov	r1, r3
 80035f0:	6878      	ldr	r0, [r7, #4]
 80035f2:	f005 fc63 	bl	8008ebc <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	695a      	ldr	r2, [r3, #20]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8003604:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4618      	mov	r0, r3
 800360c:	f003 f85f 	bl	80066ce <USB_ReadInterrupts>
 8003610:	4603      	mov	r3, r0
 8003612:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003616:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800361a:	d10f      	bne.n	800363c <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800361c:	2300      	movs	r3, #0
 800361e:	627b      	str	r3, [r7, #36]	@ 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003620:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003622:	b2db      	uxtb	r3, r3
 8003624:	4619      	mov	r1, r3
 8003626:	6878      	ldr	r0, [r7, #4]
 8003628:	f005 fc36 	bl	8008e98 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	695a      	ldr	r2, [r3, #20]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 800363a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4618      	mov	r0, r3
 8003642:	f003 f844 	bl	80066ce <USB_ReadInterrupts>
 8003646:	4603      	mov	r3, r0
 8003648:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800364c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003650:	d10a      	bne.n	8003668 <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003652:	6878      	ldr	r0, [r7, #4]
 8003654:	f005 fc44 	bl	8008ee0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	695a      	ldr	r2, [r3, #20]
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8003666:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4618      	mov	r0, r3
 800366e:	f003 f82e 	bl	80066ce <USB_ReadInterrupts>
 8003672:	4603      	mov	r3, r0
 8003674:	f003 0304 	and.w	r3, r3, #4
 8003678:	2b04      	cmp	r3, #4
 800367a:	d115      	bne.n	80036a8 <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003684:	69bb      	ldr	r3, [r7, #24]
 8003686:	f003 0304 	and.w	r3, r3, #4
 800368a:	2b00      	cmp	r3, #0
 800368c:	d002      	beq.n	8003694 <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800368e:	6878      	ldr	r0, [r7, #4]
 8003690:	f005 fc34 	bl	8008efc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	6859      	ldr	r1, [r3, #4]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	69ba      	ldr	r2, [r7, #24]
 80036a0:	430a      	orrs	r2, r1
 80036a2:	605a      	str	r2, [r3, #4]
 80036a4:	e000      	b.n	80036a8 <HAL_PCD_IRQHandler+0x7b8>
      return;
 80036a6:	bf00      	nop
    }
  }
}
 80036a8:	3734      	adds	r7, #52	@ 0x34
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bd90      	pop	{r4, r7, pc}

080036ae <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80036ae:	b580      	push	{r7, lr}
 80036b0:	b082      	sub	sp, #8
 80036b2:	af00      	add	r7, sp, #0
 80036b4:	6078      	str	r0, [r7, #4]
 80036b6:	460b      	mov	r3, r1
 80036b8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	f893 33bc 	ldrb.w	r3, [r3, #956]	@ 0x3bc
 80036c0:	2b01      	cmp	r3, #1
 80036c2:	d101      	bne.n	80036c8 <HAL_PCD_SetAddress+0x1a>
 80036c4:	2302      	movs	r3, #2
 80036c6:	e013      	b.n	80036f0 <HAL_PCD_SetAddress+0x42>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2201      	movs	r2, #1
 80036cc:	f883 23bc 	strb.w	r2, [r3, #956]	@ 0x3bc
  hpcd->USB_Address = address;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	78fa      	ldrb	r2, [r7, #3]
 80036d4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	78fa      	ldrb	r2, [r7, #3]
 80036de:	4611      	mov	r1, r2
 80036e0:	4618      	mov	r0, r3
 80036e2:	f002 ff8c 	bl	80065fe <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2200      	movs	r2, #0
 80036ea:	f883 23bc 	strb.w	r2, [r3, #956]	@ 0x3bc

  return HAL_OK;
 80036ee:	2300      	movs	r3, #0
}
 80036f0:	4618      	mov	r0, r3
 80036f2:	3708      	adds	r7, #8
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bd80      	pop	{r7, pc}

080036f8 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b084      	sub	sp, #16
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
 8003700:	4608      	mov	r0, r1
 8003702:	4611      	mov	r1, r2
 8003704:	461a      	mov	r2, r3
 8003706:	4603      	mov	r3, r0
 8003708:	70fb      	strb	r3, [r7, #3]
 800370a:	460b      	mov	r3, r1
 800370c:	803b      	strh	r3, [r7, #0]
 800370e:	4613      	mov	r3, r2
 8003710:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003712:	2300      	movs	r3, #0
 8003714:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003716:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800371a:	2b00      	cmp	r3, #0
 800371c:	da0f      	bge.n	800373e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800371e:	78fb      	ldrb	r3, [r7, #3]
 8003720:	f003 020f 	and.w	r2, r3, #15
 8003724:	4613      	mov	r3, r2
 8003726:	00db      	lsls	r3, r3, #3
 8003728:	1a9b      	subs	r3, r3, r2
 800372a:	009b      	lsls	r3, r3, #2
 800372c:	3338      	adds	r3, #56	@ 0x38
 800372e:	687a      	ldr	r2, [r7, #4]
 8003730:	4413      	add	r3, r2
 8003732:	3304      	adds	r3, #4
 8003734:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	2201      	movs	r2, #1
 800373a:	705a      	strb	r2, [r3, #1]
 800373c:	e00f      	b.n	800375e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800373e:	78fb      	ldrb	r3, [r7, #3]
 8003740:	f003 020f 	and.w	r2, r3, #15
 8003744:	4613      	mov	r3, r2
 8003746:	00db      	lsls	r3, r3, #3
 8003748:	1a9b      	subs	r3, r3, r2
 800374a:	009b      	lsls	r3, r3, #2
 800374c:	f503 73fc 	add.w	r3, r3, #504	@ 0x1f8
 8003750:	687a      	ldr	r2, [r7, #4]
 8003752:	4413      	add	r3, r2
 8003754:	3304      	adds	r3, #4
 8003756:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	2200      	movs	r2, #0
 800375c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800375e:	78fb      	ldrb	r3, [r7, #3]
 8003760:	f003 030f 	and.w	r3, r3, #15
 8003764:	b2da      	uxtb	r2, r3
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800376a:	883a      	ldrh	r2, [r7, #0]
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	78ba      	ldrb	r2, [r7, #2]
 8003774:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	785b      	ldrb	r3, [r3, #1]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d004      	beq.n	8003788 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	781b      	ldrb	r3, [r3, #0]
 8003782:	461a      	mov	r2, r3
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003788:	78bb      	ldrb	r3, [r7, #2]
 800378a:	2b02      	cmp	r3, #2
 800378c:	d102      	bne.n	8003794 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	2200      	movs	r2, #0
 8003792:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	f893 33bc 	ldrb.w	r3, [r3, #956]	@ 0x3bc
 800379a:	2b01      	cmp	r3, #1
 800379c:	d101      	bne.n	80037a2 <HAL_PCD_EP_Open+0xaa>
 800379e:	2302      	movs	r3, #2
 80037a0:	e00e      	b.n	80037c0 <HAL_PCD_EP_Open+0xc8>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2201      	movs	r2, #1
 80037a6:	f883 23bc 	strb.w	r2, [r3, #956]	@ 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	68f9      	ldr	r1, [r7, #12]
 80037b0:	4618      	mov	r0, r3
 80037b2:	f002 f99b 	bl	8005aec <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2200      	movs	r2, #0
 80037ba:	f883 23bc 	strb.w	r2, [r3, #956]	@ 0x3bc

  return ret;
 80037be:	7afb      	ldrb	r3, [r7, #11]
}
 80037c0:	4618      	mov	r0, r3
 80037c2:	3710      	adds	r7, #16
 80037c4:	46bd      	mov	sp, r7
 80037c6:	bd80      	pop	{r7, pc}

080037c8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b086      	sub	sp, #24
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	60f8      	str	r0, [r7, #12]
 80037d0:	607a      	str	r2, [r7, #4]
 80037d2:	603b      	str	r3, [r7, #0]
 80037d4:	460b      	mov	r3, r1
 80037d6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80037d8:	7afb      	ldrb	r3, [r7, #11]
 80037da:	f003 020f 	and.w	r2, r3, #15
 80037de:	4613      	mov	r3, r2
 80037e0:	00db      	lsls	r3, r3, #3
 80037e2:	1a9b      	subs	r3, r3, r2
 80037e4:	009b      	lsls	r3, r3, #2
 80037e6:	f503 73fc 	add.w	r3, r3, #504	@ 0x1f8
 80037ea:	68fa      	ldr	r2, [r7, #12]
 80037ec:	4413      	add	r3, r2
 80037ee:	3304      	adds	r3, #4
 80037f0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80037f2:	697b      	ldr	r3, [r7, #20]
 80037f4:	687a      	ldr	r2, [r7, #4]
 80037f6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80037f8:	697b      	ldr	r3, [r7, #20]
 80037fa:	683a      	ldr	r2, [r7, #0]
 80037fc:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	2200      	movs	r2, #0
 8003802:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8003804:	697b      	ldr	r3, [r7, #20]
 8003806:	2200      	movs	r2, #0
 8003808:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800380a:	7afb      	ldrb	r3, [r7, #11]
 800380c:	f003 030f 	and.w	r3, r3, #15
 8003810:	b2da      	uxtb	r2, r3
 8003812:	697b      	ldr	r3, [r7, #20]
 8003814:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	691b      	ldr	r3, [r3, #16]
 800381a:	2b01      	cmp	r3, #1
 800381c:	d102      	bne.n	8003824 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800381e:	687a      	ldr	r2, [r7, #4]
 8003820:	697b      	ldr	r3, [r7, #20]
 8003822:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003824:	7afb      	ldrb	r3, [r7, #11]
 8003826:	f003 030f 	and.w	r3, r3, #15
 800382a:	2b00      	cmp	r3, #0
 800382c:	d109      	bne.n	8003842 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	6818      	ldr	r0, [r3, #0]
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	691b      	ldr	r3, [r3, #16]
 8003836:	b2db      	uxtb	r3, r3
 8003838:	461a      	mov	r2, r3
 800383a:	6979      	ldr	r1, [r7, #20]
 800383c:	f002 fc22 	bl	8006084 <USB_EP0StartXfer>
 8003840:	e008      	b.n	8003854 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	6818      	ldr	r0, [r3, #0]
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	691b      	ldr	r3, [r3, #16]
 800384a:	b2db      	uxtb	r3, r3
 800384c:	461a      	mov	r2, r3
 800384e:	6979      	ldr	r1, [r7, #20]
 8003850:	f002 f9d4 	bl	8005bfc <USB_EPStartXfer>
  }

  return HAL_OK;
 8003854:	2300      	movs	r3, #0
}
 8003856:	4618      	mov	r0, r3
 8003858:	3718      	adds	r7, #24
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}

0800385e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800385e:	b580      	push	{r7, lr}
 8003860:	b086      	sub	sp, #24
 8003862:	af00      	add	r7, sp, #0
 8003864:	60f8      	str	r0, [r7, #12]
 8003866:	607a      	str	r2, [r7, #4]
 8003868:	603b      	str	r3, [r7, #0]
 800386a:	460b      	mov	r3, r1
 800386c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800386e:	7afb      	ldrb	r3, [r7, #11]
 8003870:	f003 020f 	and.w	r2, r3, #15
 8003874:	4613      	mov	r3, r2
 8003876:	00db      	lsls	r3, r3, #3
 8003878:	1a9b      	subs	r3, r3, r2
 800387a:	009b      	lsls	r3, r3, #2
 800387c:	3338      	adds	r3, #56	@ 0x38
 800387e:	68fa      	ldr	r2, [r7, #12]
 8003880:	4413      	add	r3, r2
 8003882:	3304      	adds	r3, #4
 8003884:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003886:	697b      	ldr	r3, [r7, #20]
 8003888:	687a      	ldr	r2, [r7, #4]
 800388a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800388c:	697b      	ldr	r3, [r7, #20]
 800388e:	683a      	ldr	r2, [r7, #0]
 8003890:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003892:	697b      	ldr	r3, [r7, #20]
 8003894:	2200      	movs	r2, #0
 8003896:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8003898:	697b      	ldr	r3, [r7, #20]
 800389a:	2201      	movs	r2, #1
 800389c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800389e:	7afb      	ldrb	r3, [r7, #11]
 80038a0:	f003 030f 	and.w	r3, r3, #15
 80038a4:	b2da      	uxtb	r2, r3
 80038a6:	697b      	ldr	r3, [r7, #20]
 80038a8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	691b      	ldr	r3, [r3, #16]
 80038ae:	2b01      	cmp	r3, #1
 80038b0:	d102      	bne.n	80038b8 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80038b2:	687a      	ldr	r2, [r7, #4]
 80038b4:	697b      	ldr	r3, [r7, #20]
 80038b6:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80038b8:	7afb      	ldrb	r3, [r7, #11]
 80038ba:	f003 030f 	and.w	r3, r3, #15
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d109      	bne.n	80038d6 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	6818      	ldr	r0, [r3, #0]
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	691b      	ldr	r3, [r3, #16]
 80038ca:	b2db      	uxtb	r3, r3
 80038cc:	461a      	mov	r2, r3
 80038ce:	6979      	ldr	r1, [r7, #20]
 80038d0:	f002 fbd8 	bl	8006084 <USB_EP0StartXfer>
 80038d4:	e008      	b.n	80038e8 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	6818      	ldr	r0, [r3, #0]
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	691b      	ldr	r3, [r3, #16]
 80038de:	b2db      	uxtb	r3, r3
 80038e0:	461a      	mov	r2, r3
 80038e2:	6979      	ldr	r1, [r7, #20]
 80038e4:	f002 f98a 	bl	8005bfc <USB_EPStartXfer>
  }

  return HAL_OK;
 80038e8:	2300      	movs	r3, #0
}
 80038ea:	4618      	mov	r0, r3
 80038ec:	3718      	adds	r7, #24
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}

080038f2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80038f2:	b580      	push	{r7, lr}
 80038f4:	b084      	sub	sp, #16
 80038f6:	af00      	add	r7, sp, #0
 80038f8:	6078      	str	r0, [r7, #4]
 80038fa:	460b      	mov	r3, r1
 80038fc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80038fe:	78fb      	ldrb	r3, [r7, #3]
 8003900:	f003 020f 	and.w	r2, r3, #15
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	429a      	cmp	r2, r3
 800390a:	d901      	bls.n	8003910 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800390c:	2301      	movs	r3, #1
 800390e:	e050      	b.n	80039b2 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003910:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003914:	2b00      	cmp	r3, #0
 8003916:	da0f      	bge.n	8003938 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003918:	78fb      	ldrb	r3, [r7, #3]
 800391a:	f003 020f 	and.w	r2, r3, #15
 800391e:	4613      	mov	r3, r2
 8003920:	00db      	lsls	r3, r3, #3
 8003922:	1a9b      	subs	r3, r3, r2
 8003924:	009b      	lsls	r3, r3, #2
 8003926:	3338      	adds	r3, #56	@ 0x38
 8003928:	687a      	ldr	r2, [r7, #4]
 800392a:	4413      	add	r3, r2
 800392c:	3304      	adds	r3, #4
 800392e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	2201      	movs	r2, #1
 8003934:	705a      	strb	r2, [r3, #1]
 8003936:	e00d      	b.n	8003954 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003938:	78fa      	ldrb	r2, [r7, #3]
 800393a:	4613      	mov	r3, r2
 800393c:	00db      	lsls	r3, r3, #3
 800393e:	1a9b      	subs	r3, r3, r2
 8003940:	009b      	lsls	r3, r3, #2
 8003942:	f503 73fc 	add.w	r3, r3, #504	@ 0x1f8
 8003946:	687a      	ldr	r2, [r7, #4]
 8003948:	4413      	add	r3, r2
 800394a:	3304      	adds	r3, #4
 800394c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	2200      	movs	r2, #0
 8003952:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	2201      	movs	r2, #1
 8003958:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800395a:	78fb      	ldrb	r3, [r7, #3]
 800395c:	f003 030f 	and.w	r3, r3, #15
 8003960:	b2da      	uxtb	r2, r3
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	f893 33bc 	ldrb.w	r3, [r3, #956]	@ 0x3bc
 800396c:	2b01      	cmp	r3, #1
 800396e:	d101      	bne.n	8003974 <HAL_PCD_EP_SetStall+0x82>
 8003970:	2302      	movs	r3, #2
 8003972:	e01e      	b.n	80039b2 <HAL_PCD_EP_SetStall+0xc0>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2201      	movs	r2, #1
 8003978:	f883 23bc 	strb.w	r2, [r3, #956]	@ 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	68f9      	ldr	r1, [r7, #12]
 8003982:	4618      	mov	r0, r3
 8003984:	f002 fd67 	bl	8006456 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003988:	78fb      	ldrb	r3, [r7, #3]
 800398a:	f003 030f 	and.w	r3, r3, #15
 800398e:	2b00      	cmp	r3, #0
 8003990:	d10a      	bne.n	80039a8 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6818      	ldr	r0, [r3, #0]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	691b      	ldr	r3, [r3, #16]
 800399a:	b2d9      	uxtb	r1, r3
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	f503 7371 	add.w	r3, r3, #964	@ 0x3c4
 80039a2:	461a      	mov	r2, r3
 80039a4:	f002 ff58 	bl	8006858 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2200      	movs	r2, #0
 80039ac:	f883 23bc 	strb.w	r2, [r3, #956]	@ 0x3bc

  return HAL_OK;
 80039b0:	2300      	movs	r3, #0
}
 80039b2:	4618      	mov	r0, r3
 80039b4:	3710      	adds	r7, #16
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bd80      	pop	{r7, pc}

080039ba <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80039ba:	b580      	push	{r7, lr}
 80039bc:	b084      	sub	sp, #16
 80039be:	af00      	add	r7, sp, #0
 80039c0:	6078      	str	r0, [r7, #4]
 80039c2:	460b      	mov	r3, r1
 80039c4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80039c6:	78fb      	ldrb	r3, [r7, #3]
 80039c8:	f003 020f 	and.w	r2, r3, #15
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	429a      	cmp	r2, r3
 80039d2:	d901      	bls.n	80039d8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80039d4:	2301      	movs	r3, #1
 80039d6:	e042      	b.n	8003a5e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80039d8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	da0f      	bge.n	8003a00 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80039e0:	78fb      	ldrb	r3, [r7, #3]
 80039e2:	f003 020f 	and.w	r2, r3, #15
 80039e6:	4613      	mov	r3, r2
 80039e8:	00db      	lsls	r3, r3, #3
 80039ea:	1a9b      	subs	r3, r3, r2
 80039ec:	009b      	lsls	r3, r3, #2
 80039ee:	3338      	adds	r3, #56	@ 0x38
 80039f0:	687a      	ldr	r2, [r7, #4]
 80039f2:	4413      	add	r3, r2
 80039f4:	3304      	adds	r3, #4
 80039f6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	2201      	movs	r2, #1
 80039fc:	705a      	strb	r2, [r3, #1]
 80039fe:	e00f      	b.n	8003a20 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003a00:	78fb      	ldrb	r3, [r7, #3]
 8003a02:	f003 020f 	and.w	r2, r3, #15
 8003a06:	4613      	mov	r3, r2
 8003a08:	00db      	lsls	r3, r3, #3
 8003a0a:	1a9b      	subs	r3, r3, r2
 8003a0c:	009b      	lsls	r3, r3, #2
 8003a0e:	f503 73fc 	add.w	r3, r3, #504	@ 0x1f8
 8003a12:	687a      	ldr	r2, [r7, #4]
 8003a14:	4413      	add	r3, r2
 8003a16:	3304      	adds	r3, #4
 8003a18:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	2200      	movs	r2, #0
 8003a24:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003a26:	78fb      	ldrb	r3, [r7, #3]
 8003a28:	f003 030f 	and.w	r3, r3, #15
 8003a2c:	b2da      	uxtb	r2, r3
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	f893 33bc 	ldrb.w	r3, [r3, #956]	@ 0x3bc
 8003a38:	2b01      	cmp	r3, #1
 8003a3a:	d101      	bne.n	8003a40 <HAL_PCD_EP_ClrStall+0x86>
 8003a3c:	2302      	movs	r3, #2
 8003a3e:	e00e      	b.n	8003a5e <HAL_PCD_EP_ClrStall+0xa4>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2201      	movs	r2, #1
 8003a44:	f883 23bc 	strb.w	r2, [r3, #956]	@ 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	68f9      	ldr	r1, [r7, #12]
 8003a4e:	4618      	mov	r0, r3
 8003a50:	f002 fd6f 	bl	8006532 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2200      	movs	r2, #0
 8003a58:	f883 23bc 	strb.w	r2, [r3, #956]	@ 0x3bc

  return HAL_OK;
 8003a5c:	2300      	movs	r3, #0
}
 8003a5e:	4618      	mov	r0, r3
 8003a60:	3710      	adds	r7, #16
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bd80      	pop	{r7, pc}

08003a66 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003a66:	b580      	push	{r7, lr}
 8003a68:	b08a      	sub	sp, #40	@ 0x28
 8003a6a:	af02      	add	r7, sp, #8
 8003a6c:	6078      	str	r0, [r7, #4]
 8003a6e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a76:	697b      	ldr	r3, [r7, #20]
 8003a78:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003a7a:	683a      	ldr	r2, [r7, #0]
 8003a7c:	4613      	mov	r3, r2
 8003a7e:	00db      	lsls	r3, r3, #3
 8003a80:	1a9b      	subs	r3, r3, r2
 8003a82:	009b      	lsls	r3, r3, #2
 8003a84:	3338      	adds	r3, #56	@ 0x38
 8003a86:	687a      	ldr	r2, [r7, #4]
 8003a88:	4413      	add	r3, r2
 8003a8a:	3304      	adds	r3, #4
 8003a8c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	699a      	ldr	r2, [r3, #24]
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	695b      	ldr	r3, [r3, #20]
 8003a96:	429a      	cmp	r2, r3
 8003a98:	d901      	bls.n	8003a9e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	e06c      	b.n	8003b78 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	695a      	ldr	r2, [r3, #20]
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	699b      	ldr	r3, [r3, #24]
 8003aa6:	1ad3      	subs	r3, r2, r3
 8003aa8:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	689b      	ldr	r3, [r3, #8]
 8003aae:	69fa      	ldr	r2, [r7, #28]
 8003ab0:	429a      	cmp	r2, r3
 8003ab2:	d902      	bls.n	8003aba <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	689b      	ldr	r3, [r3, #8]
 8003ab8:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003aba:	69fb      	ldr	r3, [r7, #28]
 8003abc:	3303      	adds	r3, #3
 8003abe:	089b      	lsrs	r3, r3, #2
 8003ac0:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003ac2:	e02b      	b.n	8003b1c <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	695a      	ldr	r2, [r3, #20]
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	699b      	ldr	r3, [r3, #24]
 8003acc:	1ad3      	subs	r3, r2, r3
 8003ace:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	689b      	ldr	r3, [r3, #8]
 8003ad4:	69fa      	ldr	r2, [r7, #28]
 8003ad6:	429a      	cmp	r2, r3
 8003ad8:	d902      	bls.n	8003ae0 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	689b      	ldr	r3, [r3, #8]
 8003ade:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003ae0:	69fb      	ldr	r3, [r7, #28]
 8003ae2:	3303      	adds	r3, #3
 8003ae4:	089b      	lsrs	r3, r3, #2
 8003ae6:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	68d9      	ldr	r1, [r3, #12]
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	b2da      	uxtb	r2, r3
 8003af0:	69fb      	ldr	r3, [r7, #28]
 8003af2:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003af8:	b2db      	uxtb	r3, r3
 8003afa:	9300      	str	r3, [sp, #0]
 8003afc:	4603      	mov	r3, r0
 8003afe:	6978      	ldr	r0, [r7, #20]
 8003b00:	f002 fc13 	bl	800632a <USB_WritePacket>

    ep->xfer_buff  += len;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	68da      	ldr	r2, [r3, #12]
 8003b08:	69fb      	ldr	r3, [r7, #28]
 8003b0a:	441a      	add	r2, r3
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	699a      	ldr	r2, [r3, #24]
 8003b14:	69fb      	ldr	r3, [r7, #28]
 8003b16:	441a      	add	r2, r3
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	015a      	lsls	r2, r3, #5
 8003b20:	693b      	ldr	r3, [r7, #16]
 8003b22:	4413      	add	r3, r2
 8003b24:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003b28:	699b      	ldr	r3, [r3, #24]
 8003b2a:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003b2c:	69ba      	ldr	r2, [r7, #24]
 8003b2e:	429a      	cmp	r2, r3
 8003b30:	d809      	bhi.n	8003b46 <PCD_WriteEmptyTxFifo+0xe0>
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	699a      	ldr	r2, [r3, #24]
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003b3a:	429a      	cmp	r2, r3
 8003b3c:	d203      	bcs.n	8003b46 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	695b      	ldr	r3, [r3, #20]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d1be      	bne.n	8003ac4 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	695a      	ldr	r2, [r3, #20]
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	699b      	ldr	r3, [r3, #24]
 8003b4e:	429a      	cmp	r2, r3
 8003b50:	d811      	bhi.n	8003b76 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	f003 030f 	and.w	r3, r3, #15
 8003b58:	2201      	movs	r2, #1
 8003b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b5e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003b60:	693b      	ldr	r3, [r7, #16]
 8003b62:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003b66:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003b68:	68bb      	ldr	r3, [r7, #8]
 8003b6a:	43db      	mvns	r3, r3
 8003b6c:	6939      	ldr	r1, [r7, #16]
 8003b6e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003b72:	4013      	ands	r3, r2
 8003b74:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8003b76:	2300      	movs	r3, #0
}
 8003b78:	4618      	mov	r0, r3
 8003b7a:	3720      	adds	r7, #32
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	bd80      	pop	{r7, pc}

08003b80 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b086      	sub	sp, #24
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
 8003b88:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b90:	697b      	ldr	r3, [r7, #20]
 8003b92:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003b94:	697b      	ldr	r3, [r7, #20]
 8003b96:	333c      	adds	r3, #60	@ 0x3c
 8003b98:	3304      	adds	r3, #4
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	015a      	lsls	r2, r3, #5
 8003ba2:	693b      	ldr	r3, [r7, #16]
 8003ba4:	4413      	add	r3, r2
 8003ba6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003baa:	689b      	ldr	r3, [r3, #8]
 8003bac:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	691b      	ldr	r3, [r3, #16]
 8003bb2:	2b01      	cmp	r3, #1
 8003bb4:	f040 80a0 	bne.w	8003cf8 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003bb8:	68bb      	ldr	r3, [r7, #8]
 8003bba:	f003 0308 	and.w	r3, r3, #8
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d015      	beq.n	8003bee <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	4a72      	ldr	r2, [pc, #456]	@ (8003d90 <PCD_EP_OutXfrComplete_int+0x210>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	f240 80dd 	bls.w	8003d86 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003bcc:	68bb      	ldr	r3, [r7, #8]
 8003bce:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	f000 80d7 	beq.w	8003d86 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	015a      	lsls	r2, r3, #5
 8003bdc:	693b      	ldr	r3, [r7, #16]
 8003bde:	4413      	add	r3, r2
 8003be0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003be4:	461a      	mov	r2, r3
 8003be6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003bea:	6093      	str	r3, [r2, #8]
 8003bec:	e0cb      	b.n	8003d86 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003bee:	68bb      	ldr	r3, [r7, #8]
 8003bf0:	f003 0320 	and.w	r3, r3, #32
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d009      	beq.n	8003c0c <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	015a      	lsls	r2, r3, #5
 8003bfc:	693b      	ldr	r3, [r7, #16]
 8003bfe:	4413      	add	r3, r2
 8003c00:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c04:	461a      	mov	r2, r3
 8003c06:	2320      	movs	r3, #32
 8003c08:	6093      	str	r3, [r2, #8]
 8003c0a:	e0bc      	b.n	8003d86 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	f040 80b7 	bne.w	8003d86 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	4a5d      	ldr	r2, [pc, #372]	@ (8003d90 <PCD_EP_OutXfrComplete_int+0x210>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d90f      	bls.n	8003c40 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003c20:	68bb      	ldr	r3, [r7, #8]
 8003c22:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d00a      	beq.n	8003c40 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	015a      	lsls	r2, r3, #5
 8003c2e:	693b      	ldr	r3, [r7, #16]
 8003c30:	4413      	add	r3, r2
 8003c32:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c36:	461a      	mov	r2, r3
 8003c38:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003c3c:	6093      	str	r3, [r2, #8]
 8003c3e:	e0a2      	b.n	8003d86 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8003c40:	6879      	ldr	r1, [r7, #4]
 8003c42:	683a      	ldr	r2, [r7, #0]
 8003c44:	4613      	mov	r3, r2
 8003c46:	00db      	lsls	r3, r3, #3
 8003c48:	1a9b      	subs	r3, r3, r2
 8003c4a:	009b      	lsls	r3, r3, #2
 8003c4c:	440b      	add	r3, r1
 8003c4e:	f503 7301 	add.w	r3, r3, #516	@ 0x204
 8003c52:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	0159      	lsls	r1, r3, #5
 8003c58:	693b      	ldr	r3, [r7, #16]
 8003c5a:	440b      	add	r3, r1
 8003c5c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c60:	691b      	ldr	r3, [r3, #16]
 8003c62:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8003c66:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8003c68:	6878      	ldr	r0, [r7, #4]
 8003c6a:	683a      	ldr	r2, [r7, #0]
 8003c6c:	4613      	mov	r3, r2
 8003c6e:	00db      	lsls	r3, r3, #3
 8003c70:	1a9b      	subs	r3, r3, r2
 8003c72:	009b      	lsls	r3, r3, #2
 8003c74:	4403      	add	r3, r0
 8003c76:	f503 7305 	add.w	r3, r3, #532	@ 0x214
 8003c7a:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8003c7c:	6879      	ldr	r1, [r7, #4]
 8003c7e:	683a      	ldr	r2, [r7, #0]
 8003c80:	4613      	mov	r3, r2
 8003c82:	00db      	lsls	r3, r3, #3
 8003c84:	1a9b      	subs	r3, r3, r2
 8003c86:	009b      	lsls	r3, r3, #2
 8003c88:	440b      	add	r3, r1
 8003c8a:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8003c8e:	6819      	ldr	r1, [r3, #0]
 8003c90:	6878      	ldr	r0, [r7, #4]
 8003c92:	683a      	ldr	r2, [r7, #0]
 8003c94:	4613      	mov	r3, r2
 8003c96:	00db      	lsls	r3, r3, #3
 8003c98:	1a9b      	subs	r3, r3, r2
 8003c9a:	009b      	lsls	r3, r3, #2
 8003c9c:	4403      	add	r3, r0
 8003c9e:	f503 7301 	add.w	r3, r3, #516	@ 0x204
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4419      	add	r1, r3
 8003ca6:	6878      	ldr	r0, [r7, #4]
 8003ca8:	683a      	ldr	r2, [r7, #0]
 8003caa:	4613      	mov	r3, r2
 8003cac:	00db      	lsls	r3, r3, #3
 8003cae:	1a9b      	subs	r3, r3, r2
 8003cb0:	009b      	lsls	r3, r3, #2
 8003cb2:	4403      	add	r3, r0
 8003cb4:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8003cb8:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d114      	bne.n	8003cea <PCD_EP_OutXfrComplete_int+0x16a>
 8003cc0:	6879      	ldr	r1, [r7, #4]
 8003cc2:	683a      	ldr	r2, [r7, #0]
 8003cc4:	4613      	mov	r3, r2
 8003cc6:	00db      	lsls	r3, r3, #3
 8003cc8:	1a9b      	subs	r3, r3, r2
 8003cca:	009b      	lsls	r3, r3, #2
 8003ccc:	440b      	add	r3, r1
 8003cce:	f503 7304 	add.w	r3, r3, #528	@ 0x210
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d108      	bne.n	8003cea <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6818      	ldr	r0, [r3, #0]
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	f503 7371 	add.w	r3, r3, #964	@ 0x3c4
 8003ce2:	461a      	mov	r2, r3
 8003ce4:	2101      	movs	r1, #1
 8003ce6:	f002 fdb7 	bl	8006858 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	b2db      	uxtb	r3, r3
 8003cee:	4619      	mov	r1, r3
 8003cf0:	6878      	ldr	r0, [r7, #4]
 8003cf2:	f005 f83b 	bl	8008d6c <HAL_PCD_DataOutStageCallback>
 8003cf6:	e046      	b.n	8003d86 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	4a26      	ldr	r2, [pc, #152]	@ (8003d94 <PCD_EP_OutXfrComplete_int+0x214>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d124      	bne.n	8003d4a <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003d00:	68bb      	ldr	r3, [r7, #8]
 8003d02:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d00a      	beq.n	8003d20 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	015a      	lsls	r2, r3, #5
 8003d0e:	693b      	ldr	r3, [r7, #16]
 8003d10:	4413      	add	r3, r2
 8003d12:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d16:	461a      	mov	r2, r3
 8003d18:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003d1c:	6093      	str	r3, [r2, #8]
 8003d1e:	e032      	b.n	8003d86 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003d20:	68bb      	ldr	r3, [r7, #8]
 8003d22:	f003 0320 	and.w	r3, r3, #32
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d008      	beq.n	8003d3c <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	015a      	lsls	r2, r3, #5
 8003d2e:	693b      	ldr	r3, [r7, #16]
 8003d30:	4413      	add	r3, r2
 8003d32:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d36:	461a      	mov	r2, r3
 8003d38:	2320      	movs	r3, #32
 8003d3a:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	b2db      	uxtb	r3, r3
 8003d40:	4619      	mov	r1, r3
 8003d42:	6878      	ldr	r0, [r7, #4]
 8003d44:	f005 f812 	bl	8008d6c <HAL_PCD_DataOutStageCallback>
 8003d48:	e01d      	b.n	8003d86 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d114      	bne.n	8003d7a <PCD_EP_OutXfrComplete_int+0x1fa>
 8003d50:	6879      	ldr	r1, [r7, #4]
 8003d52:	683a      	ldr	r2, [r7, #0]
 8003d54:	4613      	mov	r3, r2
 8003d56:	00db      	lsls	r3, r3, #3
 8003d58:	1a9b      	subs	r3, r3, r2
 8003d5a:	009b      	lsls	r3, r3, #2
 8003d5c:	440b      	add	r3, r1
 8003d5e:	f503 7304 	add.w	r3, r3, #528	@ 0x210
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d108      	bne.n	8003d7a <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6818      	ldr	r0, [r3, #0]
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	f503 7371 	add.w	r3, r3, #964	@ 0x3c4
 8003d72:	461a      	mov	r2, r3
 8003d74:	2100      	movs	r1, #0
 8003d76:	f002 fd6f 	bl	8006858 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	b2db      	uxtb	r3, r3
 8003d7e:	4619      	mov	r1, r3
 8003d80:	6878      	ldr	r0, [r7, #4]
 8003d82:	f004 fff3 	bl	8008d6c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003d86:	2300      	movs	r3, #0
}
 8003d88:	4618      	mov	r0, r3
 8003d8a:	3718      	adds	r7, #24
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	bd80      	pop	{r7, pc}
 8003d90:	4f54300a 	.word	0x4f54300a
 8003d94:	4f54310a 	.word	0x4f54310a

08003d98 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b086      	sub	sp, #24
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
 8003da0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003da8:	697b      	ldr	r3, [r7, #20]
 8003daa:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003dac:	697b      	ldr	r3, [r7, #20]
 8003dae:	333c      	adds	r3, #60	@ 0x3c
 8003db0:	3304      	adds	r3, #4
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	015a      	lsls	r2, r3, #5
 8003dba:	693b      	ldr	r3, [r7, #16]
 8003dbc:	4413      	add	r3, r2
 8003dbe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003dc2:	689b      	ldr	r3, [r3, #8]
 8003dc4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	4a15      	ldr	r2, [pc, #84]	@ (8003e20 <PCD_EP_OutSetupPacket_int+0x88>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d90e      	bls.n	8003dec <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003dce:	68bb      	ldr	r3, [r7, #8]
 8003dd0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d009      	beq.n	8003dec <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	015a      	lsls	r2, r3, #5
 8003ddc:	693b      	ldr	r3, [r7, #16]
 8003dde:	4413      	add	r3, r2
 8003de0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003de4:	461a      	mov	r2, r3
 8003de6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003dea:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003dec:	6878      	ldr	r0, [r7, #4]
 8003dee:	f004 ffab 	bl	8008d48 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	4a0a      	ldr	r2, [pc, #40]	@ (8003e20 <PCD_EP_OutSetupPacket_int+0x88>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d90c      	bls.n	8003e14 <PCD_EP_OutSetupPacket_int+0x7c>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	691b      	ldr	r3, [r3, #16]
 8003dfe:	2b01      	cmp	r3, #1
 8003e00:	d108      	bne.n	8003e14 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6818      	ldr	r0, [r3, #0]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	f503 7371 	add.w	r3, r3, #964	@ 0x3c4
 8003e0c:	461a      	mov	r2, r3
 8003e0e:	2101      	movs	r1, #1
 8003e10:	f002 fd22 	bl	8006858 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003e14:	2300      	movs	r3, #0
}
 8003e16:	4618      	mov	r0, r3
 8003e18:	3718      	adds	r7, #24
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bd80      	pop	{r7, pc}
 8003e1e:	bf00      	nop
 8003e20:	4f54300a 	.word	0x4f54300a

08003e24 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003e24:	b480      	push	{r7}
 8003e26:	b085      	sub	sp, #20
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
 8003e2c:	460b      	mov	r3, r1
 8003e2e:	70fb      	strb	r3, [r7, #3]
 8003e30:	4613      	mov	r3, r2
 8003e32:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e3a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003e3c:	78fb      	ldrb	r3, [r7, #3]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d107      	bne.n	8003e52 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003e42:	883b      	ldrh	r3, [r7, #0]
 8003e44:	0419      	lsls	r1, r3, #16
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	68ba      	ldr	r2, [r7, #8]
 8003e4c:	430a      	orrs	r2, r1
 8003e4e:	629a      	str	r2, [r3, #40]	@ 0x28
 8003e50:	e028      	b.n	8003ea4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e58:	0c1b      	lsrs	r3, r3, #16
 8003e5a:	68ba      	ldr	r2, [r7, #8]
 8003e5c:	4413      	add	r3, r2
 8003e5e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003e60:	2300      	movs	r3, #0
 8003e62:	73fb      	strb	r3, [r7, #15]
 8003e64:	e00d      	b.n	8003e82 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681a      	ldr	r2, [r3, #0]
 8003e6a:	7bfb      	ldrb	r3, [r7, #15]
 8003e6c:	3340      	adds	r3, #64	@ 0x40
 8003e6e:	009b      	lsls	r3, r3, #2
 8003e70:	4413      	add	r3, r2
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	0c1b      	lsrs	r3, r3, #16
 8003e76:	68ba      	ldr	r2, [r7, #8]
 8003e78:	4413      	add	r3, r2
 8003e7a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003e7c:	7bfb      	ldrb	r3, [r7, #15]
 8003e7e:	3301      	adds	r3, #1
 8003e80:	73fb      	strb	r3, [r7, #15]
 8003e82:	7bfa      	ldrb	r2, [r7, #15]
 8003e84:	78fb      	ldrb	r3, [r7, #3]
 8003e86:	3b01      	subs	r3, #1
 8003e88:	429a      	cmp	r2, r3
 8003e8a:	d3ec      	bcc.n	8003e66 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003e8c:	883b      	ldrh	r3, [r7, #0]
 8003e8e:	0418      	lsls	r0, r3, #16
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6819      	ldr	r1, [r3, #0]
 8003e94:	78fb      	ldrb	r3, [r7, #3]
 8003e96:	3b01      	subs	r3, #1
 8003e98:	68ba      	ldr	r2, [r7, #8]
 8003e9a:	4302      	orrs	r2, r0
 8003e9c:	3340      	adds	r3, #64	@ 0x40
 8003e9e:	009b      	lsls	r3, r3, #2
 8003ea0:	440b      	add	r3, r1
 8003ea2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003ea4:	2300      	movs	r3, #0
}
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	3714      	adds	r7, #20
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb0:	4770      	bx	lr

08003eb2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003eb2:	b480      	push	{r7}
 8003eb4:	b083      	sub	sp, #12
 8003eb6:	af00      	add	r7, sp, #0
 8003eb8:	6078      	str	r0, [r7, #4]
 8003eba:	460b      	mov	r3, r1
 8003ebc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	887a      	ldrh	r2, [r7, #2]
 8003ec4:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003ec6:	2300      	movs	r3, #0
}
 8003ec8:	4618      	mov	r0, r3
 8003eca:	370c      	adds	r7, #12
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed2:	4770      	bx	lr

08003ed4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	b085      	sub	sp, #20
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2201      	movs	r2, #1
 8003ee6:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc
  hpcd->LPM_State = LPM_L0;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2200      	movs	r2, #0
 8003eee:	f883 23f4 	strb.w	r2, [r3, #1012]	@ 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	699b      	ldr	r3, [r3, #24]
 8003ef6:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f02:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f06:	f043 0303 	orr.w	r3, r3, #3
 8003f0a:	68fa      	ldr	r2, [r7, #12]
 8003f0c:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8003f0e:	2300      	movs	r3, #0
}
 8003f10:	4618      	mov	r0, r3
 8003f12:	3714      	adds	r7, #20
 8003f14:	46bd      	mov	sp, r7
 8003f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1a:	4770      	bx	lr

08003f1c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	b083      	sub	sp, #12
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
 8003f24:	460b      	mov	r3, r1
 8003f26:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003f28:	bf00      	nop
 8003f2a:	370c      	adds	r7, #12
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f32:	4770      	bx	lr

08003f34 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b084      	sub	sp, #16
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
 8003f3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d101      	bne.n	8003f48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f44:	2301      	movs	r3, #1
 8003f46:	e0cc      	b.n	80040e2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003f48:	4b68      	ldr	r3, [pc, #416]	@ (80040ec <HAL_RCC_ClockConfig+0x1b8>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f003 0307 	and.w	r3, r3, #7
 8003f50:	683a      	ldr	r2, [r7, #0]
 8003f52:	429a      	cmp	r2, r3
 8003f54:	d90c      	bls.n	8003f70 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f56:	4b65      	ldr	r3, [pc, #404]	@ (80040ec <HAL_RCC_ClockConfig+0x1b8>)
 8003f58:	683a      	ldr	r2, [r7, #0]
 8003f5a:	b2d2      	uxtb	r2, r2
 8003f5c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f5e:	4b63      	ldr	r3, [pc, #396]	@ (80040ec <HAL_RCC_ClockConfig+0x1b8>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f003 0307 	and.w	r3, r3, #7
 8003f66:	683a      	ldr	r2, [r7, #0]
 8003f68:	429a      	cmp	r2, r3
 8003f6a:	d001      	beq.n	8003f70 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	e0b8      	b.n	80040e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f003 0302 	and.w	r3, r3, #2
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d020      	beq.n	8003fbe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f003 0304 	and.w	r3, r3, #4
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d005      	beq.n	8003f94 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003f88:	4b59      	ldr	r3, [pc, #356]	@ (80040f0 <HAL_RCC_ClockConfig+0x1bc>)
 8003f8a:	689b      	ldr	r3, [r3, #8]
 8003f8c:	4a58      	ldr	r2, [pc, #352]	@ (80040f0 <HAL_RCC_ClockConfig+0x1bc>)
 8003f8e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003f92:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f003 0308 	and.w	r3, r3, #8
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d005      	beq.n	8003fac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003fa0:	4b53      	ldr	r3, [pc, #332]	@ (80040f0 <HAL_RCC_ClockConfig+0x1bc>)
 8003fa2:	689b      	ldr	r3, [r3, #8]
 8003fa4:	4a52      	ldr	r2, [pc, #328]	@ (80040f0 <HAL_RCC_ClockConfig+0x1bc>)
 8003fa6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003faa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003fac:	4b50      	ldr	r3, [pc, #320]	@ (80040f0 <HAL_RCC_ClockConfig+0x1bc>)
 8003fae:	689b      	ldr	r3, [r3, #8]
 8003fb0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	689b      	ldr	r3, [r3, #8]
 8003fb8:	494d      	ldr	r1, [pc, #308]	@ (80040f0 <HAL_RCC_ClockConfig+0x1bc>)
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f003 0301 	and.w	r3, r3, #1
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d044      	beq.n	8004054 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	685b      	ldr	r3, [r3, #4]
 8003fce:	2b01      	cmp	r3, #1
 8003fd0:	d107      	bne.n	8003fe2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fd2:	4b47      	ldr	r3, [pc, #284]	@ (80040f0 <HAL_RCC_ClockConfig+0x1bc>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d119      	bne.n	8004012 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003fde:	2301      	movs	r3, #1
 8003fe0:	e07f      	b.n	80040e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	2b02      	cmp	r3, #2
 8003fe8:	d003      	beq.n	8003ff2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003fee:	2b03      	cmp	r3, #3
 8003ff0:	d107      	bne.n	8004002 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ff2:	4b3f      	ldr	r3, [pc, #252]	@ (80040f0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d109      	bne.n	8004012 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ffe:	2301      	movs	r3, #1
 8004000:	e06f      	b.n	80040e2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004002:	4b3b      	ldr	r3, [pc, #236]	@ (80040f0 <HAL_RCC_ClockConfig+0x1bc>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f003 0302 	and.w	r3, r3, #2
 800400a:	2b00      	cmp	r3, #0
 800400c:	d101      	bne.n	8004012 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800400e:	2301      	movs	r3, #1
 8004010:	e067      	b.n	80040e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004012:	4b37      	ldr	r3, [pc, #220]	@ (80040f0 <HAL_RCC_ClockConfig+0x1bc>)
 8004014:	689b      	ldr	r3, [r3, #8]
 8004016:	f023 0203 	bic.w	r2, r3, #3
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	4934      	ldr	r1, [pc, #208]	@ (80040f0 <HAL_RCC_ClockConfig+0x1bc>)
 8004020:	4313      	orrs	r3, r2
 8004022:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004024:	f7fd f970 	bl	8001308 <HAL_GetTick>
 8004028:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800402a:	e00a      	b.n	8004042 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800402c:	f7fd f96c 	bl	8001308 <HAL_GetTick>
 8004030:	4602      	mov	r2, r0
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	1ad3      	subs	r3, r2, r3
 8004036:	f241 3288 	movw	r2, #5000	@ 0x1388
 800403a:	4293      	cmp	r3, r2
 800403c:	d901      	bls.n	8004042 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800403e:	2303      	movs	r3, #3
 8004040:	e04f      	b.n	80040e2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004042:	4b2b      	ldr	r3, [pc, #172]	@ (80040f0 <HAL_RCC_ClockConfig+0x1bc>)
 8004044:	689b      	ldr	r3, [r3, #8]
 8004046:	f003 020c 	and.w	r2, r3, #12
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	009b      	lsls	r3, r3, #2
 8004050:	429a      	cmp	r2, r3
 8004052:	d1eb      	bne.n	800402c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004054:	4b25      	ldr	r3, [pc, #148]	@ (80040ec <HAL_RCC_ClockConfig+0x1b8>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f003 0307 	and.w	r3, r3, #7
 800405c:	683a      	ldr	r2, [r7, #0]
 800405e:	429a      	cmp	r2, r3
 8004060:	d20c      	bcs.n	800407c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004062:	4b22      	ldr	r3, [pc, #136]	@ (80040ec <HAL_RCC_ClockConfig+0x1b8>)
 8004064:	683a      	ldr	r2, [r7, #0]
 8004066:	b2d2      	uxtb	r2, r2
 8004068:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800406a:	4b20      	ldr	r3, [pc, #128]	@ (80040ec <HAL_RCC_ClockConfig+0x1b8>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f003 0307 	and.w	r3, r3, #7
 8004072:	683a      	ldr	r2, [r7, #0]
 8004074:	429a      	cmp	r2, r3
 8004076:	d001      	beq.n	800407c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004078:	2301      	movs	r3, #1
 800407a:	e032      	b.n	80040e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f003 0304 	and.w	r3, r3, #4
 8004084:	2b00      	cmp	r3, #0
 8004086:	d008      	beq.n	800409a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004088:	4b19      	ldr	r3, [pc, #100]	@ (80040f0 <HAL_RCC_ClockConfig+0x1bc>)
 800408a:	689b      	ldr	r3, [r3, #8]
 800408c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	68db      	ldr	r3, [r3, #12]
 8004094:	4916      	ldr	r1, [pc, #88]	@ (80040f0 <HAL_RCC_ClockConfig+0x1bc>)
 8004096:	4313      	orrs	r3, r2
 8004098:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f003 0308 	and.w	r3, r3, #8
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d009      	beq.n	80040ba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80040a6:	4b12      	ldr	r3, [pc, #72]	@ (80040f0 <HAL_RCC_ClockConfig+0x1bc>)
 80040a8:	689b      	ldr	r3, [r3, #8]
 80040aa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	691b      	ldr	r3, [r3, #16]
 80040b2:	00db      	lsls	r3, r3, #3
 80040b4:	490e      	ldr	r1, [pc, #56]	@ (80040f0 <HAL_RCC_ClockConfig+0x1bc>)
 80040b6:	4313      	orrs	r3, r2
 80040b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80040ba:	f000 f821 	bl	8004100 <HAL_RCC_GetSysClockFreq>
 80040be:	4602      	mov	r2, r0
 80040c0:	4b0b      	ldr	r3, [pc, #44]	@ (80040f0 <HAL_RCC_ClockConfig+0x1bc>)
 80040c2:	689b      	ldr	r3, [r3, #8]
 80040c4:	091b      	lsrs	r3, r3, #4
 80040c6:	f003 030f 	and.w	r3, r3, #15
 80040ca:	490a      	ldr	r1, [pc, #40]	@ (80040f4 <HAL_RCC_ClockConfig+0x1c0>)
 80040cc:	5ccb      	ldrb	r3, [r1, r3]
 80040ce:	fa22 f303 	lsr.w	r3, r2, r3
 80040d2:	4a09      	ldr	r2, [pc, #36]	@ (80040f8 <HAL_RCC_ClockConfig+0x1c4>)
 80040d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80040d6:	4b09      	ldr	r3, [pc, #36]	@ (80040fc <HAL_RCC_ClockConfig+0x1c8>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4618      	mov	r0, r3
 80040dc:	f7fd f8d0 	bl	8001280 <HAL_InitTick>

  return HAL_OK;
 80040e0:	2300      	movs	r3, #0
}
 80040e2:	4618      	mov	r0, r3
 80040e4:	3710      	adds	r7, #16
 80040e6:	46bd      	mov	sp, r7
 80040e8:	bd80      	pop	{r7, pc}
 80040ea:	bf00      	nop
 80040ec:	40023c00 	.word	0x40023c00
 80040f0:	40023800 	.word	0x40023800
 80040f4:	08009e48 	.word	0x08009e48
 80040f8:	20000000 	.word	0x20000000
 80040fc:	20000004 	.word	0x20000004

08004100 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004100:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004104:	b094      	sub	sp, #80	@ 0x50
 8004106:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004108:	2300      	movs	r3, #0
 800410a:	647b      	str	r3, [r7, #68]	@ 0x44
 800410c:	2300      	movs	r3, #0
 800410e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004110:	2300      	movs	r3, #0
 8004112:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004114:	2300      	movs	r3, #0
 8004116:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004118:	4b79      	ldr	r3, [pc, #484]	@ (8004300 <HAL_RCC_GetSysClockFreq+0x200>)
 800411a:	689b      	ldr	r3, [r3, #8]
 800411c:	f003 030c 	and.w	r3, r3, #12
 8004120:	2b08      	cmp	r3, #8
 8004122:	d00d      	beq.n	8004140 <HAL_RCC_GetSysClockFreq+0x40>
 8004124:	2b08      	cmp	r3, #8
 8004126:	f200 80e1 	bhi.w	80042ec <HAL_RCC_GetSysClockFreq+0x1ec>
 800412a:	2b00      	cmp	r3, #0
 800412c:	d002      	beq.n	8004134 <HAL_RCC_GetSysClockFreq+0x34>
 800412e:	2b04      	cmp	r3, #4
 8004130:	d003      	beq.n	800413a <HAL_RCC_GetSysClockFreq+0x3a>
 8004132:	e0db      	b.n	80042ec <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004134:	4b73      	ldr	r3, [pc, #460]	@ (8004304 <HAL_RCC_GetSysClockFreq+0x204>)
 8004136:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8004138:	e0db      	b.n	80042f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800413a:	4b73      	ldr	r3, [pc, #460]	@ (8004308 <HAL_RCC_GetSysClockFreq+0x208>)
 800413c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800413e:	e0d8      	b.n	80042f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004140:	4b6f      	ldr	r3, [pc, #444]	@ (8004300 <HAL_RCC_GetSysClockFreq+0x200>)
 8004142:	685b      	ldr	r3, [r3, #4]
 8004144:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004148:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800414a:	4b6d      	ldr	r3, [pc, #436]	@ (8004300 <HAL_RCC_GetSysClockFreq+0x200>)
 800414c:	685b      	ldr	r3, [r3, #4]
 800414e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004152:	2b00      	cmp	r3, #0
 8004154:	d063      	beq.n	800421e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004156:	4b6a      	ldr	r3, [pc, #424]	@ (8004300 <HAL_RCC_GetSysClockFreq+0x200>)
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	099b      	lsrs	r3, r3, #6
 800415c:	2200      	movs	r2, #0
 800415e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004160:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004162:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004164:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004168:	633b      	str	r3, [r7, #48]	@ 0x30
 800416a:	2300      	movs	r3, #0
 800416c:	637b      	str	r3, [r7, #52]	@ 0x34
 800416e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004172:	4622      	mov	r2, r4
 8004174:	462b      	mov	r3, r5
 8004176:	f04f 0000 	mov.w	r0, #0
 800417a:	f04f 0100 	mov.w	r1, #0
 800417e:	0159      	lsls	r1, r3, #5
 8004180:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004184:	0150      	lsls	r0, r2, #5
 8004186:	4602      	mov	r2, r0
 8004188:	460b      	mov	r3, r1
 800418a:	4621      	mov	r1, r4
 800418c:	1a51      	subs	r1, r2, r1
 800418e:	6139      	str	r1, [r7, #16]
 8004190:	4629      	mov	r1, r5
 8004192:	eb63 0301 	sbc.w	r3, r3, r1
 8004196:	617b      	str	r3, [r7, #20]
 8004198:	f04f 0200 	mov.w	r2, #0
 800419c:	f04f 0300 	mov.w	r3, #0
 80041a0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80041a4:	4659      	mov	r1, fp
 80041a6:	018b      	lsls	r3, r1, #6
 80041a8:	4651      	mov	r1, sl
 80041aa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80041ae:	4651      	mov	r1, sl
 80041b0:	018a      	lsls	r2, r1, #6
 80041b2:	4651      	mov	r1, sl
 80041b4:	ebb2 0801 	subs.w	r8, r2, r1
 80041b8:	4659      	mov	r1, fp
 80041ba:	eb63 0901 	sbc.w	r9, r3, r1
 80041be:	f04f 0200 	mov.w	r2, #0
 80041c2:	f04f 0300 	mov.w	r3, #0
 80041c6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80041ca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80041ce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80041d2:	4690      	mov	r8, r2
 80041d4:	4699      	mov	r9, r3
 80041d6:	4623      	mov	r3, r4
 80041d8:	eb18 0303 	adds.w	r3, r8, r3
 80041dc:	60bb      	str	r3, [r7, #8]
 80041de:	462b      	mov	r3, r5
 80041e0:	eb49 0303 	adc.w	r3, r9, r3
 80041e4:	60fb      	str	r3, [r7, #12]
 80041e6:	f04f 0200 	mov.w	r2, #0
 80041ea:	f04f 0300 	mov.w	r3, #0
 80041ee:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80041f2:	4629      	mov	r1, r5
 80041f4:	024b      	lsls	r3, r1, #9
 80041f6:	4621      	mov	r1, r4
 80041f8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80041fc:	4621      	mov	r1, r4
 80041fe:	024a      	lsls	r2, r1, #9
 8004200:	4610      	mov	r0, r2
 8004202:	4619      	mov	r1, r3
 8004204:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004206:	2200      	movs	r2, #0
 8004208:	62bb      	str	r3, [r7, #40]	@ 0x28
 800420a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800420c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004210:	f7fc f802 	bl	8000218 <__aeabi_uldivmod>
 8004214:	4602      	mov	r2, r0
 8004216:	460b      	mov	r3, r1
 8004218:	4613      	mov	r3, r2
 800421a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800421c:	e058      	b.n	80042d0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800421e:	4b38      	ldr	r3, [pc, #224]	@ (8004300 <HAL_RCC_GetSysClockFreq+0x200>)
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	099b      	lsrs	r3, r3, #6
 8004224:	2200      	movs	r2, #0
 8004226:	4618      	mov	r0, r3
 8004228:	4611      	mov	r1, r2
 800422a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800422e:	623b      	str	r3, [r7, #32]
 8004230:	2300      	movs	r3, #0
 8004232:	627b      	str	r3, [r7, #36]	@ 0x24
 8004234:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004238:	4642      	mov	r2, r8
 800423a:	464b      	mov	r3, r9
 800423c:	f04f 0000 	mov.w	r0, #0
 8004240:	f04f 0100 	mov.w	r1, #0
 8004244:	0159      	lsls	r1, r3, #5
 8004246:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800424a:	0150      	lsls	r0, r2, #5
 800424c:	4602      	mov	r2, r0
 800424e:	460b      	mov	r3, r1
 8004250:	4641      	mov	r1, r8
 8004252:	ebb2 0a01 	subs.w	sl, r2, r1
 8004256:	4649      	mov	r1, r9
 8004258:	eb63 0b01 	sbc.w	fp, r3, r1
 800425c:	f04f 0200 	mov.w	r2, #0
 8004260:	f04f 0300 	mov.w	r3, #0
 8004264:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004268:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800426c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004270:	ebb2 040a 	subs.w	r4, r2, sl
 8004274:	eb63 050b 	sbc.w	r5, r3, fp
 8004278:	f04f 0200 	mov.w	r2, #0
 800427c:	f04f 0300 	mov.w	r3, #0
 8004280:	00eb      	lsls	r3, r5, #3
 8004282:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004286:	00e2      	lsls	r2, r4, #3
 8004288:	4614      	mov	r4, r2
 800428a:	461d      	mov	r5, r3
 800428c:	4643      	mov	r3, r8
 800428e:	18e3      	adds	r3, r4, r3
 8004290:	603b      	str	r3, [r7, #0]
 8004292:	464b      	mov	r3, r9
 8004294:	eb45 0303 	adc.w	r3, r5, r3
 8004298:	607b      	str	r3, [r7, #4]
 800429a:	f04f 0200 	mov.w	r2, #0
 800429e:	f04f 0300 	mov.w	r3, #0
 80042a2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80042a6:	4629      	mov	r1, r5
 80042a8:	028b      	lsls	r3, r1, #10
 80042aa:	4621      	mov	r1, r4
 80042ac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80042b0:	4621      	mov	r1, r4
 80042b2:	028a      	lsls	r2, r1, #10
 80042b4:	4610      	mov	r0, r2
 80042b6:	4619      	mov	r1, r3
 80042b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80042ba:	2200      	movs	r2, #0
 80042bc:	61bb      	str	r3, [r7, #24]
 80042be:	61fa      	str	r2, [r7, #28]
 80042c0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80042c4:	f7fb ffa8 	bl	8000218 <__aeabi_uldivmod>
 80042c8:	4602      	mov	r2, r0
 80042ca:	460b      	mov	r3, r1
 80042cc:	4613      	mov	r3, r2
 80042ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80042d0:	4b0b      	ldr	r3, [pc, #44]	@ (8004300 <HAL_RCC_GetSysClockFreq+0x200>)
 80042d2:	685b      	ldr	r3, [r3, #4]
 80042d4:	0c1b      	lsrs	r3, r3, #16
 80042d6:	f003 0303 	and.w	r3, r3, #3
 80042da:	3301      	adds	r3, #1
 80042dc:	005b      	lsls	r3, r3, #1
 80042de:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 80042e0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80042e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80042e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80042e8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80042ea:	e002      	b.n	80042f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80042ec:	4b05      	ldr	r3, [pc, #20]	@ (8004304 <HAL_RCC_GetSysClockFreq+0x204>)
 80042ee:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80042f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80042f2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80042f4:	4618      	mov	r0, r3
 80042f6:	3750      	adds	r7, #80	@ 0x50
 80042f8:	46bd      	mov	sp, r7
 80042fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80042fe:	bf00      	nop
 8004300:	40023800 	.word	0x40023800
 8004304:	00f42400 	.word	0x00f42400
 8004308:	007a1200 	.word	0x007a1200

0800430c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800430c:	b480      	push	{r7}
 800430e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004310:	4b03      	ldr	r3, [pc, #12]	@ (8004320 <HAL_RCC_GetHCLKFreq+0x14>)
 8004312:	681b      	ldr	r3, [r3, #0]
}
 8004314:	4618      	mov	r0, r3
 8004316:	46bd      	mov	sp, r7
 8004318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431c:	4770      	bx	lr
 800431e:	bf00      	nop
 8004320:	20000000 	.word	0x20000000

08004324 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004328:	f7ff fff0 	bl	800430c <HAL_RCC_GetHCLKFreq>
 800432c:	4602      	mov	r2, r0
 800432e:	4b05      	ldr	r3, [pc, #20]	@ (8004344 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004330:	689b      	ldr	r3, [r3, #8]
 8004332:	0a9b      	lsrs	r3, r3, #10
 8004334:	f003 0307 	and.w	r3, r3, #7
 8004338:	4903      	ldr	r1, [pc, #12]	@ (8004348 <HAL_RCC_GetPCLK1Freq+0x24>)
 800433a:	5ccb      	ldrb	r3, [r1, r3]
 800433c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004340:	4618      	mov	r0, r3
 8004342:	bd80      	pop	{r7, pc}
 8004344:	40023800 	.word	0x40023800
 8004348:	08009e58 	.word	0x08009e58

0800434c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004350:	f7ff ffdc 	bl	800430c <HAL_RCC_GetHCLKFreq>
 8004354:	4602      	mov	r2, r0
 8004356:	4b05      	ldr	r3, [pc, #20]	@ (800436c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004358:	689b      	ldr	r3, [r3, #8]
 800435a:	0b5b      	lsrs	r3, r3, #13
 800435c:	f003 0307 	and.w	r3, r3, #7
 8004360:	4903      	ldr	r1, [pc, #12]	@ (8004370 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004362:	5ccb      	ldrb	r3, [r1, r3]
 8004364:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004368:	4618      	mov	r0, r3
 800436a:	bd80      	pop	{r7, pc}
 800436c:	40023800 	.word	0x40023800
 8004370:	08009e58 	.word	0x08009e58

08004374 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b088      	sub	sp, #32
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800437c:	2300      	movs	r3, #0
 800437e:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg1 = 0U;
 8004380:	2300      	movs	r3, #0
 8004382:	617b      	str	r3, [r7, #20]
#if defined(STM32F413xx) || defined(STM32F423xx)
  uint32_t plli2sq = 0U;
 8004384:	2300      	movs	r3, #0
 8004386:	613b      	str	r3, [r7, #16]
#endif /* STM32F413xx || STM32F423xx */
  uint32_t plli2sused = 0U;
 8004388:	2300      	movs	r3, #0
 800438a:	61fb      	str	r3, [r7, #28]

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S APB1 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f003 0301 	and.w	r3, r3, #1
 8004394:	2b00      	cmp	r3, #0
 8004396:	d010      	beq.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0x46>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8004398:	4b7a      	ldr	r3, [pc, #488]	@ (8004584 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800439a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800439e:	f023 62c0 	bic.w	r2, r3, #100663296	@ 0x6000000
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	69db      	ldr	r3, [r3, #28]
 80043a6:	4977      	ldr	r1, [pc, #476]	@ (8004584 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80043a8:	4313      	orrs	r3, r2
 80043aa:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	69db      	ldr	r3, [r3, #28]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d101      	bne.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0x46>
    {
      plli2sused = 1U;
 80043b6:	2301      	movs	r3, #1
 80043b8:	61fb      	str	r3, [r7, #28]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------------- I2S APB2 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f003 0302 	and.w	r3, r3, #2
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d010      	beq.n	80043e8 <HAL_RCCEx_PeriphCLKConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 80043c6:	4b6f      	ldr	r3, [pc, #444]	@ (8004584 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80043c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80043cc:	f023 52c0 	bic.w	r2, r3, #402653184	@ 0x18000000
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6a1b      	ldr	r3, [r3, #32]
 80043d4:	496b      	ldr	r1, [pc, #428]	@ (8004584 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80043d6:	4313      	orrs	r3, r2
 80043d8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6a1b      	ldr	r3, [r3, #32]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d101      	bne.n	80043e8 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      plli2sused = 1U;
 80043e4:	2301      	movs	r3, #1
 80043e6:	61fb      	str	r3, [r7, #28]
  }
  /*--------------------------------------------------------------------------*/

#if defined(STM32F413xx) || defined(STM32F423xx)
  /*----------------------- SAI1 Block A configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == (RCC_PERIPHCLK_SAIA))
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d022      	beq.n	800443a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAIACLKSOURCE(PeriphClkInit->SaiAClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI_BLOCKACLKSOURCE_CONFIG(PeriphClkInit->SaiAClockSelection);
 80043f4:	4b63      	ldr	r3, [pc, #396]	@ (8004584 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80043f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80043fa:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004402:	4960      	ldr	r1, [pc, #384]	@ (8004584 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004404:	4313      	orrs	r3, r2
 8004406:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800440e:	2b00      	cmp	r3, #0
 8004410:	d101      	bne.n	8004416 <HAL_RCCEx_PeriphCLKConfig+0xa2>
    {
      plli2sused = 1U;
 8004412:	2301      	movs	r3, #1
 8004414:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLR)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800441a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800441e:	d10c      	bne.n	800443a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      /* Check for PLL/DIVR parameters */
      assert_param(IS_RCC_PLL_DIVR_VALUE(PeriphClkInit->PLLDivR));

      /* SAI_CLK_x = SAI_CLK(first level)/PLLDIVR */
      __HAL_RCC_PLL_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLDivR);
 8004420:	4b58      	ldr	r3, [pc, #352]	@ (8004584 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004422:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004426:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	695b      	ldr	r3, [r3, #20]
 800442e:	3b01      	subs	r3, #1
 8004430:	021b      	lsls	r3, r3, #8
 8004432:	4954      	ldr	r1, [pc, #336]	@ (8004584 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004434:	4313      	orrs	r3, r2
 8004436:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------- SAI1 Block B configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == (RCC_PERIPHCLK_SAIB))
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004442:	2b00      	cmp	r3, #0
 8004444:	d022      	beq.n	800448c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAIBCLKSOURCE(PeriphClkInit->SaiBClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI_BLOCKBCLKSOURCE_CONFIG(PeriphClkInit->SaiBClockSelection);
 8004446:	4b4f      	ldr	r3, [pc, #316]	@ (8004584 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004448:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800444c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004454:	494b      	ldr	r1, [pc, #300]	@ (8004584 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004456:	4313      	orrs	r3, r2
 8004458:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004460:	2b00      	cmp	r3, #0
 8004462:	d101      	bne.n	8004468 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8004464:	2301      	movs	r3, #1
 8004466:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLR)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800446c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004470:	d10c      	bne.n	800448c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      /* Check for PLL/DIVR parameters */
      assert_param(IS_RCC_PLL_DIVR_VALUE(PeriphClkInit->PLLDivR));

      /* SAI_CLK_x = SAI_CLK(first level)/PLLDIVR */
      __HAL_RCC_PLL_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLDivR);
 8004472:	4b44      	ldr	r3, [pc, #272]	@ (8004584 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004474:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004478:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	695b      	ldr	r3, [r3, #20]
 8004480:	3b01      	subs	r3, #1
 8004482:	021b      	lsls	r3, r3, #8
 8004484:	493f      	ldr	r1, [pc, #252]	@ (8004584 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004486:	4313      	orrs	r3, r2
 8004488:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  /*------------------------------------ RTC configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f003 0308 	and.w	r3, r3, #8
 8004494:	2b00      	cmp	r3, #0
 8004496:	f000 808a 	beq.w	80045ae <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800449a:	2300      	movs	r3, #0
 800449c:	60fb      	str	r3, [r7, #12]
 800449e:	4b39      	ldr	r3, [pc, #228]	@ (8004584 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80044a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044a2:	4a38      	ldr	r2, [pc, #224]	@ (8004584 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80044a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80044a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80044aa:	4b36      	ldr	r3, [pc, #216]	@ (8004584 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80044ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80044b2:	60fb      	str	r3, [r7, #12]
 80044b4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80044b6:	4b34      	ldr	r3, [pc, #208]	@ (8004588 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4a33      	ldr	r2, [pc, #204]	@ (8004588 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 80044bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80044c0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80044c2:	f7fc ff21 	bl	8001308 <HAL_GetTick>
 80044c6:	61b8      	str	r0, [r7, #24]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80044c8:	e008      	b.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0x168>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80044ca:	f7fc ff1d 	bl	8001308 <HAL_GetTick>
 80044ce:	4602      	mov	r2, r0
 80044d0:	69bb      	ldr	r3, [r7, #24]
 80044d2:	1ad3      	subs	r3, r2, r3
 80044d4:	2b02      	cmp	r3, #2
 80044d6:	d901      	bls.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0x168>
      {
        return HAL_TIMEOUT;
 80044d8:	2303      	movs	r3, #3
 80044da:	e1d1      	b.n	8004880 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80044dc:	4b2a      	ldr	r3, [pc, #168]	@ (8004588 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d0f0      	beq.n	80044ca <HAL_RCCEx_PeriphCLKConfig+0x156>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80044e8:	4b26      	ldr	r3, [pc, #152]	@ (8004584 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80044ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044ec:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80044f0:	617b      	str	r3, [r7, #20]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80044f2:	697b      	ldr	r3, [r7, #20]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d02f      	beq.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044fc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004500:	697a      	ldr	r2, [r7, #20]
 8004502:	429a      	cmp	r2, r3
 8004504:	d028      	beq.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004506:	4b1f      	ldr	r3, [pc, #124]	@ (8004584 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004508:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800450a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800450e:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004510:	4b1e      	ldr	r3, [pc, #120]	@ (800458c <HAL_RCCEx_PeriphCLKConfig+0x218>)
 8004512:	2201      	movs	r2, #1
 8004514:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004516:	4b1d      	ldr	r3, [pc, #116]	@ (800458c <HAL_RCCEx_PeriphCLKConfig+0x218>)
 8004518:	2200      	movs	r2, #0
 800451a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800451c:	4a19      	ldr	r2, [pc, #100]	@ (8004584 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800451e:	697b      	ldr	r3, [r7, #20]
 8004520:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004522:	4b18      	ldr	r3, [pc, #96]	@ (8004584 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004524:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004526:	f003 0301 	and.w	r3, r3, #1
 800452a:	2b01      	cmp	r3, #1
 800452c:	d114      	bne.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800452e:	f7fc feeb 	bl	8001308 <HAL_GetTick>
 8004532:	61b8      	str	r0, [r7, #24]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004534:	e00a      	b.n	800454c <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004536:	f7fc fee7 	bl	8001308 <HAL_GetTick>
 800453a:	4602      	mov	r2, r0
 800453c:	69bb      	ldr	r3, [r7, #24]
 800453e:	1ad3      	subs	r3, r2, r3
 8004540:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004544:	4293      	cmp	r3, r2
 8004546:	d901      	bls.n	800454c <HAL_RCCEx_PeriphCLKConfig+0x1d8>
          {
            return HAL_TIMEOUT;
 8004548:	2303      	movs	r3, #3
 800454a:	e199      	b.n	8004880 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800454c:	4b0d      	ldr	r3, [pc, #52]	@ (8004584 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800454e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004550:	f003 0302 	and.w	r3, r3, #2
 8004554:	2b00      	cmp	r3, #0
 8004556:	d0ee      	beq.n	8004536 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800455c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004560:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004564:	d114      	bne.n	8004590 <HAL_RCCEx_PeriphCLKConfig+0x21c>
 8004566:	4b07      	ldr	r3, [pc, #28]	@ (8004584 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004568:	689b      	ldr	r3, [r3, #8]
 800456a:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004572:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8004576:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800457a:	4902      	ldr	r1, [pc, #8]	@ (8004584 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800457c:	4313      	orrs	r3, r2
 800457e:	608b      	str	r3, [r1, #8]
 8004580:	e00c      	b.n	800459c <HAL_RCCEx_PeriphCLKConfig+0x228>
 8004582:	bf00      	nop
 8004584:	40023800 	.word	0x40023800
 8004588:	40007000 	.word	0x40007000
 800458c:	42470e40 	.word	0x42470e40
 8004590:	4b89      	ldr	r3, [pc, #548]	@ (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8004592:	689b      	ldr	r3, [r3, #8]
 8004594:	4a88      	ldr	r2, [pc, #544]	@ (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8004596:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800459a:	6093      	str	r3, [r2, #8]
 800459c:	4b86      	ldr	r3, [pc, #536]	@ (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800459e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80045a8:	4983      	ldr	r1, [pc, #524]	@ (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80045aa:	4313      	orrs	r3, r2
 80045ac:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------ TIM configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f003 0304 	and.w	r3, r3, #4
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d004      	beq.n	80045c4 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	f893 2054 	ldrb.w	r2, [r3, #84]	@ 0x54
 80045c0:	4b7e      	ldr	r3, [pc, #504]	@ (80047bc <HAL_RCCEx_PeriphCLKConfig+0x448>)
 80045c2:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- FMPI2C1 Configuration --------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f003 0310 	and.w	r3, r3, #16
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d00a      	beq.n	80045e6 <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 80045d0:	4b79      	ldr	r3, [pc, #484]	@ (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80045d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80045d6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045de:	4976      	ldr	r1, [pc, #472]	@ (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80045e0:	4313      	orrs	r3, r2
 80045e2:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- CLK48 Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f003 0320 	and.w	r3, r3, #32
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d011      	beq.n	8004616 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80045f2:	4b71      	ldr	r3, [pc, #452]	@ (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80045f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80045f8:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004600:	496d      	ldr	r1, [pc, #436]	@ (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8004602:	4313      	orrs	r3, r2
 8004604:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94

    /* Enable the PLLI2S when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800460c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004610:	d101      	bne.n	8004616 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
    {
      plli2sused = 1U;
 8004612:	2301      	movs	r3, #1
 8004614:	61fb      	str	r3, [r7, #28]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- SDIO Configuration -----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800461e:	2b00      	cmp	r3, #0
 8004620:	d00a      	beq.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8004622:	4b65      	ldr	r3, [pc, #404]	@ (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8004624:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004628:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004630:	4961      	ldr	r1, [pc, #388]	@ (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8004632:	4313      	orrs	r3, r2
 8004634:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  /*--------------------------------------------------------------------------*/

  /*-------------------------------------- PLLI2S Configuration --------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : I2S on APB1 or
     I2S on APB2*/
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8004638:	69fb      	ldr	r3, [r7, #28]
 800463a:	2b01      	cmp	r3, #1
 800463c:	d004      	beq.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	2b80      	cmp	r3, #128	@ 0x80
 8004644:	f040 80c6 	bne.w	80047d4 <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004648:	4b5d      	ldr	r3, [pc, #372]	@ (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 800464a:	2200      	movs	r2, #0
 800464c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800464e:	f7fc fe5b 	bl	8001308 <HAL_GetTick>
 8004652:	61b8      	str	r0, [r7, #24]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004654:	e008      	b.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004656:	f7fc fe57 	bl	8001308 <HAL_GetTick>
 800465a:	4602      	mov	r2, r0
 800465c:	69bb      	ldr	r3, [r7, #24]
 800465e:	1ad3      	subs	r3, r2, r3
 8004660:	2b02      	cmp	r3, #2
 8004662:	d901      	bls.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004664:	2303      	movs	r3, #3
 8004666:	e10b      	b.n	8004880 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004668:	4b53      	ldr	r3, [pc, #332]	@ (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004670:	2b00      	cmp	r3, #0
 8004672:	d1f0      	bne.n	8004656 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SCLKSOURCE(PeriphClkInit->PLLI2SSelection));
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
    /*-------------------- Set the PLL I2S clock -----------------------------*/
    __HAL_RCC_PLL_I2S_CONFIG(PeriphClkInit->PLLI2SSelection);
 8004674:	4a53      	ldr	r2, [pc, #332]	@ (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800467a:	6013      	str	r3, [r2, #0]

    /*------- In Case of PLLI2S is selected as source clock for I2S ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f003 0301 	and.w	r3, r3, #1
 8004684:	2b00      	cmp	r3, #0
 8004686:	d003      	beq.n	8004690 <HAL_RCCEx_PeriphCLKConfig+0x31c>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	69db      	ldr	r3, [r3, #28]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d023      	beq.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8004698:	2b00      	cmp	r3, #0
 800469a:	d003      	beq.n	80046a4 <HAL_RCCEx_PeriphCLKConfig+0x330>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6a1b      	ldr	r3, [r3, #32]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d019      	beq.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f003 0320 	and.w	r3, r3, #32
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d004      	beq.n	80046ba <HAL_RCCEx_PeriphCLKConfig+0x346>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046b4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80046b8:	d00e      	beq.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d019      	beq.n	80046fa <HAL_RCCEx_PeriphCLKConfig+0x386>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d115      	bne.n	80046fa <HAL_RCCEx_PeriphCLKConfig+0x386>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046d2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80046d6:	d110      	bne.n	80046fa <HAL_RCCEx_PeriphCLKConfig+0x386>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	685a      	ldr	r2, [r3, #4]
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	689b      	ldr	r3, [r3, #8]
 80046e0:	019b      	lsls	r3, r3, #6
 80046e2:	431a      	orrs	r2, r3
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	68db      	ldr	r3, [r3, #12]
 80046e8:	061b      	lsls	r3, r3, #24
 80046ea:	431a      	orrs	r2, r3
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	691b      	ldr	r3, [r3, #16]
 80046f0:	071b      	lsls	r3, r3, #28
 80046f2:	4931      	ldr	r1, [pc, #196]	@ (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80046f4:	4313      	orrs	r3, r2
 80046f6:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

#if defined(STM32F413xx) || defined(STM32F423xx)
    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == RCC_PERIPHCLK_SAIA) && (PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)) ||
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004702:	2b00      	cmp	r3, #0
 8004704:	d003      	beq.n	800470e <HAL_RCCEx_PeriphCLKConfig+0x39a>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800470a:	2b00      	cmp	r3, #0
 800470c:	d009      	beq.n	8004722 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == RCC_PERIPHCLK_SAIB) && (PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)))
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == RCC_PERIPHCLK_SAIA) && (PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)) ||
 8004716:	2b00      	cmp	r3, #0
 8004718:	d026      	beq.n	8004768 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == RCC_PERIPHCLK_SAIB) && (PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)))
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800471e:	2b00      	cmp	r3, #0
 8004720:	d122      	bne.n	8004768 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Check for PLLI2S/DIVR parameters */
      assert_param(IS_RCC_PLLI2S_DIVR_VALUE(PeriphClkInit->PLLI2SDivR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004722:	4b25      	ldr	r3, [pc, #148]	@ (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8004724:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004728:	0e1b      	lsrs	r3, r3, #24
 800472a:	f003 030f 	and.w	r3, r3, #15
 800472e:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	685a      	ldr	r2, [r3, #4]
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	689b      	ldr	r3, [r3, #8]
 8004738:	019b      	lsls	r3, r3, #6
 800473a:	431a      	orrs	r2, r3
 800473c:	693b      	ldr	r3, [r7, #16]
 800473e:	061b      	lsls	r3, r3, #24
 8004740:	431a      	orrs	r2, r3
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	691b      	ldr	r3, [r3, #16]
 8004746:	071b      	lsls	r3, r3, #28
 8004748:	491b      	ldr	r1, [pc, #108]	@ (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800474a:	4313      	orrs	r3, r2
 800474c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVR */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLI2SDivR);
 8004750:	4b19      	ldr	r3, [pc, #100]	@ (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8004752:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004756:	f023 021f 	bic.w	r2, r3, #31
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	699b      	ldr	r3, [r3, #24]
 800475e:	3b01      	subs	r3, #1
 8004760:	4915      	ldr	r1, [pc, #84]	@ (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8004762:	4313      	orrs	r3, r2
 8004764:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F413xx || STM32F423xx */

    /*----------------- In Case of PLLI2S is just selected  ------------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004770:	2b00      	cmp	r3, #0
 8004772:	d010      	beq.n	8004796 <HAL_RCCEx_PeriphCLKConfig+0x422>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	685a      	ldr	r2, [r3, #4]
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	689b      	ldr	r3, [r3, #8]
 800477c:	019b      	lsls	r3, r3, #6
 800477e:	431a      	orrs	r2, r3
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	68db      	ldr	r3, [r3, #12]
 8004784:	061b      	lsls	r3, r3, #24
 8004786:	431a      	orrs	r2, r3
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	691b      	ldr	r3, [r3, #16]
 800478c:	071b      	lsls	r3, r3, #28
 800478e:	490a      	ldr	r1, [pc, #40]	@ (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8004790:	4313      	orrs	r3, r2
 8004792:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004796:	4b0a      	ldr	r3, [pc, #40]	@ (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 8004798:	2201      	movs	r2, #1
 800479a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800479c:	f7fc fdb4 	bl	8001308 <HAL_GetTick>
 80047a0:	61b8      	str	r0, [r7, #24]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80047a2:	e011      	b.n	80047c8 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80047a4:	f7fc fdb0 	bl	8001308 <HAL_GetTick>
 80047a8:	4602      	mov	r2, r0
 80047aa:	69bb      	ldr	r3, [r7, #24]
 80047ac:	1ad3      	subs	r3, r2, r3
 80047ae:	2b02      	cmp	r3, #2
 80047b0:	d90a      	bls.n	80047c8 <HAL_RCCEx_PeriphCLKConfig+0x454>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80047b2:	2303      	movs	r3, #3
 80047b4:	e064      	b.n	8004880 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 80047b6:	bf00      	nop
 80047b8:	40023800 	.word	0x40023800
 80047bc:	424711e0 	.word	0x424711e0
 80047c0:	42470068 	.word	0x42470068
 80047c4:	424710d8 	.word	0x424710d8
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80047c8:	4b2f      	ldr	r3, [pc, #188]	@ (8004888 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d0e7      	beq.n	80047a4 <HAL_RCCEx_PeriphCLKConfig+0x430>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d00a      	beq.n	80047f6 <HAL_RCCEx_PeriphCLKConfig+0x482>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80047e0:	4b29      	ldr	r3, [pc, #164]	@ (8004888 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 80047e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80047e6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80047ee:	4926      	ldr	r1, [pc, #152]	@ (8004888 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 80047f0:	4313      	orrs	r3, r2
 80047f2:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d00a      	beq.n	8004818 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004802:	4b21      	ldr	r3, [pc, #132]	@ (8004888 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8004804:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004808:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004810:	491d      	ldr	r1, [pc, #116]	@ (8004888 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8004812:	4313      	orrs	r3, r2
 8004814:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
  /*--------------------------------------------------------------------------*/

#if defined(STM32F413xx) || defined(STM32F423xx)
  /*-------------------- DFSDM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004820:	2b00      	cmp	r3, #0
 8004822:	d00a      	beq.n	800483a <HAL_RCCEx_PeriphCLKConfig+0x4c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8004824:	4b18      	ldr	r3, [pc, #96]	@ (8004888 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8004826:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800482a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004832:	4915      	ldr	r1, [pc, #84]	@ (8004888 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8004834:	4313      	orrs	r3, r2
 8004836:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM2 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2_AUDIO) == RCC_PERIPHCLK_DFSDM2_AUDIO)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004842:	2b00      	cmp	r3, #0
 8004844:	d00a      	beq.n	800485c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2AUDIOCLKSOURCE(PeriphClkInit->Dfsdm2AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM2AUDIO_CONFIG(PeriphClkInit->Dfsdm2AudioClockSelection);
 8004846:	4b10      	ldr	r3, [pc, #64]	@ (8004888 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8004848:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800484c:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004854:	490c      	ldr	r1, [pc, #48]	@ (8004888 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8004856:	4313      	orrs	r3, r2
 8004858:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- LPTIM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004864:	2b00      	cmp	r3, #0
 8004866:	d00a      	beq.n	800487e <HAL_RCCEx_PeriphCLKConfig+0x50a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004868:	4b07      	ldr	r3, [pc, #28]	@ (8004888 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 800486a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800486e:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004876:	4904      	ldr	r1, [pc, #16]	@ (8004888 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8004878:	4313      	orrs	r3, r2
 800487a:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  return HAL_OK;
 800487e:	2300      	movs	r3, #0
}
 8004880:	4618      	mov	r0, r3
 8004882:	3720      	adds	r7, #32
 8004884:	46bd      	mov	sp, r7
 8004886:	bd80      	pop	{r7, pc}
 8004888:	40023800 	.word	0x40023800

0800488c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b086      	sub	sp, #24
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d101      	bne.n	800489e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800489a:	2301      	movs	r3, #1
 800489c:	e273      	b.n	8004d86 <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f003 0301 	and.w	r3, r3, #1
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d075      	beq.n	8004996 <HAL_RCC_OscConfig+0x10a>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80048aa:	4b88      	ldr	r3, [pc, #544]	@ (8004acc <HAL_RCC_OscConfig+0x240>)
 80048ac:	689b      	ldr	r3, [r3, #8]
 80048ae:	f003 030c 	and.w	r3, r3, #12
 80048b2:	2b04      	cmp	r3, #4
 80048b4:	d00c      	beq.n	80048d0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80048b6:	4b85      	ldr	r3, [pc, #532]	@ (8004acc <HAL_RCC_OscConfig+0x240>)
 80048b8:	689b      	ldr	r3, [r3, #8]
 80048ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80048be:	2b08      	cmp	r3, #8
 80048c0:	d112      	bne.n	80048e8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80048c2:	4b82      	ldr	r3, [pc, #520]	@ (8004acc <HAL_RCC_OscConfig+0x240>)
 80048c4:	685b      	ldr	r3, [r3, #4]
 80048c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80048ca:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80048ce:	d10b      	bne.n	80048e8 <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048d0:	4b7e      	ldr	r3, [pc, #504]	@ (8004acc <HAL_RCC_OscConfig+0x240>)
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d05b      	beq.n	8004994 <HAL_RCC_OscConfig+0x108>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	685b      	ldr	r3, [r3, #4]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d157      	bne.n	8004994 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80048e4:	2301      	movs	r3, #1
 80048e6:	e24e      	b.n	8004d86 <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	685b      	ldr	r3, [r3, #4]
 80048ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80048f0:	d106      	bne.n	8004900 <HAL_RCC_OscConfig+0x74>
 80048f2:	4b76      	ldr	r3, [pc, #472]	@ (8004acc <HAL_RCC_OscConfig+0x240>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	4a75      	ldr	r2, [pc, #468]	@ (8004acc <HAL_RCC_OscConfig+0x240>)
 80048f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80048fc:	6013      	str	r3, [r2, #0]
 80048fe:	e01d      	b.n	800493c <HAL_RCC_OscConfig+0xb0>
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	685b      	ldr	r3, [r3, #4]
 8004904:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004908:	d10c      	bne.n	8004924 <HAL_RCC_OscConfig+0x98>
 800490a:	4b70      	ldr	r3, [pc, #448]	@ (8004acc <HAL_RCC_OscConfig+0x240>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	4a6f      	ldr	r2, [pc, #444]	@ (8004acc <HAL_RCC_OscConfig+0x240>)
 8004910:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004914:	6013      	str	r3, [r2, #0]
 8004916:	4b6d      	ldr	r3, [pc, #436]	@ (8004acc <HAL_RCC_OscConfig+0x240>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4a6c      	ldr	r2, [pc, #432]	@ (8004acc <HAL_RCC_OscConfig+0x240>)
 800491c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004920:	6013      	str	r3, [r2, #0]
 8004922:	e00b      	b.n	800493c <HAL_RCC_OscConfig+0xb0>
 8004924:	4b69      	ldr	r3, [pc, #420]	@ (8004acc <HAL_RCC_OscConfig+0x240>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	4a68      	ldr	r2, [pc, #416]	@ (8004acc <HAL_RCC_OscConfig+0x240>)
 800492a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800492e:	6013      	str	r3, [r2, #0]
 8004930:	4b66      	ldr	r3, [pc, #408]	@ (8004acc <HAL_RCC_OscConfig+0x240>)
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	4a65      	ldr	r2, [pc, #404]	@ (8004acc <HAL_RCC_OscConfig+0x240>)
 8004936:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800493a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	685b      	ldr	r3, [r3, #4]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d013      	beq.n	800496c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004944:	f7fc fce0 	bl	8001308 <HAL_GetTick>
 8004948:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800494a:	e008      	b.n	800495e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800494c:	f7fc fcdc 	bl	8001308 <HAL_GetTick>
 8004950:	4602      	mov	r2, r0
 8004952:	693b      	ldr	r3, [r7, #16]
 8004954:	1ad3      	subs	r3, r2, r3
 8004956:	2b64      	cmp	r3, #100	@ 0x64
 8004958:	d901      	bls.n	800495e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800495a:	2303      	movs	r3, #3
 800495c:	e213      	b.n	8004d86 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800495e:	4b5b      	ldr	r3, [pc, #364]	@ (8004acc <HAL_RCC_OscConfig+0x240>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004966:	2b00      	cmp	r3, #0
 8004968:	d0f0      	beq.n	800494c <HAL_RCC_OscConfig+0xc0>
 800496a:	e014      	b.n	8004996 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800496c:	f7fc fccc 	bl	8001308 <HAL_GetTick>
 8004970:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004972:	e008      	b.n	8004986 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004974:	f7fc fcc8 	bl	8001308 <HAL_GetTick>
 8004978:	4602      	mov	r2, r0
 800497a:	693b      	ldr	r3, [r7, #16]
 800497c:	1ad3      	subs	r3, r2, r3
 800497e:	2b64      	cmp	r3, #100	@ 0x64
 8004980:	d901      	bls.n	8004986 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004982:	2303      	movs	r3, #3
 8004984:	e1ff      	b.n	8004d86 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004986:	4b51      	ldr	r3, [pc, #324]	@ (8004acc <HAL_RCC_OscConfig+0x240>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800498e:	2b00      	cmp	r3, #0
 8004990:	d1f0      	bne.n	8004974 <HAL_RCC_OscConfig+0xe8>
 8004992:	e000      	b.n	8004996 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004994:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f003 0302 	and.w	r3, r3, #2
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d063      	beq.n	8004a6a <HAL_RCC_OscConfig+0x1de>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80049a2:	4b4a      	ldr	r3, [pc, #296]	@ (8004acc <HAL_RCC_OscConfig+0x240>)
 80049a4:	689b      	ldr	r3, [r3, #8]
 80049a6:	f003 030c 	and.w	r3, r3, #12
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d00b      	beq.n	80049c6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80049ae:	4b47      	ldr	r3, [pc, #284]	@ (8004acc <HAL_RCC_OscConfig+0x240>)
 80049b0:	689b      	ldr	r3, [r3, #8]
 80049b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80049b6:	2b08      	cmp	r3, #8
 80049b8:	d11c      	bne.n	80049f4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80049ba:	4b44      	ldr	r3, [pc, #272]	@ (8004acc <HAL_RCC_OscConfig+0x240>)
 80049bc:	685b      	ldr	r3, [r3, #4]
 80049be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d116      	bne.n	80049f4 <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80049c6:	4b41      	ldr	r3, [pc, #260]	@ (8004acc <HAL_RCC_OscConfig+0x240>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f003 0302 	and.w	r3, r3, #2
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d005      	beq.n	80049de <HAL_RCC_OscConfig+0x152>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	68db      	ldr	r3, [r3, #12]
 80049d6:	2b01      	cmp	r3, #1
 80049d8:	d001      	beq.n	80049de <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80049da:	2301      	movs	r3, #1
 80049dc:	e1d3      	b.n	8004d86 <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049de:	4b3b      	ldr	r3, [pc, #236]	@ (8004acc <HAL_RCC_OscConfig+0x240>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	691b      	ldr	r3, [r3, #16]
 80049ea:	00db      	lsls	r3, r3, #3
 80049ec:	4937      	ldr	r1, [pc, #220]	@ (8004acc <HAL_RCC_OscConfig+0x240>)
 80049ee:	4313      	orrs	r3, r2
 80049f0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80049f2:	e03a      	b.n	8004a6a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	68db      	ldr	r3, [r3, #12]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d020      	beq.n	8004a3e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80049fc:	4b34      	ldr	r3, [pc, #208]	@ (8004ad0 <HAL_RCC_OscConfig+0x244>)
 80049fe:	2201      	movs	r2, #1
 8004a00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a02:	f7fc fc81 	bl	8001308 <HAL_GetTick>
 8004a06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a08:	e008      	b.n	8004a1c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004a0a:	f7fc fc7d 	bl	8001308 <HAL_GetTick>
 8004a0e:	4602      	mov	r2, r0
 8004a10:	693b      	ldr	r3, [r7, #16]
 8004a12:	1ad3      	subs	r3, r2, r3
 8004a14:	2b02      	cmp	r3, #2
 8004a16:	d901      	bls.n	8004a1c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004a18:	2303      	movs	r3, #3
 8004a1a:	e1b4      	b.n	8004d86 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a1c:	4b2b      	ldr	r3, [pc, #172]	@ (8004acc <HAL_RCC_OscConfig+0x240>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f003 0302 	and.w	r3, r3, #2
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d0f0      	beq.n	8004a0a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a28:	4b28      	ldr	r3, [pc, #160]	@ (8004acc <HAL_RCC_OscConfig+0x240>)
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	691b      	ldr	r3, [r3, #16]
 8004a34:	00db      	lsls	r3, r3, #3
 8004a36:	4925      	ldr	r1, [pc, #148]	@ (8004acc <HAL_RCC_OscConfig+0x240>)
 8004a38:	4313      	orrs	r3, r2
 8004a3a:	600b      	str	r3, [r1, #0]
 8004a3c:	e015      	b.n	8004a6a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a3e:	4b24      	ldr	r3, [pc, #144]	@ (8004ad0 <HAL_RCC_OscConfig+0x244>)
 8004a40:	2200      	movs	r2, #0
 8004a42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a44:	f7fc fc60 	bl	8001308 <HAL_GetTick>
 8004a48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a4a:	e008      	b.n	8004a5e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004a4c:	f7fc fc5c 	bl	8001308 <HAL_GetTick>
 8004a50:	4602      	mov	r2, r0
 8004a52:	693b      	ldr	r3, [r7, #16]
 8004a54:	1ad3      	subs	r3, r2, r3
 8004a56:	2b02      	cmp	r3, #2
 8004a58:	d901      	bls.n	8004a5e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004a5a:	2303      	movs	r3, #3
 8004a5c:	e193      	b.n	8004d86 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a5e:	4b1b      	ldr	r3, [pc, #108]	@ (8004acc <HAL_RCC_OscConfig+0x240>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f003 0302 	and.w	r3, r3, #2
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d1f0      	bne.n	8004a4c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f003 0308 	and.w	r3, r3, #8
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d036      	beq.n	8004ae4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	695b      	ldr	r3, [r3, #20]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d016      	beq.n	8004aac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004a7e:	4b15      	ldr	r3, [pc, #84]	@ (8004ad4 <HAL_RCC_OscConfig+0x248>)
 8004a80:	2201      	movs	r2, #1
 8004a82:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a84:	f7fc fc40 	bl	8001308 <HAL_GetTick>
 8004a88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a8a:	e008      	b.n	8004a9e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004a8c:	f7fc fc3c 	bl	8001308 <HAL_GetTick>
 8004a90:	4602      	mov	r2, r0
 8004a92:	693b      	ldr	r3, [r7, #16]
 8004a94:	1ad3      	subs	r3, r2, r3
 8004a96:	2b02      	cmp	r3, #2
 8004a98:	d901      	bls.n	8004a9e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004a9a:	2303      	movs	r3, #3
 8004a9c:	e173      	b.n	8004d86 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a9e:	4b0b      	ldr	r3, [pc, #44]	@ (8004acc <HAL_RCC_OscConfig+0x240>)
 8004aa0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004aa2:	f003 0302 	and.w	r3, r3, #2
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d0f0      	beq.n	8004a8c <HAL_RCC_OscConfig+0x200>
 8004aaa:	e01b      	b.n	8004ae4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004aac:	4b09      	ldr	r3, [pc, #36]	@ (8004ad4 <HAL_RCC_OscConfig+0x248>)
 8004aae:	2200      	movs	r2, #0
 8004ab0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ab2:	f7fc fc29 	bl	8001308 <HAL_GetTick>
 8004ab6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ab8:	e00e      	b.n	8004ad8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004aba:	f7fc fc25 	bl	8001308 <HAL_GetTick>
 8004abe:	4602      	mov	r2, r0
 8004ac0:	693b      	ldr	r3, [r7, #16]
 8004ac2:	1ad3      	subs	r3, r2, r3
 8004ac4:	2b02      	cmp	r3, #2
 8004ac6:	d907      	bls.n	8004ad8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004ac8:	2303      	movs	r3, #3
 8004aca:	e15c      	b.n	8004d86 <HAL_RCC_OscConfig+0x4fa>
 8004acc:	40023800 	.word	0x40023800
 8004ad0:	42470000 	.word	0x42470000
 8004ad4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ad8:	4b8a      	ldr	r3, [pc, #552]	@ (8004d04 <HAL_RCC_OscConfig+0x478>)
 8004ada:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004adc:	f003 0302 	and.w	r3, r3, #2
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d1ea      	bne.n	8004aba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f003 0304 	and.w	r3, r3, #4
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	f000 8097 	beq.w	8004c20 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004af2:	2300      	movs	r3, #0
 8004af4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004af6:	4b83      	ldr	r3, [pc, #524]	@ (8004d04 <HAL_RCC_OscConfig+0x478>)
 8004af8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004afa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d10f      	bne.n	8004b22 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b02:	2300      	movs	r3, #0
 8004b04:	60bb      	str	r3, [r7, #8]
 8004b06:	4b7f      	ldr	r3, [pc, #508]	@ (8004d04 <HAL_RCC_OscConfig+0x478>)
 8004b08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b0a:	4a7e      	ldr	r2, [pc, #504]	@ (8004d04 <HAL_RCC_OscConfig+0x478>)
 8004b0c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004b10:	6413      	str	r3, [r2, #64]	@ 0x40
 8004b12:	4b7c      	ldr	r3, [pc, #496]	@ (8004d04 <HAL_RCC_OscConfig+0x478>)
 8004b14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b1a:	60bb      	str	r3, [r7, #8]
 8004b1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b1e:	2301      	movs	r3, #1
 8004b20:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b22:	4b79      	ldr	r3, [pc, #484]	@ (8004d08 <HAL_RCC_OscConfig+0x47c>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d118      	bne.n	8004b60 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004b2e:	4b76      	ldr	r3, [pc, #472]	@ (8004d08 <HAL_RCC_OscConfig+0x47c>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	4a75      	ldr	r2, [pc, #468]	@ (8004d08 <HAL_RCC_OscConfig+0x47c>)
 8004b34:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004b38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b3a:	f7fc fbe5 	bl	8001308 <HAL_GetTick>
 8004b3e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b40:	e008      	b.n	8004b54 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b42:	f7fc fbe1 	bl	8001308 <HAL_GetTick>
 8004b46:	4602      	mov	r2, r0
 8004b48:	693b      	ldr	r3, [r7, #16]
 8004b4a:	1ad3      	subs	r3, r2, r3
 8004b4c:	2b02      	cmp	r3, #2
 8004b4e:	d901      	bls.n	8004b54 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004b50:	2303      	movs	r3, #3
 8004b52:	e118      	b.n	8004d86 <HAL_RCC_OscConfig+0x4fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b54:	4b6c      	ldr	r3, [pc, #432]	@ (8004d08 <HAL_RCC_OscConfig+0x47c>)
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d0f0      	beq.n	8004b42 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	689b      	ldr	r3, [r3, #8]
 8004b64:	2b01      	cmp	r3, #1
 8004b66:	d106      	bne.n	8004b76 <HAL_RCC_OscConfig+0x2ea>
 8004b68:	4b66      	ldr	r3, [pc, #408]	@ (8004d04 <HAL_RCC_OscConfig+0x478>)
 8004b6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b6c:	4a65      	ldr	r2, [pc, #404]	@ (8004d04 <HAL_RCC_OscConfig+0x478>)
 8004b6e:	f043 0301 	orr.w	r3, r3, #1
 8004b72:	6713      	str	r3, [r2, #112]	@ 0x70
 8004b74:	e01c      	b.n	8004bb0 <HAL_RCC_OscConfig+0x324>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	689b      	ldr	r3, [r3, #8]
 8004b7a:	2b05      	cmp	r3, #5
 8004b7c:	d10c      	bne.n	8004b98 <HAL_RCC_OscConfig+0x30c>
 8004b7e:	4b61      	ldr	r3, [pc, #388]	@ (8004d04 <HAL_RCC_OscConfig+0x478>)
 8004b80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b82:	4a60      	ldr	r2, [pc, #384]	@ (8004d04 <HAL_RCC_OscConfig+0x478>)
 8004b84:	f043 0304 	orr.w	r3, r3, #4
 8004b88:	6713      	str	r3, [r2, #112]	@ 0x70
 8004b8a:	4b5e      	ldr	r3, [pc, #376]	@ (8004d04 <HAL_RCC_OscConfig+0x478>)
 8004b8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b8e:	4a5d      	ldr	r2, [pc, #372]	@ (8004d04 <HAL_RCC_OscConfig+0x478>)
 8004b90:	f043 0301 	orr.w	r3, r3, #1
 8004b94:	6713      	str	r3, [r2, #112]	@ 0x70
 8004b96:	e00b      	b.n	8004bb0 <HAL_RCC_OscConfig+0x324>
 8004b98:	4b5a      	ldr	r3, [pc, #360]	@ (8004d04 <HAL_RCC_OscConfig+0x478>)
 8004b9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b9c:	4a59      	ldr	r2, [pc, #356]	@ (8004d04 <HAL_RCC_OscConfig+0x478>)
 8004b9e:	f023 0301 	bic.w	r3, r3, #1
 8004ba2:	6713      	str	r3, [r2, #112]	@ 0x70
 8004ba4:	4b57      	ldr	r3, [pc, #348]	@ (8004d04 <HAL_RCC_OscConfig+0x478>)
 8004ba6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ba8:	4a56      	ldr	r2, [pc, #344]	@ (8004d04 <HAL_RCC_OscConfig+0x478>)
 8004baa:	f023 0304 	bic.w	r3, r3, #4
 8004bae:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	689b      	ldr	r3, [r3, #8]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d015      	beq.n	8004be4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bb8:	f7fc fba6 	bl	8001308 <HAL_GetTick>
 8004bbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bbe:	e00a      	b.n	8004bd6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004bc0:	f7fc fba2 	bl	8001308 <HAL_GetTick>
 8004bc4:	4602      	mov	r2, r0
 8004bc6:	693b      	ldr	r3, [r7, #16]
 8004bc8:	1ad3      	subs	r3, r2, r3
 8004bca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d901      	bls.n	8004bd6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004bd2:	2303      	movs	r3, #3
 8004bd4:	e0d7      	b.n	8004d86 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bd6:	4b4b      	ldr	r3, [pc, #300]	@ (8004d04 <HAL_RCC_OscConfig+0x478>)
 8004bd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bda:	f003 0302 	and.w	r3, r3, #2
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d0ee      	beq.n	8004bc0 <HAL_RCC_OscConfig+0x334>
 8004be2:	e014      	b.n	8004c0e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004be4:	f7fc fb90 	bl	8001308 <HAL_GetTick>
 8004be8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004bea:	e00a      	b.n	8004c02 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004bec:	f7fc fb8c 	bl	8001308 <HAL_GetTick>
 8004bf0:	4602      	mov	r2, r0
 8004bf2:	693b      	ldr	r3, [r7, #16]
 8004bf4:	1ad3      	subs	r3, r2, r3
 8004bf6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d901      	bls.n	8004c02 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004bfe:	2303      	movs	r3, #3
 8004c00:	e0c1      	b.n	8004d86 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c02:	4b40      	ldr	r3, [pc, #256]	@ (8004d04 <HAL_RCC_OscConfig+0x478>)
 8004c04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c06:	f003 0302 	and.w	r3, r3, #2
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d1ee      	bne.n	8004bec <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004c0e:	7dfb      	ldrb	r3, [r7, #23]
 8004c10:	2b01      	cmp	r3, #1
 8004c12:	d105      	bne.n	8004c20 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c14:	4b3b      	ldr	r3, [pc, #236]	@ (8004d04 <HAL_RCC_OscConfig+0x478>)
 8004c16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c18:	4a3a      	ldr	r2, [pc, #232]	@ (8004d04 <HAL_RCC_OscConfig+0x478>)
 8004c1a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004c1e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	699b      	ldr	r3, [r3, #24]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	f000 80ad 	beq.w	8004d84 <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004c2a:	4b36      	ldr	r3, [pc, #216]	@ (8004d04 <HAL_RCC_OscConfig+0x478>)
 8004c2c:	689b      	ldr	r3, [r3, #8]
 8004c2e:	f003 030c 	and.w	r3, r3, #12
 8004c32:	2b08      	cmp	r3, #8
 8004c34:	d060      	beq.n	8004cf8 <HAL_RCC_OscConfig+0x46c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	699b      	ldr	r3, [r3, #24]
 8004c3a:	2b02      	cmp	r3, #2
 8004c3c:	d145      	bne.n	8004cca <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c3e:	4b33      	ldr	r3, [pc, #204]	@ (8004d0c <HAL_RCC_OscConfig+0x480>)
 8004c40:	2200      	movs	r2, #0
 8004c42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c44:	f7fc fb60 	bl	8001308 <HAL_GetTick>
 8004c48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c4a:	e008      	b.n	8004c5e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c4c:	f7fc fb5c 	bl	8001308 <HAL_GetTick>
 8004c50:	4602      	mov	r2, r0
 8004c52:	693b      	ldr	r3, [r7, #16]
 8004c54:	1ad3      	subs	r3, r2, r3
 8004c56:	2b02      	cmp	r3, #2
 8004c58:	d901      	bls.n	8004c5e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004c5a:	2303      	movs	r3, #3
 8004c5c:	e093      	b.n	8004d86 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c5e:	4b29      	ldr	r3, [pc, #164]	@ (8004d04 <HAL_RCC_OscConfig+0x478>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d1f0      	bne.n	8004c4c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	69da      	ldr	r2, [r3, #28]
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6a1b      	ldr	r3, [r3, #32]
 8004c72:	431a      	orrs	r2, r3
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c78:	019b      	lsls	r3, r3, #6
 8004c7a:	431a      	orrs	r2, r3
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c80:	085b      	lsrs	r3, r3, #1
 8004c82:	3b01      	subs	r3, #1
 8004c84:	041b      	lsls	r3, r3, #16
 8004c86:	431a      	orrs	r2, r3
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c8c:	061b      	lsls	r3, r3, #24
 8004c8e:	431a      	orrs	r2, r3
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c94:	071b      	lsls	r3, r3, #28
 8004c96:	491b      	ldr	r1, [pc, #108]	@ (8004d04 <HAL_RCC_OscConfig+0x478>)
 8004c98:	4313      	orrs	r3, r2
 8004c9a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004c9c:	4b1b      	ldr	r3, [pc, #108]	@ (8004d0c <HAL_RCC_OscConfig+0x480>)
 8004c9e:	2201      	movs	r2, #1
 8004ca0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ca2:	f7fc fb31 	bl	8001308 <HAL_GetTick>
 8004ca6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ca8:	e008      	b.n	8004cbc <HAL_RCC_OscConfig+0x430>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004caa:	f7fc fb2d 	bl	8001308 <HAL_GetTick>
 8004cae:	4602      	mov	r2, r0
 8004cb0:	693b      	ldr	r3, [r7, #16]
 8004cb2:	1ad3      	subs	r3, r2, r3
 8004cb4:	2b02      	cmp	r3, #2
 8004cb6:	d901      	bls.n	8004cbc <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 8004cb8:	2303      	movs	r3, #3
 8004cba:	e064      	b.n	8004d86 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cbc:	4b11      	ldr	r3, [pc, #68]	@ (8004d04 <HAL_RCC_OscConfig+0x478>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d0f0      	beq.n	8004caa <HAL_RCC_OscConfig+0x41e>
 8004cc8:	e05c      	b.n	8004d84 <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004cca:	4b10      	ldr	r3, [pc, #64]	@ (8004d0c <HAL_RCC_OscConfig+0x480>)
 8004ccc:	2200      	movs	r2, #0
 8004cce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cd0:	f7fc fb1a 	bl	8001308 <HAL_GetTick>
 8004cd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004cd6:	e008      	b.n	8004cea <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004cd8:	f7fc fb16 	bl	8001308 <HAL_GetTick>
 8004cdc:	4602      	mov	r2, r0
 8004cde:	693b      	ldr	r3, [r7, #16]
 8004ce0:	1ad3      	subs	r3, r2, r3
 8004ce2:	2b02      	cmp	r3, #2
 8004ce4:	d901      	bls.n	8004cea <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8004ce6:	2303      	movs	r3, #3
 8004ce8:	e04d      	b.n	8004d86 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004cea:	4b06      	ldr	r3, [pc, #24]	@ (8004d04 <HAL_RCC_OscConfig+0x478>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d1f0      	bne.n	8004cd8 <HAL_RCC_OscConfig+0x44c>
 8004cf6:	e045      	b.n	8004d84 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	699b      	ldr	r3, [r3, #24]
 8004cfc:	2b01      	cmp	r3, #1
 8004cfe:	d107      	bne.n	8004d10 <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 8004d00:	2301      	movs	r3, #1
 8004d02:	e040      	b.n	8004d86 <HAL_RCC_OscConfig+0x4fa>
 8004d04:	40023800 	.word	0x40023800
 8004d08:	40007000 	.word	0x40007000
 8004d0c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004d10:	4b1f      	ldr	r3, [pc, #124]	@ (8004d90 <HAL_RCC_OscConfig+0x504>)
 8004d12:	685b      	ldr	r3, [r3, #4]
 8004d14:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	699b      	ldr	r3, [r3, #24]
 8004d1a:	2b01      	cmp	r3, #1
 8004d1c:	d030      	beq.n	8004d80 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d28:	429a      	cmp	r2, r3
 8004d2a:	d129      	bne.n	8004d80 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d36:	429a      	cmp	r2, r3
 8004d38:	d122      	bne.n	8004d80 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004d3a:	68fa      	ldr	r2, [r7, #12]
 8004d3c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004d40:	4013      	ands	r3, r2
 8004d42:	687a      	ldr	r2, [r7, #4]
 8004d44:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004d46:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d119      	bne.n	8004d80 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d56:	085b      	lsrs	r3, r3, #1
 8004d58:	3b01      	subs	r3, #1
 8004d5a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004d5c:	429a      	cmp	r2, r3
 8004d5e:	d10f      	bne.n	8004d80 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d6a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004d6c:	429a      	cmp	r2, r3
 8004d6e:	d107      	bne.n	8004d80 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d7a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004d7c:	429a      	cmp	r2, r3
 8004d7e:	d001      	beq.n	8004d84 <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004d80:	2301      	movs	r3, #1
 8004d82:	e000      	b.n	8004d86 <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 8004d84:	2300      	movs	r3, #0
}
 8004d86:	4618      	mov	r0, r3
 8004d88:	3718      	adds	r7, #24
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	bd80      	pop	{r7, pc}
 8004d8e:	bf00      	nop
 8004d90:	40023800 	.word	0x40023800

08004d94 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b082      	sub	sp, #8
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d101      	bne.n	8004da6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004da2:	2301      	movs	r3, #1
 8004da4:	e07b      	b.n	8004e9e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d108      	bne.n	8004dc0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	685b      	ldr	r3, [r3, #4]
 8004db2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004db6:	d009      	beq.n	8004dcc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2200      	movs	r2, #0
 8004dbc:	61da      	str	r2, [r3, #28]
 8004dbe:	e005      	b.n	8004dcc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2200      	movs	r2, #0
 8004dca:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2200      	movs	r2, #0
 8004dd0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004dd8:	b2db      	uxtb	r3, r3
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d106      	bne.n	8004dec <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2200      	movs	r2, #0
 8004de2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004de6:	6878      	ldr	r0, [r7, #4]
 8004de8:	f7fc f80a 	bl	8000e00 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2202      	movs	r2, #2
 8004df0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	681a      	ldr	r2, [r3, #0]
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004e02:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	685b      	ldr	r3, [r3, #4]
 8004e08:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	689b      	ldr	r3, [r3, #8]
 8004e10:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004e14:	431a      	orrs	r2, r3
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	68db      	ldr	r3, [r3, #12]
 8004e1a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004e1e:	431a      	orrs	r2, r3
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	691b      	ldr	r3, [r3, #16]
 8004e24:	f003 0302 	and.w	r3, r3, #2
 8004e28:	431a      	orrs	r2, r3
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	695b      	ldr	r3, [r3, #20]
 8004e2e:	f003 0301 	and.w	r3, r3, #1
 8004e32:	431a      	orrs	r2, r3
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	699b      	ldr	r3, [r3, #24]
 8004e38:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004e3c:	431a      	orrs	r2, r3
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	69db      	ldr	r3, [r3, #28]
 8004e42:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004e46:	431a      	orrs	r2, r3
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6a1b      	ldr	r3, [r3, #32]
 8004e4c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e50:	ea42 0103 	orr.w	r1, r2, r3
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e58:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	430a      	orrs	r2, r1
 8004e62:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	699b      	ldr	r3, [r3, #24]
 8004e68:	0c1b      	lsrs	r3, r3, #16
 8004e6a:	f003 0104 	and.w	r1, r3, #4
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e72:	f003 0210 	and.w	r2, r3, #16
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	430a      	orrs	r2, r1
 8004e7c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	69da      	ldr	r2, [r3, #28]
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004e8c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	2200      	movs	r2, #0
 8004e92:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2201      	movs	r2, #1
 8004e98:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004e9c:	2300      	movs	r3, #0
}
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	3708      	adds	r7, #8
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	bd80      	pop	{r7, pc}

08004ea6 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ea6:	b580      	push	{r7, lr}
 8004ea8:	b082      	sub	sp, #8
 8004eaa:	af00      	add	r7, sp, #0
 8004eac:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d101      	bne.n	8004eb8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004eb4:	2301      	movs	r3, #1
 8004eb6:	e03f      	b.n	8004f38 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ebe:	b2db      	uxtb	r3, r3
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d106      	bne.n	8004ed2 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004ecc:	6878      	ldr	r0, [r7, #4]
 8004ece:	f7fc f853 	bl	8000f78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2224      	movs	r2, #36	@ 0x24
 8004ed6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	68da      	ldr	r2, [r3, #12]
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004ee8:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004eea:	6878      	ldr	r0, [r7, #4]
 8004eec:	f000 f828 	bl	8004f40 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	691a      	ldr	r2, [r3, #16]
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004efe:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	695a      	ldr	r2, [r3, #20]
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004f0e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	68da      	ldr	r2, [r3, #12]
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004f1e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2200      	movs	r2, #0
 8004f24:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2220      	movs	r2, #32
 8004f2a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2220      	movs	r2, #32
 8004f32:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004f36:	2300      	movs	r3, #0
}
 8004f38:	4618      	mov	r0, r3
 8004f3a:	3708      	adds	r7, #8
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	bd80      	pop	{r7, pc}

08004f40 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004f40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004f44:	b0c0      	sub	sp, #256	@ 0x100
 8004f46:	af00      	add	r7, sp, #0
 8004f48:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	691b      	ldr	r3, [r3, #16]
 8004f54:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004f58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f5c:	68d9      	ldr	r1, [r3, #12]
 8004f5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f62:	681a      	ldr	r2, [r3, #0]
 8004f64:	ea40 0301 	orr.w	r3, r0, r1
 8004f68:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004f6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f6e:	689a      	ldr	r2, [r3, #8]
 8004f70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f74:	691b      	ldr	r3, [r3, #16]
 8004f76:	431a      	orrs	r2, r3
 8004f78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f7c:	695b      	ldr	r3, [r3, #20]
 8004f7e:	431a      	orrs	r2, r3
 8004f80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f84:	69db      	ldr	r3, [r3, #28]
 8004f86:	4313      	orrs	r3, r2
 8004f88:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004f8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	68db      	ldr	r3, [r3, #12]
 8004f94:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004f98:	f021 010c 	bic.w	r1, r1, #12
 8004f9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fa0:	681a      	ldr	r2, [r3, #0]
 8004fa2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004fa6:	430b      	orrs	r3, r1
 8004fa8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004faa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	695b      	ldr	r3, [r3, #20]
 8004fb2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004fb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fba:	6999      	ldr	r1, [r3, #24]
 8004fbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fc0:	681a      	ldr	r2, [r3, #0]
 8004fc2:	ea40 0301 	orr.w	r3, r0, r1
 8004fc6:	6153      	str	r3, [r2, #20]


#if defined(USART6) && defined(UART9) && defined(UART10)
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
 8004fc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fcc:	681a      	ldr	r2, [r3, #0]
 8004fce:	4b95      	ldr	r3, [pc, #596]	@ (8005224 <UART_SetConfig+0x2e4>)
 8004fd0:	429a      	cmp	r2, r3
 8004fd2:	d011      	beq.n	8004ff8 <UART_SetConfig+0xb8>
 8004fd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fd8:	681a      	ldr	r2, [r3, #0]
 8004fda:	4b93      	ldr	r3, [pc, #588]	@ (8005228 <UART_SetConfig+0x2e8>)
 8004fdc:	429a      	cmp	r2, r3
 8004fde:	d00b      	beq.n	8004ff8 <UART_SetConfig+0xb8>
 8004fe0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fe4:	681a      	ldr	r2, [r3, #0]
 8004fe6:	4b91      	ldr	r3, [pc, #580]	@ (800522c <UART_SetConfig+0x2ec>)
 8004fe8:	429a      	cmp	r2, r3
 8004fea:	d005      	beq.n	8004ff8 <UART_SetConfig+0xb8>
 8004fec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ff0:	681a      	ldr	r2, [r3, #0]
 8004ff2:	4b8f      	ldr	r3, [pc, #572]	@ (8005230 <UART_SetConfig+0x2f0>)
 8004ff4:	429a      	cmp	r2, r3
 8004ff6:	d104      	bne.n	8005002 <UART_SetConfig+0xc2>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004ff8:	f7ff f9a8 	bl	800434c <HAL_RCC_GetPCLK2Freq>
 8004ffc:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005000:	e003      	b.n	800500a <UART_SetConfig+0xca>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005002:	f7ff f98f 	bl	8004324 <HAL_RCC_GetPCLK1Freq>
 8005006:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800500a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800500e:	69db      	ldr	r3, [r3, #28]
 8005010:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005014:	f040 8110 	bne.w	8005238 <UART_SetConfig+0x2f8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005018:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800501c:	2200      	movs	r2, #0
 800501e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005022:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005026:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800502a:	4622      	mov	r2, r4
 800502c:	462b      	mov	r3, r5
 800502e:	1891      	adds	r1, r2, r2
 8005030:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005032:	415b      	adcs	r3, r3
 8005034:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005036:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800503a:	4621      	mov	r1, r4
 800503c:	eb12 0801 	adds.w	r8, r2, r1
 8005040:	4629      	mov	r1, r5
 8005042:	eb43 0901 	adc.w	r9, r3, r1
 8005046:	f04f 0200 	mov.w	r2, #0
 800504a:	f04f 0300 	mov.w	r3, #0
 800504e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005052:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005056:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800505a:	4690      	mov	r8, r2
 800505c:	4699      	mov	r9, r3
 800505e:	4623      	mov	r3, r4
 8005060:	eb18 0303 	adds.w	r3, r8, r3
 8005064:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005068:	462b      	mov	r3, r5
 800506a:	eb49 0303 	adc.w	r3, r9, r3
 800506e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005072:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005076:	685b      	ldr	r3, [r3, #4]
 8005078:	2200      	movs	r2, #0
 800507a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800507e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005082:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005086:	460b      	mov	r3, r1
 8005088:	18db      	adds	r3, r3, r3
 800508a:	653b      	str	r3, [r7, #80]	@ 0x50
 800508c:	4613      	mov	r3, r2
 800508e:	eb42 0303 	adc.w	r3, r2, r3
 8005092:	657b      	str	r3, [r7, #84]	@ 0x54
 8005094:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005098:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800509c:	f7fb f8bc 	bl	8000218 <__aeabi_uldivmod>
 80050a0:	4602      	mov	r2, r0
 80050a2:	460b      	mov	r3, r1
 80050a4:	4b63      	ldr	r3, [pc, #396]	@ (8005234 <UART_SetConfig+0x2f4>)
 80050a6:	fba3 2302 	umull	r2, r3, r3, r2
 80050aa:	095b      	lsrs	r3, r3, #5
 80050ac:	011c      	lsls	r4, r3, #4
 80050ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80050b2:	2200      	movs	r2, #0
 80050b4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80050b8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80050bc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80050c0:	4642      	mov	r2, r8
 80050c2:	464b      	mov	r3, r9
 80050c4:	1891      	adds	r1, r2, r2
 80050c6:	64b9      	str	r1, [r7, #72]	@ 0x48
 80050c8:	415b      	adcs	r3, r3
 80050ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80050cc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80050d0:	4641      	mov	r1, r8
 80050d2:	eb12 0a01 	adds.w	sl, r2, r1
 80050d6:	4649      	mov	r1, r9
 80050d8:	eb43 0b01 	adc.w	fp, r3, r1
 80050dc:	f04f 0200 	mov.w	r2, #0
 80050e0:	f04f 0300 	mov.w	r3, #0
 80050e4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80050e8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80050ec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80050f0:	4692      	mov	sl, r2
 80050f2:	469b      	mov	fp, r3
 80050f4:	4643      	mov	r3, r8
 80050f6:	eb1a 0303 	adds.w	r3, sl, r3
 80050fa:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80050fe:	464b      	mov	r3, r9
 8005100:	eb4b 0303 	adc.w	r3, fp, r3
 8005104:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005108:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800510c:	685b      	ldr	r3, [r3, #4]
 800510e:	2200      	movs	r2, #0
 8005110:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005114:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005118:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800511c:	460b      	mov	r3, r1
 800511e:	18db      	adds	r3, r3, r3
 8005120:	643b      	str	r3, [r7, #64]	@ 0x40
 8005122:	4613      	mov	r3, r2
 8005124:	eb42 0303 	adc.w	r3, r2, r3
 8005128:	647b      	str	r3, [r7, #68]	@ 0x44
 800512a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800512e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005132:	f7fb f871 	bl	8000218 <__aeabi_uldivmod>
 8005136:	4602      	mov	r2, r0
 8005138:	460b      	mov	r3, r1
 800513a:	4611      	mov	r1, r2
 800513c:	4b3d      	ldr	r3, [pc, #244]	@ (8005234 <UART_SetConfig+0x2f4>)
 800513e:	fba3 2301 	umull	r2, r3, r3, r1
 8005142:	095b      	lsrs	r3, r3, #5
 8005144:	2264      	movs	r2, #100	@ 0x64
 8005146:	fb02 f303 	mul.w	r3, r2, r3
 800514a:	1acb      	subs	r3, r1, r3
 800514c:	00db      	lsls	r3, r3, #3
 800514e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005152:	4b38      	ldr	r3, [pc, #224]	@ (8005234 <UART_SetConfig+0x2f4>)
 8005154:	fba3 2302 	umull	r2, r3, r3, r2
 8005158:	095b      	lsrs	r3, r3, #5
 800515a:	005b      	lsls	r3, r3, #1
 800515c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005160:	441c      	add	r4, r3
 8005162:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005166:	2200      	movs	r2, #0
 8005168:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800516c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005170:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005174:	4642      	mov	r2, r8
 8005176:	464b      	mov	r3, r9
 8005178:	1891      	adds	r1, r2, r2
 800517a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800517c:	415b      	adcs	r3, r3
 800517e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005180:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005184:	4641      	mov	r1, r8
 8005186:	1851      	adds	r1, r2, r1
 8005188:	6339      	str	r1, [r7, #48]	@ 0x30
 800518a:	4649      	mov	r1, r9
 800518c:	414b      	adcs	r3, r1
 800518e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005190:	f04f 0200 	mov.w	r2, #0
 8005194:	f04f 0300 	mov.w	r3, #0
 8005198:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800519c:	4659      	mov	r1, fp
 800519e:	00cb      	lsls	r3, r1, #3
 80051a0:	4651      	mov	r1, sl
 80051a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80051a6:	4651      	mov	r1, sl
 80051a8:	00ca      	lsls	r2, r1, #3
 80051aa:	4610      	mov	r0, r2
 80051ac:	4619      	mov	r1, r3
 80051ae:	4603      	mov	r3, r0
 80051b0:	4642      	mov	r2, r8
 80051b2:	189b      	adds	r3, r3, r2
 80051b4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80051b8:	464b      	mov	r3, r9
 80051ba:	460a      	mov	r2, r1
 80051bc:	eb42 0303 	adc.w	r3, r2, r3
 80051c0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80051c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051c8:	685b      	ldr	r3, [r3, #4]
 80051ca:	2200      	movs	r2, #0
 80051cc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80051d0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80051d4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80051d8:	460b      	mov	r3, r1
 80051da:	18db      	adds	r3, r3, r3
 80051dc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80051de:	4613      	mov	r3, r2
 80051e0:	eb42 0303 	adc.w	r3, r2, r3
 80051e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80051e6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80051ea:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80051ee:	f7fb f813 	bl	8000218 <__aeabi_uldivmod>
 80051f2:	4602      	mov	r2, r0
 80051f4:	460b      	mov	r3, r1
 80051f6:	4b0f      	ldr	r3, [pc, #60]	@ (8005234 <UART_SetConfig+0x2f4>)
 80051f8:	fba3 1302 	umull	r1, r3, r3, r2
 80051fc:	095b      	lsrs	r3, r3, #5
 80051fe:	2164      	movs	r1, #100	@ 0x64
 8005200:	fb01 f303 	mul.w	r3, r1, r3
 8005204:	1ad3      	subs	r3, r2, r3
 8005206:	00db      	lsls	r3, r3, #3
 8005208:	3332      	adds	r3, #50	@ 0x32
 800520a:	4a0a      	ldr	r2, [pc, #40]	@ (8005234 <UART_SetConfig+0x2f4>)
 800520c:	fba2 2303 	umull	r2, r3, r2, r3
 8005210:	095b      	lsrs	r3, r3, #5
 8005212:	f003 0207 	and.w	r2, r3, #7
 8005216:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	4422      	add	r2, r4
 800521e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005220:	e10a      	b.n	8005438 <UART_SetConfig+0x4f8>
 8005222:	bf00      	nop
 8005224:	40011000 	.word	0x40011000
 8005228:	40011400 	.word	0x40011400
 800522c:	40011800 	.word	0x40011800
 8005230:	40011c00 	.word	0x40011c00
 8005234:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005238:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800523c:	2200      	movs	r2, #0
 800523e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005242:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005246:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800524a:	4642      	mov	r2, r8
 800524c:	464b      	mov	r3, r9
 800524e:	1891      	adds	r1, r2, r2
 8005250:	6239      	str	r1, [r7, #32]
 8005252:	415b      	adcs	r3, r3
 8005254:	627b      	str	r3, [r7, #36]	@ 0x24
 8005256:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800525a:	4641      	mov	r1, r8
 800525c:	1854      	adds	r4, r2, r1
 800525e:	4649      	mov	r1, r9
 8005260:	eb43 0501 	adc.w	r5, r3, r1
 8005264:	f04f 0200 	mov.w	r2, #0
 8005268:	f04f 0300 	mov.w	r3, #0
 800526c:	00eb      	lsls	r3, r5, #3
 800526e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005272:	00e2      	lsls	r2, r4, #3
 8005274:	4614      	mov	r4, r2
 8005276:	461d      	mov	r5, r3
 8005278:	4643      	mov	r3, r8
 800527a:	18e3      	adds	r3, r4, r3
 800527c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005280:	464b      	mov	r3, r9
 8005282:	eb45 0303 	adc.w	r3, r5, r3
 8005286:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800528a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800528e:	685b      	ldr	r3, [r3, #4]
 8005290:	2200      	movs	r2, #0
 8005292:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005296:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800529a:	f04f 0200 	mov.w	r2, #0
 800529e:	f04f 0300 	mov.w	r3, #0
 80052a2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80052a6:	4629      	mov	r1, r5
 80052a8:	008b      	lsls	r3, r1, #2
 80052aa:	4621      	mov	r1, r4
 80052ac:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80052b0:	4621      	mov	r1, r4
 80052b2:	008a      	lsls	r2, r1, #2
 80052b4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80052b8:	f7fa ffae 	bl	8000218 <__aeabi_uldivmod>
 80052bc:	4602      	mov	r2, r0
 80052be:	460b      	mov	r3, r1
 80052c0:	4b60      	ldr	r3, [pc, #384]	@ (8005444 <UART_SetConfig+0x504>)
 80052c2:	fba3 2302 	umull	r2, r3, r3, r2
 80052c6:	095b      	lsrs	r3, r3, #5
 80052c8:	011c      	lsls	r4, r3, #4
 80052ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80052ce:	2200      	movs	r2, #0
 80052d0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80052d4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80052d8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80052dc:	4642      	mov	r2, r8
 80052de:	464b      	mov	r3, r9
 80052e0:	1891      	adds	r1, r2, r2
 80052e2:	61b9      	str	r1, [r7, #24]
 80052e4:	415b      	adcs	r3, r3
 80052e6:	61fb      	str	r3, [r7, #28]
 80052e8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80052ec:	4641      	mov	r1, r8
 80052ee:	1851      	adds	r1, r2, r1
 80052f0:	6139      	str	r1, [r7, #16]
 80052f2:	4649      	mov	r1, r9
 80052f4:	414b      	adcs	r3, r1
 80052f6:	617b      	str	r3, [r7, #20]
 80052f8:	f04f 0200 	mov.w	r2, #0
 80052fc:	f04f 0300 	mov.w	r3, #0
 8005300:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005304:	4659      	mov	r1, fp
 8005306:	00cb      	lsls	r3, r1, #3
 8005308:	4651      	mov	r1, sl
 800530a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800530e:	4651      	mov	r1, sl
 8005310:	00ca      	lsls	r2, r1, #3
 8005312:	4610      	mov	r0, r2
 8005314:	4619      	mov	r1, r3
 8005316:	4603      	mov	r3, r0
 8005318:	4642      	mov	r2, r8
 800531a:	189b      	adds	r3, r3, r2
 800531c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005320:	464b      	mov	r3, r9
 8005322:	460a      	mov	r2, r1
 8005324:	eb42 0303 	adc.w	r3, r2, r3
 8005328:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800532c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005330:	685b      	ldr	r3, [r3, #4]
 8005332:	2200      	movs	r2, #0
 8005334:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005336:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005338:	f04f 0200 	mov.w	r2, #0
 800533c:	f04f 0300 	mov.w	r3, #0
 8005340:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005344:	4649      	mov	r1, r9
 8005346:	008b      	lsls	r3, r1, #2
 8005348:	4641      	mov	r1, r8
 800534a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800534e:	4641      	mov	r1, r8
 8005350:	008a      	lsls	r2, r1, #2
 8005352:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005356:	f7fa ff5f 	bl	8000218 <__aeabi_uldivmod>
 800535a:	4602      	mov	r2, r0
 800535c:	460b      	mov	r3, r1
 800535e:	4611      	mov	r1, r2
 8005360:	4b38      	ldr	r3, [pc, #224]	@ (8005444 <UART_SetConfig+0x504>)
 8005362:	fba3 2301 	umull	r2, r3, r3, r1
 8005366:	095b      	lsrs	r3, r3, #5
 8005368:	2264      	movs	r2, #100	@ 0x64
 800536a:	fb02 f303 	mul.w	r3, r2, r3
 800536e:	1acb      	subs	r3, r1, r3
 8005370:	011b      	lsls	r3, r3, #4
 8005372:	3332      	adds	r3, #50	@ 0x32
 8005374:	4a33      	ldr	r2, [pc, #204]	@ (8005444 <UART_SetConfig+0x504>)
 8005376:	fba2 2303 	umull	r2, r3, r2, r3
 800537a:	095b      	lsrs	r3, r3, #5
 800537c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005380:	441c      	add	r4, r3
 8005382:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005386:	2200      	movs	r2, #0
 8005388:	673b      	str	r3, [r7, #112]	@ 0x70
 800538a:	677a      	str	r2, [r7, #116]	@ 0x74
 800538c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005390:	4642      	mov	r2, r8
 8005392:	464b      	mov	r3, r9
 8005394:	1891      	adds	r1, r2, r2
 8005396:	60b9      	str	r1, [r7, #8]
 8005398:	415b      	adcs	r3, r3
 800539a:	60fb      	str	r3, [r7, #12]
 800539c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80053a0:	4641      	mov	r1, r8
 80053a2:	1851      	adds	r1, r2, r1
 80053a4:	6039      	str	r1, [r7, #0]
 80053a6:	4649      	mov	r1, r9
 80053a8:	414b      	adcs	r3, r1
 80053aa:	607b      	str	r3, [r7, #4]
 80053ac:	f04f 0200 	mov.w	r2, #0
 80053b0:	f04f 0300 	mov.w	r3, #0
 80053b4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80053b8:	4659      	mov	r1, fp
 80053ba:	00cb      	lsls	r3, r1, #3
 80053bc:	4651      	mov	r1, sl
 80053be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80053c2:	4651      	mov	r1, sl
 80053c4:	00ca      	lsls	r2, r1, #3
 80053c6:	4610      	mov	r0, r2
 80053c8:	4619      	mov	r1, r3
 80053ca:	4603      	mov	r3, r0
 80053cc:	4642      	mov	r2, r8
 80053ce:	189b      	adds	r3, r3, r2
 80053d0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80053d2:	464b      	mov	r3, r9
 80053d4:	460a      	mov	r2, r1
 80053d6:	eb42 0303 	adc.w	r3, r2, r3
 80053da:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80053dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053e0:	685b      	ldr	r3, [r3, #4]
 80053e2:	2200      	movs	r2, #0
 80053e4:	663b      	str	r3, [r7, #96]	@ 0x60
 80053e6:	667a      	str	r2, [r7, #100]	@ 0x64
 80053e8:	f04f 0200 	mov.w	r2, #0
 80053ec:	f04f 0300 	mov.w	r3, #0
 80053f0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80053f4:	4649      	mov	r1, r9
 80053f6:	008b      	lsls	r3, r1, #2
 80053f8:	4641      	mov	r1, r8
 80053fa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80053fe:	4641      	mov	r1, r8
 8005400:	008a      	lsls	r2, r1, #2
 8005402:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005406:	f7fa ff07 	bl	8000218 <__aeabi_uldivmod>
 800540a:	4602      	mov	r2, r0
 800540c:	460b      	mov	r3, r1
 800540e:	4b0d      	ldr	r3, [pc, #52]	@ (8005444 <UART_SetConfig+0x504>)
 8005410:	fba3 1302 	umull	r1, r3, r3, r2
 8005414:	095b      	lsrs	r3, r3, #5
 8005416:	2164      	movs	r1, #100	@ 0x64
 8005418:	fb01 f303 	mul.w	r3, r1, r3
 800541c:	1ad3      	subs	r3, r2, r3
 800541e:	011b      	lsls	r3, r3, #4
 8005420:	3332      	adds	r3, #50	@ 0x32
 8005422:	4a08      	ldr	r2, [pc, #32]	@ (8005444 <UART_SetConfig+0x504>)
 8005424:	fba2 2303 	umull	r2, r3, r2, r3
 8005428:	095b      	lsrs	r3, r3, #5
 800542a:	f003 020f 	and.w	r2, r3, #15
 800542e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	4422      	add	r2, r4
 8005436:	609a      	str	r2, [r3, #8]
}
 8005438:	bf00      	nop
 800543a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800543e:	46bd      	mov	sp, r7
 8005440:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005444:	51eb851f 	.word	0x51eb851f

08005448 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005448:	b084      	sub	sp, #16
 800544a:	b580      	push	{r7, lr}
 800544c:	b084      	sub	sp, #16
 800544e:	af00      	add	r7, sp, #0
 8005450:	6078      	str	r0, [r7, #4]
 8005452:	f107 001c 	add.w	r0, r7, #28
 8005456:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800545a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800545c:	2b01      	cmp	r3, #1
 800545e:	d122      	bne.n	80054a6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005464:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	68db      	ldr	r3, [r3, #12]
 8005470:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8005474:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005478:	687a      	ldr	r2, [r7, #4]
 800547a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	68db      	ldr	r3, [r3, #12]
 8005480:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005488:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800548a:	2b01      	cmp	r3, #1
 800548c:	d105      	bne.n	800549a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	68db      	ldr	r3, [r3, #12]
 8005492:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800549a:	6878      	ldr	r0, [r7, #4]
 800549c:	f001 fa3a 	bl	8006914 <USB_CoreReset>
 80054a0:	4603      	mov	r3, r0
 80054a2:	73fb      	strb	r3, [r7, #15]
 80054a4:	e01a      	b.n	80054dc <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	68db      	ldr	r3, [r3, #12]
 80054aa:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80054b2:	6878      	ldr	r0, [r7, #4]
 80054b4:	f001 fa2e 	bl	8006914 <USB_CoreReset>
 80054b8:	4603      	mov	r3, r0
 80054ba:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80054bc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d106      	bne.n	80054d0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054c6:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	639a      	str	r2, [r3, #56]	@ 0x38
 80054ce:	e005      	b.n	80054dc <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054d4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80054dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054de:	2b01      	cmp	r3, #1
 80054e0:	d10b      	bne.n	80054fa <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	689b      	ldr	r3, [r3, #8]
 80054e6:	f043 0206 	orr.w	r2, r3, #6
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	689b      	ldr	r3, [r3, #8]
 80054f2:	f043 0220 	orr.w	r2, r3, #32
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80054fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80054fc:	4618      	mov	r0, r3
 80054fe:	3710      	adds	r7, #16
 8005500:	46bd      	mov	sp, r7
 8005502:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005506:	b004      	add	sp, #16
 8005508:	4770      	bx	lr
	...

0800550c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800550c:	b480      	push	{r7}
 800550e:	b087      	sub	sp, #28
 8005510:	af00      	add	r7, sp, #0
 8005512:	60f8      	str	r0, [r7, #12]
 8005514:	60b9      	str	r1, [r7, #8]
 8005516:	4613      	mov	r3, r2
 8005518:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800551a:	79fb      	ldrb	r3, [r7, #7]
 800551c:	2b02      	cmp	r3, #2
 800551e:	d165      	bne.n	80055ec <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005520:	68bb      	ldr	r3, [r7, #8]
 8005522:	4a41      	ldr	r2, [pc, #260]	@ (8005628 <USB_SetTurnaroundTime+0x11c>)
 8005524:	4293      	cmp	r3, r2
 8005526:	d906      	bls.n	8005536 <USB_SetTurnaroundTime+0x2a>
 8005528:	68bb      	ldr	r3, [r7, #8]
 800552a:	4a40      	ldr	r2, [pc, #256]	@ (800562c <USB_SetTurnaroundTime+0x120>)
 800552c:	4293      	cmp	r3, r2
 800552e:	d202      	bcs.n	8005536 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005530:	230f      	movs	r3, #15
 8005532:	617b      	str	r3, [r7, #20]
 8005534:	e062      	b.n	80055fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005536:	68bb      	ldr	r3, [r7, #8]
 8005538:	4a3c      	ldr	r2, [pc, #240]	@ (800562c <USB_SetTurnaroundTime+0x120>)
 800553a:	4293      	cmp	r3, r2
 800553c:	d306      	bcc.n	800554c <USB_SetTurnaroundTime+0x40>
 800553e:	68bb      	ldr	r3, [r7, #8]
 8005540:	4a3b      	ldr	r2, [pc, #236]	@ (8005630 <USB_SetTurnaroundTime+0x124>)
 8005542:	4293      	cmp	r3, r2
 8005544:	d202      	bcs.n	800554c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005546:	230e      	movs	r3, #14
 8005548:	617b      	str	r3, [r7, #20]
 800554a:	e057      	b.n	80055fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800554c:	68bb      	ldr	r3, [r7, #8]
 800554e:	4a38      	ldr	r2, [pc, #224]	@ (8005630 <USB_SetTurnaroundTime+0x124>)
 8005550:	4293      	cmp	r3, r2
 8005552:	d306      	bcc.n	8005562 <USB_SetTurnaroundTime+0x56>
 8005554:	68bb      	ldr	r3, [r7, #8]
 8005556:	4a37      	ldr	r2, [pc, #220]	@ (8005634 <USB_SetTurnaroundTime+0x128>)
 8005558:	4293      	cmp	r3, r2
 800555a:	d202      	bcs.n	8005562 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800555c:	230d      	movs	r3, #13
 800555e:	617b      	str	r3, [r7, #20]
 8005560:	e04c      	b.n	80055fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005562:	68bb      	ldr	r3, [r7, #8]
 8005564:	4a33      	ldr	r2, [pc, #204]	@ (8005634 <USB_SetTurnaroundTime+0x128>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d306      	bcc.n	8005578 <USB_SetTurnaroundTime+0x6c>
 800556a:	68bb      	ldr	r3, [r7, #8]
 800556c:	4a32      	ldr	r2, [pc, #200]	@ (8005638 <USB_SetTurnaroundTime+0x12c>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d802      	bhi.n	8005578 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005572:	230c      	movs	r3, #12
 8005574:	617b      	str	r3, [r7, #20]
 8005576:	e041      	b.n	80055fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005578:	68bb      	ldr	r3, [r7, #8]
 800557a:	4a2f      	ldr	r2, [pc, #188]	@ (8005638 <USB_SetTurnaroundTime+0x12c>)
 800557c:	4293      	cmp	r3, r2
 800557e:	d906      	bls.n	800558e <USB_SetTurnaroundTime+0x82>
 8005580:	68bb      	ldr	r3, [r7, #8]
 8005582:	4a2e      	ldr	r2, [pc, #184]	@ (800563c <USB_SetTurnaroundTime+0x130>)
 8005584:	4293      	cmp	r3, r2
 8005586:	d802      	bhi.n	800558e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005588:	230b      	movs	r3, #11
 800558a:	617b      	str	r3, [r7, #20]
 800558c:	e036      	b.n	80055fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800558e:	68bb      	ldr	r3, [r7, #8]
 8005590:	4a2a      	ldr	r2, [pc, #168]	@ (800563c <USB_SetTurnaroundTime+0x130>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d906      	bls.n	80055a4 <USB_SetTurnaroundTime+0x98>
 8005596:	68bb      	ldr	r3, [r7, #8]
 8005598:	4a29      	ldr	r2, [pc, #164]	@ (8005640 <USB_SetTurnaroundTime+0x134>)
 800559a:	4293      	cmp	r3, r2
 800559c:	d802      	bhi.n	80055a4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800559e:	230a      	movs	r3, #10
 80055a0:	617b      	str	r3, [r7, #20]
 80055a2:	e02b      	b.n	80055fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	4a26      	ldr	r2, [pc, #152]	@ (8005640 <USB_SetTurnaroundTime+0x134>)
 80055a8:	4293      	cmp	r3, r2
 80055aa:	d906      	bls.n	80055ba <USB_SetTurnaroundTime+0xae>
 80055ac:	68bb      	ldr	r3, [r7, #8]
 80055ae:	4a25      	ldr	r2, [pc, #148]	@ (8005644 <USB_SetTurnaroundTime+0x138>)
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d202      	bcs.n	80055ba <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80055b4:	2309      	movs	r3, #9
 80055b6:	617b      	str	r3, [r7, #20]
 80055b8:	e020      	b.n	80055fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80055ba:	68bb      	ldr	r3, [r7, #8]
 80055bc:	4a21      	ldr	r2, [pc, #132]	@ (8005644 <USB_SetTurnaroundTime+0x138>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d306      	bcc.n	80055d0 <USB_SetTurnaroundTime+0xc4>
 80055c2:	68bb      	ldr	r3, [r7, #8]
 80055c4:	4a20      	ldr	r2, [pc, #128]	@ (8005648 <USB_SetTurnaroundTime+0x13c>)
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d802      	bhi.n	80055d0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80055ca:	2308      	movs	r3, #8
 80055cc:	617b      	str	r3, [r7, #20]
 80055ce:	e015      	b.n	80055fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80055d0:	68bb      	ldr	r3, [r7, #8]
 80055d2:	4a1d      	ldr	r2, [pc, #116]	@ (8005648 <USB_SetTurnaroundTime+0x13c>)
 80055d4:	4293      	cmp	r3, r2
 80055d6:	d906      	bls.n	80055e6 <USB_SetTurnaroundTime+0xda>
 80055d8:	68bb      	ldr	r3, [r7, #8]
 80055da:	4a1c      	ldr	r2, [pc, #112]	@ (800564c <USB_SetTurnaroundTime+0x140>)
 80055dc:	4293      	cmp	r3, r2
 80055de:	d202      	bcs.n	80055e6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80055e0:	2307      	movs	r3, #7
 80055e2:	617b      	str	r3, [r7, #20]
 80055e4:	e00a      	b.n	80055fc <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80055e6:	2306      	movs	r3, #6
 80055e8:	617b      	str	r3, [r7, #20]
 80055ea:	e007      	b.n	80055fc <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80055ec:	79fb      	ldrb	r3, [r7, #7]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d102      	bne.n	80055f8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80055f2:	2309      	movs	r3, #9
 80055f4:	617b      	str	r3, [r7, #20]
 80055f6:	e001      	b.n	80055fc <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80055f8:	2309      	movs	r3, #9
 80055fa:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	68db      	ldr	r3, [r3, #12]
 8005600:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	68da      	ldr	r2, [r3, #12]
 800560c:	697b      	ldr	r3, [r7, #20]
 800560e:	029b      	lsls	r3, r3, #10
 8005610:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8005614:	431a      	orrs	r2, r3
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800561a:	2300      	movs	r3, #0
}
 800561c:	4618      	mov	r0, r3
 800561e:	371c      	adds	r7, #28
 8005620:	46bd      	mov	sp, r7
 8005622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005626:	4770      	bx	lr
 8005628:	00d8acbf 	.word	0x00d8acbf
 800562c:	00e4e1c0 	.word	0x00e4e1c0
 8005630:	00f42400 	.word	0x00f42400
 8005634:	01067380 	.word	0x01067380
 8005638:	011a499f 	.word	0x011a499f
 800563c:	01312cff 	.word	0x01312cff
 8005640:	014ca43f 	.word	0x014ca43f
 8005644:	016e3600 	.word	0x016e3600
 8005648:	01a6ab1f 	.word	0x01a6ab1f
 800564c:	01e84800 	.word	0x01e84800

08005650 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005650:	b480      	push	{r7}
 8005652:	b083      	sub	sp, #12
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	689b      	ldr	r3, [r3, #8]
 800565c:	f043 0201 	orr.w	r2, r3, #1
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005664:	2300      	movs	r3, #0
}
 8005666:	4618      	mov	r0, r3
 8005668:	370c      	adds	r7, #12
 800566a:	46bd      	mov	sp, r7
 800566c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005670:	4770      	bx	lr

08005672 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005672:	b480      	push	{r7}
 8005674:	b083      	sub	sp, #12
 8005676:	af00      	add	r7, sp, #0
 8005678:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	689b      	ldr	r3, [r3, #8]
 800567e:	f023 0201 	bic.w	r2, r3, #1
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005686:	2300      	movs	r3, #0
}
 8005688:	4618      	mov	r0, r3
 800568a:	370c      	adds	r7, #12
 800568c:	46bd      	mov	sp, r7
 800568e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005692:	4770      	bx	lr

08005694 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005694:	b580      	push	{r7, lr}
 8005696:	b084      	sub	sp, #16
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
 800569c:	460b      	mov	r3, r1
 800569e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80056a0:	2300      	movs	r3, #0
 80056a2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	68db      	ldr	r3, [r3, #12]
 80056a8:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80056b0:	78fb      	ldrb	r3, [r7, #3]
 80056b2:	2b01      	cmp	r3, #1
 80056b4:	d115      	bne.n	80056e2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	68db      	ldr	r3, [r3, #12]
 80056ba:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80056c2:	2001      	movs	r0, #1
 80056c4:	f7fb fe2c 	bl	8001320 <HAL_Delay>
      ms++;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	3301      	adds	r3, #1
 80056cc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80056ce:	6878      	ldr	r0, [r7, #4]
 80056d0:	f001 f890 	bl	80067f4 <USB_GetMode>
 80056d4:	4603      	mov	r3, r0
 80056d6:	2b01      	cmp	r3, #1
 80056d8:	d01e      	beq.n	8005718 <USB_SetCurrentMode+0x84>
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	2b31      	cmp	r3, #49	@ 0x31
 80056de:	d9f0      	bls.n	80056c2 <USB_SetCurrentMode+0x2e>
 80056e0:	e01a      	b.n	8005718 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80056e2:	78fb      	ldrb	r3, [r7, #3]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d115      	bne.n	8005714 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	68db      	ldr	r3, [r3, #12]
 80056ec:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80056f4:	2001      	movs	r0, #1
 80056f6:	f7fb fe13 	bl	8001320 <HAL_Delay>
      ms++;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	3301      	adds	r3, #1
 80056fe:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005700:	6878      	ldr	r0, [r7, #4]
 8005702:	f001 f877 	bl	80067f4 <USB_GetMode>
 8005706:	4603      	mov	r3, r0
 8005708:	2b00      	cmp	r3, #0
 800570a:	d005      	beq.n	8005718 <USB_SetCurrentMode+0x84>
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	2b31      	cmp	r3, #49	@ 0x31
 8005710:	d9f0      	bls.n	80056f4 <USB_SetCurrentMode+0x60>
 8005712:	e001      	b.n	8005718 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005714:	2301      	movs	r3, #1
 8005716:	e005      	b.n	8005724 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	2b32      	cmp	r3, #50	@ 0x32
 800571c:	d101      	bne.n	8005722 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800571e:	2301      	movs	r3, #1
 8005720:	e000      	b.n	8005724 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005722:	2300      	movs	r3, #0
}
 8005724:	4618      	mov	r0, r3
 8005726:	3710      	adds	r7, #16
 8005728:	46bd      	mov	sp, r7
 800572a:	bd80      	pop	{r7, pc}

0800572c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800572c:	b084      	sub	sp, #16
 800572e:	b580      	push	{r7, lr}
 8005730:	b086      	sub	sp, #24
 8005732:	af00      	add	r7, sp, #0
 8005734:	6078      	str	r0, [r7, #4]
 8005736:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800573a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800573e:	2300      	movs	r3, #0
 8005740:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005746:	2300      	movs	r3, #0
 8005748:	613b      	str	r3, [r7, #16]
 800574a:	e009      	b.n	8005760 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800574c:	687a      	ldr	r2, [r7, #4]
 800574e:	693b      	ldr	r3, [r7, #16]
 8005750:	3340      	adds	r3, #64	@ 0x40
 8005752:	009b      	lsls	r3, r3, #2
 8005754:	4413      	add	r3, r2
 8005756:	2200      	movs	r2, #0
 8005758:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800575a:	693b      	ldr	r3, [r7, #16]
 800575c:	3301      	adds	r3, #1
 800575e:	613b      	str	r3, [r7, #16]
 8005760:	693b      	ldr	r3, [r7, #16]
 8005762:	2b0e      	cmp	r3, #14
 8005764:	d9f2      	bls.n	800574c <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005766:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005768:	2b00      	cmp	r3, #0
 800576a:	d11c      	bne.n	80057a6 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005772:	685b      	ldr	r3, [r3, #4]
 8005774:	68fa      	ldr	r2, [r7, #12]
 8005776:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800577a:	f043 0302 	orr.w	r3, r3, #2
 800577e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005784:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	601a      	str	r2, [r3, #0]
 80057a4:	e005      	b.n	80057b2 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057aa:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80057b8:	461a      	mov	r2, r3
 80057ba:	2300      	movs	r3, #0
 80057bc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80057c4:	4619      	mov	r1, r3
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80057cc:	461a      	mov	r2, r3
 80057ce:	680b      	ldr	r3, [r1, #0]
 80057d0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80057d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057d4:	2b01      	cmp	r3, #1
 80057d6:	d10c      	bne.n	80057f2 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80057d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d104      	bne.n	80057e8 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80057de:	2100      	movs	r1, #0
 80057e0:	6878      	ldr	r0, [r7, #4]
 80057e2:	f000 f945 	bl	8005a70 <USB_SetDevSpeed>
 80057e6:	e008      	b.n	80057fa <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80057e8:	2101      	movs	r1, #1
 80057ea:	6878      	ldr	r0, [r7, #4]
 80057ec:	f000 f940 	bl	8005a70 <USB_SetDevSpeed>
 80057f0:	e003      	b.n	80057fa <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80057f2:	2103      	movs	r1, #3
 80057f4:	6878      	ldr	r0, [r7, #4]
 80057f6:	f000 f93b 	bl	8005a70 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80057fa:	2110      	movs	r1, #16
 80057fc:	6878      	ldr	r0, [r7, #4]
 80057fe:	f000 f8f3 	bl	80059e8 <USB_FlushTxFifo>
 8005802:	4603      	mov	r3, r0
 8005804:	2b00      	cmp	r3, #0
 8005806:	d001      	beq.n	800580c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8005808:	2301      	movs	r3, #1
 800580a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800580c:	6878      	ldr	r0, [r7, #4]
 800580e:	f000 f90f 	bl	8005a30 <USB_FlushRxFifo>
 8005812:	4603      	mov	r3, r0
 8005814:	2b00      	cmp	r3, #0
 8005816:	d001      	beq.n	800581c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8005818:	2301      	movs	r3, #1
 800581a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005822:	461a      	mov	r2, r3
 8005824:	2300      	movs	r3, #0
 8005826:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800582e:	461a      	mov	r2, r3
 8005830:	2300      	movs	r3, #0
 8005832:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800583a:	461a      	mov	r2, r3
 800583c:	2300      	movs	r3, #0
 800583e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005840:	2300      	movs	r3, #0
 8005842:	613b      	str	r3, [r7, #16]
 8005844:	e043      	b.n	80058ce <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005846:	693b      	ldr	r3, [r7, #16]
 8005848:	015a      	lsls	r2, r3, #5
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	4413      	add	r3, r2
 800584e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005858:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800585c:	d118      	bne.n	8005890 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800585e:	693b      	ldr	r3, [r7, #16]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d10a      	bne.n	800587a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005864:	693b      	ldr	r3, [r7, #16]
 8005866:	015a      	lsls	r2, r3, #5
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	4413      	add	r3, r2
 800586c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005870:	461a      	mov	r2, r3
 8005872:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005876:	6013      	str	r3, [r2, #0]
 8005878:	e013      	b.n	80058a2 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800587a:	693b      	ldr	r3, [r7, #16]
 800587c:	015a      	lsls	r2, r3, #5
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	4413      	add	r3, r2
 8005882:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005886:	461a      	mov	r2, r3
 8005888:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800588c:	6013      	str	r3, [r2, #0]
 800588e:	e008      	b.n	80058a2 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005890:	693b      	ldr	r3, [r7, #16]
 8005892:	015a      	lsls	r2, r3, #5
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	4413      	add	r3, r2
 8005898:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800589c:	461a      	mov	r2, r3
 800589e:	2300      	movs	r3, #0
 80058a0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80058a2:	693b      	ldr	r3, [r7, #16]
 80058a4:	015a      	lsls	r2, r3, #5
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	4413      	add	r3, r2
 80058aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80058ae:	461a      	mov	r2, r3
 80058b0:	2300      	movs	r3, #0
 80058b2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80058b4:	693b      	ldr	r3, [r7, #16]
 80058b6:	015a      	lsls	r2, r3, #5
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	4413      	add	r3, r2
 80058bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80058c0:	461a      	mov	r2, r3
 80058c2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80058c6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80058c8:	693b      	ldr	r3, [r7, #16]
 80058ca:	3301      	adds	r3, #1
 80058cc:	613b      	str	r3, [r7, #16]
 80058ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058d0:	693a      	ldr	r2, [r7, #16]
 80058d2:	429a      	cmp	r2, r3
 80058d4:	d3b7      	bcc.n	8005846 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80058d6:	2300      	movs	r3, #0
 80058d8:	613b      	str	r3, [r7, #16]
 80058da:	e043      	b.n	8005964 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80058dc:	693b      	ldr	r3, [r7, #16]
 80058de:	015a      	lsls	r2, r3, #5
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	4413      	add	r3, r2
 80058e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80058ee:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80058f2:	d118      	bne.n	8005926 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80058f4:	693b      	ldr	r3, [r7, #16]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d10a      	bne.n	8005910 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80058fa:	693b      	ldr	r3, [r7, #16]
 80058fc:	015a      	lsls	r2, r3, #5
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	4413      	add	r3, r2
 8005902:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005906:	461a      	mov	r2, r3
 8005908:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800590c:	6013      	str	r3, [r2, #0]
 800590e:	e013      	b.n	8005938 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005910:	693b      	ldr	r3, [r7, #16]
 8005912:	015a      	lsls	r2, r3, #5
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	4413      	add	r3, r2
 8005918:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800591c:	461a      	mov	r2, r3
 800591e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005922:	6013      	str	r3, [r2, #0]
 8005924:	e008      	b.n	8005938 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005926:	693b      	ldr	r3, [r7, #16]
 8005928:	015a      	lsls	r2, r3, #5
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	4413      	add	r3, r2
 800592e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005932:	461a      	mov	r2, r3
 8005934:	2300      	movs	r3, #0
 8005936:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005938:	693b      	ldr	r3, [r7, #16]
 800593a:	015a      	lsls	r2, r3, #5
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	4413      	add	r3, r2
 8005940:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005944:	461a      	mov	r2, r3
 8005946:	2300      	movs	r3, #0
 8005948:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800594a:	693b      	ldr	r3, [r7, #16]
 800594c:	015a      	lsls	r2, r3, #5
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	4413      	add	r3, r2
 8005952:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005956:	461a      	mov	r2, r3
 8005958:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800595c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800595e:	693b      	ldr	r3, [r7, #16]
 8005960:	3301      	adds	r3, #1
 8005962:	613b      	str	r3, [r7, #16]
 8005964:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005966:	693a      	ldr	r2, [r7, #16]
 8005968:	429a      	cmp	r2, r3
 800596a:	d3b7      	bcc.n	80058dc <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005972:	691b      	ldr	r3, [r3, #16]
 8005974:	68fa      	ldr	r2, [r7, #12]
 8005976:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800597a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800597e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2200      	movs	r2, #0
 8005984:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800598c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800598e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005990:	2b00      	cmp	r3, #0
 8005992:	d105      	bne.n	80059a0 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	699b      	ldr	r3, [r3, #24]
 8005998:	f043 0210 	orr.w	r2, r3, #16
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	699a      	ldr	r2, [r3, #24]
 80059a4:	4b0f      	ldr	r3, [pc, #60]	@ (80059e4 <USB_DevInit+0x2b8>)
 80059a6:	4313      	orrs	r3, r2
 80059a8:	687a      	ldr	r2, [r7, #4]
 80059aa:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80059ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d005      	beq.n	80059be <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	699b      	ldr	r3, [r3, #24]
 80059b6:	f043 0208 	orr.w	r2, r3, #8
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80059be:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80059c0:	2b01      	cmp	r3, #1
 80059c2:	d107      	bne.n	80059d4 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	699b      	ldr	r3, [r3, #24]
 80059c8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80059cc:	f043 0304 	orr.w	r3, r3, #4
 80059d0:	687a      	ldr	r2, [r7, #4]
 80059d2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80059d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80059d6:	4618      	mov	r0, r3
 80059d8:	3718      	adds	r7, #24
 80059da:	46bd      	mov	sp, r7
 80059dc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80059e0:	b004      	add	sp, #16
 80059e2:	4770      	bx	lr
 80059e4:	803c3800 	.word	0x803c3800

080059e8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80059e8:	b480      	push	{r7}
 80059ea:	b085      	sub	sp, #20
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
 80059f0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80059f2:	2300      	movs	r3, #0
 80059f4:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	019b      	lsls	r3, r3, #6
 80059fa:	f043 0220 	orr.w	r2, r3, #32
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	3301      	adds	r3, #1
 8005a06:	60fb      	str	r3, [r7, #12]
 8005a08:	4a08      	ldr	r2, [pc, #32]	@ (8005a2c <USB_FlushTxFifo+0x44>)
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d901      	bls.n	8005a12 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8005a0e:	2303      	movs	r3, #3
 8005a10:	e006      	b.n	8005a20 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	691b      	ldr	r3, [r3, #16]
 8005a16:	f003 0320 	and.w	r3, r3, #32
 8005a1a:	2b20      	cmp	r3, #32
 8005a1c:	d0f1      	beq.n	8005a02 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8005a1e:	2300      	movs	r3, #0
}
 8005a20:	4618      	mov	r0, r3
 8005a22:	3714      	adds	r7, #20
 8005a24:	46bd      	mov	sp, r7
 8005a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2a:	4770      	bx	lr
 8005a2c:	00030d40 	.word	0x00030d40

08005a30 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005a30:	b480      	push	{r7}
 8005a32:	b085      	sub	sp, #20
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005a38:	2300      	movs	r3, #0
 8005a3a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2210      	movs	r2, #16
 8005a40:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	3301      	adds	r3, #1
 8005a46:	60fb      	str	r3, [r7, #12]
 8005a48:	4a08      	ldr	r2, [pc, #32]	@ (8005a6c <USB_FlushRxFifo+0x3c>)
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d901      	bls.n	8005a52 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8005a4e:	2303      	movs	r3, #3
 8005a50:	e006      	b.n	8005a60 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	691b      	ldr	r3, [r3, #16]
 8005a56:	f003 0310 	and.w	r3, r3, #16
 8005a5a:	2b10      	cmp	r3, #16
 8005a5c:	d0f1      	beq.n	8005a42 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8005a5e:	2300      	movs	r3, #0
}
 8005a60:	4618      	mov	r0, r3
 8005a62:	3714      	adds	r7, #20
 8005a64:	46bd      	mov	sp, r7
 8005a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6a:	4770      	bx	lr
 8005a6c:	00030d40 	.word	0x00030d40

08005a70 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005a70:	b480      	push	{r7}
 8005a72:	b085      	sub	sp, #20
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
 8005a78:	460b      	mov	r3, r1
 8005a7a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a86:	681a      	ldr	r2, [r3, #0]
 8005a88:	78fb      	ldrb	r3, [r7, #3]
 8005a8a:	68f9      	ldr	r1, [r7, #12]
 8005a8c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005a90:	4313      	orrs	r3, r2
 8005a92:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005a94:	2300      	movs	r3, #0
}
 8005a96:	4618      	mov	r0, r3
 8005a98:	3714      	adds	r7, #20
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa0:	4770      	bx	lr

08005aa2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005aa2:	b480      	push	{r7}
 8005aa4:	b087      	sub	sp, #28
 8005aa6:	af00      	add	r7, sp, #0
 8005aa8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005aae:	693b      	ldr	r3, [r7, #16]
 8005ab0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ab4:	689b      	ldr	r3, [r3, #8]
 8005ab6:	f003 0306 	and.w	r3, r3, #6
 8005aba:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d102      	bne.n	8005ac8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	75fb      	strb	r3, [r7, #23]
 8005ac6:	e00a      	b.n	8005ade <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	2b02      	cmp	r3, #2
 8005acc:	d002      	beq.n	8005ad4 <USB_GetDevSpeed+0x32>
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	2b06      	cmp	r3, #6
 8005ad2:	d102      	bne.n	8005ada <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005ad4:	2302      	movs	r3, #2
 8005ad6:	75fb      	strb	r3, [r7, #23]
 8005ad8:	e001      	b.n	8005ade <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005ada:	230f      	movs	r3, #15
 8005adc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005ade:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	371c      	adds	r7, #28
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aea:	4770      	bx	lr

08005aec <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005aec:	b480      	push	{r7}
 8005aee:	b085      	sub	sp, #20
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
 8005af4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	781b      	ldrb	r3, [r3, #0]
 8005afe:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	785b      	ldrb	r3, [r3, #1]
 8005b04:	2b01      	cmp	r3, #1
 8005b06:	d13a      	bne.n	8005b7e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b0e:	69da      	ldr	r2, [r3, #28]
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	781b      	ldrb	r3, [r3, #0]
 8005b14:	f003 030f 	and.w	r3, r3, #15
 8005b18:	2101      	movs	r1, #1
 8005b1a:	fa01 f303 	lsl.w	r3, r1, r3
 8005b1e:	b29b      	uxth	r3, r3
 8005b20:	68f9      	ldr	r1, [r7, #12]
 8005b22:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005b26:	4313      	orrs	r3, r2
 8005b28:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005b2a:	68bb      	ldr	r3, [r7, #8]
 8005b2c:	015a      	lsls	r2, r3, #5
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	4413      	add	r3, r2
 8005b32:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d155      	bne.n	8005bec <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005b40:	68bb      	ldr	r3, [r7, #8]
 8005b42:	015a      	lsls	r2, r3, #5
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	4413      	add	r3, r2
 8005b48:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b4c:	681a      	ldr	r2, [r3, #0]
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	689b      	ldr	r3, [r3, #8]
 8005b52:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005b56:	683b      	ldr	r3, [r7, #0]
 8005b58:	78db      	ldrb	r3, [r3, #3]
 8005b5a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005b5c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005b5e:	68bb      	ldr	r3, [r7, #8]
 8005b60:	059b      	lsls	r3, r3, #22
 8005b62:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005b64:	4313      	orrs	r3, r2
 8005b66:	68ba      	ldr	r2, [r7, #8]
 8005b68:	0151      	lsls	r1, r2, #5
 8005b6a:	68fa      	ldr	r2, [r7, #12]
 8005b6c:	440a      	add	r2, r1
 8005b6e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005b72:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005b76:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005b7a:	6013      	str	r3, [r2, #0]
 8005b7c:	e036      	b.n	8005bec <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b84:	69da      	ldr	r2, [r3, #28]
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	781b      	ldrb	r3, [r3, #0]
 8005b8a:	f003 030f 	and.w	r3, r3, #15
 8005b8e:	2101      	movs	r1, #1
 8005b90:	fa01 f303 	lsl.w	r3, r1, r3
 8005b94:	041b      	lsls	r3, r3, #16
 8005b96:	68f9      	ldr	r1, [r7, #12]
 8005b98:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005b9c:	4313      	orrs	r3, r2
 8005b9e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005ba0:	68bb      	ldr	r3, [r7, #8]
 8005ba2:	015a      	lsls	r2, r3, #5
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	4413      	add	r3, r2
 8005ba8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d11a      	bne.n	8005bec <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005bb6:	68bb      	ldr	r3, [r7, #8]
 8005bb8:	015a      	lsls	r2, r3, #5
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	4413      	add	r3, r2
 8005bbe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005bc2:	681a      	ldr	r2, [r3, #0]
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	689b      	ldr	r3, [r3, #8]
 8005bc8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	78db      	ldrb	r3, [r3, #3]
 8005bd0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005bd2:	430b      	orrs	r3, r1
 8005bd4:	4313      	orrs	r3, r2
 8005bd6:	68ba      	ldr	r2, [r7, #8]
 8005bd8:	0151      	lsls	r1, r2, #5
 8005bda:	68fa      	ldr	r2, [r7, #12]
 8005bdc:	440a      	add	r2, r1
 8005bde:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005be2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005be6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005bea:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005bec:	2300      	movs	r3, #0
}
 8005bee:	4618      	mov	r0, r3
 8005bf0:	3714      	adds	r7, #20
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf8:	4770      	bx	lr
	...

08005bfc <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b08a      	sub	sp, #40	@ 0x28
 8005c00:	af02      	add	r7, sp, #8
 8005c02:	60f8      	str	r0, [r7, #12]
 8005c04:	60b9      	str	r1, [r7, #8]
 8005c06:	4613      	mov	r3, r2
 8005c08:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005c0e:	68bb      	ldr	r3, [r7, #8]
 8005c10:	781b      	ldrb	r3, [r3, #0]
 8005c12:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005c14:	68bb      	ldr	r3, [r7, #8]
 8005c16:	785b      	ldrb	r3, [r3, #1]
 8005c18:	2b01      	cmp	r3, #1
 8005c1a:	f040 815c 	bne.w	8005ed6 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005c1e:	68bb      	ldr	r3, [r7, #8]
 8005c20:	695b      	ldr	r3, [r3, #20]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d132      	bne.n	8005c8c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005c26:	69bb      	ldr	r3, [r7, #24]
 8005c28:	015a      	lsls	r2, r3, #5
 8005c2a:	69fb      	ldr	r3, [r7, #28]
 8005c2c:	4413      	add	r3, r2
 8005c2e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c32:	691b      	ldr	r3, [r3, #16]
 8005c34:	69ba      	ldr	r2, [r7, #24]
 8005c36:	0151      	lsls	r1, r2, #5
 8005c38:	69fa      	ldr	r2, [r7, #28]
 8005c3a:	440a      	add	r2, r1
 8005c3c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005c40:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005c44:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005c48:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005c4a:	69bb      	ldr	r3, [r7, #24]
 8005c4c:	015a      	lsls	r2, r3, #5
 8005c4e:	69fb      	ldr	r3, [r7, #28]
 8005c50:	4413      	add	r3, r2
 8005c52:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c56:	691b      	ldr	r3, [r3, #16]
 8005c58:	69ba      	ldr	r2, [r7, #24]
 8005c5a:	0151      	lsls	r1, r2, #5
 8005c5c:	69fa      	ldr	r2, [r7, #28]
 8005c5e:	440a      	add	r2, r1
 8005c60:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005c64:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005c68:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005c6a:	69bb      	ldr	r3, [r7, #24]
 8005c6c:	015a      	lsls	r2, r3, #5
 8005c6e:	69fb      	ldr	r3, [r7, #28]
 8005c70:	4413      	add	r3, r2
 8005c72:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c76:	691b      	ldr	r3, [r3, #16]
 8005c78:	69ba      	ldr	r2, [r7, #24]
 8005c7a:	0151      	lsls	r1, r2, #5
 8005c7c:	69fa      	ldr	r2, [r7, #28]
 8005c7e:	440a      	add	r2, r1
 8005c80:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005c84:	0cdb      	lsrs	r3, r3, #19
 8005c86:	04db      	lsls	r3, r3, #19
 8005c88:	6113      	str	r3, [r2, #16]
 8005c8a:	e074      	b.n	8005d76 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005c8c:	69bb      	ldr	r3, [r7, #24]
 8005c8e:	015a      	lsls	r2, r3, #5
 8005c90:	69fb      	ldr	r3, [r7, #28]
 8005c92:	4413      	add	r3, r2
 8005c94:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c98:	691b      	ldr	r3, [r3, #16]
 8005c9a:	69ba      	ldr	r2, [r7, #24]
 8005c9c:	0151      	lsls	r1, r2, #5
 8005c9e:	69fa      	ldr	r2, [r7, #28]
 8005ca0:	440a      	add	r2, r1
 8005ca2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005ca6:	0cdb      	lsrs	r3, r3, #19
 8005ca8:	04db      	lsls	r3, r3, #19
 8005caa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005cac:	69bb      	ldr	r3, [r7, #24]
 8005cae:	015a      	lsls	r2, r3, #5
 8005cb0:	69fb      	ldr	r3, [r7, #28]
 8005cb2:	4413      	add	r3, r2
 8005cb4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005cb8:	691b      	ldr	r3, [r3, #16]
 8005cba:	69ba      	ldr	r2, [r7, #24]
 8005cbc:	0151      	lsls	r1, r2, #5
 8005cbe:	69fa      	ldr	r2, [r7, #28]
 8005cc0:	440a      	add	r2, r1
 8005cc2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005cc6:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005cca:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005cce:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005cd0:	69bb      	ldr	r3, [r7, #24]
 8005cd2:	015a      	lsls	r2, r3, #5
 8005cd4:	69fb      	ldr	r3, [r7, #28]
 8005cd6:	4413      	add	r3, r2
 8005cd8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005cdc:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005cde:	68bb      	ldr	r3, [r7, #8]
 8005ce0:	6959      	ldr	r1, [r3, #20]
 8005ce2:	68bb      	ldr	r3, [r7, #8]
 8005ce4:	689b      	ldr	r3, [r3, #8]
 8005ce6:	440b      	add	r3, r1
 8005ce8:	1e59      	subs	r1, r3, #1
 8005cea:	68bb      	ldr	r3, [r7, #8]
 8005cec:	689b      	ldr	r3, [r3, #8]
 8005cee:	fbb1 f3f3 	udiv	r3, r1, r3
 8005cf2:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005cf4:	4b9d      	ldr	r3, [pc, #628]	@ (8005f6c <USB_EPStartXfer+0x370>)
 8005cf6:	400b      	ands	r3, r1
 8005cf8:	69b9      	ldr	r1, [r7, #24]
 8005cfa:	0148      	lsls	r0, r1, #5
 8005cfc:	69f9      	ldr	r1, [r7, #28]
 8005cfe:	4401      	add	r1, r0
 8005d00:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005d04:	4313      	orrs	r3, r2
 8005d06:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005d08:	69bb      	ldr	r3, [r7, #24]
 8005d0a:	015a      	lsls	r2, r3, #5
 8005d0c:	69fb      	ldr	r3, [r7, #28]
 8005d0e:	4413      	add	r3, r2
 8005d10:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d14:	691a      	ldr	r2, [r3, #16]
 8005d16:	68bb      	ldr	r3, [r7, #8]
 8005d18:	695b      	ldr	r3, [r3, #20]
 8005d1a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005d1e:	69b9      	ldr	r1, [r7, #24]
 8005d20:	0148      	lsls	r0, r1, #5
 8005d22:	69f9      	ldr	r1, [r7, #28]
 8005d24:	4401      	add	r1, r0
 8005d26:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005d2a:	4313      	orrs	r3, r2
 8005d2c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005d2e:	68bb      	ldr	r3, [r7, #8]
 8005d30:	78db      	ldrb	r3, [r3, #3]
 8005d32:	2b01      	cmp	r3, #1
 8005d34:	d11f      	bne.n	8005d76 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005d36:	69bb      	ldr	r3, [r7, #24]
 8005d38:	015a      	lsls	r2, r3, #5
 8005d3a:	69fb      	ldr	r3, [r7, #28]
 8005d3c:	4413      	add	r3, r2
 8005d3e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d42:	691b      	ldr	r3, [r3, #16]
 8005d44:	69ba      	ldr	r2, [r7, #24]
 8005d46:	0151      	lsls	r1, r2, #5
 8005d48:	69fa      	ldr	r2, [r7, #28]
 8005d4a:	440a      	add	r2, r1
 8005d4c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005d50:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8005d54:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005d56:	69bb      	ldr	r3, [r7, #24]
 8005d58:	015a      	lsls	r2, r3, #5
 8005d5a:	69fb      	ldr	r3, [r7, #28]
 8005d5c:	4413      	add	r3, r2
 8005d5e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d62:	691b      	ldr	r3, [r3, #16]
 8005d64:	69ba      	ldr	r2, [r7, #24]
 8005d66:	0151      	lsls	r1, r2, #5
 8005d68:	69fa      	ldr	r2, [r7, #28]
 8005d6a:	440a      	add	r2, r1
 8005d6c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005d70:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005d74:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005d76:	79fb      	ldrb	r3, [r7, #7]
 8005d78:	2b01      	cmp	r3, #1
 8005d7a:	d14b      	bne.n	8005e14 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005d7c:	68bb      	ldr	r3, [r7, #8]
 8005d7e:	691b      	ldr	r3, [r3, #16]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d009      	beq.n	8005d98 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005d84:	69bb      	ldr	r3, [r7, #24]
 8005d86:	015a      	lsls	r2, r3, #5
 8005d88:	69fb      	ldr	r3, [r7, #28]
 8005d8a:	4413      	add	r3, r2
 8005d8c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d90:	461a      	mov	r2, r3
 8005d92:	68bb      	ldr	r3, [r7, #8]
 8005d94:	691b      	ldr	r3, [r3, #16]
 8005d96:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005d98:	68bb      	ldr	r3, [r7, #8]
 8005d9a:	78db      	ldrb	r3, [r3, #3]
 8005d9c:	2b01      	cmp	r3, #1
 8005d9e:	d128      	bne.n	8005df2 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005da0:	69fb      	ldr	r3, [r7, #28]
 8005da2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005da6:	689b      	ldr	r3, [r3, #8]
 8005da8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d110      	bne.n	8005dd2 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005db0:	69bb      	ldr	r3, [r7, #24]
 8005db2:	015a      	lsls	r2, r3, #5
 8005db4:	69fb      	ldr	r3, [r7, #28]
 8005db6:	4413      	add	r3, r2
 8005db8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	69ba      	ldr	r2, [r7, #24]
 8005dc0:	0151      	lsls	r1, r2, #5
 8005dc2:	69fa      	ldr	r2, [r7, #28]
 8005dc4:	440a      	add	r2, r1
 8005dc6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005dca:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005dce:	6013      	str	r3, [r2, #0]
 8005dd0:	e00f      	b.n	8005df2 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005dd2:	69bb      	ldr	r3, [r7, #24]
 8005dd4:	015a      	lsls	r2, r3, #5
 8005dd6:	69fb      	ldr	r3, [r7, #28]
 8005dd8:	4413      	add	r3, r2
 8005dda:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	69ba      	ldr	r2, [r7, #24]
 8005de2:	0151      	lsls	r1, r2, #5
 8005de4:	69fa      	ldr	r2, [r7, #28]
 8005de6:	440a      	add	r2, r1
 8005de8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005dec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005df0:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005df2:	69bb      	ldr	r3, [r7, #24]
 8005df4:	015a      	lsls	r2, r3, #5
 8005df6:	69fb      	ldr	r3, [r7, #28]
 8005df8:	4413      	add	r3, r2
 8005dfa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	69ba      	ldr	r2, [r7, #24]
 8005e02:	0151      	lsls	r1, r2, #5
 8005e04:	69fa      	ldr	r2, [r7, #28]
 8005e06:	440a      	add	r2, r1
 8005e08:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005e0c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005e10:	6013      	str	r3, [r2, #0]
 8005e12:	e12f      	b.n	8006074 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005e14:	69bb      	ldr	r3, [r7, #24]
 8005e16:	015a      	lsls	r2, r3, #5
 8005e18:	69fb      	ldr	r3, [r7, #28]
 8005e1a:	4413      	add	r3, r2
 8005e1c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	69ba      	ldr	r2, [r7, #24]
 8005e24:	0151      	lsls	r1, r2, #5
 8005e26:	69fa      	ldr	r2, [r7, #28]
 8005e28:	440a      	add	r2, r1
 8005e2a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005e2e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005e32:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005e34:	68bb      	ldr	r3, [r7, #8]
 8005e36:	78db      	ldrb	r3, [r3, #3]
 8005e38:	2b01      	cmp	r3, #1
 8005e3a:	d015      	beq.n	8005e68 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005e3c:	68bb      	ldr	r3, [r7, #8]
 8005e3e:	695b      	ldr	r3, [r3, #20]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	f000 8117 	beq.w	8006074 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005e46:	69fb      	ldr	r3, [r7, #28]
 8005e48:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e4c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005e4e:	68bb      	ldr	r3, [r7, #8]
 8005e50:	781b      	ldrb	r3, [r3, #0]
 8005e52:	f003 030f 	and.w	r3, r3, #15
 8005e56:	2101      	movs	r1, #1
 8005e58:	fa01 f303 	lsl.w	r3, r1, r3
 8005e5c:	69f9      	ldr	r1, [r7, #28]
 8005e5e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005e62:	4313      	orrs	r3, r2
 8005e64:	634b      	str	r3, [r1, #52]	@ 0x34
 8005e66:	e105      	b.n	8006074 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005e68:	69fb      	ldr	r3, [r7, #28]
 8005e6a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e6e:	689b      	ldr	r3, [r3, #8]
 8005e70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d110      	bne.n	8005e9a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005e78:	69bb      	ldr	r3, [r7, #24]
 8005e7a:	015a      	lsls	r2, r3, #5
 8005e7c:	69fb      	ldr	r3, [r7, #28]
 8005e7e:	4413      	add	r3, r2
 8005e80:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	69ba      	ldr	r2, [r7, #24]
 8005e88:	0151      	lsls	r1, r2, #5
 8005e8a:	69fa      	ldr	r2, [r7, #28]
 8005e8c:	440a      	add	r2, r1
 8005e8e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005e92:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005e96:	6013      	str	r3, [r2, #0]
 8005e98:	e00f      	b.n	8005eba <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005e9a:	69bb      	ldr	r3, [r7, #24]
 8005e9c:	015a      	lsls	r2, r3, #5
 8005e9e:	69fb      	ldr	r3, [r7, #28]
 8005ea0:	4413      	add	r3, r2
 8005ea2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	69ba      	ldr	r2, [r7, #24]
 8005eaa:	0151      	lsls	r1, r2, #5
 8005eac:	69fa      	ldr	r2, [r7, #28]
 8005eae:	440a      	add	r2, r1
 8005eb0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005eb4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005eb8:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005eba:	68bb      	ldr	r3, [r7, #8]
 8005ebc:	68d9      	ldr	r1, [r3, #12]
 8005ebe:	68bb      	ldr	r3, [r7, #8]
 8005ec0:	781a      	ldrb	r2, [r3, #0]
 8005ec2:	68bb      	ldr	r3, [r7, #8]
 8005ec4:	695b      	ldr	r3, [r3, #20]
 8005ec6:	b298      	uxth	r0, r3
 8005ec8:	79fb      	ldrb	r3, [r7, #7]
 8005eca:	9300      	str	r3, [sp, #0]
 8005ecc:	4603      	mov	r3, r0
 8005ece:	68f8      	ldr	r0, [r7, #12]
 8005ed0:	f000 fa2b 	bl	800632a <USB_WritePacket>
 8005ed4:	e0ce      	b.n	8006074 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005ed6:	69bb      	ldr	r3, [r7, #24]
 8005ed8:	015a      	lsls	r2, r3, #5
 8005eda:	69fb      	ldr	r3, [r7, #28]
 8005edc:	4413      	add	r3, r2
 8005ede:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ee2:	691b      	ldr	r3, [r3, #16]
 8005ee4:	69ba      	ldr	r2, [r7, #24]
 8005ee6:	0151      	lsls	r1, r2, #5
 8005ee8:	69fa      	ldr	r2, [r7, #28]
 8005eea:	440a      	add	r2, r1
 8005eec:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005ef0:	0cdb      	lsrs	r3, r3, #19
 8005ef2:	04db      	lsls	r3, r3, #19
 8005ef4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005ef6:	69bb      	ldr	r3, [r7, #24]
 8005ef8:	015a      	lsls	r2, r3, #5
 8005efa:	69fb      	ldr	r3, [r7, #28]
 8005efc:	4413      	add	r3, r2
 8005efe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f02:	691b      	ldr	r3, [r3, #16]
 8005f04:	69ba      	ldr	r2, [r7, #24]
 8005f06:	0151      	lsls	r1, r2, #5
 8005f08:	69fa      	ldr	r2, [r7, #28]
 8005f0a:	440a      	add	r2, r1
 8005f0c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005f10:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005f14:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005f18:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8005f1a:	68bb      	ldr	r3, [r7, #8]
 8005f1c:	695b      	ldr	r3, [r3, #20]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d126      	bne.n	8005f70 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005f22:	69bb      	ldr	r3, [r7, #24]
 8005f24:	015a      	lsls	r2, r3, #5
 8005f26:	69fb      	ldr	r3, [r7, #28]
 8005f28:	4413      	add	r3, r2
 8005f2a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f2e:	691a      	ldr	r2, [r3, #16]
 8005f30:	68bb      	ldr	r3, [r7, #8]
 8005f32:	689b      	ldr	r3, [r3, #8]
 8005f34:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005f38:	69b9      	ldr	r1, [r7, #24]
 8005f3a:	0148      	lsls	r0, r1, #5
 8005f3c:	69f9      	ldr	r1, [r7, #28]
 8005f3e:	4401      	add	r1, r0
 8005f40:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005f44:	4313      	orrs	r3, r2
 8005f46:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005f48:	69bb      	ldr	r3, [r7, #24]
 8005f4a:	015a      	lsls	r2, r3, #5
 8005f4c:	69fb      	ldr	r3, [r7, #28]
 8005f4e:	4413      	add	r3, r2
 8005f50:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f54:	691b      	ldr	r3, [r3, #16]
 8005f56:	69ba      	ldr	r2, [r7, #24]
 8005f58:	0151      	lsls	r1, r2, #5
 8005f5a:	69fa      	ldr	r2, [r7, #28]
 8005f5c:	440a      	add	r2, r1
 8005f5e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005f62:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005f66:	6113      	str	r3, [r2, #16]
 8005f68:	e036      	b.n	8005fd8 <USB_EPStartXfer+0x3dc>
 8005f6a:	bf00      	nop
 8005f6c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005f70:	68bb      	ldr	r3, [r7, #8]
 8005f72:	695a      	ldr	r2, [r3, #20]
 8005f74:	68bb      	ldr	r3, [r7, #8]
 8005f76:	689b      	ldr	r3, [r3, #8]
 8005f78:	4413      	add	r3, r2
 8005f7a:	1e5a      	subs	r2, r3, #1
 8005f7c:	68bb      	ldr	r3, [r7, #8]
 8005f7e:	689b      	ldr	r3, [r3, #8]
 8005f80:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f84:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005f86:	69bb      	ldr	r3, [r7, #24]
 8005f88:	015a      	lsls	r2, r3, #5
 8005f8a:	69fb      	ldr	r3, [r7, #28]
 8005f8c:	4413      	add	r3, r2
 8005f8e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f92:	691a      	ldr	r2, [r3, #16]
 8005f94:	8afb      	ldrh	r3, [r7, #22]
 8005f96:	04d9      	lsls	r1, r3, #19
 8005f98:	4b39      	ldr	r3, [pc, #228]	@ (8006080 <USB_EPStartXfer+0x484>)
 8005f9a:	400b      	ands	r3, r1
 8005f9c:	69b9      	ldr	r1, [r7, #24]
 8005f9e:	0148      	lsls	r0, r1, #5
 8005fa0:	69f9      	ldr	r1, [r7, #28]
 8005fa2:	4401      	add	r1, r0
 8005fa4:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005fa8:	4313      	orrs	r3, r2
 8005faa:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8005fac:	69bb      	ldr	r3, [r7, #24]
 8005fae:	015a      	lsls	r2, r3, #5
 8005fb0:	69fb      	ldr	r3, [r7, #28]
 8005fb2:	4413      	add	r3, r2
 8005fb4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005fb8:	691a      	ldr	r2, [r3, #16]
 8005fba:	68bb      	ldr	r3, [r7, #8]
 8005fbc:	689b      	ldr	r3, [r3, #8]
 8005fbe:	8af9      	ldrh	r1, [r7, #22]
 8005fc0:	fb01 f303 	mul.w	r3, r1, r3
 8005fc4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005fc8:	69b9      	ldr	r1, [r7, #24]
 8005fca:	0148      	lsls	r0, r1, #5
 8005fcc:	69f9      	ldr	r1, [r7, #28]
 8005fce:	4401      	add	r1, r0
 8005fd0:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005fd4:	4313      	orrs	r3, r2
 8005fd6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005fd8:	79fb      	ldrb	r3, [r7, #7]
 8005fda:	2b01      	cmp	r3, #1
 8005fdc:	d10d      	bne.n	8005ffa <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005fde:	68bb      	ldr	r3, [r7, #8]
 8005fe0:	68db      	ldr	r3, [r3, #12]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d009      	beq.n	8005ffa <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005fe6:	68bb      	ldr	r3, [r7, #8]
 8005fe8:	68d9      	ldr	r1, [r3, #12]
 8005fea:	69bb      	ldr	r3, [r7, #24]
 8005fec:	015a      	lsls	r2, r3, #5
 8005fee:	69fb      	ldr	r3, [r7, #28]
 8005ff0:	4413      	add	r3, r2
 8005ff2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ff6:	460a      	mov	r2, r1
 8005ff8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005ffa:	68bb      	ldr	r3, [r7, #8]
 8005ffc:	78db      	ldrb	r3, [r3, #3]
 8005ffe:	2b01      	cmp	r3, #1
 8006000:	d128      	bne.n	8006054 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006002:	69fb      	ldr	r3, [r7, #28]
 8006004:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006008:	689b      	ldr	r3, [r3, #8]
 800600a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800600e:	2b00      	cmp	r3, #0
 8006010:	d110      	bne.n	8006034 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006012:	69bb      	ldr	r3, [r7, #24]
 8006014:	015a      	lsls	r2, r3, #5
 8006016:	69fb      	ldr	r3, [r7, #28]
 8006018:	4413      	add	r3, r2
 800601a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	69ba      	ldr	r2, [r7, #24]
 8006022:	0151      	lsls	r1, r2, #5
 8006024:	69fa      	ldr	r2, [r7, #28]
 8006026:	440a      	add	r2, r1
 8006028:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800602c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006030:	6013      	str	r3, [r2, #0]
 8006032:	e00f      	b.n	8006054 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006034:	69bb      	ldr	r3, [r7, #24]
 8006036:	015a      	lsls	r2, r3, #5
 8006038:	69fb      	ldr	r3, [r7, #28]
 800603a:	4413      	add	r3, r2
 800603c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	69ba      	ldr	r2, [r7, #24]
 8006044:	0151      	lsls	r1, r2, #5
 8006046:	69fa      	ldr	r2, [r7, #28]
 8006048:	440a      	add	r2, r1
 800604a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800604e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006052:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006054:	69bb      	ldr	r3, [r7, #24]
 8006056:	015a      	lsls	r2, r3, #5
 8006058:	69fb      	ldr	r3, [r7, #28]
 800605a:	4413      	add	r3, r2
 800605c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	69ba      	ldr	r2, [r7, #24]
 8006064:	0151      	lsls	r1, r2, #5
 8006066:	69fa      	ldr	r2, [r7, #28]
 8006068:	440a      	add	r2, r1
 800606a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800606e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006072:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006074:	2300      	movs	r3, #0
}
 8006076:	4618      	mov	r0, r3
 8006078:	3720      	adds	r7, #32
 800607a:	46bd      	mov	sp, r7
 800607c:	bd80      	pop	{r7, pc}
 800607e:	bf00      	nop
 8006080:	1ff80000 	.word	0x1ff80000

08006084 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006084:	b480      	push	{r7}
 8006086:	b087      	sub	sp, #28
 8006088:	af00      	add	r7, sp, #0
 800608a:	60f8      	str	r0, [r7, #12]
 800608c:	60b9      	str	r1, [r7, #8]
 800608e:	4613      	mov	r3, r2
 8006090:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8006096:	68bb      	ldr	r3, [r7, #8]
 8006098:	781b      	ldrb	r3, [r3, #0]
 800609a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800609c:	68bb      	ldr	r3, [r7, #8]
 800609e:	785b      	ldrb	r3, [r3, #1]
 80060a0:	2b01      	cmp	r3, #1
 80060a2:	f040 80cd 	bne.w	8006240 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80060a6:	68bb      	ldr	r3, [r7, #8]
 80060a8:	695b      	ldr	r3, [r3, #20]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d132      	bne.n	8006114 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80060ae:	693b      	ldr	r3, [r7, #16]
 80060b0:	015a      	lsls	r2, r3, #5
 80060b2:	697b      	ldr	r3, [r7, #20]
 80060b4:	4413      	add	r3, r2
 80060b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80060ba:	691b      	ldr	r3, [r3, #16]
 80060bc:	693a      	ldr	r2, [r7, #16]
 80060be:	0151      	lsls	r1, r2, #5
 80060c0:	697a      	ldr	r2, [r7, #20]
 80060c2:	440a      	add	r2, r1
 80060c4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80060c8:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80060cc:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80060d0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80060d2:	693b      	ldr	r3, [r7, #16]
 80060d4:	015a      	lsls	r2, r3, #5
 80060d6:	697b      	ldr	r3, [r7, #20]
 80060d8:	4413      	add	r3, r2
 80060da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80060de:	691b      	ldr	r3, [r3, #16]
 80060e0:	693a      	ldr	r2, [r7, #16]
 80060e2:	0151      	lsls	r1, r2, #5
 80060e4:	697a      	ldr	r2, [r7, #20]
 80060e6:	440a      	add	r2, r1
 80060e8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80060ec:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80060f0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80060f2:	693b      	ldr	r3, [r7, #16]
 80060f4:	015a      	lsls	r2, r3, #5
 80060f6:	697b      	ldr	r3, [r7, #20]
 80060f8:	4413      	add	r3, r2
 80060fa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80060fe:	691b      	ldr	r3, [r3, #16]
 8006100:	693a      	ldr	r2, [r7, #16]
 8006102:	0151      	lsls	r1, r2, #5
 8006104:	697a      	ldr	r2, [r7, #20]
 8006106:	440a      	add	r2, r1
 8006108:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800610c:	0cdb      	lsrs	r3, r3, #19
 800610e:	04db      	lsls	r3, r3, #19
 8006110:	6113      	str	r3, [r2, #16]
 8006112:	e04e      	b.n	80061b2 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006114:	693b      	ldr	r3, [r7, #16]
 8006116:	015a      	lsls	r2, r3, #5
 8006118:	697b      	ldr	r3, [r7, #20]
 800611a:	4413      	add	r3, r2
 800611c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006120:	691b      	ldr	r3, [r3, #16]
 8006122:	693a      	ldr	r2, [r7, #16]
 8006124:	0151      	lsls	r1, r2, #5
 8006126:	697a      	ldr	r2, [r7, #20]
 8006128:	440a      	add	r2, r1
 800612a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800612e:	0cdb      	lsrs	r3, r3, #19
 8006130:	04db      	lsls	r3, r3, #19
 8006132:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006134:	693b      	ldr	r3, [r7, #16]
 8006136:	015a      	lsls	r2, r3, #5
 8006138:	697b      	ldr	r3, [r7, #20]
 800613a:	4413      	add	r3, r2
 800613c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006140:	691b      	ldr	r3, [r3, #16]
 8006142:	693a      	ldr	r2, [r7, #16]
 8006144:	0151      	lsls	r1, r2, #5
 8006146:	697a      	ldr	r2, [r7, #20]
 8006148:	440a      	add	r2, r1
 800614a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800614e:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006152:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006156:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8006158:	68bb      	ldr	r3, [r7, #8]
 800615a:	695a      	ldr	r2, [r3, #20]
 800615c:	68bb      	ldr	r3, [r7, #8]
 800615e:	689b      	ldr	r3, [r3, #8]
 8006160:	429a      	cmp	r2, r3
 8006162:	d903      	bls.n	800616c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8006164:	68bb      	ldr	r3, [r7, #8]
 8006166:	689a      	ldr	r2, [r3, #8]
 8006168:	68bb      	ldr	r3, [r7, #8]
 800616a:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800616c:	693b      	ldr	r3, [r7, #16]
 800616e:	015a      	lsls	r2, r3, #5
 8006170:	697b      	ldr	r3, [r7, #20]
 8006172:	4413      	add	r3, r2
 8006174:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006178:	691b      	ldr	r3, [r3, #16]
 800617a:	693a      	ldr	r2, [r7, #16]
 800617c:	0151      	lsls	r1, r2, #5
 800617e:	697a      	ldr	r2, [r7, #20]
 8006180:	440a      	add	r2, r1
 8006182:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006186:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800618a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800618c:	693b      	ldr	r3, [r7, #16]
 800618e:	015a      	lsls	r2, r3, #5
 8006190:	697b      	ldr	r3, [r7, #20]
 8006192:	4413      	add	r3, r2
 8006194:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006198:	691a      	ldr	r2, [r3, #16]
 800619a:	68bb      	ldr	r3, [r7, #8]
 800619c:	695b      	ldr	r3, [r3, #20]
 800619e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80061a2:	6939      	ldr	r1, [r7, #16]
 80061a4:	0148      	lsls	r0, r1, #5
 80061a6:	6979      	ldr	r1, [r7, #20]
 80061a8:	4401      	add	r1, r0
 80061aa:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80061ae:	4313      	orrs	r3, r2
 80061b0:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80061b2:	79fb      	ldrb	r3, [r7, #7]
 80061b4:	2b01      	cmp	r3, #1
 80061b6:	d11e      	bne.n	80061f6 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80061b8:	68bb      	ldr	r3, [r7, #8]
 80061ba:	691b      	ldr	r3, [r3, #16]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d009      	beq.n	80061d4 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80061c0:	693b      	ldr	r3, [r7, #16]
 80061c2:	015a      	lsls	r2, r3, #5
 80061c4:	697b      	ldr	r3, [r7, #20]
 80061c6:	4413      	add	r3, r2
 80061c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80061cc:	461a      	mov	r2, r3
 80061ce:	68bb      	ldr	r3, [r7, #8]
 80061d0:	691b      	ldr	r3, [r3, #16]
 80061d2:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80061d4:	693b      	ldr	r3, [r7, #16]
 80061d6:	015a      	lsls	r2, r3, #5
 80061d8:	697b      	ldr	r3, [r7, #20]
 80061da:	4413      	add	r3, r2
 80061dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	693a      	ldr	r2, [r7, #16]
 80061e4:	0151      	lsls	r1, r2, #5
 80061e6:	697a      	ldr	r2, [r7, #20]
 80061e8:	440a      	add	r2, r1
 80061ea:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80061ee:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80061f2:	6013      	str	r3, [r2, #0]
 80061f4:	e092      	b.n	800631c <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80061f6:	693b      	ldr	r3, [r7, #16]
 80061f8:	015a      	lsls	r2, r3, #5
 80061fa:	697b      	ldr	r3, [r7, #20]
 80061fc:	4413      	add	r3, r2
 80061fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	693a      	ldr	r2, [r7, #16]
 8006206:	0151      	lsls	r1, r2, #5
 8006208:	697a      	ldr	r2, [r7, #20]
 800620a:	440a      	add	r2, r1
 800620c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006210:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006214:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8006216:	68bb      	ldr	r3, [r7, #8]
 8006218:	695b      	ldr	r3, [r3, #20]
 800621a:	2b00      	cmp	r3, #0
 800621c:	d07e      	beq.n	800631c <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800621e:	697b      	ldr	r3, [r7, #20]
 8006220:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006224:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006226:	68bb      	ldr	r3, [r7, #8]
 8006228:	781b      	ldrb	r3, [r3, #0]
 800622a:	f003 030f 	and.w	r3, r3, #15
 800622e:	2101      	movs	r1, #1
 8006230:	fa01 f303 	lsl.w	r3, r1, r3
 8006234:	6979      	ldr	r1, [r7, #20]
 8006236:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800623a:	4313      	orrs	r3, r2
 800623c:	634b      	str	r3, [r1, #52]	@ 0x34
 800623e:	e06d      	b.n	800631c <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006240:	693b      	ldr	r3, [r7, #16]
 8006242:	015a      	lsls	r2, r3, #5
 8006244:	697b      	ldr	r3, [r7, #20]
 8006246:	4413      	add	r3, r2
 8006248:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800624c:	691b      	ldr	r3, [r3, #16]
 800624e:	693a      	ldr	r2, [r7, #16]
 8006250:	0151      	lsls	r1, r2, #5
 8006252:	697a      	ldr	r2, [r7, #20]
 8006254:	440a      	add	r2, r1
 8006256:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800625a:	0cdb      	lsrs	r3, r3, #19
 800625c:	04db      	lsls	r3, r3, #19
 800625e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006260:	693b      	ldr	r3, [r7, #16]
 8006262:	015a      	lsls	r2, r3, #5
 8006264:	697b      	ldr	r3, [r7, #20]
 8006266:	4413      	add	r3, r2
 8006268:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800626c:	691b      	ldr	r3, [r3, #16]
 800626e:	693a      	ldr	r2, [r7, #16]
 8006270:	0151      	lsls	r1, r2, #5
 8006272:	697a      	ldr	r2, [r7, #20]
 8006274:	440a      	add	r2, r1
 8006276:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800627a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800627e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006282:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8006284:	68bb      	ldr	r3, [r7, #8]
 8006286:	695b      	ldr	r3, [r3, #20]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d003      	beq.n	8006294 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800628c:	68bb      	ldr	r3, [r7, #8]
 800628e:	689a      	ldr	r2, [r3, #8]
 8006290:	68bb      	ldr	r3, [r7, #8]
 8006292:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006294:	693b      	ldr	r3, [r7, #16]
 8006296:	015a      	lsls	r2, r3, #5
 8006298:	697b      	ldr	r3, [r7, #20]
 800629a:	4413      	add	r3, r2
 800629c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80062a0:	691b      	ldr	r3, [r3, #16]
 80062a2:	693a      	ldr	r2, [r7, #16]
 80062a4:	0151      	lsls	r1, r2, #5
 80062a6:	697a      	ldr	r2, [r7, #20]
 80062a8:	440a      	add	r2, r1
 80062aa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80062ae:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80062b2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80062b4:	693b      	ldr	r3, [r7, #16]
 80062b6:	015a      	lsls	r2, r3, #5
 80062b8:	697b      	ldr	r3, [r7, #20]
 80062ba:	4413      	add	r3, r2
 80062bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80062c0:	691a      	ldr	r2, [r3, #16]
 80062c2:	68bb      	ldr	r3, [r7, #8]
 80062c4:	689b      	ldr	r3, [r3, #8]
 80062c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80062ca:	6939      	ldr	r1, [r7, #16]
 80062cc:	0148      	lsls	r0, r1, #5
 80062ce:	6979      	ldr	r1, [r7, #20]
 80062d0:	4401      	add	r1, r0
 80062d2:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80062d6:	4313      	orrs	r3, r2
 80062d8:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80062da:	79fb      	ldrb	r3, [r7, #7]
 80062dc:	2b01      	cmp	r3, #1
 80062de:	d10d      	bne.n	80062fc <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80062e0:	68bb      	ldr	r3, [r7, #8]
 80062e2:	68db      	ldr	r3, [r3, #12]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d009      	beq.n	80062fc <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80062e8:	68bb      	ldr	r3, [r7, #8]
 80062ea:	68d9      	ldr	r1, [r3, #12]
 80062ec:	693b      	ldr	r3, [r7, #16]
 80062ee:	015a      	lsls	r2, r3, #5
 80062f0:	697b      	ldr	r3, [r7, #20]
 80062f2:	4413      	add	r3, r2
 80062f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80062f8:	460a      	mov	r2, r1
 80062fa:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80062fc:	693b      	ldr	r3, [r7, #16]
 80062fe:	015a      	lsls	r2, r3, #5
 8006300:	697b      	ldr	r3, [r7, #20]
 8006302:	4413      	add	r3, r2
 8006304:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	693a      	ldr	r2, [r7, #16]
 800630c:	0151      	lsls	r1, r2, #5
 800630e:	697a      	ldr	r2, [r7, #20]
 8006310:	440a      	add	r2, r1
 8006312:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006316:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800631a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800631c:	2300      	movs	r3, #0
}
 800631e:	4618      	mov	r0, r3
 8006320:	371c      	adds	r7, #28
 8006322:	46bd      	mov	sp, r7
 8006324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006328:	4770      	bx	lr

0800632a <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800632a:	b480      	push	{r7}
 800632c:	b089      	sub	sp, #36	@ 0x24
 800632e:	af00      	add	r7, sp, #0
 8006330:	60f8      	str	r0, [r7, #12]
 8006332:	60b9      	str	r1, [r7, #8]
 8006334:	4611      	mov	r1, r2
 8006336:	461a      	mov	r2, r3
 8006338:	460b      	mov	r3, r1
 800633a:	71fb      	strb	r3, [r7, #7]
 800633c:	4613      	mov	r3, r2
 800633e:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006344:	68bb      	ldr	r3, [r7, #8]
 8006346:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006348:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800634c:	2b00      	cmp	r3, #0
 800634e:	d123      	bne.n	8006398 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006350:	88bb      	ldrh	r3, [r7, #4]
 8006352:	3303      	adds	r3, #3
 8006354:	089b      	lsrs	r3, r3, #2
 8006356:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006358:	2300      	movs	r3, #0
 800635a:	61bb      	str	r3, [r7, #24]
 800635c:	e018      	b.n	8006390 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800635e:	79fb      	ldrb	r3, [r7, #7]
 8006360:	031a      	lsls	r2, r3, #12
 8006362:	697b      	ldr	r3, [r7, #20]
 8006364:	4413      	add	r3, r2
 8006366:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800636a:	461a      	mov	r2, r3
 800636c:	69fb      	ldr	r3, [r7, #28]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006372:	69fb      	ldr	r3, [r7, #28]
 8006374:	3301      	adds	r3, #1
 8006376:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006378:	69fb      	ldr	r3, [r7, #28]
 800637a:	3301      	adds	r3, #1
 800637c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800637e:	69fb      	ldr	r3, [r7, #28]
 8006380:	3301      	adds	r3, #1
 8006382:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006384:	69fb      	ldr	r3, [r7, #28]
 8006386:	3301      	adds	r3, #1
 8006388:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800638a:	69bb      	ldr	r3, [r7, #24]
 800638c:	3301      	adds	r3, #1
 800638e:	61bb      	str	r3, [r7, #24]
 8006390:	69ba      	ldr	r2, [r7, #24]
 8006392:	693b      	ldr	r3, [r7, #16]
 8006394:	429a      	cmp	r2, r3
 8006396:	d3e2      	bcc.n	800635e <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006398:	2300      	movs	r3, #0
}
 800639a:	4618      	mov	r0, r3
 800639c:	3724      	adds	r7, #36	@ 0x24
 800639e:	46bd      	mov	sp, r7
 80063a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a4:	4770      	bx	lr

080063a6 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80063a6:	b480      	push	{r7}
 80063a8:	b08b      	sub	sp, #44	@ 0x2c
 80063aa:	af00      	add	r7, sp, #0
 80063ac:	60f8      	str	r0, [r7, #12]
 80063ae:	60b9      	str	r1, [r7, #8]
 80063b0:	4613      	mov	r3, r2
 80063b2:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80063b8:	68bb      	ldr	r3, [r7, #8]
 80063ba:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80063bc:	88fb      	ldrh	r3, [r7, #6]
 80063be:	089b      	lsrs	r3, r3, #2
 80063c0:	b29b      	uxth	r3, r3
 80063c2:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80063c4:	88fb      	ldrh	r3, [r7, #6]
 80063c6:	f003 0303 	and.w	r3, r3, #3
 80063ca:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80063cc:	2300      	movs	r3, #0
 80063ce:	623b      	str	r3, [r7, #32]
 80063d0:	e014      	b.n	80063fc <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80063d2:	69bb      	ldr	r3, [r7, #24]
 80063d4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80063d8:	681a      	ldr	r2, [r3, #0]
 80063da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063dc:	601a      	str	r2, [r3, #0]
    pDest++;
 80063de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063e0:	3301      	adds	r3, #1
 80063e2:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80063e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063e6:	3301      	adds	r3, #1
 80063e8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80063ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063ec:	3301      	adds	r3, #1
 80063ee:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80063f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063f2:	3301      	adds	r3, #1
 80063f4:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80063f6:	6a3b      	ldr	r3, [r7, #32]
 80063f8:	3301      	adds	r3, #1
 80063fa:	623b      	str	r3, [r7, #32]
 80063fc:	6a3a      	ldr	r2, [r7, #32]
 80063fe:	697b      	ldr	r3, [r7, #20]
 8006400:	429a      	cmp	r2, r3
 8006402:	d3e6      	bcc.n	80063d2 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006404:	8bfb      	ldrh	r3, [r7, #30]
 8006406:	2b00      	cmp	r3, #0
 8006408:	d01e      	beq.n	8006448 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800640a:	2300      	movs	r3, #0
 800640c:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800640e:	69bb      	ldr	r3, [r7, #24]
 8006410:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006414:	461a      	mov	r2, r3
 8006416:	f107 0310 	add.w	r3, r7, #16
 800641a:	6812      	ldr	r2, [r2, #0]
 800641c:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800641e:	693a      	ldr	r2, [r7, #16]
 8006420:	6a3b      	ldr	r3, [r7, #32]
 8006422:	b2db      	uxtb	r3, r3
 8006424:	00db      	lsls	r3, r3, #3
 8006426:	fa22 f303 	lsr.w	r3, r2, r3
 800642a:	b2da      	uxtb	r2, r3
 800642c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800642e:	701a      	strb	r2, [r3, #0]
      i++;
 8006430:	6a3b      	ldr	r3, [r7, #32]
 8006432:	3301      	adds	r3, #1
 8006434:	623b      	str	r3, [r7, #32]
      pDest++;
 8006436:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006438:	3301      	adds	r3, #1
 800643a:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800643c:	8bfb      	ldrh	r3, [r7, #30]
 800643e:	3b01      	subs	r3, #1
 8006440:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006442:	8bfb      	ldrh	r3, [r7, #30]
 8006444:	2b00      	cmp	r3, #0
 8006446:	d1ea      	bne.n	800641e <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006448:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800644a:	4618      	mov	r0, r3
 800644c:	372c      	adds	r7, #44	@ 0x2c
 800644e:	46bd      	mov	sp, r7
 8006450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006454:	4770      	bx	lr

08006456 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006456:	b480      	push	{r7}
 8006458:	b085      	sub	sp, #20
 800645a:	af00      	add	r7, sp, #0
 800645c:	6078      	str	r0, [r7, #4]
 800645e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	781b      	ldrb	r3, [r3, #0]
 8006468:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	785b      	ldrb	r3, [r3, #1]
 800646e:	2b01      	cmp	r3, #1
 8006470:	d12c      	bne.n	80064cc <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006472:	68bb      	ldr	r3, [r7, #8]
 8006474:	015a      	lsls	r2, r3, #5
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	4413      	add	r3, r2
 800647a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	2b00      	cmp	r3, #0
 8006482:	db12      	blt.n	80064aa <USB_EPSetStall+0x54>
 8006484:	68bb      	ldr	r3, [r7, #8]
 8006486:	2b00      	cmp	r3, #0
 8006488:	d00f      	beq.n	80064aa <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800648a:	68bb      	ldr	r3, [r7, #8]
 800648c:	015a      	lsls	r2, r3, #5
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	4413      	add	r3, r2
 8006492:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	68ba      	ldr	r2, [r7, #8]
 800649a:	0151      	lsls	r1, r2, #5
 800649c:	68fa      	ldr	r2, [r7, #12]
 800649e:	440a      	add	r2, r1
 80064a0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80064a4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80064a8:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80064aa:	68bb      	ldr	r3, [r7, #8]
 80064ac:	015a      	lsls	r2, r3, #5
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	4413      	add	r3, r2
 80064b2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	68ba      	ldr	r2, [r7, #8]
 80064ba:	0151      	lsls	r1, r2, #5
 80064bc:	68fa      	ldr	r2, [r7, #12]
 80064be:	440a      	add	r2, r1
 80064c0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80064c4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80064c8:	6013      	str	r3, [r2, #0]
 80064ca:	e02b      	b.n	8006524 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80064cc:	68bb      	ldr	r3, [r7, #8]
 80064ce:	015a      	lsls	r2, r3, #5
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	4413      	add	r3, r2
 80064d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	db12      	blt.n	8006504 <USB_EPSetStall+0xae>
 80064de:	68bb      	ldr	r3, [r7, #8]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d00f      	beq.n	8006504 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80064e4:	68bb      	ldr	r3, [r7, #8]
 80064e6:	015a      	lsls	r2, r3, #5
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	4413      	add	r3, r2
 80064ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	68ba      	ldr	r2, [r7, #8]
 80064f4:	0151      	lsls	r1, r2, #5
 80064f6:	68fa      	ldr	r2, [r7, #12]
 80064f8:	440a      	add	r2, r1
 80064fa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80064fe:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006502:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006504:	68bb      	ldr	r3, [r7, #8]
 8006506:	015a      	lsls	r2, r3, #5
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	4413      	add	r3, r2
 800650c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	68ba      	ldr	r2, [r7, #8]
 8006514:	0151      	lsls	r1, r2, #5
 8006516:	68fa      	ldr	r2, [r7, #12]
 8006518:	440a      	add	r2, r1
 800651a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800651e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006522:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006524:	2300      	movs	r3, #0
}
 8006526:	4618      	mov	r0, r3
 8006528:	3714      	adds	r7, #20
 800652a:	46bd      	mov	sp, r7
 800652c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006530:	4770      	bx	lr

08006532 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006532:	b480      	push	{r7}
 8006534:	b085      	sub	sp, #20
 8006536:	af00      	add	r7, sp, #0
 8006538:	6078      	str	r0, [r7, #4]
 800653a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	781b      	ldrb	r3, [r3, #0]
 8006544:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	785b      	ldrb	r3, [r3, #1]
 800654a:	2b01      	cmp	r3, #1
 800654c:	d128      	bne.n	80065a0 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800654e:	68bb      	ldr	r3, [r7, #8]
 8006550:	015a      	lsls	r2, r3, #5
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	4413      	add	r3, r2
 8006556:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	68ba      	ldr	r2, [r7, #8]
 800655e:	0151      	lsls	r1, r2, #5
 8006560:	68fa      	ldr	r2, [r7, #12]
 8006562:	440a      	add	r2, r1
 8006564:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006568:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800656c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	78db      	ldrb	r3, [r3, #3]
 8006572:	2b03      	cmp	r3, #3
 8006574:	d003      	beq.n	800657e <USB_EPClearStall+0x4c>
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	78db      	ldrb	r3, [r3, #3]
 800657a:	2b02      	cmp	r3, #2
 800657c:	d138      	bne.n	80065f0 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800657e:	68bb      	ldr	r3, [r7, #8]
 8006580:	015a      	lsls	r2, r3, #5
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	4413      	add	r3, r2
 8006586:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	68ba      	ldr	r2, [r7, #8]
 800658e:	0151      	lsls	r1, r2, #5
 8006590:	68fa      	ldr	r2, [r7, #12]
 8006592:	440a      	add	r2, r1
 8006594:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006598:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800659c:	6013      	str	r3, [r2, #0]
 800659e:	e027      	b.n	80065f0 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80065a0:	68bb      	ldr	r3, [r7, #8]
 80065a2:	015a      	lsls	r2, r3, #5
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	4413      	add	r3, r2
 80065a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	68ba      	ldr	r2, [r7, #8]
 80065b0:	0151      	lsls	r1, r2, #5
 80065b2:	68fa      	ldr	r2, [r7, #12]
 80065b4:	440a      	add	r2, r1
 80065b6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80065ba:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80065be:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	78db      	ldrb	r3, [r3, #3]
 80065c4:	2b03      	cmp	r3, #3
 80065c6:	d003      	beq.n	80065d0 <USB_EPClearStall+0x9e>
 80065c8:	683b      	ldr	r3, [r7, #0]
 80065ca:	78db      	ldrb	r3, [r3, #3]
 80065cc:	2b02      	cmp	r3, #2
 80065ce:	d10f      	bne.n	80065f0 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80065d0:	68bb      	ldr	r3, [r7, #8]
 80065d2:	015a      	lsls	r2, r3, #5
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	4413      	add	r3, r2
 80065d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	68ba      	ldr	r2, [r7, #8]
 80065e0:	0151      	lsls	r1, r2, #5
 80065e2:	68fa      	ldr	r2, [r7, #12]
 80065e4:	440a      	add	r2, r1
 80065e6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80065ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80065ee:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80065f0:	2300      	movs	r3, #0
}
 80065f2:	4618      	mov	r0, r3
 80065f4:	3714      	adds	r7, #20
 80065f6:	46bd      	mov	sp, r7
 80065f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fc:	4770      	bx	lr

080065fe <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80065fe:	b480      	push	{r7}
 8006600:	b085      	sub	sp, #20
 8006602:	af00      	add	r7, sp, #0
 8006604:	6078      	str	r0, [r7, #4]
 8006606:	460b      	mov	r3, r1
 8006608:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	68fa      	ldr	r2, [r7, #12]
 8006618:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800661c:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8006620:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006628:	681a      	ldr	r2, [r3, #0]
 800662a:	78fb      	ldrb	r3, [r7, #3]
 800662c:	011b      	lsls	r3, r3, #4
 800662e:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8006632:	68f9      	ldr	r1, [r7, #12]
 8006634:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006638:	4313      	orrs	r3, r2
 800663a:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800663c:	2300      	movs	r3, #0
}
 800663e:	4618      	mov	r0, r3
 8006640:	3714      	adds	r7, #20
 8006642:	46bd      	mov	sp, r7
 8006644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006648:	4770      	bx	lr

0800664a <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800664a:	b480      	push	{r7}
 800664c:	b085      	sub	sp, #20
 800664e:	af00      	add	r7, sp, #0
 8006650:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	68fa      	ldr	r2, [r7, #12]
 8006660:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006664:	f023 0303 	bic.w	r3, r3, #3
 8006668:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006670:	685b      	ldr	r3, [r3, #4]
 8006672:	68fa      	ldr	r2, [r7, #12]
 8006674:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006678:	f023 0302 	bic.w	r3, r3, #2
 800667c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800667e:	2300      	movs	r3, #0
}
 8006680:	4618      	mov	r0, r3
 8006682:	3714      	adds	r7, #20
 8006684:	46bd      	mov	sp, r7
 8006686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668a:	4770      	bx	lr

0800668c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800668c:	b480      	push	{r7}
 800668e:	b085      	sub	sp, #20
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	68fa      	ldr	r2, [r7, #12]
 80066a2:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80066a6:	f023 0303 	bic.w	r3, r3, #3
 80066aa:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80066b2:	685b      	ldr	r3, [r3, #4]
 80066b4:	68fa      	ldr	r2, [r7, #12]
 80066b6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80066ba:	f043 0302 	orr.w	r3, r3, #2
 80066be:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80066c0:	2300      	movs	r3, #0
}
 80066c2:	4618      	mov	r0, r3
 80066c4:	3714      	adds	r7, #20
 80066c6:	46bd      	mov	sp, r7
 80066c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066cc:	4770      	bx	lr

080066ce <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80066ce:	b480      	push	{r7}
 80066d0:	b085      	sub	sp, #20
 80066d2:	af00      	add	r7, sp, #0
 80066d4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	695b      	ldr	r3, [r3, #20]
 80066da:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	699b      	ldr	r3, [r3, #24]
 80066e0:	68fa      	ldr	r2, [r7, #12]
 80066e2:	4013      	ands	r3, r2
 80066e4:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80066e6:	68fb      	ldr	r3, [r7, #12]
}
 80066e8:	4618      	mov	r0, r3
 80066ea:	3714      	adds	r7, #20
 80066ec:	46bd      	mov	sp, r7
 80066ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f2:	4770      	bx	lr

080066f4 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80066f4:	b480      	push	{r7}
 80066f6:	b085      	sub	sp, #20
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006706:	699b      	ldr	r3, [r3, #24]
 8006708:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006710:	69db      	ldr	r3, [r3, #28]
 8006712:	68ba      	ldr	r2, [r7, #8]
 8006714:	4013      	ands	r3, r2
 8006716:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006718:	68bb      	ldr	r3, [r7, #8]
 800671a:	0c1b      	lsrs	r3, r3, #16
}
 800671c:	4618      	mov	r0, r3
 800671e:	3714      	adds	r7, #20
 8006720:	46bd      	mov	sp, r7
 8006722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006726:	4770      	bx	lr

08006728 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006728:	b480      	push	{r7}
 800672a:	b085      	sub	sp, #20
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800673a:	699b      	ldr	r3, [r3, #24]
 800673c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006744:	69db      	ldr	r3, [r3, #28]
 8006746:	68ba      	ldr	r2, [r7, #8]
 8006748:	4013      	ands	r3, r2
 800674a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800674c:	68bb      	ldr	r3, [r7, #8]
 800674e:	b29b      	uxth	r3, r3
}
 8006750:	4618      	mov	r0, r3
 8006752:	3714      	adds	r7, #20
 8006754:	46bd      	mov	sp, r7
 8006756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675a:	4770      	bx	lr

0800675c <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800675c:	b480      	push	{r7}
 800675e:	b085      	sub	sp, #20
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
 8006764:	460b      	mov	r3, r1
 8006766:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800676c:	78fb      	ldrb	r3, [r7, #3]
 800676e:	015a      	lsls	r2, r3, #5
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	4413      	add	r3, r2
 8006774:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006778:	689b      	ldr	r3, [r3, #8]
 800677a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006782:	695b      	ldr	r3, [r3, #20]
 8006784:	68ba      	ldr	r2, [r7, #8]
 8006786:	4013      	ands	r3, r2
 8006788:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800678a:	68bb      	ldr	r3, [r7, #8]
}
 800678c:	4618      	mov	r0, r3
 800678e:	3714      	adds	r7, #20
 8006790:	46bd      	mov	sp, r7
 8006792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006796:	4770      	bx	lr

08006798 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006798:	b480      	push	{r7}
 800679a:	b087      	sub	sp, #28
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
 80067a0:	460b      	mov	r3, r1
 80067a2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80067a8:	697b      	ldr	r3, [r7, #20]
 80067aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80067ae:	691b      	ldr	r3, [r3, #16]
 80067b0:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80067b2:	697b      	ldr	r3, [r7, #20]
 80067b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80067b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80067ba:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80067bc:	78fb      	ldrb	r3, [r7, #3]
 80067be:	f003 030f 	and.w	r3, r3, #15
 80067c2:	68fa      	ldr	r2, [r7, #12]
 80067c4:	fa22 f303 	lsr.w	r3, r2, r3
 80067c8:	01db      	lsls	r3, r3, #7
 80067ca:	b2db      	uxtb	r3, r3
 80067cc:	693a      	ldr	r2, [r7, #16]
 80067ce:	4313      	orrs	r3, r2
 80067d0:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80067d2:	78fb      	ldrb	r3, [r7, #3]
 80067d4:	015a      	lsls	r2, r3, #5
 80067d6:	697b      	ldr	r3, [r7, #20]
 80067d8:	4413      	add	r3, r2
 80067da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80067de:	689b      	ldr	r3, [r3, #8]
 80067e0:	693a      	ldr	r2, [r7, #16]
 80067e2:	4013      	ands	r3, r2
 80067e4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80067e6:	68bb      	ldr	r3, [r7, #8]
}
 80067e8:	4618      	mov	r0, r3
 80067ea:	371c      	adds	r7, #28
 80067ec:	46bd      	mov	sp, r7
 80067ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f2:	4770      	bx	lr

080067f4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80067f4:	b480      	push	{r7}
 80067f6:	b083      	sub	sp, #12
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	695b      	ldr	r3, [r3, #20]
 8006800:	f003 0301 	and.w	r3, r3, #1
}
 8006804:	4618      	mov	r0, r3
 8006806:	370c      	adds	r7, #12
 8006808:	46bd      	mov	sp, r7
 800680a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680e:	4770      	bx	lr

08006810 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8006810:	b480      	push	{r7}
 8006812:	b085      	sub	sp, #20
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	68fa      	ldr	r2, [r7, #12]
 8006826:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800682a:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800682e:	f023 0307 	bic.w	r3, r3, #7
 8006832:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800683a:	685b      	ldr	r3, [r3, #4]
 800683c:	68fa      	ldr	r2, [r7, #12]
 800683e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006842:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006846:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006848:	2300      	movs	r3, #0
}
 800684a:	4618      	mov	r0, r3
 800684c:	3714      	adds	r7, #20
 800684e:	46bd      	mov	sp, r7
 8006850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006854:	4770      	bx	lr
	...

08006858 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8006858:	b480      	push	{r7}
 800685a:	b087      	sub	sp, #28
 800685c:	af00      	add	r7, sp, #0
 800685e:	60f8      	str	r0, [r7, #12]
 8006860:	460b      	mov	r3, r1
 8006862:	607a      	str	r2, [r7, #4]
 8006864:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	333c      	adds	r3, #60	@ 0x3c
 800686e:	3304      	adds	r3, #4
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006874:	693b      	ldr	r3, [r7, #16]
 8006876:	4a26      	ldr	r2, [pc, #152]	@ (8006910 <USB_EP0_OutStart+0xb8>)
 8006878:	4293      	cmp	r3, r2
 800687a:	d90a      	bls.n	8006892 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800687c:	697b      	ldr	r3, [r7, #20]
 800687e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006888:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800688c:	d101      	bne.n	8006892 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800688e:	2300      	movs	r3, #0
 8006890:	e037      	b.n	8006902 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006892:	697b      	ldr	r3, [r7, #20]
 8006894:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006898:	461a      	mov	r2, r3
 800689a:	2300      	movs	r3, #0
 800689c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800689e:	697b      	ldr	r3, [r7, #20]
 80068a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80068a4:	691b      	ldr	r3, [r3, #16]
 80068a6:	697a      	ldr	r2, [r7, #20]
 80068a8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80068ac:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80068b0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80068b2:	697b      	ldr	r3, [r7, #20]
 80068b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80068b8:	691b      	ldr	r3, [r3, #16]
 80068ba:	697a      	ldr	r2, [r7, #20]
 80068bc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80068c0:	f043 0318 	orr.w	r3, r3, #24
 80068c4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80068c6:	697b      	ldr	r3, [r7, #20]
 80068c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80068cc:	691b      	ldr	r3, [r3, #16]
 80068ce:	697a      	ldr	r2, [r7, #20]
 80068d0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80068d4:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 80068d8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80068da:	7afb      	ldrb	r3, [r7, #11]
 80068dc:	2b01      	cmp	r3, #1
 80068de:	d10f      	bne.n	8006900 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80068e0:	697b      	ldr	r3, [r7, #20]
 80068e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80068e6:	461a      	mov	r2, r3
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80068ec:	697b      	ldr	r3, [r7, #20]
 80068ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	697a      	ldr	r2, [r7, #20]
 80068f6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80068fa:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 80068fe:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006900:	2300      	movs	r3, #0
}
 8006902:	4618      	mov	r0, r3
 8006904:	371c      	adds	r7, #28
 8006906:	46bd      	mov	sp, r7
 8006908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690c:	4770      	bx	lr
 800690e:	bf00      	nop
 8006910:	4f54300a 	.word	0x4f54300a

08006914 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006914:	b480      	push	{r7}
 8006916:	b085      	sub	sp, #20
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800691c:	2300      	movs	r3, #0
 800691e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	3301      	adds	r3, #1
 8006924:	60fb      	str	r3, [r7, #12]
 8006926:	4a13      	ldr	r2, [pc, #76]	@ (8006974 <USB_CoreReset+0x60>)
 8006928:	4293      	cmp	r3, r2
 800692a:	d901      	bls.n	8006930 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 800692c:	2303      	movs	r3, #3
 800692e:	e01a      	b.n	8006966 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	691b      	ldr	r3, [r3, #16]
 8006934:	2b00      	cmp	r3, #0
 8006936:	daf3      	bge.n	8006920 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006938:	2300      	movs	r3, #0
 800693a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	691b      	ldr	r3, [r3, #16]
 8006940:	f043 0201 	orr.w	r2, r3, #1
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	3301      	adds	r3, #1
 800694c:	60fb      	str	r3, [r7, #12]
 800694e:	4a09      	ldr	r2, [pc, #36]	@ (8006974 <USB_CoreReset+0x60>)
 8006950:	4293      	cmp	r3, r2
 8006952:	d901      	bls.n	8006958 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8006954:	2303      	movs	r3, #3
 8006956:	e006      	b.n	8006966 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	691b      	ldr	r3, [r3, #16]
 800695c:	f003 0301 	and.w	r3, r3, #1
 8006960:	2b01      	cmp	r3, #1
 8006962:	d0f1      	beq.n	8006948 <USB_CoreReset+0x34>

  return HAL_OK;
 8006964:	2300      	movs	r3, #0
}
 8006966:	4618      	mov	r0, r3
 8006968:	3714      	adds	r7, #20
 800696a:	46bd      	mov	sp, r7
 800696c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006970:	4770      	bx	lr
 8006972:	bf00      	nop
 8006974:	00030d40 	.word	0x00030d40

08006978 <__NVIC_SystemReset>:
{
 8006978:	b480      	push	{r7}
 800697a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800697c:	f3bf 8f4f 	dsb	sy
}
 8006980:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8006982:	4b06      	ldr	r3, [pc, #24]	@ (800699c <__NVIC_SystemReset+0x24>)
 8006984:	68db      	ldr	r3, [r3, #12]
 8006986:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800698a:	4904      	ldr	r1, [pc, #16]	@ (800699c <__NVIC_SystemReset+0x24>)
 800698c:	4b04      	ldr	r3, [pc, #16]	@ (80069a0 <__NVIC_SystemReset+0x28>)
 800698e:	4313      	orrs	r3, r2
 8006990:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8006992:	f3bf 8f4f 	dsb	sy
}
 8006996:	bf00      	nop
    __NOP();
 8006998:	bf00      	nop
 800699a:	e7fd      	b.n	8006998 <__NVIC_SystemReset+0x20>
 800699c:	e000ed00 	.word	0xe000ed00
 80069a0:	05fa0004 	.word	0x05fa0004

080069a4 <USBD_DFU_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_DFU_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80069a4:	b580      	push	{r7, lr}
 80069a6:	b084      	sub	sp, #16
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	6078      	str	r0, [r7, #4]
 80069ac:	460b      	mov	r3, r1
 80069ae:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_DFU_HandleTypeDef *hdfu;

  /* Allocate Audio structure */
  hdfu = USBD_malloc(sizeof(USBD_DFU_HandleTypeDef));
 80069b0:	f240 401c 	movw	r0, #1052	@ 0x41c
 80069b4:	f002 fc28 	bl	8009208 <USBD_static_malloc>
 80069b8:	60f8      	str	r0, [r7, #12]

  if (hdfu == NULL)
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d105      	bne.n	80069cc <USBD_DFU_Init+0x28>
  {
    pdev->pClassData = NULL;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	2200      	movs	r2, #0
 80069c4:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    return (uint8_t)USBD_EMEM;
 80069c8:	2302      	movs	r3, #2
 80069ca:	e03f      	b.n	8006a4c <USBD_DFU_Init+0xa8>
  }

  pdev->pClassData = (void *)hdfu;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	68fa      	ldr	r2, [r7, #12]
 80069d0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  hdfu->alt_setting = 0U;
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	2200      	movs	r2, #0
 80069d8:	f8c3 240c 	str.w	r2, [r3, #1036]	@ 0x40c
  hdfu->data_ptr = USBD_DFU_APP_DEFAULT_ADD;
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80069e2:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
  hdfu->wblock_num = 0U;
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	2200      	movs	r2, #0
 80069ea:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdfu->wlength = 0U;
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	2200      	movs	r2, #0
 80069f2:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404

  hdfu->manif_state = DFU_MANIFEST_COMPLETE;
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	2200      	movs	r2, #0
 80069fa:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
  hdfu->dev_state = DFU_STATE_IDLE;
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	2202      	movs	r2, #2
 8006a02:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418

  hdfu->dev_status[0] = DFU_ERROR_NONE;
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	2200      	movs	r2, #0
 8006a0a:	f883 2410 	strb.w	r2, [r3, #1040]	@ 0x410
  hdfu->dev_status[1] = 0U;
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	2200      	movs	r2, #0
 8006a12:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
  hdfu->dev_status[2] = 0U;
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	2200      	movs	r2, #0
 8006a1a:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
  hdfu->dev_status[3] = 0U;
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	2200      	movs	r2, #0
 8006a22:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
  hdfu->dev_status[4] = DFU_STATE_IDLE;
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	2202      	movs	r2, #2
 8006a2a:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
  hdfu->dev_status[5] = 0U;
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	2200      	movs	r2, #0
 8006a32:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415

  /* Initialize Hardware layer */
  if (((USBD_DFU_MediaTypeDef *)pdev->pUserData)->Init() != USBD_OK)
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8006a3c:	685b      	ldr	r3, [r3, #4]
 8006a3e:	4798      	blx	r3
 8006a40:	4603      	mov	r3, r0
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d001      	beq.n	8006a4a <USBD_DFU_Init+0xa6>
  {
    return (uint8_t)USBD_FAIL;
 8006a46:	2303      	movs	r3, #3
 8006a48:	e000      	b.n	8006a4c <USBD_DFU_Init+0xa8>
  }

  return (uint8_t)USBD_OK;
 8006a4a:	2300      	movs	r3, #0
}
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	3710      	adds	r7, #16
 8006a50:	46bd      	mov	sp, r7
 8006a52:	bd80      	pop	{r7, pc}

08006a54 <USBD_DFU_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_DFU_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006a54:	b580      	push	{r7, lr}
 8006a56:	b084      	sub	sp, #16
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]
 8006a5c:	460b      	mov	r3, r1
 8006a5e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_DFU_HandleTypeDef *hdfu;

  if (pdev->pClassData == NULL)
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d101      	bne.n	8006a6e <USBD_DFU_DeInit+0x1a>
  {
    return (uint8_t)USBD_EMEM;
 8006a6a:	2302      	movs	r3, #2
 8006a6c:	e027      	b.n	8006abe <USBD_DFU_DeInit+0x6a>
  }

  hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006a74:	60fb      	str	r3, [r7, #12]
  hdfu->wblock_num = 0U;
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	2200      	movs	r2, #0
 8006a7a:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdfu->wlength = 0U;
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	2200      	movs	r2, #0
 8006a82:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404

  hdfu->dev_state = DFU_STATE_IDLE;
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	2202      	movs	r2, #2
 8006a8a:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
  hdfu->dev_status[0] = DFU_ERROR_NONE;
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	2200      	movs	r2, #0
 8006a92:	f883 2410 	strb.w	r2, [r3, #1040]	@ 0x410
  hdfu->dev_status[4] = DFU_STATE_IDLE;
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	2202      	movs	r2, #2
 8006a9a:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414

  /* DeInit  physical Interface components and Hardware Layer */
  ((USBD_DFU_MediaTypeDef *)pdev->pUserData)->DeInit();
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8006aa4:	689b      	ldr	r3, [r3, #8]
 8006aa6:	4798      	blx	r3
  USBD_free(pdev->pClassData);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006aae:	4618      	mov	r0, r3
 8006ab0:	f002 fbb8 	bl	8009224 <USBD_static_free>
  pdev->pClassData = NULL;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	2200      	movs	r2, #0
 8006ab8:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  return (uint8_t)USBD_OK;
 8006abc:	2300      	movs	r3, #0
}
 8006abe:	4618      	mov	r0, r3
 8006ac0:	3710      	adds	r7, #16
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	bd80      	pop	{r7, pc}
	...

08006ac8 <USBD_DFU_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_DFU_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ac8:	b580      	push	{r7, lr}
 8006aca:	b088      	sub	sp, #32
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
 8006ad0:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006ad8:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 8006ada:	2300      	movs	r3, #0
 8006adc:	77fb      	strb	r3, [r7, #31]
  uint8_t *pbuf = NULL;
 8006ade:	2300      	movs	r3, #0
 8006ae0:	61bb      	str	r3, [r7, #24]
  uint16_t len = 0U;
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	82fb      	strh	r3, [r7, #22]
  uint16_t status_info = 0U;
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	81fb      	strh	r3, [r7, #14]

  if (hdfu == NULL)
 8006aea:	693b      	ldr	r3, [r7, #16]
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d101      	bne.n	8006af4 <USBD_DFU_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 8006af0:	2303      	movs	r3, #3
 8006af2:	e0d5      	b.n	8006ca0 <USBD_DFU_Setup+0x1d8>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006af4:	683b      	ldr	r3, [r7, #0]
 8006af6:	781b      	ldrb	r3, [r3, #0]
 8006af8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d03e      	beq.n	8006b7e <USBD_DFU_Setup+0xb6>
 8006b00:	2b20      	cmp	r3, #32
 8006b02:	f040 80c5 	bne.w	8006c90 <USBD_DFU_Setup+0x1c8>
  {
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 8006b06:	683b      	ldr	r3, [r7, #0]
 8006b08:	785b      	ldrb	r3, [r3, #1]
 8006b0a:	2b06      	cmp	r3, #6
 8006b0c:	d82f      	bhi.n	8006b6e <USBD_DFU_Setup+0xa6>
 8006b0e:	a201      	add	r2, pc, #4	@ (adr r2, 8006b14 <USBD_DFU_Setup+0x4c>)
 8006b10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b14:	08006b65 	.word	0x08006b65
 8006b18:	08006b31 	.word	0x08006b31
 8006b1c:	08006b3b 	.word	0x08006b3b
 8006b20:	08006b45 	.word	0x08006b45
 8006b24:	08006b4d 	.word	0x08006b4d
 8006b28:	08006b55 	.word	0x08006b55
 8006b2c:	08006b5d 	.word	0x08006b5d
      {
        case DFU_DNLOAD:
          DFU_Download(pdev, req);
 8006b30:	6839      	ldr	r1, [r7, #0]
 8006b32:	6878      	ldr	r0, [r7, #4]
 8006b34:	f000 fa6c 	bl	8007010 <DFU_Download>
          break;
 8006b38:	e020      	b.n	8006b7c <USBD_DFU_Setup+0xb4>

        case DFU_UPLOAD:
          DFU_Upload(pdev, req);
 8006b3a:	6839      	ldr	r1, [r7, #0]
 8006b3c:	6878      	ldr	r0, [r7, #4]
 8006b3e:	f000 fad3 	bl	80070e8 <DFU_Upload>
          break;
 8006b42:	e01b      	b.n	8006b7c <USBD_DFU_Setup+0xb4>

        case DFU_GETSTATUS:
          DFU_GetStatus(pdev);
 8006b44:	6878      	ldr	r0, [r7, #4]
 8006b46:	f000 fba9 	bl	800729c <DFU_GetStatus>
          break;
 8006b4a:	e017      	b.n	8006b7c <USBD_DFU_Setup+0xb4>

        case DFU_CLRSTATUS:
          DFU_ClearStatus(pdev);
 8006b4c:	6878      	ldr	r0, [r7, #4]
 8006b4e:	f000 fc5b 	bl	8007408 <DFU_ClearStatus>
          break;
 8006b52:	e013      	b.n	8006b7c <USBD_DFU_Setup+0xb4>

        case DFU_GETSTATE:
          DFU_GetState(pdev);
 8006b54:	6878      	ldr	r0, [r7, #4]
 8006b56:	f000 fcab 	bl	80074b0 <DFU_GetState>
          break;
 8006b5a:	e00f      	b.n	8006b7c <USBD_DFU_Setup+0xb4>

        case DFU_ABORT:
          DFU_Abort(pdev);
 8006b5c:	6878      	ldr	r0, [r7, #4]
 8006b5e:	f000 fcbf 	bl	80074e0 <DFU_Abort>
          break;
 8006b62:	e00b      	b.n	8006b7c <USBD_DFU_Setup+0xb4>

        case DFU_DETACH:
          DFU_Detach(pdev, req);
 8006b64:	6839      	ldr	r1, [r7, #0]
 8006b66:	6878      	ldr	r0, [r7, #4]
 8006b68:	f000 f9ee 	bl	8006f48 <DFU_Detach>
          break;
 8006b6c:	e006      	b.n	8006b7c <USBD_DFU_Setup+0xb4>

        default:
          USBD_CtlError(pdev, req);
 8006b6e:	6839      	ldr	r1, [r7, #0]
 8006b70:	6878      	ldr	r0, [r7, #4]
 8006b72:	f001 fdfb 	bl	800876c <USBD_CtlError>
          ret = USBD_FAIL;
 8006b76:	2303      	movs	r3, #3
 8006b78:	77fb      	strb	r3, [r7, #31]
          break;
 8006b7a:	bf00      	nop
      }
      break;
 8006b7c:	e08f      	b.n	8006c9e <USBD_DFU_Setup+0x1d6>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006b7e:	683b      	ldr	r3, [r7, #0]
 8006b80:	785b      	ldrb	r3, [r3, #1]
 8006b82:	2b0b      	cmp	r3, #11
 8006b84:	d87b      	bhi.n	8006c7e <USBD_DFU_Setup+0x1b6>
 8006b86:	a201      	add	r2, pc, #4	@ (adr r2, 8006b8c <USBD_DFU_Setup+0xc4>)
 8006b88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b8c:	08006bbd 	.word	0x08006bbd
 8006b90:	08006c8d 	.word	0x08006c8d
 8006b94:	08006c7f 	.word	0x08006c7f
 8006b98:	08006c7f 	.word	0x08006c7f
 8006b9c:	08006c7f 	.word	0x08006c7f
 8006ba0:	08006c7f 	.word	0x08006c7f
 8006ba4:	08006be7 	.word	0x08006be7
 8006ba8:	08006c7f 	.word	0x08006c7f
 8006bac:	08006c7f 	.word	0x08006c7f
 8006bb0:	08006c7f 	.word	0x08006c7f
 8006bb4:	08006c11 	.word	0x08006c11
 8006bb8:	08006c3d 	.word	0x08006c3d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006bc2:	b2db      	uxtb	r3, r3
 8006bc4:	2b03      	cmp	r3, #3
 8006bc6:	d107      	bne.n	8006bd8 <USBD_DFU_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006bc8:	f107 030e 	add.w	r3, r7, #14
 8006bcc:	2202      	movs	r2, #2
 8006bce:	4619      	mov	r1, r3
 8006bd0:	6878      	ldr	r0, [r7, #4]
 8006bd2:	f001 fe3c 	bl	800884e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006bd6:	e05a      	b.n	8006c8e <USBD_DFU_Setup+0x1c6>
            USBD_CtlError(pdev, req);
 8006bd8:	6839      	ldr	r1, [r7, #0]
 8006bda:	6878      	ldr	r0, [r7, #4]
 8006bdc:	f001 fdc6 	bl	800876c <USBD_CtlError>
            ret = USBD_FAIL;
 8006be0:	2303      	movs	r3, #3
 8006be2:	77fb      	strb	r3, [r7, #31]
          break;
 8006be4:	e053      	b.n	8006c8e <USBD_DFU_Setup+0x1c6>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == DFU_DESCRIPTOR_TYPE)
 8006be6:	683b      	ldr	r3, [r7, #0]
 8006be8:	885b      	ldrh	r3, [r3, #2]
 8006bea:	0a1b      	lsrs	r3, r3, #8
 8006bec:	b29b      	uxth	r3, r3
 8006bee:	2b21      	cmp	r3, #33	@ 0x21
 8006bf0:	d107      	bne.n	8006c02 <USBD_DFU_Setup+0x13a>
          {
            pbuf = USBD_DFU_CfgDesc + (9U * (USBD_DFU_MAX_ITF_NUM + 1U));
 8006bf2:	4b2d      	ldr	r3, [pc, #180]	@ (8006ca8 <USBD_DFU_Setup+0x1e0>)
 8006bf4:	61bb      	str	r3, [r7, #24]
            len = MIN(USB_DFU_DESC_SIZ, req->wLength);
 8006bf6:	683b      	ldr	r3, [r7, #0]
 8006bf8:	88db      	ldrh	r3, [r3, #6]
 8006bfa:	2b09      	cmp	r3, #9
 8006bfc:	bf28      	it	cs
 8006bfe:	2309      	movcs	r3, #9
 8006c00:	82fb      	strh	r3, [r7, #22]
          }

          (void)USBD_CtlSendData(pdev, pbuf, len);
 8006c02:	8afb      	ldrh	r3, [r7, #22]
 8006c04:	461a      	mov	r2, r3
 8006c06:	69b9      	ldr	r1, [r7, #24]
 8006c08:	6878      	ldr	r0, [r7, #4]
 8006c0a:	f001 fe20 	bl	800884e <USBD_CtlSendData>
          break;
 8006c0e:	e03e      	b.n	8006c8e <USBD_DFU_Setup+0x1c6>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006c16:	b2db      	uxtb	r3, r3
 8006c18:	2b03      	cmp	r3, #3
 8006c1a:	d108      	bne.n	8006c2e <USBD_DFU_Setup+0x166>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hdfu->alt_setting, 1U);
 8006c1c:	693b      	ldr	r3, [r7, #16]
 8006c1e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006c22:	2201      	movs	r2, #1
 8006c24:	4619      	mov	r1, r3
 8006c26:	6878      	ldr	r0, [r7, #4]
 8006c28:	f001 fe11 	bl	800884e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006c2c:	e02f      	b.n	8006c8e <USBD_DFU_Setup+0x1c6>
            USBD_CtlError(pdev, req);
 8006c2e:	6839      	ldr	r1, [r7, #0]
 8006c30:	6878      	ldr	r0, [r7, #4]
 8006c32:	f001 fd9b 	bl	800876c <USBD_CtlError>
            ret = USBD_FAIL;
 8006c36:	2303      	movs	r3, #3
 8006c38:	77fb      	strb	r3, [r7, #31]
          break;
 8006c3a:	e028      	b.n	8006c8e <USBD_DFU_Setup+0x1c6>

        case USB_REQ_SET_INTERFACE:
          if ((uint8_t)(req->wValue) < USBD_DFU_MAX_ITF_NUM)
 8006c3c:	683b      	ldr	r3, [r7, #0]
 8006c3e:	885b      	ldrh	r3, [r3, #2]
 8006c40:	b2db      	uxtb	r3, r3
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d114      	bne.n	8006c70 <USBD_DFU_Setup+0x1a8>
          {
            if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006c4c:	b2db      	uxtb	r3, r3
 8006c4e:	2b03      	cmp	r3, #3
 8006c50:	d107      	bne.n	8006c62 <USBD_DFU_Setup+0x19a>
            {
              hdfu->alt_setting = (uint8_t)(req->wValue);
 8006c52:	683b      	ldr	r3, [r7, #0]
 8006c54:	885b      	ldrh	r3, [r3, #2]
 8006c56:	b2db      	uxtb	r3, r3
 8006c58:	461a      	mov	r2, r3
 8006c5a:	693b      	ldr	r3, [r7, #16]
 8006c5c:	f8c3 240c 	str.w	r2, [r3, #1036]	@ 0x40c
          {
            /* Call the error management function (command will be NAKed */
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006c60:	e015      	b.n	8006c8e <USBD_DFU_Setup+0x1c6>
              USBD_CtlError(pdev, req);
 8006c62:	6839      	ldr	r1, [r7, #0]
 8006c64:	6878      	ldr	r0, [r7, #4]
 8006c66:	f001 fd81 	bl	800876c <USBD_CtlError>
              ret = USBD_FAIL;
 8006c6a:	2303      	movs	r3, #3
 8006c6c:	77fb      	strb	r3, [r7, #31]
          break;
 8006c6e:	e00e      	b.n	8006c8e <USBD_DFU_Setup+0x1c6>
            USBD_CtlError(pdev, req);
 8006c70:	6839      	ldr	r1, [r7, #0]
 8006c72:	6878      	ldr	r0, [r7, #4]
 8006c74:	f001 fd7a 	bl	800876c <USBD_CtlError>
            ret = USBD_FAIL;
 8006c78:	2303      	movs	r3, #3
 8006c7a:	77fb      	strb	r3, [r7, #31]
          break;
 8006c7c:	e007      	b.n	8006c8e <USBD_DFU_Setup+0x1c6>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006c7e:	6839      	ldr	r1, [r7, #0]
 8006c80:	6878      	ldr	r0, [r7, #4]
 8006c82:	f001 fd73 	bl	800876c <USBD_CtlError>
          ret = USBD_FAIL;
 8006c86:	2303      	movs	r3, #3
 8006c88:	77fb      	strb	r3, [r7, #31]
          break;
 8006c8a:	e000      	b.n	8006c8e <USBD_DFU_Setup+0x1c6>
          break;
 8006c8c:	bf00      	nop
      }
      break;
 8006c8e:	e006      	b.n	8006c9e <USBD_DFU_Setup+0x1d6>

    default:
      USBD_CtlError(pdev, req);
 8006c90:	6839      	ldr	r1, [r7, #0]
 8006c92:	6878      	ldr	r0, [r7, #4]
 8006c94:	f001 fd6a 	bl	800876c <USBD_CtlError>
      ret = USBD_FAIL;
 8006c98:	2303      	movs	r3, #3
 8006c9a:	77fb      	strb	r3, [r7, #31]
      break;
 8006c9c:	bf00      	nop
  }

  return (uint8_t)ret;
 8006c9e:	7ffb      	ldrb	r3, [r7, #31]
}
 8006ca0:	4618      	mov	r0, r3
 8006ca2:	3720      	adds	r7, #32
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	bd80      	pop	{r7, pc}
 8006ca8:	2000005a 	.word	0x2000005a

08006cac <USBD_DFU_GetCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_DFU_GetCfgDesc(uint16_t *length)
{
 8006cac:	b480      	push	{r7}
 8006cae:	b083      	sub	sp, #12
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_DFU_CfgDesc);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	221b      	movs	r2, #27
 8006cb8:	801a      	strh	r2, [r3, #0]

  return USBD_DFU_CfgDesc;
 8006cba:	4b03      	ldr	r3, [pc, #12]	@ (8006cc8 <USBD_DFU_GetCfgDesc+0x1c>)
}
 8006cbc:	4618      	mov	r0, r3
 8006cbe:	370c      	adds	r7, #12
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc6:	4770      	bx	lr
 8006cc8:	20000048 	.word	0x20000048

08006ccc <USBD_DFU_EP0_RxReady>:
  *         handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_DFU_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006ccc:	b480      	push	{r7}
 8006cce:	b083      	sub	sp, #12
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
  UNUSED(pdev);

  return (uint8_t)USBD_OK;
 8006cd4:	2300      	movs	r3, #0
}
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	370c      	adds	r7, #12
 8006cda:	46bd      	mov	sp, r7
 8006cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce0:	4770      	bx	lr

08006ce2 <USBD_DFU_EP0_TxReady>:
  *         handle EP0 TRx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_DFU_EP0_TxReady(USBD_HandleTypeDef *pdev)
{
 8006ce2:	b580      	push	{r7, lr}
 8006ce4:	b088      	sub	sp, #32
 8006ce6:	af00      	add	r7, sp, #0
 8006ce8:	6078      	str	r0, [r7, #4]
  USBD_SetupReqTypedef req;
  uint32_t addr;
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006cf0:	61fb      	str	r3, [r7, #28]
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8006cf8:	61bb      	str	r3, [r7, #24]

  if (hdfu == NULL)
 8006cfa:	69fb      	ldr	r3, [r7, #28]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d101      	bne.n	8006d04 <USBD_DFU_EP0_TxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006d00:	2303      	movs	r3, #3
 8006d02:	e0ce      	b.n	8006ea2 <USBD_DFU_EP0_TxReady+0x1c0>
  }

  if (hdfu->dev_state == DFU_STATE_DNLOAD_BUSY)
 8006d04:	69fb      	ldr	r3, [r7, #28]
 8006d06:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 8006d0a:	2b04      	cmp	r3, #4
 8006d0c:	f040 80bd 	bne.w	8006e8a <USBD_DFU_EP0_TxReady+0x1a8>
  {
    /* Decode the Special Command */
    if (hdfu->wblock_num == 0U)
 8006d10:	69fb      	ldr	r3, [r7, #28]
 8006d12:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d17c      	bne.n	8006e14 <USBD_DFU_EP0_TxReady+0x132>
    {
      if (hdfu->wlength == 1U)
 8006d1a:	69fb      	ldr	r3, [r7, #28]
 8006d1c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8006d20:	2b01      	cmp	r3, #1
 8006d22:	f000 8093 	beq.w	8006e4c <USBD_DFU_EP0_TxReady+0x16a>
        if (hdfu->buffer.d8[0] == DFU_CMD_GETCOMMANDS)
        {
          /* Nothing to do */
        }
      }
      else if (hdfu->wlength == 5U)
 8006d26:	69fb      	ldr	r3, [r7, #28]
 8006d28:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8006d2c:	2b05      	cmp	r3, #5
 8006d2e:	d15e      	bne.n	8006dee <USBD_DFU_EP0_TxReady+0x10c>
      {
        if (hdfu->buffer.d8[0] == DFU_CMD_SETADDRESSPOINTER)
 8006d30:	69fb      	ldr	r3, [r7, #28]
 8006d32:	781b      	ldrb	r3, [r3, #0]
 8006d34:	2b21      	cmp	r3, #33	@ 0x21
 8006d36:	d124      	bne.n	8006d82 <USBD_DFU_EP0_TxReady+0xa0>
        {
          hdfu->data_ptr = hdfu->buffer.d8[1];
 8006d38:	69fb      	ldr	r3, [r7, #28]
 8006d3a:	785b      	ldrb	r3, [r3, #1]
 8006d3c:	461a      	mov	r2, r3
 8006d3e:	69fb      	ldr	r3, [r7, #28]
 8006d40:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[2] << 8;
 8006d44:	69fb      	ldr	r3, [r7, #28]
 8006d46:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8006d4a:	69fb      	ldr	r3, [r7, #28]
 8006d4c:	789b      	ldrb	r3, [r3, #2]
 8006d4e:	021b      	lsls	r3, r3, #8
 8006d50:	441a      	add	r2, r3
 8006d52:	69fb      	ldr	r3, [r7, #28]
 8006d54:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[3] << 16;
 8006d58:	69fb      	ldr	r3, [r7, #28]
 8006d5a:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8006d5e:	69fb      	ldr	r3, [r7, #28]
 8006d60:	78db      	ldrb	r3, [r3, #3]
 8006d62:	041b      	lsls	r3, r3, #16
 8006d64:	441a      	add	r2, r3
 8006d66:	69fb      	ldr	r3, [r7, #28]
 8006d68:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[4] << 24;
 8006d6c:	69fb      	ldr	r3, [r7, #28]
 8006d6e:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8006d72:	69fb      	ldr	r3, [r7, #28]
 8006d74:	791b      	ldrb	r3, [r3, #4]
 8006d76:	061b      	lsls	r3, r3, #24
 8006d78:	441a      	add	r2, r3
 8006d7a:	69fb      	ldr	r3, [r7, #28]
 8006d7c:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
 8006d80:	e064      	b.n	8006e4c <USBD_DFU_EP0_TxReady+0x16a>
        }
        else if (hdfu->buffer.d8[0] == DFU_CMD_ERASE)
 8006d82:	69fb      	ldr	r3, [r7, #28]
 8006d84:	781b      	ldrb	r3, [r3, #0]
 8006d86:	2b41      	cmp	r3, #65	@ 0x41
 8006d88:	d12f      	bne.n	8006dea <USBD_DFU_EP0_TxReady+0x108>
        {
          hdfu->data_ptr = hdfu->buffer.d8[1];
 8006d8a:	69fb      	ldr	r3, [r7, #28]
 8006d8c:	785b      	ldrb	r3, [r3, #1]
 8006d8e:	461a      	mov	r2, r3
 8006d90:	69fb      	ldr	r3, [r7, #28]
 8006d92:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[2] << 8;
 8006d96:	69fb      	ldr	r3, [r7, #28]
 8006d98:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8006d9c:	69fb      	ldr	r3, [r7, #28]
 8006d9e:	789b      	ldrb	r3, [r3, #2]
 8006da0:	021b      	lsls	r3, r3, #8
 8006da2:	441a      	add	r2, r3
 8006da4:	69fb      	ldr	r3, [r7, #28]
 8006da6:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[3] << 16;
 8006daa:	69fb      	ldr	r3, [r7, #28]
 8006dac:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8006db0:	69fb      	ldr	r3, [r7, #28]
 8006db2:	78db      	ldrb	r3, [r3, #3]
 8006db4:	041b      	lsls	r3, r3, #16
 8006db6:	441a      	add	r2, r3
 8006db8:	69fb      	ldr	r3, [r7, #28]
 8006dba:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[4] << 24;
 8006dbe:	69fb      	ldr	r3, [r7, #28]
 8006dc0:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8006dc4:	69fb      	ldr	r3, [r7, #28]
 8006dc6:	791b      	ldrb	r3, [r3, #4]
 8006dc8:	061b      	lsls	r3, r3, #24
 8006dca:	441a      	add	r2, r3
 8006dcc:	69fb      	ldr	r3, [r7, #28]
 8006dce:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408

          if (DfuInterface->Erase(hdfu->data_ptr) != USBD_OK)
 8006dd2:	69bb      	ldr	r3, [r7, #24]
 8006dd4:	68db      	ldr	r3, [r3, #12]
 8006dd6:	69fa      	ldr	r2, [r7, #28]
 8006dd8:	f8d2 2408 	ldr.w	r2, [r2, #1032]	@ 0x408
 8006ddc:	4610      	mov	r0, r2
 8006dde:	4798      	blx	r3
 8006de0:	4603      	mov	r3, r0
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d032      	beq.n	8006e4c <USBD_DFU_EP0_TxReady+0x16a>
          {
            return (uint8_t)USBD_FAIL;
 8006de6:	2303      	movs	r3, #3
 8006de8:	e05b      	b.n	8006ea2 <USBD_DFU_EP0_TxReady+0x1c0>
          }
        }
        else
        {
          return (uint8_t)USBD_FAIL;
 8006dea:	2303      	movs	r3, #3
 8006dec:	e059      	b.n	8006ea2 <USBD_DFU_EP0_TxReady+0x1c0>
        }
      }
      else
      {
        /* Reset the global length and block number */
        hdfu->wlength = 0U;
 8006dee:	69fb      	ldr	r3, [r7, #28]
 8006df0:	2200      	movs	r2, #0
 8006df2:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
        hdfu->wblock_num = 0U;
 8006df6:	69fb      	ldr	r3, [r7, #28]
 8006df8:	2200      	movs	r2, #0
 8006dfa:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
        /* Call the error management function (command will be NAKed) */
        req.bmRequest = 0U;
 8006dfe:	2300      	movs	r3, #0
 8006e00:	733b      	strb	r3, [r7, #12]
        req.wLength = 1U;
 8006e02:	2301      	movs	r3, #1
 8006e04:	827b      	strh	r3, [r7, #18]
        USBD_CtlError(pdev, &req);
 8006e06:	f107 030c 	add.w	r3, r7, #12
 8006e0a:	4619      	mov	r1, r3
 8006e0c:	6878      	ldr	r0, [r7, #4]
 8006e0e:	f001 fcad 	bl	800876c <USBD_CtlError>
 8006e12:	e01b      	b.n	8006e4c <USBD_DFU_EP0_TxReady+0x16a>
      }
    }
    /* Regular Download Command */
    else
    {
      if (hdfu->wblock_num > 1U)
 8006e14:	69fb      	ldr	r3, [r7, #28]
 8006e16:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 8006e1a:	2b01      	cmp	r3, #1
 8006e1c:	d916      	bls.n	8006e4c <USBD_DFU_EP0_TxReady+0x16a>
      {
        /* Decode the required address */
        addr = ((hdfu->wblock_num - 2U) * USBD_DFU_XFER_SIZE) + hdfu->data_ptr;
 8006e1e:	69fb      	ldr	r3, [r7, #28]
 8006e20:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 8006e24:	3b02      	subs	r3, #2
 8006e26:	029a      	lsls	r2, r3, #10
 8006e28:	69fb      	ldr	r3, [r7, #28]
 8006e2a:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 8006e2e:	4413      	add	r3, r2
 8006e30:	617b      	str	r3, [r7, #20]

        /* Perform the write operation */
        if (DfuInterface->Write(hdfu->buffer.d8, (uint8_t *)addr, hdfu->wlength) != USBD_OK)
 8006e32:	69bb      	ldr	r3, [r7, #24]
 8006e34:	691b      	ldr	r3, [r3, #16]
 8006e36:	69f8      	ldr	r0, [r7, #28]
 8006e38:	6979      	ldr	r1, [r7, #20]
 8006e3a:	69fa      	ldr	r2, [r7, #28]
 8006e3c:	f8d2 2404 	ldr.w	r2, [r2, #1028]	@ 0x404
 8006e40:	4798      	blx	r3
 8006e42:	4603      	mov	r3, r0
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d001      	beq.n	8006e4c <USBD_DFU_EP0_TxReady+0x16a>
        {
          return (uint8_t)USBD_FAIL;
 8006e48:	2303      	movs	r3, #3
 8006e4a:	e02a      	b.n	8006ea2 <USBD_DFU_EP0_TxReady+0x1c0>
        }
      }
    }

    /* Reset the global length and block number */
    hdfu->wlength = 0U;
 8006e4c:	69fb      	ldr	r3, [r7, #28]
 8006e4e:	2200      	movs	r2, #0
 8006e50:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
    hdfu->wblock_num = 0U;
 8006e54:	69fb      	ldr	r3, [r7, #28]
 8006e56:	2200      	movs	r2, #0
 8006e58:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400

    /* Update the state machine */
    hdfu->dev_state =  DFU_STATE_DNLOAD_SYNC;
 8006e5c:	69fb      	ldr	r3, [r7, #28]
 8006e5e:	2203      	movs	r2, #3
 8006e60:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418

    hdfu->dev_status[1] = 0U;
 8006e64:	69fb      	ldr	r3, [r7, #28]
 8006e66:	2200      	movs	r2, #0
 8006e68:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
    hdfu->dev_status[2] = 0U;
 8006e6c:	69fb      	ldr	r3, [r7, #28]
 8006e6e:	2200      	movs	r2, #0
 8006e70:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
    hdfu->dev_status[3] = 0U;
 8006e74:	69fb      	ldr	r3, [r7, #28]
 8006e76:	2200      	movs	r2, #0
 8006e78:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 8006e7c:	69fb      	ldr	r3, [r7, #28]
 8006e7e:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 8006e82:	69fb      	ldr	r3, [r7, #28]
 8006e84:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
 8006e88:	e00a      	b.n	8006ea0 <USBD_DFU_EP0_TxReady+0x1be>
  }
  else if (hdfu->dev_state == DFU_STATE_MANIFEST)/* Manifestation in progress */
 8006e8a:	69fb      	ldr	r3, [r7, #28]
 8006e8c:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 8006e90:	2b07      	cmp	r3, #7
 8006e92:	d103      	bne.n	8006e9c <USBD_DFU_EP0_TxReady+0x1ba>
  {
    /* Start leaving DFU mode */
    DFU_Leave(pdev);
 8006e94:	6878      	ldr	r0, [r7, #4]
 8006e96:	f000 fb75 	bl	8007584 <DFU_Leave>
 8006e9a:	e001      	b.n	8006ea0 <USBD_DFU_EP0_TxReady+0x1be>
  }
  else
  {
    return (uint8_t)USBD_FAIL;
 8006e9c:	2303      	movs	r3, #3
 8006e9e:	e000      	b.n	8006ea2 <USBD_DFU_EP0_TxReady+0x1c0>
  }

  return (uint8_t)USBD_OK;
 8006ea0:	2300      	movs	r3, #0
}
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	3720      	adds	r7, #32
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	bd80      	pop	{r7, pc}

08006eaa <USBD_DFU_SOF>:
  *         handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_DFU_SOF(USBD_HandleTypeDef *pdev)
{
 8006eaa:	b480      	push	{r7}
 8006eac:	b083      	sub	sp, #12
 8006eae:	af00      	add	r7, sp, #0
 8006eb0:	6078      	str	r0, [r7, #4]
  UNUSED(pdev);

  return (uint8_t)USBD_OK;
 8006eb2:	2300      	movs	r3, #0
}
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	370c      	adds	r7, #12
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ebe:	4770      	bx	lr

08006ec0 <USBD_DFU_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_DFU_GetDeviceQualifierDesc(uint16_t *length)
{
 8006ec0:	b480      	push	{r7}
 8006ec2:	b083      	sub	sp, #12
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_DFU_DeviceQualifierDesc);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	220a      	movs	r2, #10
 8006ecc:	801a      	strh	r2, [r3, #0]

  return USBD_DFU_DeviceQualifierDesc;
 8006ece:	4b03      	ldr	r3, [pc, #12]	@ (8006edc <USBD_DFU_GetDeviceQualifierDesc+0x1c>)
}
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	370c      	adds	r7, #12
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eda:	4770      	bx	lr
 8006edc:	20000064 	.word	0x20000064

08006ee0 <USBD_DFU_GetUsrStringDesc>:
  * @param  length : pointer data length
  * @retval pointer to the descriptor table or NULL if the descriptor is not supported.
  */
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
static uint8_t *USBD_DFU_GetUsrStringDesc(USBD_HandleTypeDef *pdev, uint8_t index, uint16_t *length)
{
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	b086      	sub	sp, #24
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	60f8      	str	r0, [r7, #12]
 8006ee8:	460b      	mov	r3, r1
 8006eea:	607a      	str	r2, [r7, #4]
 8006eec:	72fb      	strb	r3, [r7, #11]
  static uint8_t USBD_StrDesc[255];
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData;
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8006ef4:	617b      	str	r3, [r7, #20]

  /* Check if the requested string interface is supported */
  if (index <= (USBD_IDX_INTERFACE_STR + USBD_DFU_MAX_ITF_NUM))
 8006ef6:	7afb      	ldrb	r3, [r7, #11]
 8006ef8:	2b06      	cmp	r3, #6
 8006efa:	d808      	bhi.n	8006f0e <USBD_DFU_GetUsrStringDesc+0x2e>
  {
    USBD_GetString((uint8_t *)DfuInterface->pStrDesc, USBD_StrDesc, length);
 8006efc:	697b      	ldr	r3, [r7, #20]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	687a      	ldr	r2, [r7, #4]
 8006f02:	4905      	ldr	r1, [pc, #20]	@ (8006f18 <USBD_DFU_GetUsrStringDesc+0x38>)
 8006f04:	4618      	mov	r0, r3
 8006f06:	f001 fc42 	bl	800878e <USBD_GetString>
    return USBD_StrDesc;
 8006f0a:	4b03      	ldr	r3, [pc, #12]	@ (8006f18 <USBD_DFU_GetUsrStringDesc+0x38>)
 8006f0c:	e000      	b.n	8006f10 <USBD_DFU_GetUsrStringDesc+0x30>
  }
  else
  {
    /* Not supported Interface Descriptor index */
    return NULL;
 8006f0e:	2300      	movs	r3, #0
  }
}
 8006f10:	4618      	mov	r0, r3
 8006f12:	3718      	adds	r7, #24
 8006f14:	46bd      	mov	sp, r7
 8006f16:	bd80      	pop	{r7, pc}
 8006f18:	20000314 	.word	0x20000314

08006f1c <USBD_DFU_RegisterMedia>:
  * @param  fops: storage callback
  * @retval status
  */
uint8_t USBD_DFU_RegisterMedia(USBD_HandleTypeDef *pdev,
                               USBD_DFU_MediaTypeDef *fops)
{
 8006f1c:	b480      	push	{r7}
 8006f1e:	b083      	sub	sp, #12
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	6078      	str	r0, [r7, #4]
 8006f24:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006f26:	683b      	ldr	r3, [r7, #0]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d101      	bne.n	8006f30 <USBD_DFU_RegisterMedia+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006f2c:	2303      	movs	r3, #3
 8006f2e:	e004      	b.n	8006f3a <USBD_DFU_RegisterMedia+0x1e>
  }

  pdev->pUserData = fops;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	683a      	ldr	r2, [r7, #0]
 8006f34:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  return (uint8_t)USBD_OK;
 8006f38:	2300      	movs	r3, #0
}
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	370c      	adds	r7, #12
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f44:	4770      	bx	lr
	...

08006f48 <DFU_Detach>:
  * @param  pdev: device instance
  * @param  req: pointer to the request structure.
  * @retval None.
  */
static void DFU_Detach(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	b084      	sub	sp, #16
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]
 8006f50:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006f58:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d051      	beq.n	8007004 <DFU_Detach+0xbc>
  {
    return;
  }

  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 8006f66:	2b02      	cmp	r3, #2
 8006f68:	d013      	beq.n	8006f92 <DFU_Detach+0x4a>
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 8006f70:	2b03      	cmp	r3, #3
 8006f72:	d00e      	beq.n	8006f92 <DFU_Detach+0x4a>
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 8006f7a:	2b05      	cmp	r3, #5
 8006f7c:	d009      	beq.n	8006f92 <DFU_Detach+0x4a>
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 8006f84:	2b06      	cmp	r3, #6
 8006f86:	d004      	beq.n	8006f92 <DFU_Detach+0x4a>
      (hdfu->dev_state == DFU_STATE_UPLOAD_IDLE))
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 8006f8e:	2b09      	cmp	r3, #9
 8006f90:	d125      	bne.n	8006fde <DFU_Detach+0x96>
  {
    /* Update the state machine */
    hdfu->dev_state = DFU_STATE_IDLE;
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	2202      	movs	r2, #2
 8006f96:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
    hdfu->dev_status[0] = DFU_ERROR_NONE;
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	2200      	movs	r2, #0
 8006f9e:	f883 2410 	strb.w	r2, [r3, #1040]	@ 0x410
    hdfu->dev_status[1] = 0U;
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
    hdfu->dev_status[2] = 0U;
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	2200      	movs	r2, #0
 8006fae:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
    hdfu->dev_status[3] = 0U; /*bwPollTimeout=0ms*/
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	2200      	movs	r2, #0
 8006fb6:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
    hdfu->dev_status[5] = 0U; /*iString*/
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	2200      	movs	r2, #0
 8006fca:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
    hdfu->wblock_num = 0U;
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	2200      	movs	r2, #0
 8006fd2:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
    hdfu->wlength = 0U;
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	2200      	movs	r2, #0
 8006fda:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
  }

  /* Check the detach capability in the DFU functional descriptor */
  if (((USBD_DFU_CfgDesc[12U + (9U * USBD_DFU_MAX_ITF_NUM)]) & DFU_DETACH_MASK) != 0U)
 8006fde:	4b0b      	ldr	r3, [pc, #44]	@ (800700c <DFU_Detach+0xc4>)
 8006fe0:	7d5b      	ldrb	r3, [r3, #21]
 8006fe2:	f003 0310 	and.w	r3, r3, #16
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d006      	beq.n	8006ff8 <DFU_Detach+0xb0>
  {
    /* Perform an Attach-Detach operation on USB bus */
    (void)USBD_Stop(pdev);
 8006fea:	6878      	ldr	r0, [r7, #4]
 8006fec:	f000 fb7b 	bl	80076e6 <USBD_Stop>
    (void)USBD_Start(pdev);
 8006ff0:	6878      	ldr	r0, [r7, #4]
 8006ff2:	f000 fb6c 	bl	80076ce <USBD_Start>
 8006ff6:	e006      	b.n	8007006 <DFU_Detach+0xbe>
  }
  else
  {
    /* Wait for the period of time specified in Detach request */
    USBD_Delay((uint32_t)req->wValue);
 8006ff8:	683b      	ldr	r3, [r7, #0]
 8006ffa:	885b      	ldrh	r3, [r3, #2]
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	f7fa f98f 	bl	8001320 <HAL_Delay>
 8007002:	e000      	b.n	8007006 <DFU_Detach+0xbe>
    return;
 8007004:	bf00      	nop
  }
}
 8007006:	3710      	adds	r7, #16
 8007008:	46bd      	mov	sp, r7
 800700a:	bd80      	pop	{r7, pc}
 800700c:	20000048 	.word	0x20000048

08007010 <DFU_Download>:
  * @param  pdev: device instance
  * @param  req: pointer to the request structure
  * @retval None
  */
static void DFU_Download(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007010:	b580      	push	{r7, lr}
 8007012:	b084      	sub	sp, #16
 8007014:	af00      	add	r7, sp, #0
 8007016:	6078      	str	r0, [r7, #4]
 8007018:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007020:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	2b00      	cmp	r3, #0
 8007026:	d05b      	beq.n	80070e0 <DFU_Download+0xd0>
  {
    return;
  }

  /* Data setup request */
  if (req->wLength > 0U)
 8007028:	683b      	ldr	r3, [r7, #0]
 800702a:	88db      	ldrh	r3, [r3, #6]
 800702c:	2b00      	cmp	r3, #0
 800702e:	d02d      	beq.n	800708c <DFU_Download+0x7c>
  {
    if ((hdfu->dev_state == DFU_STATE_IDLE) || (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE))
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 8007036:	2b02      	cmp	r3, #2
 8007038:	d004      	beq.n	8007044 <DFU_Download+0x34>
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 8007040:	2b05      	cmp	r3, #5
 8007042:	d11e      	bne.n	8007082 <DFU_Download+0x72>
    {
      /* Update the global length and block number */
      hdfu->wblock_num = req->wValue;
 8007044:	683b      	ldr	r3, [r7, #0]
 8007046:	885b      	ldrh	r3, [r3, #2]
 8007048:	461a      	mov	r2, r3
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
      hdfu->wlength = req->wLength;
 8007050:	683b      	ldr	r3, [r7, #0]
 8007052:	88db      	ldrh	r3, [r3, #6]
 8007054:	461a      	mov	r2, r3
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404

      /* Update the state machine */
      hdfu->dev_state = DFU_STATE_DNLOAD_SYNC;
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	2203      	movs	r2, #3
 8007060:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
      hdfu->dev_status[4] = hdfu->dev_state;
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414

      /* Prepare the reception of the buffer over EP0 */
      (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hdfu->buffer.d8, hdfu->wlength);
 8007070:	68f9      	ldr	r1, [r7, #12]
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8007078:	461a      	mov	r2, r3
 800707a:	6878      	ldr	r0, [r7, #4]
 800707c:	f001 fc13 	bl	80088a6 <USBD_CtlPrepareRx>
 8007080:	e02f      	b.n	80070e2 <DFU_Download+0xd2>
    }
    /* Unsupported state */
    else
    {
      /* Call the error management function (command will be NAKed */
      USBD_CtlError(pdev, req);
 8007082:	6839      	ldr	r1, [r7, #0]
 8007084:	6878      	ldr	r0, [r7, #4]
 8007086:	f001 fb71 	bl	800876c <USBD_CtlError>
 800708a:	e02a      	b.n	80070e2 <DFU_Download+0xd2>
  }
  /* 0 Data DNLOAD request */
  else
  {
    /* End of DNLOAD operation*/
    if ((hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) || (hdfu->dev_state == DFU_STATE_IDLE))
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 8007092:	2b05      	cmp	r3, #5
 8007094:	d004      	beq.n	80070a0 <DFU_Download+0x90>
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 800709c:	2b02      	cmp	r3, #2
 800709e:	d11a      	bne.n	80070d6 <DFU_Download+0xc6>
    {
      hdfu->manif_state = DFU_MANIFEST_IN_PROGRESS;
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	2201      	movs	r2, #1
 80070a4:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
      hdfu->dev_state = DFU_STATE_MANIFEST_SYNC;
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	2206      	movs	r2, #6
 80070ac:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
      hdfu->dev_status[1] = 0U;
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	2200      	movs	r2, #0
 80070b4:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
      hdfu->dev_status[2] = 0U;
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	2200      	movs	r2, #0
 80070bc:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
      hdfu->dev_status[3] = 0U;
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	2200      	movs	r2, #0
 80070c4:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
      hdfu->dev_status[4] = hdfu->dev_state;
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
 80070d4:	e005      	b.n	80070e2 <DFU_Download+0xd2>
    }
    else
    {
      /* Call the error management function (command will be NAKed */
      USBD_CtlError(pdev, req);
 80070d6:	6839      	ldr	r1, [r7, #0]
 80070d8:	6878      	ldr	r0, [r7, #4]
 80070da:	f001 fb47 	bl	800876c <USBD_CtlError>
 80070de:	e000      	b.n	80070e2 <DFU_Download+0xd2>
    return;
 80070e0:	bf00      	nop
    }
  }
}
 80070e2:	3710      	adds	r7, #16
 80070e4:	46bd      	mov	sp, r7
 80070e6:	bd80      	pop	{r7, pc}

080070e8 <DFU_Upload>:
  * @param  pdev: instance
  * @param  req: pointer to the request structure
  * @retval status
  */
static void DFU_Upload(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80070e8:	b580      	push	{r7, lr}
 80070ea:	b086      	sub	sp, #24
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	6078      	str	r0, [r7, #4]
 80070f0:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80070f8:	617b      	str	r3, [r7, #20]
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8007100:	613b      	str	r3, [r7, #16]
  uint8_t *phaddr;
  uint32_t addr;

  if (hdfu == NULL)
 8007102:	697b      	ldr	r3, [r7, #20]
 8007104:	2b00      	cmp	r3, #0
 8007106:	f000 80c4 	beq.w	8007292 <DFU_Upload+0x1aa>
  {
    return;
  }

  /* Data setup request */
  if (req->wLength > 0U)
 800710a:	683b      	ldr	r3, [r7, #0]
 800710c:	88db      	ldrh	r3, [r3, #6]
 800710e:	2b00      	cmp	r3, #0
 8007110:	f000 80a8 	beq.w	8007264 <DFU_Upload+0x17c>
  {
    if ((hdfu->dev_state == DFU_STATE_IDLE) || (hdfu->dev_state == DFU_STATE_UPLOAD_IDLE))
 8007114:	697b      	ldr	r3, [r7, #20]
 8007116:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 800711a:	2b02      	cmp	r3, #2
 800711c:	d005      	beq.n	800712a <DFU_Upload+0x42>
 800711e:	697b      	ldr	r3, [r7, #20]
 8007120:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 8007124:	2b09      	cmp	r3, #9
 8007126:	f040 8090 	bne.w	800724a <DFU_Upload+0x162>
    {
      /* Update the global length and block number */
      hdfu->wblock_num = req->wValue;
 800712a:	683b      	ldr	r3, [r7, #0]
 800712c:	885b      	ldrh	r3, [r3, #2]
 800712e:	461a      	mov	r2, r3
 8007130:	697b      	ldr	r3, [r7, #20]
 8007132:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
      hdfu->wlength = req->wLength;
 8007136:	683b      	ldr	r3, [r7, #0]
 8007138:	88db      	ldrh	r3, [r3, #6]
 800713a:	461a      	mov	r2, r3
 800713c:	697b      	ldr	r3, [r7, #20]
 800713e:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404

      /* DFU Get Command */
      if (hdfu->wblock_num == 0U)
 8007142:	697b      	ldr	r3, [r7, #20]
 8007144:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 8007148:	2b00      	cmp	r3, #0
 800714a:	d12c      	bne.n	80071a6 <DFU_Upload+0xbe>
      {
        /* Update the state machine */
        hdfu->dev_state = (hdfu->wlength > 3U) ? DFU_STATE_IDLE : DFU_STATE_UPLOAD_IDLE;
 800714c:	697b      	ldr	r3, [r7, #20]
 800714e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8007152:	2b03      	cmp	r3, #3
 8007154:	d901      	bls.n	800715a <DFU_Upload+0x72>
 8007156:	2202      	movs	r2, #2
 8007158:	e000      	b.n	800715c <DFU_Upload+0x74>
 800715a:	2209      	movs	r2, #9
 800715c:	697b      	ldr	r3, [r7, #20]
 800715e:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418

        hdfu->dev_status[1] = 0U;
 8007162:	697b      	ldr	r3, [r7, #20]
 8007164:	2200      	movs	r2, #0
 8007166:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
        hdfu->dev_status[2] = 0U;
 800716a:	697b      	ldr	r3, [r7, #20]
 800716c:	2200      	movs	r2, #0
 800716e:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
        hdfu->dev_status[3] = 0U;
 8007172:	697b      	ldr	r3, [r7, #20]
 8007174:	2200      	movs	r2, #0
 8007176:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 800717a:	697b      	ldr	r3, [r7, #20]
 800717c:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 8007180:	697b      	ldr	r3, [r7, #20]
 8007182:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414

        /* Store the values of all supported commands */
        hdfu->buffer.d8[0] = DFU_CMD_GETCOMMANDS;
 8007186:	697b      	ldr	r3, [r7, #20]
 8007188:	2200      	movs	r2, #0
 800718a:	701a      	strb	r2, [r3, #0]
        hdfu->buffer.d8[1] = DFU_CMD_SETADDRESSPOINTER;
 800718c:	697b      	ldr	r3, [r7, #20]
 800718e:	2221      	movs	r2, #33	@ 0x21
 8007190:	705a      	strb	r2, [r3, #1]
        hdfu->buffer.d8[2] = DFU_CMD_ERASE;
 8007192:	697b      	ldr	r3, [r7, #20]
 8007194:	2241      	movs	r2, #65	@ 0x41
 8007196:	709a      	strb	r2, [r3, #2]

        /* Send the status data over EP0 */
        (void)USBD_CtlSendData(pdev, (uint8_t *)(&(hdfu->buffer.d8[0])), 3U);
 8007198:	697b      	ldr	r3, [r7, #20]
 800719a:	2203      	movs	r2, #3
 800719c:	4619      	mov	r1, r3
 800719e:	6878      	ldr	r0, [r7, #4]
 80071a0:	f001 fb55 	bl	800884e <USBD_CtlSendData>
      if (hdfu->wblock_num == 0U)
 80071a4:	e076      	b.n	8007294 <DFU_Upload+0x1ac>
      }
      else if (hdfu->wblock_num > 1U)
 80071a6:	697b      	ldr	r3, [r7, #20]
 80071a8:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 80071ac:	2b01      	cmp	r3, #1
 80071ae:	d931      	bls.n	8007214 <DFU_Upload+0x12c>
      {
        hdfu->dev_state = DFU_STATE_UPLOAD_IDLE;
 80071b0:	697b      	ldr	r3, [r7, #20]
 80071b2:	2209      	movs	r2, #9
 80071b4:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418

        hdfu->dev_status[1] = 0U;
 80071b8:	697b      	ldr	r3, [r7, #20]
 80071ba:	2200      	movs	r2, #0
 80071bc:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
        hdfu->dev_status[2] = 0U;
 80071c0:	697b      	ldr	r3, [r7, #20]
 80071c2:	2200      	movs	r2, #0
 80071c4:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
        hdfu->dev_status[3] = 0U;
 80071c8:	697b      	ldr	r3, [r7, #20]
 80071ca:	2200      	movs	r2, #0
 80071cc:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 80071d0:	697b      	ldr	r3, [r7, #20]
 80071d2:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 80071d6:	697b      	ldr	r3, [r7, #20]
 80071d8:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414

        addr = ((hdfu->wblock_num - 2U) * USBD_DFU_XFER_SIZE) + hdfu->data_ptr;
 80071dc:	697b      	ldr	r3, [r7, #20]
 80071de:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 80071e2:	3b02      	subs	r3, #2
 80071e4:	029a      	lsls	r2, r3, #10
 80071e6:	697b      	ldr	r3, [r7, #20]
 80071e8:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 80071ec:	4413      	add	r3, r2
 80071ee:	60fb      	str	r3, [r7, #12]

        /* Return the physical address where data are stored */
        phaddr = DfuInterface->Read((uint8_t *)addr, hdfu->buffer.d8, hdfu->wlength);
 80071f0:	693b      	ldr	r3, [r7, #16]
 80071f2:	695b      	ldr	r3, [r3, #20]
 80071f4:	68f8      	ldr	r0, [r7, #12]
 80071f6:	6979      	ldr	r1, [r7, #20]
 80071f8:	697a      	ldr	r2, [r7, #20]
 80071fa:	f8d2 2404 	ldr.w	r2, [r2, #1028]	@ 0x404
 80071fe:	4798      	blx	r3
 8007200:	60b8      	str	r0, [r7, #8]

        /* Send the status data over EP0 */
        (void)USBD_CtlSendData(pdev, phaddr, hdfu->wlength);
 8007202:	697b      	ldr	r3, [r7, #20]
 8007204:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8007208:	461a      	mov	r2, r3
 800720a:	68b9      	ldr	r1, [r7, #8]
 800720c:	6878      	ldr	r0, [r7, #4]
 800720e:	f001 fb1e 	bl	800884e <USBD_CtlSendData>
      if (hdfu->wblock_num == 0U)
 8007212:	e03f      	b.n	8007294 <DFU_Upload+0x1ac>
      }
      else  /* unsupported hdfu->wblock_num */
      {
        hdfu->dev_state = DFU_ERROR_STALLEDPKT;
 8007214:	697b      	ldr	r3, [r7, #20]
 8007216:	220f      	movs	r2, #15
 8007218:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418

        hdfu->dev_status[1] = 0U;
 800721c:	697b      	ldr	r3, [r7, #20]
 800721e:	2200      	movs	r2, #0
 8007220:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
        hdfu->dev_status[2] = 0U;
 8007224:	697b      	ldr	r3, [r7, #20]
 8007226:	2200      	movs	r2, #0
 8007228:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
        hdfu->dev_status[3] = 0U;
 800722c:	697b      	ldr	r3, [r7, #20]
 800722e:	2200      	movs	r2, #0
 8007230:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 8007234:	697b      	ldr	r3, [r7, #20]
 8007236:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 800723a:	697b      	ldr	r3, [r7, #20]
 800723c:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414

        /* Call the error management function (command will be NAKed */
        USBD_CtlError(pdev, req);
 8007240:	6839      	ldr	r1, [r7, #0]
 8007242:	6878      	ldr	r0, [r7, #4]
 8007244:	f001 fa92 	bl	800876c <USBD_CtlError>
      if (hdfu->wblock_num == 0U)
 8007248:	e024      	b.n	8007294 <DFU_Upload+0x1ac>
      }
    }
    /* Unsupported state */
    else
    {
      hdfu->wlength = 0U;
 800724a:	697b      	ldr	r3, [r7, #20]
 800724c:	2200      	movs	r2, #0
 800724e:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
      hdfu->wblock_num = 0U;
 8007252:	697b      	ldr	r3, [r7, #20]
 8007254:	2200      	movs	r2, #0
 8007256:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400

      /* Call the error management function (command will be NAKed */
      USBD_CtlError(pdev, req);
 800725a:	6839      	ldr	r1, [r7, #0]
 800725c:	6878      	ldr	r0, [r7, #4]
 800725e:	f001 fa85 	bl	800876c <USBD_CtlError>
 8007262:	e017      	b.n	8007294 <DFU_Upload+0x1ac>
    }
  }
  /* No Data setup request */
  else
  {
    hdfu->dev_state = DFU_STATE_IDLE;
 8007264:	697b      	ldr	r3, [r7, #20]
 8007266:	2202      	movs	r2, #2
 8007268:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418

    hdfu->dev_status[1] = 0U;
 800726c:	697b      	ldr	r3, [r7, #20]
 800726e:	2200      	movs	r2, #0
 8007270:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
    hdfu->dev_status[2] = 0U;
 8007274:	697b      	ldr	r3, [r7, #20]
 8007276:	2200      	movs	r2, #0
 8007278:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
    hdfu->dev_status[3] = 0U;
 800727c:	697b      	ldr	r3, [r7, #20]
 800727e:	2200      	movs	r2, #0
 8007280:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 8007284:	697b      	ldr	r3, [r7, #20]
 8007286:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 800728a:	697b      	ldr	r3, [r7, #20]
 800728c:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
 8007290:	e000      	b.n	8007294 <DFU_Upload+0x1ac>
    return;
 8007292:	bf00      	nop
  }
}
 8007294:	3718      	adds	r7, #24
 8007296:	46bd      	mov	sp, r7
 8007298:	bd80      	pop	{r7, pc}
	...

0800729c <DFU_GetStatus>:
  *         Handles the DFU GETSTATUS request.
  * @param  pdev: instance
  * @retval status
  */
static void DFU_GetStatus(USBD_HandleTypeDef *pdev)
{
 800729c:	b580      	push	{r7, lr}
 800729e:	b084      	sub	sp, #16
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80072aa:	60fb      	str	r3, [r7, #12]
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80072b2:	60bb      	str	r3, [r7, #8]

  if (hdfu == NULL)
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	f000 80a0 	beq.w	80073fc <DFU_GetStatus+0x160>
  {
    return;
  }

  switch (hdfu->dev_state)
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 80072c2:	2b03      	cmp	r3, #3
 80072c4:	d002      	beq.n	80072cc <DFU_GetStatus+0x30>
 80072c6:	2b06      	cmp	r3, #6
 80072c8:	d051      	beq.n	800736e <DFU_GetStatus+0xd2>
        }
      }
      break;

    default:
      break;
 80072ca:	e08e      	b.n	80073ea <DFU_GetStatus+0x14e>
      if (hdfu->wlength != 0U)
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d034      	beq.n	8007340 <DFU_GetStatus+0xa4>
        hdfu->dev_state = DFU_STATE_DNLOAD_BUSY;
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	2204      	movs	r2, #4
 80072da:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
        hdfu->dev_status[1] = 0U;
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	2200      	movs	r2, #0
 80072e2:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
        hdfu->dev_status[2] = 0U;
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	2200      	movs	r2, #0
 80072ea:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
        hdfu->dev_status[3] = 0U;
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	2200      	movs	r2, #0
 80072f2:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
        if ((hdfu->wblock_num == 0U) && (hdfu->buffer.d8[0] == DFU_CMD_ERASE))
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 8007308:	2b00      	cmp	r3, #0
 800730a:	d10e      	bne.n	800732a <DFU_GetStatus+0x8e>
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	781b      	ldrb	r3, [r3, #0]
 8007310:	2b41      	cmp	r3, #65	@ 0x41
 8007312:	d10a      	bne.n	800732a <DFU_GetStatus+0x8e>
          DfuInterface->GetStatus(hdfu->data_ptr, DFU_MEDIA_ERASE, hdfu->dev_status);
 8007314:	68bb      	ldr	r3, [r7, #8]
 8007316:	699b      	ldr	r3, [r3, #24]
 8007318:	68fa      	ldr	r2, [r7, #12]
 800731a:	f8d2 0408 	ldr.w	r0, [r2, #1032]	@ 0x408
 800731e:	68fa      	ldr	r2, [r7, #12]
 8007320:	f502 6282 	add.w	r2, r2, #1040	@ 0x410
 8007324:	2100      	movs	r1, #0
 8007326:	4798      	blx	r3
      break;
 8007328:	e05f      	b.n	80073ea <DFU_GetStatus+0x14e>
          DfuInterface->GetStatus(hdfu->data_ptr, DFU_MEDIA_PROGRAM, hdfu->dev_status);
 800732a:	68bb      	ldr	r3, [r7, #8]
 800732c:	699b      	ldr	r3, [r3, #24]
 800732e:	68fa      	ldr	r2, [r7, #12]
 8007330:	f8d2 0408 	ldr.w	r0, [r2, #1032]	@ 0x408
 8007334:	68fa      	ldr	r2, [r7, #12]
 8007336:	f502 6282 	add.w	r2, r2, #1040	@ 0x410
 800733a:	2101      	movs	r1, #1
 800733c:	4798      	blx	r3
      break;
 800733e:	e054      	b.n	80073ea <DFU_GetStatus+0x14e>
        hdfu->dev_state = DFU_STATE_DNLOAD_IDLE;
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	2205      	movs	r2, #5
 8007344:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
        hdfu->dev_status[1] = 0U;
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	2200      	movs	r2, #0
 800734c:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
        hdfu->dev_status[2] = 0U;
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	2200      	movs	r2, #0
 8007354:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
        hdfu->dev_status[3] = 0U;
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	2200      	movs	r2, #0
 800735c:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
      break;
 800736c:	e03d      	b.n	80073ea <DFU_GetStatus+0x14e>
      if (hdfu->manif_state == DFU_MANIFEST_IN_PROGRESS)
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	f893 3419 	ldrb.w	r3, [r3, #1049]	@ 0x419
 8007374:	2b01      	cmp	r3, #1
 8007376:	d116      	bne.n	80073a6 <DFU_GetStatus+0x10a>
        hdfu->dev_state = DFU_STATE_MANIFEST;
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	2207      	movs	r2, #7
 800737c:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
        hdfu->dev_status[1] = 1U;             /*bwPollTimeout = 1ms*/
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	2201      	movs	r2, #1
 8007384:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
        hdfu->dev_status[2] = 0U;
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	2200      	movs	r2, #0
 800738c:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
        hdfu->dev_status[3] = 0U;
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	2200      	movs	r2, #0
 8007394:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
      break;
 80073a4:	e020      	b.n	80073e8 <DFU_GetStatus+0x14c>
        if ((hdfu->manif_state == DFU_MANIFEST_COMPLETE) &&
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	f893 3419 	ldrb.w	r3, [r3, #1049]	@ 0x419
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d11b      	bne.n	80073e8 <DFU_GetStatus+0x14c>
            (((USBD_DFU_CfgDesc[(11U + (9U * USBD_DFU_MAX_ITF_NUM))]) & 0x04U) != 0U))
 80073b0:	4b14      	ldr	r3, [pc, #80]	@ (8007404 <DFU_GetStatus+0x168>)
 80073b2:	7d1b      	ldrb	r3, [r3, #20]
 80073b4:	f003 0304 	and.w	r3, r3, #4
        if ((hdfu->manif_state == DFU_MANIFEST_COMPLETE) &&
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d015      	beq.n	80073e8 <DFU_GetStatus+0x14c>
          hdfu->dev_state = DFU_STATE_IDLE;
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	2202      	movs	r2, #2
 80073c0:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
          hdfu->dev_status[1] = 0U;
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	2200      	movs	r2, #0
 80073c8:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
          hdfu->dev_status[2] = 0U;
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	2200      	movs	r2, #0
 80073d0:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
          hdfu->dev_status[3] = 0U;
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	2200      	movs	r2, #0
 80073d8:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
          hdfu->dev_status[4] = hdfu->dev_state;
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
      break;
 80073e8:	bf00      	nop
  }

  /* Send the status data over EP0 */
  (void)USBD_CtlSendData(pdev, (uint8_t *)(&(hdfu->dev_status[0])), 6U);
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	f503 6382 	add.w	r3, r3, #1040	@ 0x410
 80073f0:	2206      	movs	r2, #6
 80073f2:	4619      	mov	r1, r3
 80073f4:	6878      	ldr	r0, [r7, #4]
 80073f6:	f001 fa2a 	bl	800884e <USBD_CtlSendData>
 80073fa:	e000      	b.n	80073fe <DFU_GetStatus+0x162>
    return;
 80073fc:	bf00      	nop
}
 80073fe:	3710      	adds	r7, #16
 8007400:	46bd      	mov	sp, r7
 8007402:	bd80      	pop	{r7, pc}
 8007404:	20000048 	.word	0x20000048

08007408 <DFU_ClearStatus>:
  *         Handles the DFU CLRSTATUS request.
  * @param  pdev: device instance
  * @retval status
  */
static void DFU_ClearStatus(USBD_HandleTypeDef *pdev)
{
 8007408:	b480      	push	{r7}
 800740a:	b085      	sub	sp, #20
 800740c:	af00      	add	r7, sp, #0
 800740e:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007416:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	2b00      	cmp	r3, #0
 800741c:	d042      	beq.n	80074a4 <DFU_ClearStatus+0x9c>
  {
    return;
  }

  if (hdfu->dev_state == DFU_STATE_ERROR)
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 8007424:	2b0a      	cmp	r3, #10
 8007426:	d11e      	bne.n	8007466 <DFU_ClearStatus+0x5e>
  {
    hdfu->dev_state = DFU_STATE_IDLE;
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	2202      	movs	r2, #2
 800742c:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
    hdfu->dev_status[0] = DFU_ERROR_NONE; /* bStatus */
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	2200      	movs	r2, #0
 8007434:	f883 2410 	strb.w	r2, [r3, #1040]	@ 0x410
    hdfu->dev_status[1] = 0U;
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	2200      	movs	r2, #0
 800743c:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
    hdfu->dev_status[2] = 0U;
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	2200      	movs	r2, #0
 8007444:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
    hdfu->dev_status[3] = 0U; /* bwPollTimeout=0ms */
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	2200      	movs	r2, #0
 800744c:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
    hdfu->dev_status[4] = hdfu->dev_state; /* bState */
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
    hdfu->dev_status[5] = 0U; /* iString */
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	2200      	movs	r2, #0
 8007460:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
 8007464:	e01f      	b.n	80074a6 <DFU_ClearStatus+0x9e>
  }
  else
  {
    /* State Error */
    hdfu->dev_state = DFU_STATE_ERROR;
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	220a      	movs	r2, #10
 800746a:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
    hdfu->dev_status[0] = DFU_ERROR_UNKNOWN; /* bStatus */
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	220e      	movs	r2, #14
 8007472:	f883 2410 	strb.w	r2, [r3, #1040]	@ 0x410
    hdfu->dev_status[1] = 0U;
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	2200      	movs	r2, #0
 800747a:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
    hdfu->dev_status[2] = 0U;
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	2200      	movs	r2, #0
 8007482:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
    hdfu->dev_status[3] = 0U; /* bwPollTimeout=0ms */
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	2200      	movs	r2, #0
 800748a:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
    hdfu->dev_status[4] = hdfu->dev_state; /* bState */
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
    hdfu->dev_status[5] = 0U; /* iString */
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	2200      	movs	r2, #0
 800749e:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
 80074a2:	e000      	b.n	80074a6 <DFU_ClearStatus+0x9e>
    return;
 80074a4:	bf00      	nop
  }
}
 80074a6:	3714      	adds	r7, #20
 80074a8:	46bd      	mov	sp, r7
 80074aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ae:	4770      	bx	lr

080074b0 <DFU_GetState>:
  *         Handles the DFU GETSTATE request.
  * @param  pdev: device instance
  * @retval None
  */
static void DFU_GetState(USBD_HandleTypeDef *pdev)
{
 80074b0:	b580      	push	{r7, lr}
 80074b2:	b084      	sub	sp, #16
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80074be:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d008      	beq.n	80074d8 <DFU_GetState+0x28>
  {
    return;
  }

  /* Return the current state of the DFU interface */
  (void)USBD_CtlSendData(pdev, &hdfu->dev_state, 1U);
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	f503 6383 	add.w	r3, r3, #1048	@ 0x418
 80074cc:	2201      	movs	r2, #1
 80074ce:	4619      	mov	r1, r3
 80074d0:	6878      	ldr	r0, [r7, #4]
 80074d2:	f001 f9bc 	bl	800884e <USBD_CtlSendData>
 80074d6:	e000      	b.n	80074da <DFU_GetState+0x2a>
    return;
 80074d8:	bf00      	nop
}
 80074da:	3710      	adds	r7, #16
 80074dc:	46bd      	mov	sp, r7
 80074de:	bd80      	pop	{r7, pc}

080074e0 <DFU_Abort>:
  *         Handles the DFU ABORT request.
  * @param  pdev: device instance
  * @retval None
  */
static void DFU_Abort(USBD_HandleTypeDef *pdev)
{
 80074e0:	b480      	push	{r7}
 80074e2:	b085      	sub	sp, #20
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80074ee:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d03f      	beq.n	8007576 <DFU_Abort+0x96>
  {
    return;
  }

  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 80074fc:	2b02      	cmp	r3, #2
 80074fe:	d013      	beq.n	8007528 <DFU_Abort+0x48>
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 8007506:	2b03      	cmp	r3, #3
 8007508:	d00e      	beq.n	8007528 <DFU_Abort+0x48>
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 8007510:	2b05      	cmp	r3, #5
 8007512:	d009      	beq.n	8007528 <DFU_Abort+0x48>
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 800751a:	2b06      	cmp	r3, #6
 800751c:	d004      	beq.n	8007528 <DFU_Abort+0x48>
      (hdfu->dev_state == DFU_STATE_UPLOAD_IDLE))
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 8007524:	2b09      	cmp	r3, #9
 8007526:	d127      	bne.n	8007578 <DFU_Abort+0x98>
  {
    hdfu->dev_state = DFU_STATE_IDLE;
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	2202      	movs	r2, #2
 800752c:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
    hdfu->dev_status[0] = DFU_ERROR_NONE;
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	2200      	movs	r2, #0
 8007534:	f883 2410 	strb.w	r2, [r3, #1040]	@ 0x410
    hdfu->dev_status[1] = 0U;
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	2200      	movs	r2, #0
 800753c:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
    hdfu->dev_status[2] = 0U;
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	2200      	movs	r2, #0
 8007544:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
    hdfu->dev_status[3] = 0U; /* bwPollTimeout=0ms */
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	2200      	movs	r2, #0
 800754c:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
    hdfu->dev_status[5] = 0U; /* iString */
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	2200      	movs	r2, #0
 8007560:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
    hdfu->wblock_num = 0U;
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	2200      	movs	r2, #0
 8007568:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
    hdfu->wlength = 0U;
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	2200      	movs	r2, #0
 8007570:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
 8007574:	e000      	b.n	8007578 <DFU_Abort+0x98>
    return;
 8007576:	bf00      	nop
  }
}
 8007578:	3714      	adds	r7, #20
 800757a:	46bd      	mov	sp, r7
 800757c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007580:	4770      	bx	lr
	...

08007584 <DFU_Leave>:
  *         and resets device to jump to user loaded code).
  * @param  pdev: device instance
  * @retval None
  */
static void DFU_Leave(USBD_HandleTypeDef *pdev)
{
 8007584:	b580      	push	{r7, lr}
 8007586:	b084      	sub	sp, #16
 8007588:	af00      	add	r7, sp, #0
 800758a:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007592:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	2b00      	cmp	r3, #0
 8007598:	d03b      	beq.n	8007612 <DFU_Leave+0x8e>
  {
    return;
  }

  hdfu->manif_state = DFU_MANIFEST_COMPLETE;
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	2200      	movs	r2, #0
 800759e:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419

  if (((USBD_DFU_CfgDesc[(11U + (9U * USBD_DFU_MAX_ITF_NUM))]) & 0x04U) != 0U)
 80075a2:	4b1e      	ldr	r3, [pc, #120]	@ (800761c <DFU_Leave+0x98>)
 80075a4:	7d1b      	ldrb	r3, [r3, #20]
 80075a6:	f003 0304 	and.w	r3, r3, #4
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d016      	beq.n	80075dc <DFU_Leave+0x58>
  {
    hdfu->dev_state = DFU_STATE_MANIFEST_SYNC;
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	2206      	movs	r2, #6
 80075b2:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418

    hdfu->dev_status[1] = 0U;
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	2200      	movs	r2, #0
 80075ba:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
    hdfu->dev_status[2] = 0U;
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	2200      	movs	r2, #0
 80075c2:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
    hdfu->dev_status[3] = 0U;
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	2200      	movs	r2, #0
 80075ca:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
    return;
 80075da:	e01b      	b.n	8007614 <DFU_Leave+0x90>
  }
  else
  {
    hdfu->dev_state = DFU_STATE_MANIFEST_WAIT_RESET;
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	2208      	movs	r2, #8
 80075e0:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418

    hdfu->dev_status[1] = 0U;
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	2200      	movs	r2, #0
 80075e8:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
    hdfu->dev_status[2] = 0U;
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	2200      	movs	r2, #0
 80075f0:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
    hdfu->dev_status[3] = 0U;
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	2200      	movs	r2, #0
 80075f8:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414

    /* Disconnect the USB device */
    (void)USBD_Stop(pdev);
 8007608:	6878      	ldr	r0, [r7, #4]
 800760a:	f000 f86c 	bl	80076e6 <USBD_Stop>

    /* Generate system reset to allow jumping to the user code */
    NVIC_SystemReset();
 800760e:	f7ff f9b3 	bl	8006978 <__NVIC_SystemReset>
    return;
 8007612:	bf00      	nop

    /* The next instructions will not be reached (system reset) */
  }
}
 8007614:	3710      	adds	r7, #16
 8007616:	46bd      	mov	sp, r7
 8007618:	bd80      	pop	{r7, pc}
 800761a:	bf00      	nop
 800761c:	20000048 	.word	0x20000048

08007620 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007620:	b580      	push	{r7, lr}
 8007622:	b086      	sub	sp, #24
 8007624:	af00      	add	r7, sp, #0
 8007626:	60f8      	str	r0, [r7, #12]
 8007628:	60b9      	str	r1, [r7, #8]
 800762a:	4613      	mov	r3, r2
 800762c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	2b00      	cmp	r3, #0
 8007632:	d101      	bne.n	8007638 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007634:	2303      	movs	r3, #3
 8007636:	e01f      	b.n	8007678 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	2200      	movs	r2, #0
 800763c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData = NULL;
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	2200      	movs	r2, #0
 8007644:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
  pdev->pConfDesc = NULL;
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	2200      	movs	r2, #0
 800764c:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007650:	68bb      	ldr	r3, [r7, #8]
 8007652:	2b00      	cmp	r3, #0
 8007654:	d003      	beq.n	800765e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	68ba      	ldr	r2, [r7, #8]
 800765a:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	2201      	movs	r2, #1
 8007662:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	79fa      	ldrb	r2, [r7, #7]
 800766a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800766c:	68f8      	ldr	r0, [r7, #12]
 800766e:	f001 fc53 	bl	8008f18 <USBD_LL_Init>
 8007672:	4603      	mov	r3, r0
 8007674:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007676:	7dfb      	ldrb	r3, [r7, #23]
}
 8007678:	4618      	mov	r0, r3
 800767a:	3718      	adds	r7, #24
 800767c:	46bd      	mov	sp, r7
 800767e:	bd80      	pop	{r7, pc}

08007680 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007680:	b580      	push	{r7, lr}
 8007682:	b084      	sub	sp, #16
 8007684:	af00      	add	r7, sp, #0
 8007686:	6078      	str	r0, [r7, #4]
 8007688:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800768a:	2300      	movs	r3, #0
 800768c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800768e:	683b      	ldr	r3, [r7, #0]
 8007690:	2b00      	cmp	r3, #0
 8007692:	d101      	bne.n	8007698 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8007694:	2303      	movs	r3, #3
 8007696:	e016      	b.n	80076c6 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	683a      	ldr	r2, [r7, #0]
 800769c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80076a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d00b      	beq.n	80076c4 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80076b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076b4:	f107 020e 	add.w	r2, r7, #14
 80076b8:	4610      	mov	r0, r2
 80076ba:	4798      	blx	r3
 80076bc:	4602      	mov	r2, r0
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 80076c4:	2300      	movs	r3, #0
}
 80076c6:	4618      	mov	r0, r3
 80076c8:	3710      	adds	r7, #16
 80076ca:	46bd      	mov	sp, r7
 80076cc:	bd80      	pop	{r7, pc}

080076ce <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80076ce:	b580      	push	{r7, lr}
 80076d0:	b082      	sub	sp, #8
 80076d2:	af00      	add	r7, sp, #0
 80076d4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80076d6:	6878      	ldr	r0, [r7, #4]
 80076d8:	f001 fc6e 	bl	8008fb8 <USBD_LL_Start>
 80076dc:	4603      	mov	r3, r0
}
 80076de:	4618      	mov	r0, r3
 80076e0:	3708      	adds	r7, #8
 80076e2:	46bd      	mov	sp, r7
 80076e4:	bd80      	pop	{r7, pc}

080076e6 <USBD_Stop>:
  *         Stop the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Stop(USBD_HandleTypeDef *pdev)
{
 80076e6:	b580      	push	{r7, lr}
 80076e8:	b082      	sub	sp, #8
 80076ea:	af00      	add	r7, sp, #0
 80076ec:	6078      	str	r0, [r7, #4]
  /* Disconnect USB Device */
  (void)USBD_LL_Stop(pdev);
 80076ee:	6878      	ldr	r0, [r7, #4]
 80076f0:	f001 fc7d 	bl	8008fee <USBD_LL_Stop>

  /* Free Class Resources */
  if (pdev->pClass != NULL)
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d009      	beq.n	8007712 <USBD_Stop+0x2c>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007704:	685b      	ldr	r3, [r3, #4]
 8007706:	687a      	ldr	r2, [r7, #4]
 8007708:	6852      	ldr	r2, [r2, #4]
 800770a:	b2d2      	uxtb	r2, r2
 800770c:	4611      	mov	r1, r2
 800770e:	6878      	ldr	r0, [r7, #4]
 8007710:	4798      	blx	r3
  }

  return USBD_OK;
 8007712:	2300      	movs	r3, #0
}
 8007714:	4618      	mov	r0, r3
 8007716:	3708      	adds	r7, #8
 8007718:	46bd      	mov	sp, r7
 800771a:	bd80      	pop	{r7, pc}

0800771c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800771c:	b480      	push	{r7}
 800771e:	b083      	sub	sp, #12
 8007720:	af00      	add	r7, sp, #0
 8007722:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007724:	2300      	movs	r3, #0
}
 8007726:	4618      	mov	r0, r3
 8007728:	370c      	adds	r7, #12
 800772a:	46bd      	mov	sp, r7
 800772c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007730:	4770      	bx	lr

08007732 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007732:	b580      	push	{r7, lr}
 8007734:	b084      	sub	sp, #16
 8007736:	af00      	add	r7, sp, #0
 8007738:	6078      	str	r0, [r7, #4]
 800773a:	460b      	mov	r3, r1
 800773c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800773e:	2303      	movs	r3, #3
 8007740:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007748:	2b00      	cmp	r3, #0
 800774a:	d009      	beq.n	8007760 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	78fa      	ldrb	r2, [r7, #3]
 8007756:	4611      	mov	r1, r2
 8007758:	6878      	ldr	r0, [r7, #4]
 800775a:	4798      	blx	r3
 800775c:	4603      	mov	r3, r0
 800775e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007760:	7bfb      	ldrb	r3, [r7, #15]
}
 8007762:	4618      	mov	r0, r3
 8007764:	3710      	adds	r7, #16
 8007766:	46bd      	mov	sp, r7
 8007768:	bd80      	pop	{r7, pc}

0800776a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800776a:	b580      	push	{r7, lr}
 800776c:	b082      	sub	sp, #8
 800776e:	af00      	add	r7, sp, #0
 8007770:	6078      	str	r0, [r7, #4]
 8007772:	460b      	mov	r3, r1
 8007774:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800777c:	2b00      	cmp	r3, #0
 800777e:	d007      	beq.n	8007790 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007786:	685b      	ldr	r3, [r3, #4]
 8007788:	78fa      	ldrb	r2, [r7, #3]
 800778a:	4611      	mov	r1, r2
 800778c:	6878      	ldr	r0, [r7, #4]
 800778e:	4798      	blx	r3
  }

  return USBD_OK;
 8007790:	2300      	movs	r3, #0
}
 8007792:	4618      	mov	r0, r3
 8007794:	3708      	adds	r7, #8
 8007796:	46bd      	mov	sp, r7
 8007798:	bd80      	pop	{r7, pc}

0800779a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800779a:	b580      	push	{r7, lr}
 800779c:	b084      	sub	sp, #16
 800779e:	af00      	add	r7, sp, #0
 80077a0:	6078      	str	r0, [r7, #4]
 80077a2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80077aa:	6839      	ldr	r1, [r7, #0]
 80077ac:	4618      	mov	r0, r3
 80077ae:	f000 ffa3 	bl	80086f8 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	2201      	movs	r2, #1
 80077b6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 80077c0:	461a      	mov	r2, r3
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80077ce:	f003 031f 	and.w	r3, r3, #31
 80077d2:	2b02      	cmp	r3, #2
 80077d4:	d01a      	beq.n	800780c <USBD_LL_SetupStage+0x72>
 80077d6:	2b02      	cmp	r3, #2
 80077d8:	d822      	bhi.n	8007820 <USBD_LL_SetupStage+0x86>
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d002      	beq.n	80077e4 <USBD_LL_SetupStage+0x4a>
 80077de:	2b01      	cmp	r3, #1
 80077e0:	d00a      	beq.n	80077f8 <USBD_LL_SetupStage+0x5e>
 80077e2:	e01d      	b.n	8007820 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80077ea:	4619      	mov	r1, r3
 80077ec:	6878      	ldr	r0, [r7, #4]
 80077ee:	f000 fa63 	bl	8007cb8 <USBD_StdDevReq>
 80077f2:	4603      	mov	r3, r0
 80077f4:	73fb      	strb	r3, [r7, #15]
      break;
 80077f6:	e020      	b.n	800783a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80077fe:	4619      	mov	r1, r3
 8007800:	6878      	ldr	r0, [r7, #4]
 8007802:	f000 fac7 	bl	8007d94 <USBD_StdItfReq>
 8007806:	4603      	mov	r3, r0
 8007808:	73fb      	strb	r3, [r7, #15]
      break;
 800780a:	e016      	b.n	800783a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007812:	4619      	mov	r1, r3
 8007814:	6878      	ldr	r0, [r7, #4]
 8007816:	f000 fb06 	bl	8007e26 <USBD_StdEPReq>
 800781a:	4603      	mov	r3, r0
 800781c:	73fb      	strb	r3, [r7, #15]
      break;
 800781e:	e00c      	b.n	800783a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8007826:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800782a:	b2db      	uxtb	r3, r3
 800782c:	4619      	mov	r1, r3
 800782e:	6878      	ldr	r0, [r7, #4]
 8007830:	f001 fc1e 	bl	8009070 <USBD_LL_StallEP>
 8007834:	4603      	mov	r3, r0
 8007836:	73fb      	strb	r3, [r7, #15]
      break;
 8007838:	bf00      	nop
  }

  return ret;
 800783a:	7bfb      	ldrb	r3, [r7, #15]
}
 800783c:	4618      	mov	r0, r3
 800783e:	3710      	adds	r7, #16
 8007840:	46bd      	mov	sp, r7
 8007842:	bd80      	pop	{r7, pc}

08007844 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007844:	b580      	push	{r7, lr}
 8007846:	b086      	sub	sp, #24
 8007848:	af00      	add	r7, sp, #0
 800784a:	60f8      	str	r0, [r7, #12]
 800784c:	460b      	mov	r3, r1
 800784e:	607a      	str	r2, [r7, #4]
 8007850:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007852:	7afb      	ldrb	r3, [r7, #11]
 8007854:	2b00      	cmp	r3, #0
 8007856:	d138      	bne.n	80078ca <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800785e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007866:	2b03      	cmp	r3, #3
 8007868:	d14a      	bne.n	8007900 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800786a:	693b      	ldr	r3, [r7, #16]
 800786c:	689a      	ldr	r2, [r3, #8]
 800786e:	693b      	ldr	r3, [r7, #16]
 8007870:	68db      	ldr	r3, [r3, #12]
 8007872:	429a      	cmp	r2, r3
 8007874:	d913      	bls.n	800789e <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007876:	693b      	ldr	r3, [r7, #16]
 8007878:	689a      	ldr	r2, [r3, #8]
 800787a:	693b      	ldr	r3, [r7, #16]
 800787c:	68db      	ldr	r3, [r3, #12]
 800787e:	1ad2      	subs	r2, r2, r3
 8007880:	693b      	ldr	r3, [r7, #16]
 8007882:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007884:	693b      	ldr	r3, [r7, #16]
 8007886:	68da      	ldr	r2, [r3, #12]
 8007888:	693b      	ldr	r3, [r7, #16]
 800788a:	689b      	ldr	r3, [r3, #8]
 800788c:	4293      	cmp	r3, r2
 800788e:	bf28      	it	cs
 8007890:	4613      	movcs	r3, r2
 8007892:	461a      	mov	r2, r3
 8007894:	6879      	ldr	r1, [r7, #4]
 8007896:	68f8      	ldr	r0, [r7, #12]
 8007898:	f001 f822 	bl	80088e0 <USBD_CtlContinueRx>
 800789c:	e030      	b.n	8007900 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80078a4:	b2db      	uxtb	r3, r3
 80078a6:	2b03      	cmp	r3, #3
 80078a8:	d10b      	bne.n	80078c2 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80078b0:	691b      	ldr	r3, [r3, #16]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d005      	beq.n	80078c2 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80078bc:	691b      	ldr	r3, [r3, #16]
 80078be:	68f8      	ldr	r0, [r7, #12]
 80078c0:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80078c2:	68f8      	ldr	r0, [r7, #12]
 80078c4:	f001 f81d 	bl	8008902 <USBD_CtlSendStatus>
 80078c8:	e01a      	b.n	8007900 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80078d0:	b2db      	uxtb	r3, r3
 80078d2:	2b03      	cmp	r3, #3
 80078d4:	d114      	bne.n	8007900 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80078dc:	699b      	ldr	r3, [r3, #24]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d00e      	beq.n	8007900 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80078e8:	699b      	ldr	r3, [r3, #24]
 80078ea:	7afa      	ldrb	r2, [r7, #11]
 80078ec:	4611      	mov	r1, r2
 80078ee:	68f8      	ldr	r0, [r7, #12]
 80078f0:	4798      	blx	r3
 80078f2:	4603      	mov	r3, r0
 80078f4:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80078f6:	7dfb      	ldrb	r3, [r7, #23]
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d001      	beq.n	8007900 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 80078fc:	7dfb      	ldrb	r3, [r7, #23]
 80078fe:	e000      	b.n	8007902 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8007900:	2300      	movs	r3, #0
}
 8007902:	4618      	mov	r0, r3
 8007904:	3718      	adds	r7, #24
 8007906:	46bd      	mov	sp, r7
 8007908:	bd80      	pop	{r7, pc}

0800790a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800790a:	b580      	push	{r7, lr}
 800790c:	b086      	sub	sp, #24
 800790e:	af00      	add	r7, sp, #0
 8007910:	60f8      	str	r0, [r7, #12]
 8007912:	460b      	mov	r3, r1
 8007914:	607a      	str	r2, [r7, #4]
 8007916:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007918:	7afb      	ldrb	r3, [r7, #11]
 800791a:	2b00      	cmp	r3, #0
 800791c:	d16b      	bne.n	80079f6 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	3314      	adds	r3, #20
 8007922:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800792a:	2b02      	cmp	r3, #2
 800792c:	d156      	bne.n	80079dc <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800792e:	693b      	ldr	r3, [r7, #16]
 8007930:	689a      	ldr	r2, [r3, #8]
 8007932:	693b      	ldr	r3, [r7, #16]
 8007934:	68db      	ldr	r3, [r3, #12]
 8007936:	429a      	cmp	r2, r3
 8007938:	d914      	bls.n	8007964 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800793a:	693b      	ldr	r3, [r7, #16]
 800793c:	689a      	ldr	r2, [r3, #8]
 800793e:	693b      	ldr	r3, [r7, #16]
 8007940:	68db      	ldr	r3, [r3, #12]
 8007942:	1ad2      	subs	r2, r2, r3
 8007944:	693b      	ldr	r3, [r7, #16]
 8007946:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007948:	693b      	ldr	r3, [r7, #16]
 800794a:	689b      	ldr	r3, [r3, #8]
 800794c:	461a      	mov	r2, r3
 800794e:	6879      	ldr	r1, [r7, #4]
 8007950:	68f8      	ldr	r0, [r7, #12]
 8007952:	f000 ff97 	bl	8008884 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007956:	2300      	movs	r3, #0
 8007958:	2200      	movs	r2, #0
 800795a:	2100      	movs	r1, #0
 800795c:	68f8      	ldr	r0, [r7, #12]
 800795e:	f001 fc31 	bl	80091c4 <USBD_LL_PrepareReceive>
 8007962:	e03b      	b.n	80079dc <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007964:	693b      	ldr	r3, [r7, #16]
 8007966:	68da      	ldr	r2, [r3, #12]
 8007968:	693b      	ldr	r3, [r7, #16]
 800796a:	689b      	ldr	r3, [r3, #8]
 800796c:	429a      	cmp	r2, r3
 800796e:	d11c      	bne.n	80079aa <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007970:	693b      	ldr	r3, [r7, #16]
 8007972:	685a      	ldr	r2, [r3, #4]
 8007974:	693b      	ldr	r3, [r7, #16]
 8007976:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007978:	429a      	cmp	r2, r3
 800797a:	d316      	bcc.n	80079aa <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800797c:	693b      	ldr	r3, [r7, #16]
 800797e:	685a      	ldr	r2, [r3, #4]
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007986:	429a      	cmp	r2, r3
 8007988:	d20f      	bcs.n	80079aa <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800798a:	2200      	movs	r2, #0
 800798c:	2100      	movs	r1, #0
 800798e:	68f8      	ldr	r0, [r7, #12]
 8007990:	f000 ff78 	bl	8008884 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	2200      	movs	r2, #0
 8007998:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800799c:	2300      	movs	r3, #0
 800799e:	2200      	movs	r2, #0
 80079a0:	2100      	movs	r1, #0
 80079a2:	68f8      	ldr	r0, [r7, #12]
 80079a4:	f001 fc0e 	bl	80091c4 <USBD_LL_PrepareReceive>
 80079a8:	e018      	b.n	80079dc <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80079b0:	b2db      	uxtb	r3, r3
 80079b2:	2b03      	cmp	r3, #3
 80079b4:	d10b      	bne.n	80079ce <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80079bc:	68db      	ldr	r3, [r3, #12]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d005      	beq.n	80079ce <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80079c8:	68db      	ldr	r3, [r3, #12]
 80079ca:	68f8      	ldr	r0, [r7, #12]
 80079cc:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80079ce:	2180      	movs	r1, #128	@ 0x80
 80079d0:	68f8      	ldr	r0, [r7, #12]
 80079d2:	f001 fb4d 	bl	8009070 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80079d6:	68f8      	ldr	r0, [r7, #12]
 80079d8:	f000 ffa6 	bl	8008928 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80079e2:	2b01      	cmp	r3, #1
 80079e4:	d122      	bne.n	8007a2c <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80079e6:	68f8      	ldr	r0, [r7, #12]
 80079e8:	f7ff fe98 	bl	800771c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	2200      	movs	r2, #0
 80079f0:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80079f4:	e01a      	b.n	8007a2c <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80079fc:	b2db      	uxtb	r3, r3
 80079fe:	2b03      	cmp	r3, #3
 8007a00:	d114      	bne.n	8007a2c <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007a08:	695b      	ldr	r3, [r3, #20]
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d00e      	beq.n	8007a2c <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007a14:	695b      	ldr	r3, [r3, #20]
 8007a16:	7afa      	ldrb	r2, [r7, #11]
 8007a18:	4611      	mov	r1, r2
 8007a1a:	68f8      	ldr	r0, [r7, #12]
 8007a1c:	4798      	blx	r3
 8007a1e:	4603      	mov	r3, r0
 8007a20:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8007a22:	7dfb      	ldrb	r3, [r7, #23]
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d001      	beq.n	8007a2c <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8007a28:	7dfb      	ldrb	r3, [r7, #23]
 8007a2a:	e000      	b.n	8007a2e <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8007a2c:	2300      	movs	r3, #0
}
 8007a2e:	4618      	mov	r0, r3
 8007a30:	3718      	adds	r7, #24
 8007a32:	46bd      	mov	sp, r7
 8007a34:	bd80      	pop	{r7, pc}

08007a36 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007a36:	b580      	push	{r7, lr}
 8007a38:	b082      	sub	sp, #8
 8007a3a:	af00      	add	r7, sp, #0
 8007a3c:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	2201      	movs	r2, #1
 8007a42:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	2200      	movs	r2, #0
 8007a4a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	2200      	movs	r2, #0
 8007a52:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	2200      	movs	r2, #0
 8007a58:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClass == NULL)
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d101      	bne.n	8007a6a <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8007a66:	2303      	movs	r3, #3
 8007a68:	e02f      	b.n	8007aca <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d00f      	beq.n	8007a94 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007a7a:	685b      	ldr	r3, [r3, #4]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d009      	beq.n	8007a94 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007a86:	685b      	ldr	r3, [r3, #4]
 8007a88:	687a      	ldr	r2, [r7, #4]
 8007a8a:	6852      	ldr	r2, [r2, #4]
 8007a8c:	b2d2      	uxtb	r2, r2
 8007a8e:	4611      	mov	r1, r2
 8007a90:	6878      	ldr	r0, [r7, #4]
 8007a92:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007a94:	2340      	movs	r3, #64	@ 0x40
 8007a96:	2200      	movs	r2, #0
 8007a98:	2100      	movs	r1, #0
 8007a9a:	6878      	ldr	r0, [r7, #4]
 8007a9c:	f001 fac2 	bl	8009024 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	2201      	movs	r2, #1
 8007aa4:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	2240      	movs	r2, #64	@ 0x40
 8007aac:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007ab0:	2340      	movs	r3, #64	@ 0x40
 8007ab2:	2200      	movs	r2, #0
 8007ab4:	2180      	movs	r1, #128	@ 0x80
 8007ab6:	6878      	ldr	r0, [r7, #4]
 8007ab8:	f001 fab4 	bl	8009024 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	2201      	movs	r2, #1
 8007ac0:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	2240      	movs	r2, #64	@ 0x40
 8007ac6:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8007ac8:	2300      	movs	r3, #0
}
 8007aca:	4618      	mov	r0, r3
 8007acc:	3708      	adds	r7, #8
 8007ace:	46bd      	mov	sp, r7
 8007ad0:	bd80      	pop	{r7, pc}

08007ad2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007ad2:	b480      	push	{r7}
 8007ad4:	b083      	sub	sp, #12
 8007ad6:	af00      	add	r7, sp, #0
 8007ad8:	6078      	str	r0, [r7, #4]
 8007ada:	460b      	mov	r3, r1
 8007adc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	78fa      	ldrb	r2, [r7, #3]
 8007ae2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007ae4:	2300      	movs	r3, #0
}
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	370c      	adds	r7, #12
 8007aea:	46bd      	mov	sp, r7
 8007aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af0:	4770      	bx	lr

08007af2 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007af2:	b480      	push	{r7}
 8007af4:	b083      	sub	sp, #12
 8007af6:	af00      	add	r7, sp, #0
 8007af8:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007b00:	b2da      	uxtb	r2, r3
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	2204      	movs	r2, #4
 8007b0c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8007b10:	2300      	movs	r3, #0
}
 8007b12:	4618      	mov	r0, r3
 8007b14:	370c      	adds	r7, #12
 8007b16:	46bd      	mov	sp, r7
 8007b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b1c:	4770      	bx	lr

08007b1e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007b1e:	b480      	push	{r7}
 8007b20:	b083      	sub	sp, #12
 8007b22:	af00      	add	r7, sp, #0
 8007b24:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007b2c:	b2db      	uxtb	r3, r3
 8007b2e:	2b04      	cmp	r3, #4
 8007b30:	d106      	bne.n	8007b40 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8007b38:	b2da      	uxtb	r2, r3
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8007b40:	2300      	movs	r3, #0
}
 8007b42:	4618      	mov	r0, r3
 8007b44:	370c      	adds	r7, #12
 8007b46:	46bd      	mov	sp, r7
 8007b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4c:	4770      	bx	lr

08007b4e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007b4e:	b580      	push	{r7, lr}
 8007b50:	b082      	sub	sp, #8
 8007b52:	af00      	add	r7, sp, #0
 8007b54:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d101      	bne.n	8007b64 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8007b60:	2303      	movs	r3, #3
 8007b62:	e012      	b.n	8007b8a <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007b6a:	b2db      	uxtb	r3, r3
 8007b6c:	2b03      	cmp	r3, #3
 8007b6e:	d10b      	bne.n	8007b88 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007b76:	69db      	ldr	r3, [r3, #28]
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d005      	beq.n	8007b88 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007b82:	69db      	ldr	r3, [r3, #28]
 8007b84:	6878      	ldr	r0, [r7, #4]
 8007b86:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007b88:	2300      	movs	r3, #0
}
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	3708      	adds	r7, #8
 8007b8e:	46bd      	mov	sp, r7
 8007b90:	bd80      	pop	{r7, pc}

08007b92 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007b92:	b580      	push	{r7, lr}
 8007b94:	b082      	sub	sp, #8
 8007b96:	af00      	add	r7, sp, #0
 8007b98:	6078      	str	r0, [r7, #4]
 8007b9a:	460b      	mov	r3, r1
 8007b9c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d101      	bne.n	8007bac <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8007ba8:	2303      	movs	r3, #3
 8007baa:	e014      	b.n	8007bd6 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007bb2:	b2db      	uxtb	r3, r3
 8007bb4:	2b03      	cmp	r3, #3
 8007bb6:	d10d      	bne.n	8007bd4 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007bbe:	6a1b      	ldr	r3, [r3, #32]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d007      	beq.n	8007bd4 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007bca:	6a1b      	ldr	r3, [r3, #32]
 8007bcc:	78fa      	ldrb	r2, [r7, #3]
 8007bce:	4611      	mov	r1, r2
 8007bd0:	6878      	ldr	r0, [r7, #4]
 8007bd2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007bd4:	2300      	movs	r3, #0
}
 8007bd6:	4618      	mov	r0, r3
 8007bd8:	3708      	adds	r7, #8
 8007bda:	46bd      	mov	sp, r7
 8007bdc:	bd80      	pop	{r7, pc}

08007bde <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007bde:	b580      	push	{r7, lr}
 8007be0:	b082      	sub	sp, #8
 8007be2:	af00      	add	r7, sp, #0
 8007be4:	6078      	str	r0, [r7, #4]
 8007be6:	460b      	mov	r3, r1
 8007be8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d101      	bne.n	8007bf8 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8007bf4:	2303      	movs	r3, #3
 8007bf6:	e014      	b.n	8007c22 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007bfe:	b2db      	uxtb	r3, r3
 8007c00:	2b03      	cmp	r3, #3
 8007c02:	d10d      	bne.n	8007c20 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007c0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d007      	beq.n	8007c20 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007c16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c18:	78fa      	ldrb	r2, [r7, #3]
 8007c1a:	4611      	mov	r1, r2
 8007c1c:	6878      	ldr	r0, [r7, #4]
 8007c1e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007c20:	2300      	movs	r3, #0
}
 8007c22:	4618      	mov	r0, r3
 8007c24:	3708      	adds	r7, #8
 8007c26:	46bd      	mov	sp, r7
 8007c28:	bd80      	pop	{r7, pc}

08007c2a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007c2a:	b480      	push	{r7}
 8007c2c:	b083      	sub	sp, #12
 8007c2e:	af00      	add	r7, sp, #0
 8007c30:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007c32:	2300      	movs	r3, #0
}
 8007c34:	4618      	mov	r0, r3
 8007c36:	370c      	adds	r7, #12
 8007c38:	46bd      	mov	sp, r7
 8007c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c3e:	4770      	bx	lr

08007c40 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007c40:	b580      	push	{r7, lr}
 8007c42:	b082      	sub	sp, #8
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	2201      	movs	r2, #1
 8007c4c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  if (pdev->pClass != NULL)
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d009      	beq.n	8007c6e <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007c60:	685b      	ldr	r3, [r3, #4]
 8007c62:	687a      	ldr	r2, [r7, #4]
 8007c64:	6852      	ldr	r2, [r2, #4]
 8007c66:	b2d2      	uxtb	r2, r2
 8007c68:	4611      	mov	r1, r2
 8007c6a:	6878      	ldr	r0, [r7, #4]
 8007c6c:	4798      	blx	r3
  }

  return USBD_OK;
 8007c6e:	2300      	movs	r3, #0
}
 8007c70:	4618      	mov	r0, r3
 8007c72:	3708      	adds	r7, #8
 8007c74:	46bd      	mov	sp, r7
 8007c76:	bd80      	pop	{r7, pc}

08007c78 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007c78:	b480      	push	{r7}
 8007c7a:	b087      	sub	sp, #28
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007c84:	697b      	ldr	r3, [r7, #20]
 8007c86:	781b      	ldrb	r3, [r3, #0]
 8007c88:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007c8a:	697b      	ldr	r3, [r7, #20]
 8007c8c:	3301      	adds	r3, #1
 8007c8e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007c90:	697b      	ldr	r3, [r7, #20]
 8007c92:	781b      	ldrb	r3, [r3, #0]
 8007c94:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007c96:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8007c9a:	021b      	lsls	r3, r3, #8
 8007c9c:	b21a      	sxth	r2, r3
 8007c9e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007ca2:	4313      	orrs	r3, r2
 8007ca4:	b21b      	sxth	r3, r3
 8007ca6:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007ca8:	89fb      	ldrh	r3, [r7, #14]
}
 8007caa:	4618      	mov	r0, r3
 8007cac:	371c      	adds	r7, #28
 8007cae:	46bd      	mov	sp, r7
 8007cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb4:	4770      	bx	lr
	...

08007cb8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007cb8:	b580      	push	{r7, lr}
 8007cba:	b084      	sub	sp, #16
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	6078      	str	r0, [r7, #4]
 8007cc0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007cc2:	2300      	movs	r3, #0
 8007cc4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007cc6:	683b      	ldr	r3, [r7, #0]
 8007cc8:	781b      	ldrb	r3, [r3, #0]
 8007cca:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007cce:	2b40      	cmp	r3, #64	@ 0x40
 8007cd0:	d005      	beq.n	8007cde <USBD_StdDevReq+0x26>
 8007cd2:	2b40      	cmp	r3, #64	@ 0x40
 8007cd4:	d853      	bhi.n	8007d7e <USBD_StdDevReq+0xc6>
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d00b      	beq.n	8007cf2 <USBD_StdDevReq+0x3a>
 8007cda:	2b20      	cmp	r3, #32
 8007cdc:	d14f      	bne.n	8007d7e <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007ce4:	689b      	ldr	r3, [r3, #8]
 8007ce6:	6839      	ldr	r1, [r7, #0]
 8007ce8:	6878      	ldr	r0, [r7, #4]
 8007cea:	4798      	blx	r3
 8007cec:	4603      	mov	r3, r0
 8007cee:	73fb      	strb	r3, [r7, #15]
      break;
 8007cf0:	e04a      	b.n	8007d88 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007cf2:	683b      	ldr	r3, [r7, #0]
 8007cf4:	785b      	ldrb	r3, [r3, #1]
 8007cf6:	2b09      	cmp	r3, #9
 8007cf8:	d83b      	bhi.n	8007d72 <USBD_StdDevReq+0xba>
 8007cfa:	a201      	add	r2, pc, #4	@ (adr r2, 8007d00 <USBD_StdDevReq+0x48>)
 8007cfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d00:	08007d55 	.word	0x08007d55
 8007d04:	08007d69 	.word	0x08007d69
 8007d08:	08007d73 	.word	0x08007d73
 8007d0c:	08007d5f 	.word	0x08007d5f
 8007d10:	08007d73 	.word	0x08007d73
 8007d14:	08007d33 	.word	0x08007d33
 8007d18:	08007d29 	.word	0x08007d29
 8007d1c:	08007d73 	.word	0x08007d73
 8007d20:	08007d4b 	.word	0x08007d4b
 8007d24:	08007d3d 	.word	0x08007d3d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007d28:	6839      	ldr	r1, [r7, #0]
 8007d2a:	6878      	ldr	r0, [r7, #4]
 8007d2c:	f000 f9de 	bl	80080ec <USBD_GetDescriptor>
          break;
 8007d30:	e024      	b.n	8007d7c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007d32:	6839      	ldr	r1, [r7, #0]
 8007d34:	6878      	ldr	r0, [r7, #4]
 8007d36:	f000 fb55 	bl	80083e4 <USBD_SetAddress>
          break;
 8007d3a:	e01f      	b.n	8007d7c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007d3c:	6839      	ldr	r1, [r7, #0]
 8007d3e:	6878      	ldr	r0, [r7, #4]
 8007d40:	f000 fb94 	bl	800846c <USBD_SetConfig>
 8007d44:	4603      	mov	r3, r0
 8007d46:	73fb      	strb	r3, [r7, #15]
          break;
 8007d48:	e018      	b.n	8007d7c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007d4a:	6839      	ldr	r1, [r7, #0]
 8007d4c:	6878      	ldr	r0, [r7, #4]
 8007d4e:	f000 fc33 	bl	80085b8 <USBD_GetConfig>
          break;
 8007d52:	e013      	b.n	8007d7c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007d54:	6839      	ldr	r1, [r7, #0]
 8007d56:	6878      	ldr	r0, [r7, #4]
 8007d58:	f000 fc64 	bl	8008624 <USBD_GetStatus>
          break;
 8007d5c:	e00e      	b.n	8007d7c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007d5e:	6839      	ldr	r1, [r7, #0]
 8007d60:	6878      	ldr	r0, [r7, #4]
 8007d62:	f000 fc93 	bl	800868c <USBD_SetFeature>
          break;
 8007d66:	e009      	b.n	8007d7c <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007d68:	6839      	ldr	r1, [r7, #0]
 8007d6a:	6878      	ldr	r0, [r7, #4]
 8007d6c:	f000 fca2 	bl	80086b4 <USBD_ClrFeature>
          break;
 8007d70:	e004      	b.n	8007d7c <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8007d72:	6839      	ldr	r1, [r7, #0]
 8007d74:	6878      	ldr	r0, [r7, #4]
 8007d76:	f000 fcf9 	bl	800876c <USBD_CtlError>
          break;
 8007d7a:	bf00      	nop
      }
      break;
 8007d7c:	e004      	b.n	8007d88 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8007d7e:	6839      	ldr	r1, [r7, #0]
 8007d80:	6878      	ldr	r0, [r7, #4]
 8007d82:	f000 fcf3 	bl	800876c <USBD_CtlError>
      break;
 8007d86:	bf00      	nop
  }

  return ret;
 8007d88:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d8a:	4618      	mov	r0, r3
 8007d8c:	3710      	adds	r7, #16
 8007d8e:	46bd      	mov	sp, r7
 8007d90:	bd80      	pop	{r7, pc}
 8007d92:	bf00      	nop

08007d94 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d94:	b580      	push	{r7, lr}
 8007d96:	b084      	sub	sp, #16
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	6078      	str	r0, [r7, #4]
 8007d9c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007d9e:	2300      	movs	r3, #0
 8007da0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007da2:	683b      	ldr	r3, [r7, #0]
 8007da4:	781b      	ldrb	r3, [r3, #0]
 8007da6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007daa:	2b40      	cmp	r3, #64	@ 0x40
 8007dac:	d005      	beq.n	8007dba <USBD_StdItfReq+0x26>
 8007dae:	2b40      	cmp	r3, #64	@ 0x40
 8007db0:	d82f      	bhi.n	8007e12 <USBD_StdItfReq+0x7e>
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d001      	beq.n	8007dba <USBD_StdItfReq+0x26>
 8007db6:	2b20      	cmp	r3, #32
 8007db8:	d12b      	bne.n	8007e12 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007dc0:	b2db      	uxtb	r3, r3
 8007dc2:	3b01      	subs	r3, #1
 8007dc4:	2b02      	cmp	r3, #2
 8007dc6:	d81d      	bhi.n	8007e04 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007dc8:	683b      	ldr	r3, [r7, #0]
 8007dca:	889b      	ldrh	r3, [r3, #4]
 8007dcc:	b2db      	uxtb	r3, r3
 8007dce:	2b01      	cmp	r3, #1
 8007dd0:	d813      	bhi.n	8007dfa <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007dd8:	689b      	ldr	r3, [r3, #8]
 8007dda:	6839      	ldr	r1, [r7, #0]
 8007ddc:	6878      	ldr	r0, [r7, #4]
 8007dde:	4798      	blx	r3
 8007de0:	4603      	mov	r3, r0
 8007de2:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007de4:	683b      	ldr	r3, [r7, #0]
 8007de6:	88db      	ldrh	r3, [r3, #6]
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d110      	bne.n	8007e0e <USBD_StdItfReq+0x7a>
 8007dec:	7bfb      	ldrb	r3, [r7, #15]
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d10d      	bne.n	8007e0e <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007df2:	6878      	ldr	r0, [r7, #4]
 8007df4:	f000 fd85 	bl	8008902 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007df8:	e009      	b.n	8007e0e <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8007dfa:	6839      	ldr	r1, [r7, #0]
 8007dfc:	6878      	ldr	r0, [r7, #4]
 8007dfe:	f000 fcb5 	bl	800876c <USBD_CtlError>
          break;
 8007e02:	e004      	b.n	8007e0e <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8007e04:	6839      	ldr	r1, [r7, #0]
 8007e06:	6878      	ldr	r0, [r7, #4]
 8007e08:	f000 fcb0 	bl	800876c <USBD_CtlError>
          break;
 8007e0c:	e000      	b.n	8007e10 <USBD_StdItfReq+0x7c>
          break;
 8007e0e:	bf00      	nop
      }
      break;
 8007e10:	e004      	b.n	8007e1c <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8007e12:	6839      	ldr	r1, [r7, #0]
 8007e14:	6878      	ldr	r0, [r7, #4]
 8007e16:	f000 fca9 	bl	800876c <USBD_CtlError>
      break;
 8007e1a:	bf00      	nop
  }

  return ret;
 8007e1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e1e:	4618      	mov	r0, r3
 8007e20:	3710      	adds	r7, #16
 8007e22:	46bd      	mov	sp, r7
 8007e24:	bd80      	pop	{r7, pc}

08007e26 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e26:	b580      	push	{r7, lr}
 8007e28:	b084      	sub	sp, #16
 8007e2a:	af00      	add	r7, sp, #0
 8007e2c:	6078      	str	r0, [r7, #4]
 8007e2e:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007e30:	2300      	movs	r3, #0
 8007e32:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8007e34:	683b      	ldr	r3, [r7, #0]
 8007e36:	889b      	ldrh	r3, [r3, #4]
 8007e38:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007e3a:	683b      	ldr	r3, [r7, #0]
 8007e3c:	781b      	ldrb	r3, [r3, #0]
 8007e3e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007e42:	2b40      	cmp	r3, #64	@ 0x40
 8007e44:	d007      	beq.n	8007e56 <USBD_StdEPReq+0x30>
 8007e46:	2b40      	cmp	r3, #64	@ 0x40
 8007e48:	f200 8145 	bhi.w	80080d6 <USBD_StdEPReq+0x2b0>
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d00c      	beq.n	8007e6a <USBD_StdEPReq+0x44>
 8007e50:	2b20      	cmp	r3, #32
 8007e52:	f040 8140 	bne.w	80080d6 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007e5c:	689b      	ldr	r3, [r3, #8]
 8007e5e:	6839      	ldr	r1, [r7, #0]
 8007e60:	6878      	ldr	r0, [r7, #4]
 8007e62:	4798      	blx	r3
 8007e64:	4603      	mov	r3, r0
 8007e66:	73fb      	strb	r3, [r7, #15]
      break;
 8007e68:	e13a      	b.n	80080e0 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007e6a:	683b      	ldr	r3, [r7, #0]
 8007e6c:	785b      	ldrb	r3, [r3, #1]
 8007e6e:	2b03      	cmp	r3, #3
 8007e70:	d007      	beq.n	8007e82 <USBD_StdEPReq+0x5c>
 8007e72:	2b03      	cmp	r3, #3
 8007e74:	f300 8129 	bgt.w	80080ca <USBD_StdEPReq+0x2a4>
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d07f      	beq.n	8007f7c <USBD_StdEPReq+0x156>
 8007e7c:	2b01      	cmp	r3, #1
 8007e7e:	d03c      	beq.n	8007efa <USBD_StdEPReq+0xd4>
 8007e80:	e123      	b.n	80080ca <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007e88:	b2db      	uxtb	r3, r3
 8007e8a:	2b02      	cmp	r3, #2
 8007e8c:	d002      	beq.n	8007e94 <USBD_StdEPReq+0x6e>
 8007e8e:	2b03      	cmp	r3, #3
 8007e90:	d016      	beq.n	8007ec0 <USBD_StdEPReq+0x9a>
 8007e92:	e02c      	b.n	8007eee <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007e94:	7bbb      	ldrb	r3, [r7, #14]
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d00d      	beq.n	8007eb6 <USBD_StdEPReq+0x90>
 8007e9a:	7bbb      	ldrb	r3, [r7, #14]
 8007e9c:	2b80      	cmp	r3, #128	@ 0x80
 8007e9e:	d00a      	beq.n	8007eb6 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007ea0:	7bbb      	ldrb	r3, [r7, #14]
 8007ea2:	4619      	mov	r1, r3
 8007ea4:	6878      	ldr	r0, [r7, #4]
 8007ea6:	f001 f8e3 	bl	8009070 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007eaa:	2180      	movs	r1, #128	@ 0x80
 8007eac:	6878      	ldr	r0, [r7, #4]
 8007eae:	f001 f8df 	bl	8009070 <USBD_LL_StallEP>
 8007eb2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007eb4:	e020      	b.n	8007ef8 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8007eb6:	6839      	ldr	r1, [r7, #0]
 8007eb8:	6878      	ldr	r0, [r7, #4]
 8007eba:	f000 fc57 	bl	800876c <USBD_CtlError>
              break;
 8007ebe:	e01b      	b.n	8007ef8 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007ec0:	683b      	ldr	r3, [r7, #0]
 8007ec2:	885b      	ldrh	r3, [r3, #2]
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d10e      	bne.n	8007ee6 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007ec8:	7bbb      	ldrb	r3, [r7, #14]
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d00b      	beq.n	8007ee6 <USBD_StdEPReq+0xc0>
 8007ece:	7bbb      	ldrb	r3, [r7, #14]
 8007ed0:	2b80      	cmp	r3, #128	@ 0x80
 8007ed2:	d008      	beq.n	8007ee6 <USBD_StdEPReq+0xc0>
 8007ed4:	683b      	ldr	r3, [r7, #0]
 8007ed6:	88db      	ldrh	r3, [r3, #6]
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d104      	bne.n	8007ee6 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007edc:	7bbb      	ldrb	r3, [r7, #14]
 8007ede:	4619      	mov	r1, r3
 8007ee0:	6878      	ldr	r0, [r7, #4]
 8007ee2:	f001 f8c5 	bl	8009070 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007ee6:	6878      	ldr	r0, [r7, #4]
 8007ee8:	f000 fd0b 	bl	8008902 <USBD_CtlSendStatus>

              break;
 8007eec:	e004      	b.n	8007ef8 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8007eee:	6839      	ldr	r1, [r7, #0]
 8007ef0:	6878      	ldr	r0, [r7, #4]
 8007ef2:	f000 fc3b 	bl	800876c <USBD_CtlError>
              break;
 8007ef6:	bf00      	nop
          }
          break;
 8007ef8:	e0ec      	b.n	80080d4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007f00:	b2db      	uxtb	r3, r3
 8007f02:	2b02      	cmp	r3, #2
 8007f04:	d002      	beq.n	8007f0c <USBD_StdEPReq+0xe6>
 8007f06:	2b03      	cmp	r3, #3
 8007f08:	d016      	beq.n	8007f38 <USBD_StdEPReq+0x112>
 8007f0a:	e030      	b.n	8007f6e <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007f0c:	7bbb      	ldrb	r3, [r7, #14]
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d00d      	beq.n	8007f2e <USBD_StdEPReq+0x108>
 8007f12:	7bbb      	ldrb	r3, [r7, #14]
 8007f14:	2b80      	cmp	r3, #128	@ 0x80
 8007f16:	d00a      	beq.n	8007f2e <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007f18:	7bbb      	ldrb	r3, [r7, #14]
 8007f1a:	4619      	mov	r1, r3
 8007f1c:	6878      	ldr	r0, [r7, #4]
 8007f1e:	f001 f8a7 	bl	8009070 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007f22:	2180      	movs	r1, #128	@ 0x80
 8007f24:	6878      	ldr	r0, [r7, #4]
 8007f26:	f001 f8a3 	bl	8009070 <USBD_LL_StallEP>
 8007f2a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007f2c:	e025      	b.n	8007f7a <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8007f2e:	6839      	ldr	r1, [r7, #0]
 8007f30:	6878      	ldr	r0, [r7, #4]
 8007f32:	f000 fc1b 	bl	800876c <USBD_CtlError>
              break;
 8007f36:	e020      	b.n	8007f7a <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007f38:	683b      	ldr	r3, [r7, #0]
 8007f3a:	885b      	ldrh	r3, [r3, #2]
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d11b      	bne.n	8007f78 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007f40:	7bbb      	ldrb	r3, [r7, #14]
 8007f42:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d004      	beq.n	8007f54 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007f4a:	7bbb      	ldrb	r3, [r7, #14]
 8007f4c:	4619      	mov	r1, r3
 8007f4e:	6878      	ldr	r0, [r7, #4]
 8007f50:	f001 f8ad 	bl	80090ae <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007f54:	6878      	ldr	r0, [r7, #4]
 8007f56:	f000 fcd4 	bl	8008902 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007f60:	689b      	ldr	r3, [r3, #8]
 8007f62:	6839      	ldr	r1, [r7, #0]
 8007f64:	6878      	ldr	r0, [r7, #4]
 8007f66:	4798      	blx	r3
 8007f68:	4603      	mov	r3, r0
 8007f6a:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8007f6c:	e004      	b.n	8007f78 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8007f6e:	6839      	ldr	r1, [r7, #0]
 8007f70:	6878      	ldr	r0, [r7, #4]
 8007f72:	f000 fbfb 	bl	800876c <USBD_CtlError>
              break;
 8007f76:	e000      	b.n	8007f7a <USBD_StdEPReq+0x154>
              break;
 8007f78:	bf00      	nop
          }
          break;
 8007f7a:	e0ab      	b.n	80080d4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007f82:	b2db      	uxtb	r3, r3
 8007f84:	2b02      	cmp	r3, #2
 8007f86:	d002      	beq.n	8007f8e <USBD_StdEPReq+0x168>
 8007f88:	2b03      	cmp	r3, #3
 8007f8a:	d032      	beq.n	8007ff2 <USBD_StdEPReq+0x1cc>
 8007f8c:	e097      	b.n	80080be <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007f8e:	7bbb      	ldrb	r3, [r7, #14]
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d007      	beq.n	8007fa4 <USBD_StdEPReq+0x17e>
 8007f94:	7bbb      	ldrb	r3, [r7, #14]
 8007f96:	2b80      	cmp	r3, #128	@ 0x80
 8007f98:	d004      	beq.n	8007fa4 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8007f9a:	6839      	ldr	r1, [r7, #0]
 8007f9c:	6878      	ldr	r0, [r7, #4]
 8007f9e:	f000 fbe5 	bl	800876c <USBD_CtlError>
                break;
 8007fa2:	e091      	b.n	80080c8 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007fa4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	da0b      	bge.n	8007fc4 <USBD_StdEPReq+0x19e>
 8007fac:	7bbb      	ldrb	r3, [r7, #14]
 8007fae:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007fb2:	4613      	mov	r3, r2
 8007fb4:	009b      	lsls	r3, r3, #2
 8007fb6:	4413      	add	r3, r2
 8007fb8:	009b      	lsls	r3, r3, #2
 8007fba:	3310      	adds	r3, #16
 8007fbc:	687a      	ldr	r2, [r7, #4]
 8007fbe:	4413      	add	r3, r2
 8007fc0:	3304      	adds	r3, #4
 8007fc2:	e00b      	b.n	8007fdc <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007fc4:	7bbb      	ldrb	r3, [r7, #14]
 8007fc6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007fca:	4613      	mov	r3, r2
 8007fcc:	009b      	lsls	r3, r3, #2
 8007fce:	4413      	add	r3, r2
 8007fd0:	009b      	lsls	r3, r3, #2
 8007fd2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007fd6:	687a      	ldr	r2, [r7, #4]
 8007fd8:	4413      	add	r3, r2
 8007fda:	3304      	adds	r3, #4
 8007fdc:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007fde:	68bb      	ldr	r3, [r7, #8]
 8007fe0:	2200      	movs	r2, #0
 8007fe2:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007fe4:	68bb      	ldr	r3, [r7, #8]
 8007fe6:	2202      	movs	r2, #2
 8007fe8:	4619      	mov	r1, r3
 8007fea:	6878      	ldr	r0, [r7, #4]
 8007fec:	f000 fc2f 	bl	800884e <USBD_CtlSendData>
              break;
 8007ff0:	e06a      	b.n	80080c8 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007ff2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	da11      	bge.n	800801e <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007ffa:	7bbb      	ldrb	r3, [r7, #14]
 8007ffc:	f003 020f 	and.w	r2, r3, #15
 8008000:	6879      	ldr	r1, [r7, #4]
 8008002:	4613      	mov	r3, r2
 8008004:	009b      	lsls	r3, r3, #2
 8008006:	4413      	add	r3, r2
 8008008:	009b      	lsls	r3, r3, #2
 800800a:	440b      	add	r3, r1
 800800c:	3324      	adds	r3, #36	@ 0x24
 800800e:	881b      	ldrh	r3, [r3, #0]
 8008010:	2b00      	cmp	r3, #0
 8008012:	d117      	bne.n	8008044 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8008014:	6839      	ldr	r1, [r7, #0]
 8008016:	6878      	ldr	r0, [r7, #4]
 8008018:	f000 fba8 	bl	800876c <USBD_CtlError>
                  break;
 800801c:	e054      	b.n	80080c8 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800801e:	7bbb      	ldrb	r3, [r7, #14]
 8008020:	f003 020f 	and.w	r2, r3, #15
 8008024:	6879      	ldr	r1, [r7, #4]
 8008026:	4613      	mov	r3, r2
 8008028:	009b      	lsls	r3, r3, #2
 800802a:	4413      	add	r3, r2
 800802c:	009b      	lsls	r3, r3, #2
 800802e:	440b      	add	r3, r1
 8008030:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008034:	881b      	ldrh	r3, [r3, #0]
 8008036:	2b00      	cmp	r3, #0
 8008038:	d104      	bne.n	8008044 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800803a:	6839      	ldr	r1, [r7, #0]
 800803c:	6878      	ldr	r0, [r7, #4]
 800803e:	f000 fb95 	bl	800876c <USBD_CtlError>
                  break;
 8008042:	e041      	b.n	80080c8 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008044:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008048:	2b00      	cmp	r3, #0
 800804a:	da0b      	bge.n	8008064 <USBD_StdEPReq+0x23e>
 800804c:	7bbb      	ldrb	r3, [r7, #14]
 800804e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008052:	4613      	mov	r3, r2
 8008054:	009b      	lsls	r3, r3, #2
 8008056:	4413      	add	r3, r2
 8008058:	009b      	lsls	r3, r3, #2
 800805a:	3310      	adds	r3, #16
 800805c:	687a      	ldr	r2, [r7, #4]
 800805e:	4413      	add	r3, r2
 8008060:	3304      	adds	r3, #4
 8008062:	e00b      	b.n	800807c <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008064:	7bbb      	ldrb	r3, [r7, #14]
 8008066:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800806a:	4613      	mov	r3, r2
 800806c:	009b      	lsls	r3, r3, #2
 800806e:	4413      	add	r3, r2
 8008070:	009b      	lsls	r3, r3, #2
 8008072:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008076:	687a      	ldr	r2, [r7, #4]
 8008078:	4413      	add	r3, r2
 800807a:	3304      	adds	r3, #4
 800807c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800807e:	7bbb      	ldrb	r3, [r7, #14]
 8008080:	2b00      	cmp	r3, #0
 8008082:	d002      	beq.n	800808a <USBD_StdEPReq+0x264>
 8008084:	7bbb      	ldrb	r3, [r7, #14]
 8008086:	2b80      	cmp	r3, #128	@ 0x80
 8008088:	d103      	bne.n	8008092 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800808a:	68bb      	ldr	r3, [r7, #8]
 800808c:	2200      	movs	r2, #0
 800808e:	601a      	str	r2, [r3, #0]
 8008090:	e00e      	b.n	80080b0 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008092:	7bbb      	ldrb	r3, [r7, #14]
 8008094:	4619      	mov	r1, r3
 8008096:	6878      	ldr	r0, [r7, #4]
 8008098:	f001 f828 	bl	80090ec <USBD_LL_IsStallEP>
 800809c:	4603      	mov	r3, r0
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d003      	beq.n	80080aa <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 80080a2:	68bb      	ldr	r3, [r7, #8]
 80080a4:	2201      	movs	r2, #1
 80080a6:	601a      	str	r2, [r3, #0]
 80080a8:	e002      	b.n	80080b0 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 80080aa:	68bb      	ldr	r3, [r7, #8]
 80080ac:	2200      	movs	r2, #0
 80080ae:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80080b0:	68bb      	ldr	r3, [r7, #8]
 80080b2:	2202      	movs	r2, #2
 80080b4:	4619      	mov	r1, r3
 80080b6:	6878      	ldr	r0, [r7, #4]
 80080b8:	f000 fbc9 	bl	800884e <USBD_CtlSendData>
              break;
 80080bc:	e004      	b.n	80080c8 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 80080be:	6839      	ldr	r1, [r7, #0]
 80080c0:	6878      	ldr	r0, [r7, #4]
 80080c2:	f000 fb53 	bl	800876c <USBD_CtlError>
              break;
 80080c6:	bf00      	nop
          }
          break;
 80080c8:	e004      	b.n	80080d4 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 80080ca:	6839      	ldr	r1, [r7, #0]
 80080cc:	6878      	ldr	r0, [r7, #4]
 80080ce:	f000 fb4d 	bl	800876c <USBD_CtlError>
          break;
 80080d2:	bf00      	nop
      }
      break;
 80080d4:	e004      	b.n	80080e0 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 80080d6:	6839      	ldr	r1, [r7, #0]
 80080d8:	6878      	ldr	r0, [r7, #4]
 80080da:	f000 fb47 	bl	800876c <USBD_CtlError>
      break;
 80080de:	bf00      	nop
  }

  return ret;
 80080e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80080e2:	4618      	mov	r0, r3
 80080e4:	3710      	adds	r7, #16
 80080e6:	46bd      	mov	sp, r7
 80080e8:	bd80      	pop	{r7, pc}
	...

080080ec <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80080ec:	b580      	push	{r7, lr}
 80080ee:	b084      	sub	sp, #16
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	6078      	str	r0, [r7, #4]
 80080f4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80080f6:	2300      	movs	r3, #0
 80080f8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80080fa:	2300      	movs	r3, #0
 80080fc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80080fe:	2300      	movs	r3, #0
 8008100:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008102:	683b      	ldr	r3, [r7, #0]
 8008104:	885b      	ldrh	r3, [r3, #2]
 8008106:	0a1b      	lsrs	r3, r3, #8
 8008108:	b29b      	uxth	r3, r3
 800810a:	3b01      	subs	r3, #1
 800810c:	2b06      	cmp	r3, #6
 800810e:	f200 813b 	bhi.w	8008388 <USBD_GetDescriptor+0x29c>
 8008112:	a201      	add	r2, pc, #4	@ (adr r2, 8008118 <USBD_GetDescriptor+0x2c>)
 8008114:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008118:	08008135 	.word	0x08008135
 800811c:	0800814d 	.word	0x0800814d
 8008120:	0800818d 	.word	0x0800818d
 8008124:	08008389 	.word	0x08008389
 8008128:	08008389 	.word	0x08008389
 800812c:	08008329 	.word	0x08008329
 8008130:	08008355 	.word	0x08008355
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	687a      	ldr	r2, [r7, #4]
 800813e:	7c12      	ldrb	r2, [r2, #16]
 8008140:	f107 0108 	add.w	r1, r7, #8
 8008144:	4610      	mov	r0, r2
 8008146:	4798      	blx	r3
 8008148:	60f8      	str	r0, [r7, #12]
      break;
 800814a:	e125      	b.n	8008398 <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	7c1b      	ldrb	r3, [r3, #16]
 8008150:	2b00      	cmp	r3, #0
 8008152:	d10d      	bne.n	8008170 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800815a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800815c:	f107 0208 	add.w	r2, r7, #8
 8008160:	4610      	mov	r0, r2
 8008162:	4798      	blx	r3
 8008164:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	3301      	adds	r3, #1
 800816a:	2202      	movs	r2, #2
 800816c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800816e:	e113      	b.n	8008398 <USBD_GetDescriptor+0x2ac>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008176:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008178:	f107 0208 	add.w	r2, r7, #8
 800817c:	4610      	mov	r0, r2
 800817e:	4798      	blx	r3
 8008180:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	3301      	adds	r3, #1
 8008186:	2202      	movs	r2, #2
 8008188:	701a      	strb	r2, [r3, #0]
      break;
 800818a:	e105      	b.n	8008398 <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800818c:	683b      	ldr	r3, [r7, #0]
 800818e:	885b      	ldrh	r3, [r3, #2]
 8008190:	b2db      	uxtb	r3, r3
 8008192:	2b05      	cmp	r3, #5
 8008194:	f200 80ac 	bhi.w	80082f0 <USBD_GetDescriptor+0x204>
 8008198:	a201      	add	r2, pc, #4	@ (adr r2, 80081a0 <USBD_GetDescriptor+0xb4>)
 800819a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800819e:	bf00      	nop
 80081a0:	080081b9 	.word	0x080081b9
 80081a4:	080081ed 	.word	0x080081ed
 80081a8:	08008221 	.word	0x08008221
 80081ac:	08008255 	.word	0x08008255
 80081b0:	08008289 	.word	0x08008289
 80081b4:	080082bd 	.word	0x080082bd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80081be:	685b      	ldr	r3, [r3, #4]
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d00b      	beq.n	80081dc <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80081ca:	685b      	ldr	r3, [r3, #4]
 80081cc:	687a      	ldr	r2, [r7, #4]
 80081ce:	7c12      	ldrb	r2, [r2, #16]
 80081d0:	f107 0108 	add.w	r1, r7, #8
 80081d4:	4610      	mov	r0, r2
 80081d6:	4798      	blx	r3
 80081d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80081da:	e0a4      	b.n	8008326 <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 80081dc:	6839      	ldr	r1, [r7, #0]
 80081de:	6878      	ldr	r0, [r7, #4]
 80081e0:	f000 fac4 	bl	800876c <USBD_CtlError>
            err++;
 80081e4:	7afb      	ldrb	r3, [r7, #11]
 80081e6:	3301      	adds	r3, #1
 80081e8:	72fb      	strb	r3, [r7, #11]
          break;
 80081ea:	e09c      	b.n	8008326 <USBD_GetDescriptor+0x23a>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80081f2:	689b      	ldr	r3, [r3, #8]
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d00b      	beq.n	8008210 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80081fe:	689b      	ldr	r3, [r3, #8]
 8008200:	687a      	ldr	r2, [r7, #4]
 8008202:	7c12      	ldrb	r2, [r2, #16]
 8008204:	f107 0108 	add.w	r1, r7, #8
 8008208:	4610      	mov	r0, r2
 800820a:	4798      	blx	r3
 800820c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800820e:	e08a      	b.n	8008326 <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 8008210:	6839      	ldr	r1, [r7, #0]
 8008212:	6878      	ldr	r0, [r7, #4]
 8008214:	f000 faaa 	bl	800876c <USBD_CtlError>
            err++;
 8008218:	7afb      	ldrb	r3, [r7, #11]
 800821a:	3301      	adds	r3, #1
 800821c:	72fb      	strb	r3, [r7, #11]
          break;
 800821e:	e082      	b.n	8008326 <USBD_GetDescriptor+0x23a>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008226:	68db      	ldr	r3, [r3, #12]
 8008228:	2b00      	cmp	r3, #0
 800822a:	d00b      	beq.n	8008244 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008232:	68db      	ldr	r3, [r3, #12]
 8008234:	687a      	ldr	r2, [r7, #4]
 8008236:	7c12      	ldrb	r2, [r2, #16]
 8008238:	f107 0108 	add.w	r1, r7, #8
 800823c:	4610      	mov	r0, r2
 800823e:	4798      	blx	r3
 8008240:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008242:	e070      	b.n	8008326 <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 8008244:	6839      	ldr	r1, [r7, #0]
 8008246:	6878      	ldr	r0, [r7, #4]
 8008248:	f000 fa90 	bl	800876c <USBD_CtlError>
            err++;
 800824c:	7afb      	ldrb	r3, [r7, #11]
 800824e:	3301      	adds	r3, #1
 8008250:	72fb      	strb	r3, [r7, #11]
          break;
 8008252:	e068      	b.n	8008326 <USBD_GetDescriptor+0x23a>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800825a:	691b      	ldr	r3, [r3, #16]
 800825c:	2b00      	cmp	r3, #0
 800825e:	d00b      	beq.n	8008278 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008266:	691b      	ldr	r3, [r3, #16]
 8008268:	687a      	ldr	r2, [r7, #4]
 800826a:	7c12      	ldrb	r2, [r2, #16]
 800826c:	f107 0108 	add.w	r1, r7, #8
 8008270:	4610      	mov	r0, r2
 8008272:	4798      	blx	r3
 8008274:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008276:	e056      	b.n	8008326 <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 8008278:	6839      	ldr	r1, [r7, #0]
 800827a:	6878      	ldr	r0, [r7, #4]
 800827c:	f000 fa76 	bl	800876c <USBD_CtlError>
            err++;
 8008280:	7afb      	ldrb	r3, [r7, #11]
 8008282:	3301      	adds	r3, #1
 8008284:	72fb      	strb	r3, [r7, #11]
          break;
 8008286:	e04e      	b.n	8008326 <USBD_GetDescriptor+0x23a>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800828e:	695b      	ldr	r3, [r3, #20]
 8008290:	2b00      	cmp	r3, #0
 8008292:	d00b      	beq.n	80082ac <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800829a:	695b      	ldr	r3, [r3, #20]
 800829c:	687a      	ldr	r2, [r7, #4]
 800829e:	7c12      	ldrb	r2, [r2, #16]
 80082a0:	f107 0108 	add.w	r1, r7, #8
 80082a4:	4610      	mov	r0, r2
 80082a6:	4798      	blx	r3
 80082a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80082aa:	e03c      	b.n	8008326 <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 80082ac:	6839      	ldr	r1, [r7, #0]
 80082ae:	6878      	ldr	r0, [r7, #4]
 80082b0:	f000 fa5c 	bl	800876c <USBD_CtlError>
            err++;
 80082b4:	7afb      	ldrb	r3, [r7, #11]
 80082b6:	3301      	adds	r3, #1
 80082b8:	72fb      	strb	r3, [r7, #11]
          break;
 80082ba:	e034      	b.n	8008326 <USBD_GetDescriptor+0x23a>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80082c2:	699b      	ldr	r3, [r3, #24]
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d00b      	beq.n	80082e0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80082ce:	699b      	ldr	r3, [r3, #24]
 80082d0:	687a      	ldr	r2, [r7, #4]
 80082d2:	7c12      	ldrb	r2, [r2, #16]
 80082d4:	f107 0108 	add.w	r1, r7, #8
 80082d8:	4610      	mov	r0, r2
 80082da:	4798      	blx	r3
 80082dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80082de:	e022      	b.n	8008326 <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 80082e0:	6839      	ldr	r1, [r7, #0]
 80082e2:	6878      	ldr	r0, [r7, #4]
 80082e4:	f000 fa42 	bl	800876c <USBD_CtlError>
            err++;
 80082e8:	7afb      	ldrb	r3, [r7, #11]
 80082ea:	3301      	adds	r3, #1
 80082ec:	72fb      	strb	r3, [r7, #11]
          break;
 80082ee:	e01a      	b.n	8008326 <USBD_GetDescriptor+0x23a>

        default:
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
          if (pdev->pClass->GetUsrStrDescriptor != NULL)
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80082f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d00c      	beq.n	8008316 <USBD_GetDescriptor+0x22a>
          {
            pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue), &len);
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008302:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008304:	683a      	ldr	r2, [r7, #0]
 8008306:	8852      	ldrh	r2, [r2, #2]
 8008308:	b2d1      	uxtb	r1, r2
 800830a:	f107 0208 	add.w	r2, r7, #8
 800830e:	6878      	ldr	r0, [r7, #4]
 8008310:	4798      	blx	r3
 8008312:	60f8      	str	r0, [r7, #12]

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
          err++;
#endif
          break;
 8008314:	e006      	b.n	8008324 <USBD_GetDescriptor+0x238>
            USBD_CtlError(pdev, req);
 8008316:	6839      	ldr	r1, [r7, #0]
 8008318:	6878      	ldr	r0, [r7, #4]
 800831a:	f000 fa27 	bl	800876c <USBD_CtlError>
            err++;
 800831e:	7afb      	ldrb	r3, [r7, #11]
 8008320:	3301      	adds	r3, #1
 8008322:	72fb      	strb	r3, [r7, #11]
          break;
 8008324:	bf00      	nop
      }
      break;
 8008326:	e037      	b.n	8008398 <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	7c1b      	ldrb	r3, [r3, #16]
 800832c:	2b00      	cmp	r3, #0
 800832e:	d109      	bne.n	8008344 <USBD_GetDescriptor+0x258>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008336:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008338:	f107 0208 	add.w	r2, r7, #8
 800833c:	4610      	mov	r0, r2
 800833e:	4798      	blx	r3
 8008340:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008342:	e029      	b.n	8008398 <USBD_GetDescriptor+0x2ac>
        USBD_CtlError(pdev, req);
 8008344:	6839      	ldr	r1, [r7, #0]
 8008346:	6878      	ldr	r0, [r7, #4]
 8008348:	f000 fa10 	bl	800876c <USBD_CtlError>
        err++;
 800834c:	7afb      	ldrb	r3, [r7, #11]
 800834e:	3301      	adds	r3, #1
 8008350:	72fb      	strb	r3, [r7, #11]
      break;
 8008352:	e021      	b.n	8008398 <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	7c1b      	ldrb	r3, [r3, #16]
 8008358:	2b00      	cmp	r3, #0
 800835a:	d10d      	bne.n	8008378 <USBD_GetDescriptor+0x28c>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008362:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008364:	f107 0208 	add.w	r2, r7, #8
 8008368:	4610      	mov	r0, r2
 800836a:	4798      	blx	r3
 800836c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	3301      	adds	r3, #1
 8008372:	2207      	movs	r2, #7
 8008374:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008376:	e00f      	b.n	8008398 <USBD_GetDescriptor+0x2ac>
        USBD_CtlError(pdev, req);
 8008378:	6839      	ldr	r1, [r7, #0]
 800837a:	6878      	ldr	r0, [r7, #4]
 800837c:	f000 f9f6 	bl	800876c <USBD_CtlError>
        err++;
 8008380:	7afb      	ldrb	r3, [r7, #11]
 8008382:	3301      	adds	r3, #1
 8008384:	72fb      	strb	r3, [r7, #11]
      break;
 8008386:	e007      	b.n	8008398 <USBD_GetDescriptor+0x2ac>

    default:
      USBD_CtlError(pdev, req);
 8008388:	6839      	ldr	r1, [r7, #0]
 800838a:	6878      	ldr	r0, [r7, #4]
 800838c:	f000 f9ee 	bl	800876c <USBD_CtlError>
      err++;
 8008390:	7afb      	ldrb	r3, [r7, #11]
 8008392:	3301      	adds	r3, #1
 8008394:	72fb      	strb	r3, [r7, #11]
      break;
 8008396:	bf00      	nop
  }

  if (err != 0U)
 8008398:	7afb      	ldrb	r3, [r7, #11]
 800839a:	2b00      	cmp	r3, #0
 800839c:	d11e      	bne.n	80083dc <USBD_GetDescriptor+0x2f0>
  {
    return;
  }

  if (req->wLength != 0U)
 800839e:	683b      	ldr	r3, [r7, #0]
 80083a0:	88db      	ldrh	r3, [r3, #6]
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d016      	beq.n	80083d4 <USBD_GetDescriptor+0x2e8>
  {
    if (len != 0U)
 80083a6:	893b      	ldrh	r3, [r7, #8]
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d00e      	beq.n	80083ca <USBD_GetDescriptor+0x2de>
    {
      len = MIN(len, req->wLength);
 80083ac:	683b      	ldr	r3, [r7, #0]
 80083ae:	88da      	ldrh	r2, [r3, #6]
 80083b0:	893b      	ldrh	r3, [r7, #8]
 80083b2:	4293      	cmp	r3, r2
 80083b4:	bf28      	it	cs
 80083b6:	4613      	movcs	r3, r2
 80083b8:	b29b      	uxth	r3, r3
 80083ba:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80083bc:	893b      	ldrh	r3, [r7, #8]
 80083be:	461a      	mov	r2, r3
 80083c0:	68f9      	ldr	r1, [r7, #12]
 80083c2:	6878      	ldr	r0, [r7, #4]
 80083c4:	f000 fa43 	bl	800884e <USBD_CtlSendData>
 80083c8:	e009      	b.n	80083de <USBD_GetDescriptor+0x2f2>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80083ca:	6839      	ldr	r1, [r7, #0]
 80083cc:	6878      	ldr	r0, [r7, #4]
 80083ce:	f000 f9cd 	bl	800876c <USBD_CtlError>
 80083d2:	e004      	b.n	80083de <USBD_GetDescriptor+0x2f2>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80083d4:	6878      	ldr	r0, [r7, #4]
 80083d6:	f000 fa94 	bl	8008902 <USBD_CtlSendStatus>
 80083da:	e000      	b.n	80083de <USBD_GetDescriptor+0x2f2>
    return;
 80083dc:	bf00      	nop
  }
}
 80083de:	3710      	adds	r7, #16
 80083e0:	46bd      	mov	sp, r7
 80083e2:	bd80      	pop	{r7, pc}

080083e4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80083e4:	b580      	push	{r7, lr}
 80083e6:	b084      	sub	sp, #16
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	6078      	str	r0, [r7, #4]
 80083ec:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80083ee:	683b      	ldr	r3, [r7, #0]
 80083f0:	889b      	ldrh	r3, [r3, #4]
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d131      	bne.n	800845a <USBD_SetAddress+0x76>
 80083f6:	683b      	ldr	r3, [r7, #0]
 80083f8:	88db      	ldrh	r3, [r3, #6]
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d12d      	bne.n	800845a <USBD_SetAddress+0x76>
 80083fe:	683b      	ldr	r3, [r7, #0]
 8008400:	885b      	ldrh	r3, [r3, #2]
 8008402:	2b7f      	cmp	r3, #127	@ 0x7f
 8008404:	d829      	bhi.n	800845a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008406:	683b      	ldr	r3, [r7, #0]
 8008408:	885b      	ldrh	r3, [r3, #2]
 800840a:	b2db      	uxtb	r3, r3
 800840c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008410:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008418:	b2db      	uxtb	r3, r3
 800841a:	2b03      	cmp	r3, #3
 800841c:	d104      	bne.n	8008428 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800841e:	6839      	ldr	r1, [r7, #0]
 8008420:	6878      	ldr	r0, [r7, #4]
 8008422:	f000 f9a3 	bl	800876c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008426:	e01d      	b.n	8008464 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	7bfa      	ldrb	r2, [r7, #15]
 800842c:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008430:	7bfb      	ldrb	r3, [r7, #15]
 8008432:	4619      	mov	r1, r3
 8008434:	6878      	ldr	r0, [r7, #4]
 8008436:	f000 fe85 	bl	8009144 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800843a:	6878      	ldr	r0, [r7, #4]
 800843c:	f000 fa61 	bl	8008902 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008440:	7bfb      	ldrb	r3, [r7, #15]
 8008442:	2b00      	cmp	r3, #0
 8008444:	d004      	beq.n	8008450 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	2202      	movs	r2, #2
 800844a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800844e:	e009      	b.n	8008464 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	2201      	movs	r2, #1
 8008454:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008458:	e004      	b.n	8008464 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800845a:	6839      	ldr	r1, [r7, #0]
 800845c:	6878      	ldr	r0, [r7, #4]
 800845e:	f000 f985 	bl	800876c <USBD_CtlError>
  }
}
 8008462:	bf00      	nop
 8008464:	bf00      	nop
 8008466:	3710      	adds	r7, #16
 8008468:	46bd      	mov	sp, r7
 800846a:	bd80      	pop	{r7, pc}

0800846c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800846c:	b580      	push	{r7, lr}
 800846e:	b084      	sub	sp, #16
 8008470:	af00      	add	r7, sp, #0
 8008472:	6078      	str	r0, [r7, #4]
 8008474:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008476:	2300      	movs	r3, #0
 8008478:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800847a:	683b      	ldr	r3, [r7, #0]
 800847c:	885b      	ldrh	r3, [r3, #2]
 800847e:	b2da      	uxtb	r2, r3
 8008480:	4b4c      	ldr	r3, [pc, #304]	@ (80085b4 <USBD_SetConfig+0x148>)
 8008482:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008484:	4b4b      	ldr	r3, [pc, #300]	@ (80085b4 <USBD_SetConfig+0x148>)
 8008486:	781b      	ldrb	r3, [r3, #0]
 8008488:	2b01      	cmp	r3, #1
 800848a:	d905      	bls.n	8008498 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800848c:	6839      	ldr	r1, [r7, #0]
 800848e:	6878      	ldr	r0, [r7, #4]
 8008490:	f000 f96c 	bl	800876c <USBD_CtlError>
    return USBD_FAIL;
 8008494:	2303      	movs	r3, #3
 8008496:	e088      	b.n	80085aa <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800849e:	b2db      	uxtb	r3, r3
 80084a0:	2b02      	cmp	r3, #2
 80084a2:	d002      	beq.n	80084aa <USBD_SetConfig+0x3e>
 80084a4:	2b03      	cmp	r3, #3
 80084a6:	d025      	beq.n	80084f4 <USBD_SetConfig+0x88>
 80084a8:	e071      	b.n	800858e <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80084aa:	4b42      	ldr	r3, [pc, #264]	@ (80085b4 <USBD_SetConfig+0x148>)
 80084ac:	781b      	ldrb	r3, [r3, #0]
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d01c      	beq.n	80084ec <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 80084b2:	4b40      	ldr	r3, [pc, #256]	@ (80085b4 <USBD_SetConfig+0x148>)
 80084b4:	781b      	ldrb	r3, [r3, #0]
 80084b6:	461a      	mov	r2, r3
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80084bc:	4b3d      	ldr	r3, [pc, #244]	@ (80085b4 <USBD_SetConfig+0x148>)
 80084be:	781b      	ldrb	r3, [r3, #0]
 80084c0:	4619      	mov	r1, r3
 80084c2:	6878      	ldr	r0, [r7, #4]
 80084c4:	f7ff f935 	bl	8007732 <USBD_SetClassConfig>
 80084c8:	4603      	mov	r3, r0
 80084ca:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80084cc:	7bfb      	ldrb	r3, [r7, #15]
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d004      	beq.n	80084dc <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 80084d2:	6839      	ldr	r1, [r7, #0]
 80084d4:	6878      	ldr	r0, [r7, #4]
 80084d6:	f000 f949 	bl	800876c <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80084da:	e065      	b.n	80085a8 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80084dc:	6878      	ldr	r0, [r7, #4]
 80084de:	f000 fa10 	bl	8008902 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	2203      	movs	r2, #3
 80084e6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80084ea:	e05d      	b.n	80085a8 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80084ec:	6878      	ldr	r0, [r7, #4]
 80084ee:	f000 fa08 	bl	8008902 <USBD_CtlSendStatus>
      break;
 80084f2:	e059      	b.n	80085a8 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80084f4:	4b2f      	ldr	r3, [pc, #188]	@ (80085b4 <USBD_SetConfig+0x148>)
 80084f6:	781b      	ldrb	r3, [r3, #0]
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d112      	bne.n	8008522 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	2202      	movs	r2, #2
 8008500:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8008504:	4b2b      	ldr	r3, [pc, #172]	@ (80085b4 <USBD_SetConfig+0x148>)
 8008506:	781b      	ldrb	r3, [r3, #0]
 8008508:	461a      	mov	r2, r3
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800850e:	4b29      	ldr	r3, [pc, #164]	@ (80085b4 <USBD_SetConfig+0x148>)
 8008510:	781b      	ldrb	r3, [r3, #0]
 8008512:	4619      	mov	r1, r3
 8008514:	6878      	ldr	r0, [r7, #4]
 8008516:	f7ff f928 	bl	800776a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800851a:	6878      	ldr	r0, [r7, #4]
 800851c:	f000 f9f1 	bl	8008902 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008520:	e042      	b.n	80085a8 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8008522:	4b24      	ldr	r3, [pc, #144]	@ (80085b4 <USBD_SetConfig+0x148>)
 8008524:	781b      	ldrb	r3, [r3, #0]
 8008526:	461a      	mov	r2, r3
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	685b      	ldr	r3, [r3, #4]
 800852c:	429a      	cmp	r2, r3
 800852e:	d02a      	beq.n	8008586 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	685b      	ldr	r3, [r3, #4]
 8008534:	b2db      	uxtb	r3, r3
 8008536:	4619      	mov	r1, r3
 8008538:	6878      	ldr	r0, [r7, #4]
 800853a:	f7ff f916 	bl	800776a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800853e:	4b1d      	ldr	r3, [pc, #116]	@ (80085b4 <USBD_SetConfig+0x148>)
 8008540:	781b      	ldrb	r3, [r3, #0]
 8008542:	461a      	mov	r2, r3
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008548:	4b1a      	ldr	r3, [pc, #104]	@ (80085b4 <USBD_SetConfig+0x148>)
 800854a:	781b      	ldrb	r3, [r3, #0]
 800854c:	4619      	mov	r1, r3
 800854e:	6878      	ldr	r0, [r7, #4]
 8008550:	f7ff f8ef 	bl	8007732 <USBD_SetClassConfig>
 8008554:	4603      	mov	r3, r0
 8008556:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008558:	7bfb      	ldrb	r3, [r7, #15]
 800855a:	2b00      	cmp	r3, #0
 800855c:	d00f      	beq.n	800857e <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800855e:	6839      	ldr	r1, [r7, #0]
 8008560:	6878      	ldr	r0, [r7, #4]
 8008562:	f000 f903 	bl	800876c <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	685b      	ldr	r3, [r3, #4]
 800856a:	b2db      	uxtb	r3, r3
 800856c:	4619      	mov	r1, r3
 800856e:	6878      	ldr	r0, [r7, #4]
 8008570:	f7ff f8fb 	bl	800776a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	2202      	movs	r2, #2
 8008578:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800857c:	e014      	b.n	80085a8 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800857e:	6878      	ldr	r0, [r7, #4]
 8008580:	f000 f9bf 	bl	8008902 <USBD_CtlSendStatus>
      break;
 8008584:	e010      	b.n	80085a8 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8008586:	6878      	ldr	r0, [r7, #4]
 8008588:	f000 f9bb 	bl	8008902 <USBD_CtlSendStatus>
      break;
 800858c:	e00c      	b.n	80085a8 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800858e:	6839      	ldr	r1, [r7, #0]
 8008590:	6878      	ldr	r0, [r7, #4]
 8008592:	f000 f8eb 	bl	800876c <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008596:	4b07      	ldr	r3, [pc, #28]	@ (80085b4 <USBD_SetConfig+0x148>)
 8008598:	781b      	ldrb	r3, [r3, #0]
 800859a:	4619      	mov	r1, r3
 800859c:	6878      	ldr	r0, [r7, #4]
 800859e:	f7ff f8e4 	bl	800776a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80085a2:	2303      	movs	r3, #3
 80085a4:	73fb      	strb	r3, [r7, #15]
      break;
 80085a6:	bf00      	nop
  }

  return ret;
 80085a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80085aa:	4618      	mov	r0, r3
 80085ac:	3710      	adds	r7, #16
 80085ae:	46bd      	mov	sp, r7
 80085b0:	bd80      	pop	{r7, pc}
 80085b2:	bf00      	nop
 80085b4:	20000413 	.word	0x20000413

080085b8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80085b8:	b580      	push	{r7, lr}
 80085ba:	b082      	sub	sp, #8
 80085bc:	af00      	add	r7, sp, #0
 80085be:	6078      	str	r0, [r7, #4]
 80085c0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80085c2:	683b      	ldr	r3, [r7, #0]
 80085c4:	88db      	ldrh	r3, [r3, #6]
 80085c6:	2b01      	cmp	r3, #1
 80085c8:	d004      	beq.n	80085d4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80085ca:	6839      	ldr	r1, [r7, #0]
 80085cc:	6878      	ldr	r0, [r7, #4]
 80085ce:	f000 f8cd 	bl	800876c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80085d2:	e023      	b.n	800861c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80085da:	b2db      	uxtb	r3, r3
 80085dc:	2b02      	cmp	r3, #2
 80085de:	dc02      	bgt.n	80085e6 <USBD_GetConfig+0x2e>
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	dc03      	bgt.n	80085ec <USBD_GetConfig+0x34>
 80085e4:	e015      	b.n	8008612 <USBD_GetConfig+0x5a>
 80085e6:	2b03      	cmp	r3, #3
 80085e8:	d00b      	beq.n	8008602 <USBD_GetConfig+0x4a>
 80085ea:	e012      	b.n	8008612 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	2200      	movs	r2, #0
 80085f0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	3308      	adds	r3, #8
 80085f6:	2201      	movs	r2, #1
 80085f8:	4619      	mov	r1, r3
 80085fa:	6878      	ldr	r0, [r7, #4]
 80085fc:	f000 f927 	bl	800884e <USBD_CtlSendData>
        break;
 8008600:	e00c      	b.n	800861c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	3304      	adds	r3, #4
 8008606:	2201      	movs	r2, #1
 8008608:	4619      	mov	r1, r3
 800860a:	6878      	ldr	r0, [r7, #4]
 800860c:	f000 f91f 	bl	800884e <USBD_CtlSendData>
        break;
 8008610:	e004      	b.n	800861c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008612:	6839      	ldr	r1, [r7, #0]
 8008614:	6878      	ldr	r0, [r7, #4]
 8008616:	f000 f8a9 	bl	800876c <USBD_CtlError>
        break;
 800861a:	bf00      	nop
}
 800861c:	bf00      	nop
 800861e:	3708      	adds	r7, #8
 8008620:	46bd      	mov	sp, r7
 8008622:	bd80      	pop	{r7, pc}

08008624 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008624:	b580      	push	{r7, lr}
 8008626:	b082      	sub	sp, #8
 8008628:	af00      	add	r7, sp, #0
 800862a:	6078      	str	r0, [r7, #4]
 800862c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008634:	b2db      	uxtb	r3, r3
 8008636:	3b01      	subs	r3, #1
 8008638:	2b02      	cmp	r3, #2
 800863a:	d81e      	bhi.n	800867a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800863c:	683b      	ldr	r3, [r7, #0]
 800863e:	88db      	ldrh	r3, [r3, #6]
 8008640:	2b02      	cmp	r3, #2
 8008642:	d004      	beq.n	800864e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008644:	6839      	ldr	r1, [r7, #0]
 8008646:	6878      	ldr	r0, [r7, #4]
 8008648:	f000 f890 	bl	800876c <USBD_CtlError>
        break;
 800864c:	e01a      	b.n	8008684 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	2201      	movs	r2, #1
 8008652:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800865a:	2b00      	cmp	r3, #0
 800865c:	d005      	beq.n	800866a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	68db      	ldr	r3, [r3, #12]
 8008662:	f043 0202 	orr.w	r2, r3, #2
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	330c      	adds	r3, #12
 800866e:	2202      	movs	r2, #2
 8008670:	4619      	mov	r1, r3
 8008672:	6878      	ldr	r0, [r7, #4]
 8008674:	f000 f8eb 	bl	800884e <USBD_CtlSendData>
      break;
 8008678:	e004      	b.n	8008684 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800867a:	6839      	ldr	r1, [r7, #0]
 800867c:	6878      	ldr	r0, [r7, #4]
 800867e:	f000 f875 	bl	800876c <USBD_CtlError>
      break;
 8008682:	bf00      	nop
  }
}
 8008684:	bf00      	nop
 8008686:	3708      	adds	r7, #8
 8008688:	46bd      	mov	sp, r7
 800868a:	bd80      	pop	{r7, pc}

0800868c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800868c:	b580      	push	{r7, lr}
 800868e:	b082      	sub	sp, #8
 8008690:	af00      	add	r7, sp, #0
 8008692:	6078      	str	r0, [r7, #4]
 8008694:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008696:	683b      	ldr	r3, [r7, #0]
 8008698:	885b      	ldrh	r3, [r3, #2]
 800869a:	2b01      	cmp	r3, #1
 800869c:	d106      	bne.n	80086ac <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	2201      	movs	r2, #1
 80086a2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80086a6:	6878      	ldr	r0, [r7, #4]
 80086a8:	f000 f92b 	bl	8008902 <USBD_CtlSendStatus>
  }
}
 80086ac:	bf00      	nop
 80086ae:	3708      	adds	r7, #8
 80086b0:	46bd      	mov	sp, r7
 80086b2:	bd80      	pop	{r7, pc}

080086b4 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80086b4:	b580      	push	{r7, lr}
 80086b6:	b082      	sub	sp, #8
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	6078      	str	r0, [r7, #4]
 80086bc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80086c4:	b2db      	uxtb	r3, r3
 80086c6:	3b01      	subs	r3, #1
 80086c8:	2b02      	cmp	r3, #2
 80086ca:	d80b      	bhi.n	80086e4 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80086cc:	683b      	ldr	r3, [r7, #0]
 80086ce:	885b      	ldrh	r3, [r3, #2]
 80086d0:	2b01      	cmp	r3, #1
 80086d2:	d10c      	bne.n	80086ee <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	2200      	movs	r2, #0
 80086d8:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80086dc:	6878      	ldr	r0, [r7, #4]
 80086de:	f000 f910 	bl	8008902 <USBD_CtlSendStatus>
      }
      break;
 80086e2:	e004      	b.n	80086ee <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80086e4:	6839      	ldr	r1, [r7, #0]
 80086e6:	6878      	ldr	r0, [r7, #4]
 80086e8:	f000 f840 	bl	800876c <USBD_CtlError>
      break;
 80086ec:	e000      	b.n	80086f0 <USBD_ClrFeature+0x3c>
      break;
 80086ee:	bf00      	nop
  }
}
 80086f0:	bf00      	nop
 80086f2:	3708      	adds	r7, #8
 80086f4:	46bd      	mov	sp, r7
 80086f6:	bd80      	pop	{r7, pc}

080086f8 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80086f8:	b580      	push	{r7, lr}
 80086fa:	b084      	sub	sp, #16
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	6078      	str	r0, [r7, #4]
 8008700:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008702:	683b      	ldr	r3, [r7, #0]
 8008704:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	781a      	ldrb	r2, [r3, #0]
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	3301      	adds	r3, #1
 8008712:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	781a      	ldrb	r2, [r3, #0]
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	3301      	adds	r3, #1
 8008720:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008722:	68f8      	ldr	r0, [r7, #12]
 8008724:	f7ff faa8 	bl	8007c78 <SWAPBYTE>
 8008728:	4603      	mov	r3, r0
 800872a:	461a      	mov	r2, r3
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	3301      	adds	r3, #1
 8008734:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	3301      	adds	r3, #1
 800873a:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800873c:	68f8      	ldr	r0, [r7, #12]
 800873e:	f7ff fa9b 	bl	8007c78 <SWAPBYTE>
 8008742:	4603      	mov	r3, r0
 8008744:	461a      	mov	r2, r3
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	3301      	adds	r3, #1
 800874e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	3301      	adds	r3, #1
 8008754:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008756:	68f8      	ldr	r0, [r7, #12]
 8008758:	f7ff fa8e 	bl	8007c78 <SWAPBYTE>
 800875c:	4603      	mov	r3, r0
 800875e:	461a      	mov	r2, r3
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	80da      	strh	r2, [r3, #6]
}
 8008764:	bf00      	nop
 8008766:	3710      	adds	r7, #16
 8008768:	46bd      	mov	sp, r7
 800876a:	bd80      	pop	{r7, pc}

0800876c <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800876c:	b580      	push	{r7, lr}
 800876e:	b082      	sub	sp, #8
 8008770:	af00      	add	r7, sp, #0
 8008772:	6078      	str	r0, [r7, #4]
 8008774:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008776:	2180      	movs	r1, #128	@ 0x80
 8008778:	6878      	ldr	r0, [r7, #4]
 800877a:	f000 fc79 	bl	8009070 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800877e:	2100      	movs	r1, #0
 8008780:	6878      	ldr	r0, [r7, #4]
 8008782:	f000 fc75 	bl	8009070 <USBD_LL_StallEP>
}
 8008786:	bf00      	nop
 8008788:	3708      	adds	r7, #8
 800878a:	46bd      	mov	sp, r7
 800878c:	bd80      	pop	{r7, pc}

0800878e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800878e:	b580      	push	{r7, lr}
 8008790:	b086      	sub	sp, #24
 8008792:	af00      	add	r7, sp, #0
 8008794:	60f8      	str	r0, [r7, #12]
 8008796:	60b9      	str	r1, [r7, #8]
 8008798:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800879a:	2300      	movs	r3, #0
 800879c:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d036      	beq.n	8008812 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80087a8:	6938      	ldr	r0, [r7, #16]
 80087aa:	f000 f836 	bl	800881a <USBD_GetLen>
 80087ae:	4603      	mov	r3, r0
 80087b0:	3301      	adds	r3, #1
 80087b2:	b29b      	uxth	r3, r3
 80087b4:	005b      	lsls	r3, r3, #1
 80087b6:	b29a      	uxth	r2, r3
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80087bc:	7dfb      	ldrb	r3, [r7, #23]
 80087be:	68ba      	ldr	r2, [r7, #8]
 80087c0:	4413      	add	r3, r2
 80087c2:	687a      	ldr	r2, [r7, #4]
 80087c4:	7812      	ldrb	r2, [r2, #0]
 80087c6:	701a      	strb	r2, [r3, #0]
  idx++;
 80087c8:	7dfb      	ldrb	r3, [r7, #23]
 80087ca:	3301      	adds	r3, #1
 80087cc:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80087ce:	7dfb      	ldrb	r3, [r7, #23]
 80087d0:	68ba      	ldr	r2, [r7, #8]
 80087d2:	4413      	add	r3, r2
 80087d4:	2203      	movs	r2, #3
 80087d6:	701a      	strb	r2, [r3, #0]
  idx++;
 80087d8:	7dfb      	ldrb	r3, [r7, #23]
 80087da:	3301      	adds	r3, #1
 80087dc:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80087de:	e013      	b.n	8008808 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80087e0:	7dfb      	ldrb	r3, [r7, #23]
 80087e2:	68ba      	ldr	r2, [r7, #8]
 80087e4:	4413      	add	r3, r2
 80087e6:	693a      	ldr	r2, [r7, #16]
 80087e8:	7812      	ldrb	r2, [r2, #0]
 80087ea:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80087ec:	693b      	ldr	r3, [r7, #16]
 80087ee:	3301      	adds	r3, #1
 80087f0:	613b      	str	r3, [r7, #16]
    idx++;
 80087f2:	7dfb      	ldrb	r3, [r7, #23]
 80087f4:	3301      	adds	r3, #1
 80087f6:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80087f8:	7dfb      	ldrb	r3, [r7, #23]
 80087fa:	68ba      	ldr	r2, [r7, #8]
 80087fc:	4413      	add	r3, r2
 80087fe:	2200      	movs	r2, #0
 8008800:	701a      	strb	r2, [r3, #0]
    idx++;
 8008802:	7dfb      	ldrb	r3, [r7, #23]
 8008804:	3301      	adds	r3, #1
 8008806:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008808:	693b      	ldr	r3, [r7, #16]
 800880a:	781b      	ldrb	r3, [r3, #0]
 800880c:	2b00      	cmp	r3, #0
 800880e:	d1e7      	bne.n	80087e0 <USBD_GetString+0x52>
 8008810:	e000      	b.n	8008814 <USBD_GetString+0x86>
    return;
 8008812:	bf00      	nop
  }
}
 8008814:	3718      	adds	r7, #24
 8008816:	46bd      	mov	sp, r7
 8008818:	bd80      	pop	{r7, pc}

0800881a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800881a:	b480      	push	{r7}
 800881c:	b085      	sub	sp, #20
 800881e:	af00      	add	r7, sp, #0
 8008820:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008822:	2300      	movs	r3, #0
 8008824:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800882a:	e005      	b.n	8008838 <USBD_GetLen+0x1e>
  {
    len++;
 800882c:	7bfb      	ldrb	r3, [r7, #15]
 800882e:	3301      	adds	r3, #1
 8008830:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008832:	68bb      	ldr	r3, [r7, #8]
 8008834:	3301      	adds	r3, #1
 8008836:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008838:	68bb      	ldr	r3, [r7, #8]
 800883a:	781b      	ldrb	r3, [r3, #0]
 800883c:	2b00      	cmp	r3, #0
 800883e:	d1f5      	bne.n	800882c <USBD_GetLen+0x12>
  }

  return len;
 8008840:	7bfb      	ldrb	r3, [r7, #15]
}
 8008842:	4618      	mov	r0, r3
 8008844:	3714      	adds	r7, #20
 8008846:	46bd      	mov	sp, r7
 8008848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800884c:	4770      	bx	lr

0800884e <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800884e:	b580      	push	{r7, lr}
 8008850:	b084      	sub	sp, #16
 8008852:	af00      	add	r7, sp, #0
 8008854:	60f8      	str	r0, [r7, #12]
 8008856:	60b9      	str	r1, [r7, #8]
 8008858:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	2202      	movs	r2, #2
 800885e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	687a      	ldr	r2, [r7, #4]
 8008866:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	687a      	ldr	r2, [r7, #4]
 800886c:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	68ba      	ldr	r2, [r7, #8]
 8008872:	2100      	movs	r1, #0
 8008874:	68f8      	ldr	r0, [r7, #12]
 8008876:	f000 fc84 	bl	8009182 <USBD_LL_Transmit>

  return USBD_OK;
 800887a:	2300      	movs	r3, #0
}
 800887c:	4618      	mov	r0, r3
 800887e:	3710      	adds	r7, #16
 8008880:	46bd      	mov	sp, r7
 8008882:	bd80      	pop	{r7, pc}

08008884 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008884:	b580      	push	{r7, lr}
 8008886:	b084      	sub	sp, #16
 8008888:	af00      	add	r7, sp, #0
 800888a:	60f8      	str	r0, [r7, #12]
 800888c:	60b9      	str	r1, [r7, #8]
 800888e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	68ba      	ldr	r2, [r7, #8]
 8008894:	2100      	movs	r1, #0
 8008896:	68f8      	ldr	r0, [r7, #12]
 8008898:	f000 fc73 	bl	8009182 <USBD_LL_Transmit>

  return USBD_OK;
 800889c:	2300      	movs	r3, #0
}
 800889e:	4618      	mov	r0, r3
 80088a0:	3710      	adds	r7, #16
 80088a2:	46bd      	mov	sp, r7
 80088a4:	bd80      	pop	{r7, pc}

080088a6 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80088a6:	b580      	push	{r7, lr}
 80088a8:	b084      	sub	sp, #16
 80088aa:	af00      	add	r7, sp, #0
 80088ac:	60f8      	str	r0, [r7, #12]
 80088ae:	60b9      	str	r1, [r7, #8]
 80088b0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	2203      	movs	r2, #3
 80088b6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	687a      	ldr	r2, [r7, #4]
 80088be:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	687a      	ldr	r2, [r7, #4]
 80088c6:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	68ba      	ldr	r2, [r7, #8]
 80088ce:	2100      	movs	r1, #0
 80088d0:	68f8      	ldr	r0, [r7, #12]
 80088d2:	f000 fc77 	bl	80091c4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80088d6:	2300      	movs	r3, #0
}
 80088d8:	4618      	mov	r0, r3
 80088da:	3710      	adds	r7, #16
 80088dc:	46bd      	mov	sp, r7
 80088de:	bd80      	pop	{r7, pc}

080088e0 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80088e0:	b580      	push	{r7, lr}
 80088e2:	b084      	sub	sp, #16
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	60f8      	str	r0, [r7, #12]
 80088e8:	60b9      	str	r1, [r7, #8]
 80088ea:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	68ba      	ldr	r2, [r7, #8]
 80088f0:	2100      	movs	r1, #0
 80088f2:	68f8      	ldr	r0, [r7, #12]
 80088f4:	f000 fc66 	bl	80091c4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80088f8:	2300      	movs	r3, #0
}
 80088fa:	4618      	mov	r0, r3
 80088fc:	3710      	adds	r7, #16
 80088fe:	46bd      	mov	sp, r7
 8008900:	bd80      	pop	{r7, pc}

08008902 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008902:	b580      	push	{r7, lr}
 8008904:	b082      	sub	sp, #8
 8008906:	af00      	add	r7, sp, #0
 8008908:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	2204      	movs	r2, #4
 800890e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008912:	2300      	movs	r3, #0
 8008914:	2200      	movs	r2, #0
 8008916:	2100      	movs	r1, #0
 8008918:	6878      	ldr	r0, [r7, #4]
 800891a:	f000 fc32 	bl	8009182 <USBD_LL_Transmit>

  return USBD_OK;
 800891e:	2300      	movs	r3, #0
}
 8008920:	4618      	mov	r0, r3
 8008922:	3708      	adds	r7, #8
 8008924:	46bd      	mov	sp, r7
 8008926:	bd80      	pop	{r7, pc}

08008928 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008928:	b580      	push	{r7, lr}
 800892a:	b082      	sub	sp, #8
 800892c:	af00      	add	r7, sp, #0
 800892e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	2205      	movs	r2, #5
 8008934:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008938:	2300      	movs	r3, #0
 800893a:	2200      	movs	r2, #0
 800893c:	2100      	movs	r1, #0
 800893e:	6878      	ldr	r0, [r7, #4]
 8008940:	f000 fc40 	bl	80091c4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008944:	2300      	movs	r3, #0
}
 8008946:	4618      	mov	r0, r3
 8008948:	3708      	adds	r7, #8
 800894a:	46bd      	mov	sp, r7
 800894c:	bd80      	pop	{r7, pc}
	...

08008950 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008950:	b580      	push	{r7, lr}
 8008952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008954:	2200      	movs	r2, #0
 8008956:	4912      	ldr	r1, [pc, #72]	@ (80089a0 <MX_USB_DEVICE_Init+0x50>)
 8008958:	4812      	ldr	r0, [pc, #72]	@ (80089a4 <MX_USB_DEVICE_Init+0x54>)
 800895a:	f7fe fe61 	bl	8007620 <USBD_Init>
 800895e:	4603      	mov	r3, r0
 8008960:	2b00      	cmp	r3, #0
 8008962:	d001      	beq.n	8008968 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008964:	f7f8 f94a 	bl	8000bfc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_DFU) != USBD_OK)
 8008968:	490f      	ldr	r1, [pc, #60]	@ (80089a8 <MX_USB_DEVICE_Init+0x58>)
 800896a:	480e      	ldr	r0, [pc, #56]	@ (80089a4 <MX_USB_DEVICE_Init+0x54>)
 800896c:	f7fe fe88 	bl	8007680 <USBD_RegisterClass>
 8008970:	4603      	mov	r3, r0
 8008972:	2b00      	cmp	r3, #0
 8008974:	d001      	beq.n	800897a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008976:	f7f8 f941 	bl	8000bfc <Error_Handler>
  }
  if (USBD_DFU_RegisterMedia(&hUsbDeviceFS, &USBD_DFU_fops_FS) != USBD_OK)
 800897a:	490c      	ldr	r1, [pc, #48]	@ (80089ac <MX_USB_DEVICE_Init+0x5c>)
 800897c:	4809      	ldr	r0, [pc, #36]	@ (80089a4 <MX_USB_DEVICE_Init+0x54>)
 800897e:	f7fe facd 	bl	8006f1c <USBD_DFU_RegisterMedia>
 8008982:	4603      	mov	r3, r0
 8008984:	2b00      	cmp	r3, #0
 8008986:	d001      	beq.n	800898c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008988:	f7f8 f938 	bl	8000bfc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800898c:	4805      	ldr	r0, [pc, #20]	@ (80089a4 <MX_USB_DEVICE_Init+0x54>)
 800898e:	f7fe fe9e 	bl	80076ce <USBD_Start>
 8008992:	4603      	mov	r3, r0
 8008994:	2b00      	cmp	r3, #0
 8008996:	d001      	beq.n	800899c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008998:	f7f8 f930 	bl	8000bfc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800899c:	bf00      	nop
 800899e:	bd80      	pop	{r7, pc}
 80089a0:	20000070 	.word	0x20000070
 80089a4:	20000414 	.word	0x20000414
 80089a8:	2000000c 	.word	0x2000000c
 80089ac:	200000c0 	.word	0x200000c0

080089b0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80089b0:	b480      	push	{r7}
 80089b2:	b083      	sub	sp, #12
 80089b4:	af00      	add	r7, sp, #0
 80089b6:	4603      	mov	r3, r0
 80089b8:	6039      	str	r1, [r7, #0]
 80089ba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80089bc:	683b      	ldr	r3, [r7, #0]
 80089be:	2212      	movs	r2, #18
 80089c0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80089c2:	4b03      	ldr	r3, [pc, #12]	@ (80089d0 <USBD_FS_DeviceDescriptor+0x20>)
}
 80089c4:	4618      	mov	r0, r3
 80089c6:	370c      	adds	r7, #12
 80089c8:	46bd      	mov	sp, r7
 80089ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ce:	4770      	bx	lr
 80089d0:	2000008c 	.word	0x2000008c

080089d4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80089d4:	b480      	push	{r7}
 80089d6:	b083      	sub	sp, #12
 80089d8:	af00      	add	r7, sp, #0
 80089da:	4603      	mov	r3, r0
 80089dc:	6039      	str	r1, [r7, #0]
 80089de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80089e0:	683b      	ldr	r3, [r7, #0]
 80089e2:	2204      	movs	r2, #4
 80089e4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80089e6:	4b03      	ldr	r3, [pc, #12]	@ (80089f4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80089e8:	4618      	mov	r0, r3
 80089ea:	370c      	adds	r7, #12
 80089ec:	46bd      	mov	sp, r7
 80089ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f2:	4770      	bx	lr
 80089f4:	200000a0 	.word	0x200000a0

080089f8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80089f8:	b580      	push	{r7, lr}
 80089fa:	b082      	sub	sp, #8
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	4603      	mov	r3, r0
 8008a00:	6039      	str	r1, [r7, #0]
 8008a02:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008a04:	79fb      	ldrb	r3, [r7, #7]
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d105      	bne.n	8008a16 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008a0a:	683a      	ldr	r2, [r7, #0]
 8008a0c:	4907      	ldr	r1, [pc, #28]	@ (8008a2c <USBD_FS_ProductStrDescriptor+0x34>)
 8008a0e:	4808      	ldr	r0, [pc, #32]	@ (8008a30 <USBD_FS_ProductStrDescriptor+0x38>)
 8008a10:	f7ff febd 	bl	800878e <USBD_GetString>
 8008a14:	e004      	b.n	8008a20 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008a16:	683a      	ldr	r2, [r7, #0]
 8008a18:	4904      	ldr	r1, [pc, #16]	@ (8008a2c <USBD_FS_ProductStrDescriptor+0x34>)
 8008a1a:	4805      	ldr	r0, [pc, #20]	@ (8008a30 <USBD_FS_ProductStrDescriptor+0x38>)
 8008a1c:	f7ff feb7 	bl	800878e <USBD_GetString>
  }
  return USBD_StrDesc;
 8008a20:	4b02      	ldr	r3, [pc, #8]	@ (8008a2c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008a22:	4618      	mov	r0, r3
 8008a24:	3708      	adds	r7, #8
 8008a26:	46bd      	mov	sp, r7
 8008a28:	bd80      	pop	{r7, pc}
 8008a2a:	bf00      	nop
 8008a2c:	200006e4 	.word	0x200006e4
 8008a30:	08009d98 	.word	0x08009d98

08008a34 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008a34:	b580      	push	{r7, lr}
 8008a36:	b082      	sub	sp, #8
 8008a38:	af00      	add	r7, sp, #0
 8008a3a:	4603      	mov	r3, r0
 8008a3c:	6039      	str	r1, [r7, #0]
 8008a3e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008a40:	683a      	ldr	r2, [r7, #0]
 8008a42:	4904      	ldr	r1, [pc, #16]	@ (8008a54 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008a44:	4804      	ldr	r0, [pc, #16]	@ (8008a58 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008a46:	f7ff fea2 	bl	800878e <USBD_GetString>
  return USBD_StrDesc;
 8008a4a:	4b02      	ldr	r3, [pc, #8]	@ (8008a54 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008a4c:	4618      	mov	r0, r3
 8008a4e:	3708      	adds	r7, #8
 8008a50:	46bd      	mov	sp, r7
 8008a52:	bd80      	pop	{r7, pc}
 8008a54:	200006e4 	.word	0x200006e4
 8008a58:	08009db8 	.word	0x08009db8

08008a5c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008a5c:	b580      	push	{r7, lr}
 8008a5e:	b082      	sub	sp, #8
 8008a60:	af00      	add	r7, sp, #0
 8008a62:	4603      	mov	r3, r0
 8008a64:	6039      	str	r1, [r7, #0]
 8008a66:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008a68:	683b      	ldr	r3, [r7, #0]
 8008a6a:	221a      	movs	r2, #26
 8008a6c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008a6e:	f000 f843 	bl	8008af8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008a72:	4b02      	ldr	r3, [pc, #8]	@ (8008a7c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008a74:	4618      	mov	r0, r3
 8008a76:	3708      	adds	r7, #8
 8008a78:	46bd      	mov	sp, r7
 8008a7a:	bd80      	pop	{r7, pc}
 8008a7c:	200000a4 	.word	0x200000a4

08008a80 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008a80:	b580      	push	{r7, lr}
 8008a82:	b082      	sub	sp, #8
 8008a84:	af00      	add	r7, sp, #0
 8008a86:	4603      	mov	r3, r0
 8008a88:	6039      	str	r1, [r7, #0]
 8008a8a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008a8c:	79fb      	ldrb	r3, [r7, #7]
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d105      	bne.n	8008a9e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008a92:	683a      	ldr	r2, [r7, #0]
 8008a94:	4907      	ldr	r1, [pc, #28]	@ (8008ab4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008a96:	4808      	ldr	r0, [pc, #32]	@ (8008ab8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008a98:	f7ff fe79 	bl	800878e <USBD_GetString>
 8008a9c:	e004      	b.n	8008aa8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008a9e:	683a      	ldr	r2, [r7, #0]
 8008aa0:	4904      	ldr	r1, [pc, #16]	@ (8008ab4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008aa2:	4805      	ldr	r0, [pc, #20]	@ (8008ab8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008aa4:	f7ff fe73 	bl	800878e <USBD_GetString>
  }
  return USBD_StrDesc;
 8008aa8:	4b02      	ldr	r3, [pc, #8]	@ (8008ab4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008aaa:	4618      	mov	r0, r3
 8008aac:	3708      	adds	r7, #8
 8008aae:	46bd      	mov	sp, r7
 8008ab0:	bd80      	pop	{r7, pc}
 8008ab2:	bf00      	nop
 8008ab4:	200006e4 	.word	0x200006e4
 8008ab8:	08009dcc 	.word	0x08009dcc

08008abc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008abc:	b580      	push	{r7, lr}
 8008abe:	b082      	sub	sp, #8
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	4603      	mov	r3, r0
 8008ac4:	6039      	str	r1, [r7, #0]
 8008ac6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008ac8:	79fb      	ldrb	r3, [r7, #7]
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d105      	bne.n	8008ada <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008ace:	683a      	ldr	r2, [r7, #0]
 8008ad0:	4907      	ldr	r1, [pc, #28]	@ (8008af0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008ad2:	4808      	ldr	r0, [pc, #32]	@ (8008af4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008ad4:	f7ff fe5b 	bl	800878e <USBD_GetString>
 8008ad8:	e004      	b.n	8008ae4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008ada:	683a      	ldr	r2, [r7, #0]
 8008adc:	4904      	ldr	r1, [pc, #16]	@ (8008af0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008ade:	4805      	ldr	r0, [pc, #20]	@ (8008af4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008ae0:	f7ff fe55 	bl	800878e <USBD_GetString>
  }
  return USBD_StrDesc;
 8008ae4:	4b02      	ldr	r3, [pc, #8]	@ (8008af0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008ae6:	4618      	mov	r0, r3
 8008ae8:	3708      	adds	r7, #8
 8008aea:	46bd      	mov	sp, r7
 8008aec:	bd80      	pop	{r7, pc}
 8008aee:	bf00      	nop
 8008af0:	200006e4 	.word	0x200006e4
 8008af4:	08009dd8 	.word	0x08009dd8

08008af8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008af8:	b580      	push	{r7, lr}
 8008afa:	b084      	sub	sp, #16
 8008afc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008afe:	4b0f      	ldr	r3, [pc, #60]	@ (8008b3c <Get_SerialNum+0x44>)
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008b04:	4b0e      	ldr	r3, [pc, #56]	@ (8008b40 <Get_SerialNum+0x48>)
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008b0a:	4b0e      	ldr	r3, [pc, #56]	@ (8008b44 <Get_SerialNum+0x4c>)
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008b10:	68fa      	ldr	r2, [r7, #12]
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	4413      	add	r3, r2
 8008b16:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d009      	beq.n	8008b32 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008b1e:	2208      	movs	r2, #8
 8008b20:	4909      	ldr	r1, [pc, #36]	@ (8008b48 <Get_SerialNum+0x50>)
 8008b22:	68f8      	ldr	r0, [r7, #12]
 8008b24:	f000 f814 	bl	8008b50 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008b28:	2204      	movs	r2, #4
 8008b2a:	4908      	ldr	r1, [pc, #32]	@ (8008b4c <Get_SerialNum+0x54>)
 8008b2c:	68b8      	ldr	r0, [r7, #8]
 8008b2e:	f000 f80f 	bl	8008b50 <IntToUnicode>
  }
}
 8008b32:	bf00      	nop
 8008b34:	3710      	adds	r7, #16
 8008b36:	46bd      	mov	sp, r7
 8008b38:	bd80      	pop	{r7, pc}
 8008b3a:	bf00      	nop
 8008b3c:	1fff7a10 	.word	0x1fff7a10
 8008b40:	1fff7a14 	.word	0x1fff7a14
 8008b44:	1fff7a18 	.word	0x1fff7a18
 8008b48:	200000a6 	.word	0x200000a6
 8008b4c:	200000b6 	.word	0x200000b6

08008b50 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008b50:	b480      	push	{r7}
 8008b52:	b087      	sub	sp, #28
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	60f8      	str	r0, [r7, #12]
 8008b58:	60b9      	str	r1, [r7, #8]
 8008b5a:	4613      	mov	r3, r2
 8008b5c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008b5e:	2300      	movs	r3, #0
 8008b60:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008b62:	2300      	movs	r3, #0
 8008b64:	75fb      	strb	r3, [r7, #23]
 8008b66:	e027      	b.n	8008bb8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	0f1b      	lsrs	r3, r3, #28
 8008b6c:	2b09      	cmp	r3, #9
 8008b6e:	d80b      	bhi.n	8008b88 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	0f1b      	lsrs	r3, r3, #28
 8008b74:	b2da      	uxtb	r2, r3
 8008b76:	7dfb      	ldrb	r3, [r7, #23]
 8008b78:	005b      	lsls	r3, r3, #1
 8008b7a:	4619      	mov	r1, r3
 8008b7c:	68bb      	ldr	r3, [r7, #8]
 8008b7e:	440b      	add	r3, r1
 8008b80:	3230      	adds	r2, #48	@ 0x30
 8008b82:	b2d2      	uxtb	r2, r2
 8008b84:	701a      	strb	r2, [r3, #0]
 8008b86:	e00a      	b.n	8008b9e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	0f1b      	lsrs	r3, r3, #28
 8008b8c:	b2da      	uxtb	r2, r3
 8008b8e:	7dfb      	ldrb	r3, [r7, #23]
 8008b90:	005b      	lsls	r3, r3, #1
 8008b92:	4619      	mov	r1, r3
 8008b94:	68bb      	ldr	r3, [r7, #8]
 8008b96:	440b      	add	r3, r1
 8008b98:	3237      	adds	r2, #55	@ 0x37
 8008b9a:	b2d2      	uxtb	r2, r2
 8008b9c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	011b      	lsls	r3, r3, #4
 8008ba2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008ba4:	7dfb      	ldrb	r3, [r7, #23]
 8008ba6:	005b      	lsls	r3, r3, #1
 8008ba8:	3301      	adds	r3, #1
 8008baa:	68ba      	ldr	r2, [r7, #8]
 8008bac:	4413      	add	r3, r2
 8008bae:	2200      	movs	r2, #0
 8008bb0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008bb2:	7dfb      	ldrb	r3, [r7, #23]
 8008bb4:	3301      	adds	r3, #1
 8008bb6:	75fb      	strb	r3, [r7, #23]
 8008bb8:	7dfa      	ldrb	r2, [r7, #23]
 8008bba:	79fb      	ldrb	r3, [r7, #7]
 8008bbc:	429a      	cmp	r2, r3
 8008bbe:	d3d3      	bcc.n	8008b68 <IntToUnicode+0x18>
  }
}
 8008bc0:	bf00      	nop
 8008bc2:	bf00      	nop
 8008bc4:	371c      	adds	r7, #28
 8008bc6:	46bd      	mov	sp, r7
 8008bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bcc:	4770      	bx	lr

08008bce <MEM_If_Init_FS>:
/**
  * @brief  Memory initialization routine.
  * @retval USBD_OK if operation is successful, MAL_FAIL else.
  */
uint16_t MEM_If_Init_FS(void)
{
 8008bce:	b480      	push	{r7}
 8008bd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 0 */
  return (USBD_OK);
 8008bd2:	2300      	movs	r3, #0
  /* USER CODE END 0 */
}
 8008bd4:	4618      	mov	r0, r3
 8008bd6:	46bd      	mov	sp, r7
 8008bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bdc:	4770      	bx	lr

08008bde <MEM_If_DeInit_FS>:
/**
  * @brief  De-Initializes Memory
  * @retval USBD_OK if operation is successful, MAL_FAIL else
  */
uint16_t MEM_If_DeInit_FS(void)
{
 8008bde:	b480      	push	{r7}
 8008be0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  return (USBD_OK);
 8008be2:	2300      	movs	r3, #0
  /* USER CODE END 1 */
}
 8008be4:	4618      	mov	r0, r3
 8008be6:	46bd      	mov	sp, r7
 8008be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bec:	4770      	bx	lr

08008bee <MEM_If_Erase_FS>:
  * @brief  Erase sector.
  * @param  Add: Address of sector to be erased.
  * @retval 0 if operation is successful, MAL_FAIL else.
  */
uint16_t MEM_If_Erase_FS(uint32_t Add)
{
 8008bee:	b480      	push	{r7}
 8008bf0:	b083      	sub	sp, #12
 8008bf2:	af00      	add	r7, sp, #0
 8008bf4:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 2 */

  return (USBD_OK);
 8008bf6:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 8008bf8:	4618      	mov	r0, r3
 8008bfa:	370c      	adds	r7, #12
 8008bfc:	46bd      	mov	sp, r7
 8008bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c02:	4770      	bx	lr

08008c04 <MEM_If_Write_FS>:
  * @param  dest: Pointer to the destination buffer.
  * @param  Len: Number of data to be written (in bytes).
  * @retval USBD_OK if operation is successful, MAL_FAIL else.
  */
uint16_t MEM_If_Write_FS(uint8_t *src, uint8_t *dest, uint32_t Len)
{
 8008c04:	b480      	push	{r7}
 8008c06:	b085      	sub	sp, #20
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	60f8      	str	r0, [r7, #12]
 8008c0c:	60b9      	str	r1, [r7, #8]
 8008c0e:	607a      	str	r2, [r7, #4]
  /* USER CODE BEGIN 3 */
  return (USBD_OK);
 8008c10:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008c12:	4618      	mov	r0, r3
 8008c14:	3714      	adds	r7, #20
 8008c16:	46bd      	mov	sp, r7
 8008c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c1c:	4770      	bx	lr

08008c1e <MEM_If_Read_FS>:
  * @param  dest: Pointer to the destination buffer.
  * @param  Len: Number of data to be read (in bytes).
  * @retval Pointer to the physical address where data should be read.
  */
uint8_t *MEM_If_Read_FS(uint8_t *src, uint8_t *dest, uint32_t Len)
{
 8008c1e:	b480      	push	{r7}
 8008c20:	b085      	sub	sp, #20
 8008c22:	af00      	add	r7, sp, #0
 8008c24:	60f8      	str	r0, [r7, #12]
 8008c26:	60b9      	str	r1, [r7, #8]
 8008c28:	607a      	str	r2, [r7, #4]
  /* Return a valid address to avoid HardFault */
  /* USER CODE BEGIN 4 */
  return (uint8_t*)(USBD_OK);
 8008c2a:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008c2c:	4618      	mov	r0, r3
 8008c2e:	3714      	adds	r7, #20
 8008c30:	46bd      	mov	sp, r7
 8008c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c36:	4770      	bx	lr

08008c38 <MEM_If_GetStatus_FS>:
  * @param  Cmd: Number of data to be read (in bytes)
  * @param  buffer: used for returning the time necessary for a program or an erase operation
  * @retval USBD_OK if operation is successful
  */
uint16_t MEM_If_GetStatus_FS(uint32_t Add, uint8_t Cmd, uint8_t *buffer)
{
 8008c38:	b480      	push	{r7}
 8008c3a:	b085      	sub	sp, #20
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	60f8      	str	r0, [r7, #12]
 8008c40:	460b      	mov	r3, r1
 8008c42:	607a      	str	r2, [r7, #4]
 8008c44:	72fb      	strb	r3, [r7, #11]
  /* USER CODE BEGIN 5 */
  switch (Cmd)
 8008c46:	7afb      	ldrb	r3, [r7, #11]
 8008c48:	2b01      	cmp	r3, #1
    break;

    case DFU_MEDIA_ERASE:
    default:

    break;
 8008c4a:	bf00      	nop
  }
  return (USBD_OK);
 8008c4c:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008c4e:	4618      	mov	r0, r3
 8008c50:	3714      	adds	r7, #20
 8008c52:	46bd      	mov	sp, r7
 8008c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c58:	4770      	bx	lr
	...

08008c5c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008c5c:	b580      	push	{r7, lr}
 8008c5e:	b0a0      	sub	sp, #128	@ 0x80
 8008c60:	af00      	add	r7, sp, #0
 8008c62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008c64:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8008c68:	2200      	movs	r2, #0
 8008c6a:	601a      	str	r2, [r3, #0]
 8008c6c:	605a      	str	r2, [r3, #4]
 8008c6e:	609a      	str	r2, [r3, #8]
 8008c70:	60da      	str	r2, [r3, #12]
 8008c72:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8008c74:	f107 0314 	add.w	r3, r7, #20
 8008c78:	2258      	movs	r2, #88	@ 0x58
 8008c7a:	2100      	movs	r1, #0
 8008c7c:	4618      	mov	r0, r3
 8008c7e:	f000 fcff 	bl	8009680 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008c8a:	d155      	bne.n	8008d38 <HAL_PCD_MspInit+0xdc>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8008c8c:	2320      	movs	r3, #32
 8008c8e:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8008c90:	2300      	movs	r3, #0
 8008c92:	647b      	str	r3, [r7, #68]	@ 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8008c94:	f107 0314 	add.w	r3, r7, #20
 8008c98:	4618      	mov	r0, r3
 8008c9a:	f7fb fb6b 	bl	8004374 <HAL_RCCEx_PeriphCLKConfig>
 8008c9e:	4603      	mov	r3, r0
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d001      	beq.n	8008ca8 <HAL_PCD_MspInit+0x4c>
    {
      Error_Handler();
 8008ca4:	f7f7 ffaa 	bl	8000bfc <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008ca8:	2300      	movs	r3, #0
 8008caa:	613b      	str	r3, [r7, #16]
 8008cac:	4b24      	ldr	r3, [pc, #144]	@ (8008d40 <HAL_PCD_MspInit+0xe4>)
 8008cae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008cb0:	4a23      	ldr	r2, [pc, #140]	@ (8008d40 <HAL_PCD_MspInit+0xe4>)
 8008cb2:	f043 0301 	orr.w	r3, r3, #1
 8008cb6:	6313      	str	r3, [r2, #48]	@ 0x30
 8008cb8:	4b21      	ldr	r3, [pc, #132]	@ (8008d40 <HAL_PCD_MspInit+0xe4>)
 8008cba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008cbc:	f003 0301 	and.w	r3, r3, #1
 8008cc0:	613b      	str	r3, [r7, #16]
 8008cc2:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8008cc4:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8008cc8:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008cca:	2302      	movs	r3, #2
 8008ccc:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008cce:	2300      	movs	r3, #0
 8008cd0:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008cd2:	2303      	movs	r3, #3
 8008cd4:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008cd6:	230a      	movs	r3, #10
 8008cd8:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008cda:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8008cde:	4619      	mov	r1, r3
 8008ce0:	4818      	ldr	r0, [pc, #96]	@ (8008d44 <HAL_PCD_MspInit+0xe8>)
 8008ce2:	f7f8 ffc1 	bl	8001c68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8008ce6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008cea:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008cec:	2300      	movs	r3, #0
 8008cee:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008cf0:	2300      	movs	r3, #0
 8008cf2:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8008cf4:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8008cf8:	4619      	mov	r1, r3
 8008cfa:	4812      	ldr	r0, [pc, #72]	@ (8008d44 <HAL_PCD_MspInit+0xe8>)
 8008cfc:	f7f8 ffb4 	bl	8001c68 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008d00:	4b0f      	ldr	r3, [pc, #60]	@ (8008d40 <HAL_PCD_MspInit+0xe4>)
 8008d02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008d04:	4a0e      	ldr	r2, [pc, #56]	@ (8008d40 <HAL_PCD_MspInit+0xe4>)
 8008d06:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008d0a:	6353      	str	r3, [r2, #52]	@ 0x34
 8008d0c:	2300      	movs	r3, #0
 8008d0e:	60fb      	str	r3, [r7, #12]
 8008d10:	4b0b      	ldr	r3, [pc, #44]	@ (8008d40 <HAL_PCD_MspInit+0xe4>)
 8008d12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008d14:	4a0a      	ldr	r2, [pc, #40]	@ (8008d40 <HAL_PCD_MspInit+0xe4>)
 8008d16:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008d1a:	6453      	str	r3, [r2, #68]	@ 0x44
 8008d1c:	4b08      	ldr	r3, [pc, #32]	@ (8008d40 <HAL_PCD_MspInit+0xe4>)
 8008d1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008d20:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008d24:	60fb      	str	r3, [r7, #12]
 8008d26:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008d28:	2200      	movs	r2, #0
 8008d2a:	2100      	movs	r1, #0
 8008d2c:	2043      	movs	r0, #67	@ 0x43
 8008d2e:	f7f8 ff64 	bl	8001bfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008d32:	2043      	movs	r0, #67	@ 0x43
 8008d34:	f7f8 ff7d 	bl	8001c32 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008d38:	bf00      	nop
 8008d3a:	3780      	adds	r7, #128	@ 0x80
 8008d3c:	46bd      	mov	sp, r7
 8008d3e:	bd80      	pop	{r7, pc}
 8008d40:	40023800 	.word	0x40023800
 8008d44:	40020000 	.word	0x40020000

08008d48 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d48:	b580      	push	{r7, lr}
 8008d4a:	b082      	sub	sp, #8
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	f503 7371 	add.w	r3, r3, #964	@ 0x3c4
 8008d5c:	4619      	mov	r1, r3
 8008d5e:	4610      	mov	r0, r2
 8008d60:	f7fe fd1b 	bl	800779a <USBD_LL_SetupStage>
}
 8008d64:	bf00      	nop
 8008d66:	3708      	adds	r7, #8
 8008d68:	46bd      	mov	sp, r7
 8008d6a:	bd80      	pop	{r7, pc}

08008d6c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d6c:	b580      	push	{r7, lr}
 8008d6e:	b082      	sub	sp, #8
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	6078      	str	r0, [r7, #4]
 8008d74:	460b      	mov	r3, r1
 8008d76:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	f8d3 0404 	ldr.w	r0, [r3, #1028]	@ 0x404
 8008d7e:	78fa      	ldrb	r2, [r7, #3]
 8008d80:	6879      	ldr	r1, [r7, #4]
 8008d82:	4613      	mov	r3, r2
 8008d84:	00db      	lsls	r3, r3, #3
 8008d86:	1a9b      	subs	r3, r3, r2
 8008d88:	009b      	lsls	r3, r3, #2
 8008d8a:	440b      	add	r3, r1
 8008d8c:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8008d90:	681a      	ldr	r2, [r3, #0]
 8008d92:	78fb      	ldrb	r3, [r7, #3]
 8008d94:	4619      	mov	r1, r3
 8008d96:	f7fe fd55 	bl	8007844 <USBD_LL_DataOutStage>
}
 8008d9a:	bf00      	nop
 8008d9c:	3708      	adds	r7, #8
 8008d9e:	46bd      	mov	sp, r7
 8008da0:	bd80      	pop	{r7, pc}

08008da2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008da2:	b580      	push	{r7, lr}
 8008da4:	b082      	sub	sp, #8
 8008da6:	af00      	add	r7, sp, #0
 8008da8:	6078      	str	r0, [r7, #4]
 8008daa:	460b      	mov	r3, r1
 8008dac:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	f8d3 0404 	ldr.w	r0, [r3, #1028]	@ 0x404
 8008db4:	78fa      	ldrb	r2, [r7, #3]
 8008db6:	6879      	ldr	r1, [r7, #4]
 8008db8:	4613      	mov	r3, r2
 8008dba:	00db      	lsls	r3, r3, #3
 8008dbc:	1a9b      	subs	r3, r3, r2
 8008dbe:	009b      	lsls	r3, r3, #2
 8008dc0:	440b      	add	r3, r1
 8008dc2:	3348      	adds	r3, #72	@ 0x48
 8008dc4:	681a      	ldr	r2, [r3, #0]
 8008dc6:	78fb      	ldrb	r3, [r7, #3]
 8008dc8:	4619      	mov	r1, r3
 8008dca:	f7fe fd9e 	bl	800790a <USBD_LL_DataInStage>
}
 8008dce:	bf00      	nop
 8008dd0:	3708      	adds	r7, #8
 8008dd2:	46bd      	mov	sp, r7
 8008dd4:	bd80      	pop	{r7, pc}

08008dd6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008dd6:	b580      	push	{r7, lr}
 8008dd8:	b082      	sub	sp, #8
 8008dda:	af00      	add	r7, sp, #0
 8008ddc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8008de4:	4618      	mov	r0, r3
 8008de6:	f7fe feb2 	bl	8007b4e <USBD_LL_SOF>
}
 8008dea:	bf00      	nop
 8008dec:	3708      	adds	r7, #8
 8008dee:	46bd      	mov	sp, r7
 8008df0:	bd80      	pop	{r7, pc}

08008df2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008df2:	b580      	push	{r7, lr}
 8008df4:	b084      	sub	sp, #16
 8008df6:	af00      	add	r7, sp, #0
 8008df8:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008dfa:	2301      	movs	r3, #1
 8008dfc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	68db      	ldr	r3, [r3, #12]
 8008e02:	2b02      	cmp	r3, #2
 8008e04:	d001      	beq.n	8008e0a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008e06:	f7f7 fef9 	bl	8000bfc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8008e10:	7bfa      	ldrb	r2, [r7, #15]
 8008e12:	4611      	mov	r1, r2
 8008e14:	4618      	mov	r0, r3
 8008e16:	f7fe fe5c 	bl	8007ad2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8008e20:	4618      	mov	r0, r3
 8008e22:	f7fe fe08 	bl	8007a36 <USBD_LL_Reset>
}
 8008e26:	bf00      	nop
 8008e28:	3710      	adds	r7, #16
 8008e2a:	46bd      	mov	sp, r7
 8008e2c:	bd80      	pop	{r7, pc}
	...

08008e30 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e30:	b580      	push	{r7, lr}
 8008e32:	b082      	sub	sp, #8
 8008e34:	af00      	add	r7, sp, #0
 8008e36:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8008e3e:	4618      	mov	r0, r3
 8008e40:	f7fe fe57 	bl	8007af2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	687a      	ldr	r2, [r7, #4]
 8008e50:	6812      	ldr	r2, [r2, #0]
 8008e52:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008e56:	f043 0301 	orr.w	r3, r3, #1
 8008e5a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	6a1b      	ldr	r3, [r3, #32]
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d005      	beq.n	8008e70 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008e64:	4b04      	ldr	r3, [pc, #16]	@ (8008e78 <HAL_PCD_SuspendCallback+0x48>)
 8008e66:	691b      	ldr	r3, [r3, #16]
 8008e68:	4a03      	ldr	r2, [pc, #12]	@ (8008e78 <HAL_PCD_SuspendCallback+0x48>)
 8008e6a:	f043 0306 	orr.w	r3, r3, #6
 8008e6e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008e70:	bf00      	nop
 8008e72:	3708      	adds	r7, #8
 8008e74:	46bd      	mov	sp, r7
 8008e76:	bd80      	pop	{r7, pc}
 8008e78:	e000ed00 	.word	0xe000ed00

08008e7c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e7c:	b580      	push	{r7, lr}
 8008e7e:	b082      	sub	sp, #8
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8008e8a:	4618      	mov	r0, r3
 8008e8c:	f7fe fe47 	bl	8007b1e <USBD_LL_Resume>
}
 8008e90:	bf00      	nop
 8008e92:	3708      	adds	r7, #8
 8008e94:	46bd      	mov	sp, r7
 8008e96:	bd80      	pop	{r7, pc}

08008e98 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e98:	b580      	push	{r7, lr}
 8008e9a:	b082      	sub	sp, #8
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	6078      	str	r0, [r7, #4]
 8008ea0:	460b      	mov	r3, r1
 8008ea2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8008eaa:	78fa      	ldrb	r2, [r7, #3]
 8008eac:	4611      	mov	r1, r2
 8008eae:	4618      	mov	r0, r3
 8008eb0:	f7fe fe95 	bl	8007bde <USBD_LL_IsoOUTIncomplete>
}
 8008eb4:	bf00      	nop
 8008eb6:	3708      	adds	r7, #8
 8008eb8:	46bd      	mov	sp, r7
 8008eba:	bd80      	pop	{r7, pc}

08008ebc <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ebc:	b580      	push	{r7, lr}
 8008ebe:	b082      	sub	sp, #8
 8008ec0:	af00      	add	r7, sp, #0
 8008ec2:	6078      	str	r0, [r7, #4]
 8008ec4:	460b      	mov	r3, r1
 8008ec6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8008ece:	78fa      	ldrb	r2, [r7, #3]
 8008ed0:	4611      	mov	r1, r2
 8008ed2:	4618      	mov	r0, r3
 8008ed4:	f7fe fe5d 	bl	8007b92 <USBD_LL_IsoINIncomplete>
}
 8008ed8:	bf00      	nop
 8008eda:	3708      	adds	r7, #8
 8008edc:	46bd      	mov	sp, r7
 8008ede:	bd80      	pop	{r7, pc}

08008ee0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ee0:	b580      	push	{r7, lr}
 8008ee2:	b082      	sub	sp, #8
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8008eee:	4618      	mov	r0, r3
 8008ef0:	f7fe fe9b 	bl	8007c2a <USBD_LL_DevConnected>
}
 8008ef4:	bf00      	nop
 8008ef6:	3708      	adds	r7, #8
 8008ef8:	46bd      	mov	sp, r7
 8008efa:	bd80      	pop	{r7, pc}

08008efc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008efc:	b580      	push	{r7, lr}
 8008efe:	b082      	sub	sp, #8
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8008f0a:	4618      	mov	r0, r3
 8008f0c:	f7fe fe98 	bl	8007c40 <USBD_LL_DevDisconnected>
}
 8008f10:	bf00      	nop
 8008f12:	3708      	adds	r7, #8
 8008f14:	46bd      	mov	sp, r7
 8008f16:	bd80      	pop	{r7, pc}

08008f18 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008f18:	b580      	push	{r7, lr}
 8008f1a:	b082      	sub	sp, #8
 8008f1c:	af00      	add	r7, sp, #0
 8008f1e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	781b      	ldrb	r3, [r3, #0]
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d13f      	bne.n	8008fa8 <USBD_LL_Init+0x90>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008f28:	4a22      	ldr	r2, [pc, #136]	@ (8008fb4 <USBD_LL_Init+0x9c>)
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	f8c2 3404 	str.w	r3, [r2, #1028]	@ 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	4a20      	ldr	r2, [pc, #128]	@ (8008fb4 <USBD_LL_Init+0x9c>)
 8008f34:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008f38:	4b1e      	ldr	r3, [pc, #120]	@ (8008fb4 <USBD_LL_Init+0x9c>)
 8008f3a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8008f3e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8008f40:	4b1c      	ldr	r3, [pc, #112]	@ (8008fb4 <USBD_LL_Init+0x9c>)
 8008f42:	2206      	movs	r2, #6
 8008f44:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008f46:	4b1b      	ldr	r3, [pc, #108]	@ (8008fb4 <USBD_LL_Init+0x9c>)
 8008f48:	2202      	movs	r2, #2
 8008f4a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008f4c:	4b19      	ldr	r3, [pc, #100]	@ (8008fb4 <USBD_LL_Init+0x9c>)
 8008f4e:	2200      	movs	r2, #0
 8008f50:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008f52:	4b18      	ldr	r3, [pc, #96]	@ (8008fb4 <USBD_LL_Init+0x9c>)
 8008f54:	2202      	movs	r2, #2
 8008f56:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8008f58:	4b16      	ldr	r3, [pc, #88]	@ (8008fb4 <USBD_LL_Init+0x9c>)
 8008f5a:	2201      	movs	r2, #1
 8008f5c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008f5e:	4b15      	ldr	r3, [pc, #84]	@ (8008fb4 <USBD_LL_Init+0x9c>)
 8008f60:	2200      	movs	r2, #0
 8008f62:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008f64:	4b13      	ldr	r3, [pc, #76]	@ (8008fb4 <USBD_LL_Init+0x9c>)
 8008f66:	2200      	movs	r2, #0
 8008f68:	625a      	str	r2, [r3, #36]	@ 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8008f6a:	4b12      	ldr	r3, [pc, #72]	@ (8008fb4 <USBD_LL_Init+0x9c>)
 8008f6c:	2201      	movs	r2, #1
 8008f6e:	629a      	str	r2, [r3, #40]	@ 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8008f70:	4b10      	ldr	r3, [pc, #64]	@ (8008fb4 <USBD_LL_Init+0x9c>)
 8008f72:	2201      	movs	r2, #1
 8008f74:	62da      	str	r2, [r3, #44]	@ 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008f76:	4b0f      	ldr	r3, [pc, #60]	@ (8008fb4 <USBD_LL_Init+0x9c>)
 8008f78:	2200      	movs	r2, #0
 8008f7a:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008f7c:	480d      	ldr	r0, [pc, #52]	@ (8008fb4 <USBD_LL_Init+0x9c>)
 8008f7e:	f7f9 fe27 	bl	8002bd0 <HAL_PCD_Init>
 8008f82:	4603      	mov	r3, r0
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d001      	beq.n	8008f8c <USBD_LL_Init+0x74>
  {
    Error_Handler( );
 8008f88:	f7f7 fe38 	bl	8000bfc <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008f8c:	2180      	movs	r1, #128	@ 0x80
 8008f8e:	4809      	ldr	r0, [pc, #36]	@ (8008fb4 <USBD_LL_Init+0x9c>)
 8008f90:	f7fa ff8f 	bl	8003eb2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008f94:	2240      	movs	r2, #64	@ 0x40
 8008f96:	2100      	movs	r1, #0
 8008f98:	4806      	ldr	r0, [pc, #24]	@ (8008fb4 <USBD_LL_Init+0x9c>)
 8008f9a:	f7fa ff43 	bl	8003e24 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008f9e:	2280      	movs	r2, #128	@ 0x80
 8008fa0:	2101      	movs	r1, #1
 8008fa2:	4804      	ldr	r0, [pc, #16]	@ (8008fb4 <USBD_LL_Init+0x9c>)
 8008fa4:	f7fa ff3e 	bl	8003e24 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008fa8:	2300      	movs	r3, #0
}
 8008faa:	4618      	mov	r0, r3
 8008fac:	3708      	adds	r7, #8
 8008fae:	46bd      	mov	sp, r7
 8008fb0:	bd80      	pop	{r7, pc}
 8008fb2:	bf00      	nop
 8008fb4:	200008e4 	.word	0x200008e4

08008fb8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008fb8:	b580      	push	{r7, lr}
 8008fba:	b084      	sub	sp, #16
 8008fbc:	af00      	add	r7, sp, #0
 8008fbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008fc0:	2300      	movs	r3, #0
 8008fc2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008fc4:	2300      	movs	r3, #0
 8008fc6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8008fce:	4618      	mov	r0, r3
 8008fd0:	f7f9 ff22 	bl	8002e18 <HAL_PCD_Start>
 8008fd4:	4603      	mov	r3, r0
 8008fd6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008fd8:	7bfb      	ldrb	r3, [r7, #15]
 8008fda:	4618      	mov	r0, r3
 8008fdc:	f000 f92c 	bl	8009238 <USBD_Get_USB_Status>
 8008fe0:	4603      	mov	r3, r0
 8008fe2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008fe4:	7bbb      	ldrb	r3, [r7, #14]
}
 8008fe6:	4618      	mov	r0, r3
 8008fe8:	3710      	adds	r7, #16
 8008fea:	46bd      	mov	sp, r7
 8008fec:	bd80      	pop	{r7, pc}

08008fee <USBD_LL_Stop>:
  * @brief  Stops the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Stop(USBD_HandleTypeDef *pdev)
{
 8008fee:	b580      	push	{r7, lr}
 8008ff0:	b084      	sub	sp, #16
 8008ff2:	af00      	add	r7, sp, #0
 8008ff4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ff6:	2300      	movs	r3, #0
 8008ff8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ffa:	2300      	movs	r3, #0
 8008ffc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Stop(pdev->pData);
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8009004:	4618      	mov	r0, r3
 8009006:	f7f9 ff3a 	bl	8002e7e <HAL_PCD_Stop>
 800900a:	4603      	mov	r3, r0
 800900c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800900e:	7bfb      	ldrb	r3, [r7, #15]
 8009010:	4618      	mov	r0, r3
 8009012:	f000 f911 	bl	8009238 <USBD_Get_USB_Status>
 8009016:	4603      	mov	r3, r0
 8009018:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800901a:	7bbb      	ldrb	r3, [r7, #14]
}
 800901c:	4618      	mov	r0, r3
 800901e:	3710      	adds	r7, #16
 8009020:	46bd      	mov	sp, r7
 8009022:	bd80      	pop	{r7, pc}

08009024 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009024:	b580      	push	{r7, lr}
 8009026:	b084      	sub	sp, #16
 8009028:	af00      	add	r7, sp, #0
 800902a:	6078      	str	r0, [r7, #4]
 800902c:	4608      	mov	r0, r1
 800902e:	4611      	mov	r1, r2
 8009030:	461a      	mov	r2, r3
 8009032:	4603      	mov	r3, r0
 8009034:	70fb      	strb	r3, [r7, #3]
 8009036:	460b      	mov	r3, r1
 8009038:	70bb      	strb	r3, [r7, #2]
 800903a:	4613      	mov	r3, r2
 800903c:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800903e:	2300      	movs	r3, #0
 8009040:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009042:	2300      	movs	r3, #0
 8009044:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800904c:	78bb      	ldrb	r3, [r7, #2]
 800904e:	883a      	ldrh	r2, [r7, #0]
 8009050:	78f9      	ldrb	r1, [r7, #3]
 8009052:	f7fa fb51 	bl	80036f8 <HAL_PCD_EP_Open>
 8009056:	4603      	mov	r3, r0
 8009058:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800905a:	7bfb      	ldrb	r3, [r7, #15]
 800905c:	4618      	mov	r0, r3
 800905e:	f000 f8eb 	bl	8009238 <USBD_Get_USB_Status>
 8009062:	4603      	mov	r3, r0
 8009064:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009066:	7bbb      	ldrb	r3, [r7, #14]
}
 8009068:	4618      	mov	r0, r3
 800906a:	3710      	adds	r7, #16
 800906c:	46bd      	mov	sp, r7
 800906e:	bd80      	pop	{r7, pc}

08009070 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009070:	b580      	push	{r7, lr}
 8009072:	b084      	sub	sp, #16
 8009074:	af00      	add	r7, sp, #0
 8009076:	6078      	str	r0, [r7, #4]
 8009078:	460b      	mov	r3, r1
 800907a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800907c:	2300      	movs	r3, #0
 800907e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009080:	2300      	movs	r3, #0
 8009082:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800908a:	78fa      	ldrb	r2, [r7, #3]
 800908c:	4611      	mov	r1, r2
 800908e:	4618      	mov	r0, r3
 8009090:	f7fa fc2f 	bl	80038f2 <HAL_PCD_EP_SetStall>
 8009094:	4603      	mov	r3, r0
 8009096:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009098:	7bfb      	ldrb	r3, [r7, #15]
 800909a:	4618      	mov	r0, r3
 800909c:	f000 f8cc 	bl	8009238 <USBD_Get_USB_Status>
 80090a0:	4603      	mov	r3, r0
 80090a2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80090a4:	7bbb      	ldrb	r3, [r7, #14]
}
 80090a6:	4618      	mov	r0, r3
 80090a8:	3710      	adds	r7, #16
 80090aa:	46bd      	mov	sp, r7
 80090ac:	bd80      	pop	{r7, pc}

080090ae <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80090ae:	b580      	push	{r7, lr}
 80090b0:	b084      	sub	sp, #16
 80090b2:	af00      	add	r7, sp, #0
 80090b4:	6078      	str	r0, [r7, #4]
 80090b6:	460b      	mov	r3, r1
 80090b8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80090ba:	2300      	movs	r3, #0
 80090bc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80090be:	2300      	movs	r3, #0
 80090c0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 80090c8:	78fa      	ldrb	r2, [r7, #3]
 80090ca:	4611      	mov	r1, r2
 80090cc:	4618      	mov	r0, r3
 80090ce:	f7fa fc74 	bl	80039ba <HAL_PCD_EP_ClrStall>
 80090d2:	4603      	mov	r3, r0
 80090d4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80090d6:	7bfb      	ldrb	r3, [r7, #15]
 80090d8:	4618      	mov	r0, r3
 80090da:	f000 f8ad 	bl	8009238 <USBD_Get_USB_Status>
 80090de:	4603      	mov	r3, r0
 80090e0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80090e2:	7bbb      	ldrb	r3, [r7, #14]
}
 80090e4:	4618      	mov	r0, r3
 80090e6:	3710      	adds	r7, #16
 80090e8:	46bd      	mov	sp, r7
 80090ea:	bd80      	pop	{r7, pc}

080090ec <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80090ec:	b480      	push	{r7}
 80090ee:	b085      	sub	sp, #20
 80090f0:	af00      	add	r7, sp, #0
 80090f2:	6078      	str	r0, [r7, #4]
 80090f4:	460b      	mov	r3, r1
 80090f6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 80090fe:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009100:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009104:	2b00      	cmp	r3, #0
 8009106:	da0b      	bge.n	8009120 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009108:	78fb      	ldrb	r3, [r7, #3]
 800910a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800910e:	68f9      	ldr	r1, [r7, #12]
 8009110:	4613      	mov	r3, r2
 8009112:	00db      	lsls	r3, r3, #3
 8009114:	1a9b      	subs	r3, r3, r2
 8009116:	009b      	lsls	r3, r3, #2
 8009118:	440b      	add	r3, r1
 800911a:	333e      	adds	r3, #62	@ 0x3e
 800911c:	781b      	ldrb	r3, [r3, #0]
 800911e:	e00b      	b.n	8009138 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009120:	78fb      	ldrb	r3, [r7, #3]
 8009122:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009126:	68f9      	ldr	r1, [r7, #12]
 8009128:	4613      	mov	r3, r2
 800912a:	00db      	lsls	r3, r3, #3
 800912c:	1a9b      	subs	r3, r3, r2
 800912e:	009b      	lsls	r3, r3, #2
 8009130:	440b      	add	r3, r1
 8009132:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8009136:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009138:	4618      	mov	r0, r3
 800913a:	3714      	adds	r7, #20
 800913c:	46bd      	mov	sp, r7
 800913e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009142:	4770      	bx	lr

08009144 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009144:	b580      	push	{r7, lr}
 8009146:	b084      	sub	sp, #16
 8009148:	af00      	add	r7, sp, #0
 800914a:	6078      	str	r0, [r7, #4]
 800914c:	460b      	mov	r3, r1
 800914e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009150:	2300      	movs	r3, #0
 8009152:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009154:	2300      	movs	r3, #0
 8009156:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800915e:	78fa      	ldrb	r2, [r7, #3]
 8009160:	4611      	mov	r1, r2
 8009162:	4618      	mov	r0, r3
 8009164:	f7fa faa3 	bl	80036ae <HAL_PCD_SetAddress>
 8009168:	4603      	mov	r3, r0
 800916a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800916c:	7bfb      	ldrb	r3, [r7, #15]
 800916e:	4618      	mov	r0, r3
 8009170:	f000 f862 	bl	8009238 <USBD_Get_USB_Status>
 8009174:	4603      	mov	r3, r0
 8009176:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009178:	7bbb      	ldrb	r3, [r7, #14]
}
 800917a:	4618      	mov	r0, r3
 800917c:	3710      	adds	r7, #16
 800917e:	46bd      	mov	sp, r7
 8009180:	bd80      	pop	{r7, pc}

08009182 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009182:	b580      	push	{r7, lr}
 8009184:	b086      	sub	sp, #24
 8009186:	af00      	add	r7, sp, #0
 8009188:	60f8      	str	r0, [r7, #12]
 800918a:	607a      	str	r2, [r7, #4]
 800918c:	603b      	str	r3, [r7, #0]
 800918e:	460b      	mov	r3, r1
 8009190:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009192:	2300      	movs	r3, #0
 8009194:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009196:	2300      	movs	r3, #0
 8009198:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 80091a0:	7af9      	ldrb	r1, [r7, #11]
 80091a2:	683b      	ldr	r3, [r7, #0]
 80091a4:	687a      	ldr	r2, [r7, #4]
 80091a6:	f7fa fb5a 	bl	800385e <HAL_PCD_EP_Transmit>
 80091aa:	4603      	mov	r3, r0
 80091ac:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80091ae:	7dfb      	ldrb	r3, [r7, #23]
 80091b0:	4618      	mov	r0, r3
 80091b2:	f000 f841 	bl	8009238 <USBD_Get_USB_Status>
 80091b6:	4603      	mov	r3, r0
 80091b8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80091ba:	7dbb      	ldrb	r3, [r7, #22]
}
 80091bc:	4618      	mov	r0, r3
 80091be:	3718      	adds	r7, #24
 80091c0:	46bd      	mov	sp, r7
 80091c2:	bd80      	pop	{r7, pc}

080091c4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80091c4:	b580      	push	{r7, lr}
 80091c6:	b086      	sub	sp, #24
 80091c8:	af00      	add	r7, sp, #0
 80091ca:	60f8      	str	r0, [r7, #12]
 80091cc:	607a      	str	r2, [r7, #4]
 80091ce:	603b      	str	r3, [r7, #0]
 80091d0:	460b      	mov	r3, r1
 80091d2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80091d4:	2300      	movs	r3, #0
 80091d6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80091d8:	2300      	movs	r3, #0
 80091da:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 80091e2:	7af9      	ldrb	r1, [r7, #11]
 80091e4:	683b      	ldr	r3, [r7, #0]
 80091e6:	687a      	ldr	r2, [r7, #4]
 80091e8:	f7fa faee 	bl	80037c8 <HAL_PCD_EP_Receive>
 80091ec:	4603      	mov	r3, r0
 80091ee:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80091f0:	7dfb      	ldrb	r3, [r7, #23]
 80091f2:	4618      	mov	r0, r3
 80091f4:	f000 f820 	bl	8009238 <USBD_Get_USB_Status>
 80091f8:	4603      	mov	r3, r0
 80091fa:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80091fc:	7dbb      	ldrb	r3, [r7, #22]
}
 80091fe:	4618      	mov	r0, r3
 8009200:	3718      	adds	r7, #24
 8009202:	46bd      	mov	sp, r7
 8009204:	bd80      	pop	{r7, pc}
	...

08009208 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009208:	b480      	push	{r7}
 800920a:	b083      	sub	sp, #12
 800920c:	af00      	add	r7, sp, #0
 800920e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_DFU_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009210:	4b03      	ldr	r3, [pc, #12]	@ (8009220 <USBD_static_malloc+0x18>)
}
 8009212:	4618      	mov	r0, r3
 8009214:	370c      	adds	r7, #12
 8009216:	46bd      	mov	sp, r7
 8009218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800921c:	4770      	bx	lr
 800921e:	bf00      	nop
 8009220:	20000cec 	.word	0x20000cec

08009224 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009224:	b480      	push	{r7}
 8009226:	b083      	sub	sp, #12
 8009228:	af00      	add	r7, sp, #0
 800922a:	6078      	str	r0, [r7, #4]

}
 800922c:	bf00      	nop
 800922e:	370c      	adds	r7, #12
 8009230:	46bd      	mov	sp, r7
 8009232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009236:	4770      	bx	lr

08009238 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009238:	b480      	push	{r7}
 800923a:	b085      	sub	sp, #20
 800923c:	af00      	add	r7, sp, #0
 800923e:	4603      	mov	r3, r0
 8009240:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009242:	2300      	movs	r3, #0
 8009244:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009246:	79fb      	ldrb	r3, [r7, #7]
 8009248:	2b03      	cmp	r3, #3
 800924a:	d817      	bhi.n	800927c <USBD_Get_USB_Status+0x44>
 800924c:	a201      	add	r2, pc, #4	@ (adr r2, 8009254 <USBD_Get_USB_Status+0x1c>)
 800924e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009252:	bf00      	nop
 8009254:	08009265 	.word	0x08009265
 8009258:	0800926b 	.word	0x0800926b
 800925c:	08009271 	.word	0x08009271
 8009260:	08009277 	.word	0x08009277
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009264:	2300      	movs	r3, #0
 8009266:	73fb      	strb	r3, [r7, #15]
    break;
 8009268:	e00b      	b.n	8009282 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800926a:	2303      	movs	r3, #3
 800926c:	73fb      	strb	r3, [r7, #15]
    break;
 800926e:	e008      	b.n	8009282 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009270:	2301      	movs	r3, #1
 8009272:	73fb      	strb	r3, [r7, #15]
    break;
 8009274:	e005      	b.n	8009282 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009276:	2303      	movs	r3, #3
 8009278:	73fb      	strb	r3, [r7, #15]
    break;
 800927a:	e002      	b.n	8009282 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800927c:	2303      	movs	r3, #3
 800927e:	73fb      	strb	r3, [r7, #15]
    break;
 8009280:	bf00      	nop
  }
  return usb_status;
 8009282:	7bfb      	ldrb	r3, [r7, #15]
}
 8009284:	4618      	mov	r0, r3
 8009286:	3714      	adds	r7, #20
 8009288:	46bd      	mov	sp, r7
 800928a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800928e:	4770      	bx	lr

08009290 <std>:
 8009290:	2300      	movs	r3, #0
 8009292:	b510      	push	{r4, lr}
 8009294:	4604      	mov	r4, r0
 8009296:	e9c0 3300 	strd	r3, r3, [r0]
 800929a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800929e:	6083      	str	r3, [r0, #8]
 80092a0:	8181      	strh	r1, [r0, #12]
 80092a2:	6643      	str	r3, [r0, #100]	@ 0x64
 80092a4:	81c2      	strh	r2, [r0, #14]
 80092a6:	6183      	str	r3, [r0, #24]
 80092a8:	4619      	mov	r1, r3
 80092aa:	2208      	movs	r2, #8
 80092ac:	305c      	adds	r0, #92	@ 0x5c
 80092ae:	f000 f9e7 	bl	8009680 <memset>
 80092b2:	4b0d      	ldr	r3, [pc, #52]	@ (80092e8 <std+0x58>)
 80092b4:	6263      	str	r3, [r4, #36]	@ 0x24
 80092b6:	4b0d      	ldr	r3, [pc, #52]	@ (80092ec <std+0x5c>)
 80092b8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80092ba:	4b0d      	ldr	r3, [pc, #52]	@ (80092f0 <std+0x60>)
 80092bc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80092be:	4b0d      	ldr	r3, [pc, #52]	@ (80092f4 <std+0x64>)
 80092c0:	6323      	str	r3, [r4, #48]	@ 0x30
 80092c2:	4b0d      	ldr	r3, [pc, #52]	@ (80092f8 <std+0x68>)
 80092c4:	6224      	str	r4, [r4, #32]
 80092c6:	429c      	cmp	r4, r3
 80092c8:	d006      	beq.n	80092d8 <std+0x48>
 80092ca:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80092ce:	4294      	cmp	r4, r2
 80092d0:	d002      	beq.n	80092d8 <std+0x48>
 80092d2:	33d0      	adds	r3, #208	@ 0xd0
 80092d4:	429c      	cmp	r4, r3
 80092d6:	d105      	bne.n	80092e4 <std+0x54>
 80092d8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80092dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80092e0:	f000 ba46 	b.w	8009770 <__retarget_lock_init_recursive>
 80092e4:	bd10      	pop	{r4, pc}
 80092e6:	bf00      	nop
 80092e8:	080094d1 	.word	0x080094d1
 80092ec:	080094f3 	.word	0x080094f3
 80092f0:	0800952b 	.word	0x0800952b
 80092f4:	0800954f 	.word	0x0800954f
 80092f8:	2000110c 	.word	0x2000110c

080092fc <stdio_exit_handler>:
 80092fc:	4a02      	ldr	r2, [pc, #8]	@ (8009308 <stdio_exit_handler+0xc>)
 80092fe:	4903      	ldr	r1, [pc, #12]	@ (800930c <stdio_exit_handler+0x10>)
 8009300:	4803      	ldr	r0, [pc, #12]	@ (8009310 <stdio_exit_handler+0x14>)
 8009302:	f000 b869 	b.w	80093d8 <_fwalk_sglue>
 8009306:	bf00      	nop
 8009308:	200000dc 	.word	0x200000dc
 800930c:	08009a71 	.word	0x08009a71
 8009310:	200000ec 	.word	0x200000ec

08009314 <cleanup_stdio>:
 8009314:	6841      	ldr	r1, [r0, #4]
 8009316:	4b0c      	ldr	r3, [pc, #48]	@ (8009348 <cleanup_stdio+0x34>)
 8009318:	4299      	cmp	r1, r3
 800931a:	b510      	push	{r4, lr}
 800931c:	4604      	mov	r4, r0
 800931e:	d001      	beq.n	8009324 <cleanup_stdio+0x10>
 8009320:	f000 fba6 	bl	8009a70 <_fflush_r>
 8009324:	68a1      	ldr	r1, [r4, #8]
 8009326:	4b09      	ldr	r3, [pc, #36]	@ (800934c <cleanup_stdio+0x38>)
 8009328:	4299      	cmp	r1, r3
 800932a:	d002      	beq.n	8009332 <cleanup_stdio+0x1e>
 800932c:	4620      	mov	r0, r4
 800932e:	f000 fb9f 	bl	8009a70 <_fflush_r>
 8009332:	68e1      	ldr	r1, [r4, #12]
 8009334:	4b06      	ldr	r3, [pc, #24]	@ (8009350 <cleanup_stdio+0x3c>)
 8009336:	4299      	cmp	r1, r3
 8009338:	d004      	beq.n	8009344 <cleanup_stdio+0x30>
 800933a:	4620      	mov	r0, r4
 800933c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009340:	f000 bb96 	b.w	8009a70 <_fflush_r>
 8009344:	bd10      	pop	{r4, pc}
 8009346:	bf00      	nop
 8009348:	2000110c 	.word	0x2000110c
 800934c:	20001174 	.word	0x20001174
 8009350:	200011dc 	.word	0x200011dc

08009354 <global_stdio_init.part.0>:
 8009354:	b510      	push	{r4, lr}
 8009356:	4b0b      	ldr	r3, [pc, #44]	@ (8009384 <global_stdio_init.part.0+0x30>)
 8009358:	4c0b      	ldr	r4, [pc, #44]	@ (8009388 <global_stdio_init.part.0+0x34>)
 800935a:	4a0c      	ldr	r2, [pc, #48]	@ (800938c <global_stdio_init.part.0+0x38>)
 800935c:	601a      	str	r2, [r3, #0]
 800935e:	4620      	mov	r0, r4
 8009360:	2200      	movs	r2, #0
 8009362:	2104      	movs	r1, #4
 8009364:	f7ff ff94 	bl	8009290 <std>
 8009368:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800936c:	2201      	movs	r2, #1
 800936e:	2109      	movs	r1, #9
 8009370:	f7ff ff8e 	bl	8009290 <std>
 8009374:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009378:	2202      	movs	r2, #2
 800937a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800937e:	2112      	movs	r1, #18
 8009380:	f7ff bf86 	b.w	8009290 <std>
 8009384:	20001244 	.word	0x20001244
 8009388:	2000110c 	.word	0x2000110c
 800938c:	080092fd 	.word	0x080092fd

08009390 <__sfp_lock_acquire>:
 8009390:	4801      	ldr	r0, [pc, #4]	@ (8009398 <__sfp_lock_acquire+0x8>)
 8009392:	f000 b9ee 	b.w	8009772 <__retarget_lock_acquire_recursive>
 8009396:	bf00      	nop
 8009398:	2000124d 	.word	0x2000124d

0800939c <__sfp_lock_release>:
 800939c:	4801      	ldr	r0, [pc, #4]	@ (80093a4 <__sfp_lock_release+0x8>)
 800939e:	f000 b9e9 	b.w	8009774 <__retarget_lock_release_recursive>
 80093a2:	bf00      	nop
 80093a4:	2000124d 	.word	0x2000124d

080093a8 <__sinit>:
 80093a8:	b510      	push	{r4, lr}
 80093aa:	4604      	mov	r4, r0
 80093ac:	f7ff fff0 	bl	8009390 <__sfp_lock_acquire>
 80093b0:	6a23      	ldr	r3, [r4, #32]
 80093b2:	b11b      	cbz	r3, 80093bc <__sinit+0x14>
 80093b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80093b8:	f7ff bff0 	b.w	800939c <__sfp_lock_release>
 80093bc:	4b04      	ldr	r3, [pc, #16]	@ (80093d0 <__sinit+0x28>)
 80093be:	6223      	str	r3, [r4, #32]
 80093c0:	4b04      	ldr	r3, [pc, #16]	@ (80093d4 <__sinit+0x2c>)
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d1f5      	bne.n	80093b4 <__sinit+0xc>
 80093c8:	f7ff ffc4 	bl	8009354 <global_stdio_init.part.0>
 80093cc:	e7f2      	b.n	80093b4 <__sinit+0xc>
 80093ce:	bf00      	nop
 80093d0:	08009315 	.word	0x08009315
 80093d4:	20001244 	.word	0x20001244

080093d8 <_fwalk_sglue>:
 80093d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80093dc:	4607      	mov	r7, r0
 80093de:	4688      	mov	r8, r1
 80093e0:	4614      	mov	r4, r2
 80093e2:	2600      	movs	r6, #0
 80093e4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80093e8:	f1b9 0901 	subs.w	r9, r9, #1
 80093ec:	d505      	bpl.n	80093fa <_fwalk_sglue+0x22>
 80093ee:	6824      	ldr	r4, [r4, #0]
 80093f0:	2c00      	cmp	r4, #0
 80093f2:	d1f7      	bne.n	80093e4 <_fwalk_sglue+0xc>
 80093f4:	4630      	mov	r0, r6
 80093f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80093fa:	89ab      	ldrh	r3, [r5, #12]
 80093fc:	2b01      	cmp	r3, #1
 80093fe:	d907      	bls.n	8009410 <_fwalk_sglue+0x38>
 8009400:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009404:	3301      	adds	r3, #1
 8009406:	d003      	beq.n	8009410 <_fwalk_sglue+0x38>
 8009408:	4629      	mov	r1, r5
 800940a:	4638      	mov	r0, r7
 800940c:	47c0      	blx	r8
 800940e:	4306      	orrs	r6, r0
 8009410:	3568      	adds	r5, #104	@ 0x68
 8009412:	e7e9      	b.n	80093e8 <_fwalk_sglue+0x10>

08009414 <_puts_r>:
 8009414:	6a03      	ldr	r3, [r0, #32]
 8009416:	b570      	push	{r4, r5, r6, lr}
 8009418:	6884      	ldr	r4, [r0, #8]
 800941a:	4605      	mov	r5, r0
 800941c:	460e      	mov	r6, r1
 800941e:	b90b      	cbnz	r3, 8009424 <_puts_r+0x10>
 8009420:	f7ff ffc2 	bl	80093a8 <__sinit>
 8009424:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009426:	07db      	lsls	r3, r3, #31
 8009428:	d405      	bmi.n	8009436 <_puts_r+0x22>
 800942a:	89a3      	ldrh	r3, [r4, #12]
 800942c:	0598      	lsls	r0, r3, #22
 800942e:	d402      	bmi.n	8009436 <_puts_r+0x22>
 8009430:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009432:	f000 f99e 	bl	8009772 <__retarget_lock_acquire_recursive>
 8009436:	89a3      	ldrh	r3, [r4, #12]
 8009438:	0719      	lsls	r1, r3, #28
 800943a:	d502      	bpl.n	8009442 <_puts_r+0x2e>
 800943c:	6923      	ldr	r3, [r4, #16]
 800943e:	2b00      	cmp	r3, #0
 8009440:	d135      	bne.n	80094ae <_puts_r+0x9a>
 8009442:	4621      	mov	r1, r4
 8009444:	4628      	mov	r0, r5
 8009446:	f000 f8c5 	bl	80095d4 <__swsetup_r>
 800944a:	b380      	cbz	r0, 80094ae <_puts_r+0x9a>
 800944c:	f04f 35ff 	mov.w	r5, #4294967295
 8009450:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009452:	07da      	lsls	r2, r3, #31
 8009454:	d405      	bmi.n	8009462 <_puts_r+0x4e>
 8009456:	89a3      	ldrh	r3, [r4, #12]
 8009458:	059b      	lsls	r3, r3, #22
 800945a:	d402      	bmi.n	8009462 <_puts_r+0x4e>
 800945c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800945e:	f000 f989 	bl	8009774 <__retarget_lock_release_recursive>
 8009462:	4628      	mov	r0, r5
 8009464:	bd70      	pop	{r4, r5, r6, pc}
 8009466:	2b00      	cmp	r3, #0
 8009468:	da04      	bge.n	8009474 <_puts_r+0x60>
 800946a:	69a2      	ldr	r2, [r4, #24]
 800946c:	429a      	cmp	r2, r3
 800946e:	dc17      	bgt.n	80094a0 <_puts_r+0x8c>
 8009470:	290a      	cmp	r1, #10
 8009472:	d015      	beq.n	80094a0 <_puts_r+0x8c>
 8009474:	6823      	ldr	r3, [r4, #0]
 8009476:	1c5a      	adds	r2, r3, #1
 8009478:	6022      	str	r2, [r4, #0]
 800947a:	7019      	strb	r1, [r3, #0]
 800947c:	68a3      	ldr	r3, [r4, #8]
 800947e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009482:	3b01      	subs	r3, #1
 8009484:	60a3      	str	r3, [r4, #8]
 8009486:	2900      	cmp	r1, #0
 8009488:	d1ed      	bne.n	8009466 <_puts_r+0x52>
 800948a:	2b00      	cmp	r3, #0
 800948c:	da11      	bge.n	80094b2 <_puts_r+0x9e>
 800948e:	4622      	mov	r2, r4
 8009490:	210a      	movs	r1, #10
 8009492:	4628      	mov	r0, r5
 8009494:	f000 f85f 	bl	8009556 <__swbuf_r>
 8009498:	3001      	adds	r0, #1
 800949a:	d0d7      	beq.n	800944c <_puts_r+0x38>
 800949c:	250a      	movs	r5, #10
 800949e:	e7d7      	b.n	8009450 <_puts_r+0x3c>
 80094a0:	4622      	mov	r2, r4
 80094a2:	4628      	mov	r0, r5
 80094a4:	f000 f857 	bl	8009556 <__swbuf_r>
 80094a8:	3001      	adds	r0, #1
 80094aa:	d1e7      	bne.n	800947c <_puts_r+0x68>
 80094ac:	e7ce      	b.n	800944c <_puts_r+0x38>
 80094ae:	3e01      	subs	r6, #1
 80094b0:	e7e4      	b.n	800947c <_puts_r+0x68>
 80094b2:	6823      	ldr	r3, [r4, #0]
 80094b4:	1c5a      	adds	r2, r3, #1
 80094b6:	6022      	str	r2, [r4, #0]
 80094b8:	220a      	movs	r2, #10
 80094ba:	701a      	strb	r2, [r3, #0]
 80094bc:	e7ee      	b.n	800949c <_puts_r+0x88>
	...

080094c0 <puts>:
 80094c0:	4b02      	ldr	r3, [pc, #8]	@ (80094cc <puts+0xc>)
 80094c2:	4601      	mov	r1, r0
 80094c4:	6818      	ldr	r0, [r3, #0]
 80094c6:	f7ff bfa5 	b.w	8009414 <_puts_r>
 80094ca:	bf00      	nop
 80094cc:	200000e8 	.word	0x200000e8

080094d0 <__sread>:
 80094d0:	b510      	push	{r4, lr}
 80094d2:	460c      	mov	r4, r1
 80094d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094d8:	f000 f8fc 	bl	80096d4 <_read_r>
 80094dc:	2800      	cmp	r0, #0
 80094de:	bfab      	itete	ge
 80094e0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80094e2:	89a3      	ldrhlt	r3, [r4, #12]
 80094e4:	181b      	addge	r3, r3, r0
 80094e6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80094ea:	bfac      	ite	ge
 80094ec:	6563      	strge	r3, [r4, #84]	@ 0x54
 80094ee:	81a3      	strhlt	r3, [r4, #12]
 80094f0:	bd10      	pop	{r4, pc}

080094f2 <__swrite>:
 80094f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80094f6:	461f      	mov	r7, r3
 80094f8:	898b      	ldrh	r3, [r1, #12]
 80094fa:	05db      	lsls	r3, r3, #23
 80094fc:	4605      	mov	r5, r0
 80094fe:	460c      	mov	r4, r1
 8009500:	4616      	mov	r6, r2
 8009502:	d505      	bpl.n	8009510 <__swrite+0x1e>
 8009504:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009508:	2302      	movs	r3, #2
 800950a:	2200      	movs	r2, #0
 800950c:	f000 f8d0 	bl	80096b0 <_lseek_r>
 8009510:	89a3      	ldrh	r3, [r4, #12]
 8009512:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009516:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800951a:	81a3      	strh	r3, [r4, #12]
 800951c:	4632      	mov	r2, r6
 800951e:	463b      	mov	r3, r7
 8009520:	4628      	mov	r0, r5
 8009522:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009526:	f000 b8e7 	b.w	80096f8 <_write_r>

0800952a <__sseek>:
 800952a:	b510      	push	{r4, lr}
 800952c:	460c      	mov	r4, r1
 800952e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009532:	f000 f8bd 	bl	80096b0 <_lseek_r>
 8009536:	1c43      	adds	r3, r0, #1
 8009538:	89a3      	ldrh	r3, [r4, #12]
 800953a:	bf15      	itete	ne
 800953c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800953e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009542:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009546:	81a3      	strheq	r3, [r4, #12]
 8009548:	bf18      	it	ne
 800954a:	81a3      	strhne	r3, [r4, #12]
 800954c:	bd10      	pop	{r4, pc}

0800954e <__sclose>:
 800954e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009552:	f000 b89d 	b.w	8009690 <_close_r>

08009556 <__swbuf_r>:
 8009556:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009558:	460e      	mov	r6, r1
 800955a:	4614      	mov	r4, r2
 800955c:	4605      	mov	r5, r0
 800955e:	b118      	cbz	r0, 8009568 <__swbuf_r+0x12>
 8009560:	6a03      	ldr	r3, [r0, #32]
 8009562:	b90b      	cbnz	r3, 8009568 <__swbuf_r+0x12>
 8009564:	f7ff ff20 	bl	80093a8 <__sinit>
 8009568:	69a3      	ldr	r3, [r4, #24]
 800956a:	60a3      	str	r3, [r4, #8]
 800956c:	89a3      	ldrh	r3, [r4, #12]
 800956e:	071a      	lsls	r2, r3, #28
 8009570:	d501      	bpl.n	8009576 <__swbuf_r+0x20>
 8009572:	6923      	ldr	r3, [r4, #16]
 8009574:	b943      	cbnz	r3, 8009588 <__swbuf_r+0x32>
 8009576:	4621      	mov	r1, r4
 8009578:	4628      	mov	r0, r5
 800957a:	f000 f82b 	bl	80095d4 <__swsetup_r>
 800957e:	b118      	cbz	r0, 8009588 <__swbuf_r+0x32>
 8009580:	f04f 37ff 	mov.w	r7, #4294967295
 8009584:	4638      	mov	r0, r7
 8009586:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009588:	6823      	ldr	r3, [r4, #0]
 800958a:	6922      	ldr	r2, [r4, #16]
 800958c:	1a98      	subs	r0, r3, r2
 800958e:	6963      	ldr	r3, [r4, #20]
 8009590:	b2f6      	uxtb	r6, r6
 8009592:	4283      	cmp	r3, r0
 8009594:	4637      	mov	r7, r6
 8009596:	dc05      	bgt.n	80095a4 <__swbuf_r+0x4e>
 8009598:	4621      	mov	r1, r4
 800959a:	4628      	mov	r0, r5
 800959c:	f000 fa68 	bl	8009a70 <_fflush_r>
 80095a0:	2800      	cmp	r0, #0
 80095a2:	d1ed      	bne.n	8009580 <__swbuf_r+0x2a>
 80095a4:	68a3      	ldr	r3, [r4, #8]
 80095a6:	3b01      	subs	r3, #1
 80095a8:	60a3      	str	r3, [r4, #8]
 80095aa:	6823      	ldr	r3, [r4, #0]
 80095ac:	1c5a      	adds	r2, r3, #1
 80095ae:	6022      	str	r2, [r4, #0]
 80095b0:	701e      	strb	r6, [r3, #0]
 80095b2:	6962      	ldr	r2, [r4, #20]
 80095b4:	1c43      	adds	r3, r0, #1
 80095b6:	429a      	cmp	r2, r3
 80095b8:	d004      	beq.n	80095c4 <__swbuf_r+0x6e>
 80095ba:	89a3      	ldrh	r3, [r4, #12]
 80095bc:	07db      	lsls	r3, r3, #31
 80095be:	d5e1      	bpl.n	8009584 <__swbuf_r+0x2e>
 80095c0:	2e0a      	cmp	r6, #10
 80095c2:	d1df      	bne.n	8009584 <__swbuf_r+0x2e>
 80095c4:	4621      	mov	r1, r4
 80095c6:	4628      	mov	r0, r5
 80095c8:	f000 fa52 	bl	8009a70 <_fflush_r>
 80095cc:	2800      	cmp	r0, #0
 80095ce:	d0d9      	beq.n	8009584 <__swbuf_r+0x2e>
 80095d0:	e7d6      	b.n	8009580 <__swbuf_r+0x2a>
	...

080095d4 <__swsetup_r>:
 80095d4:	b538      	push	{r3, r4, r5, lr}
 80095d6:	4b29      	ldr	r3, [pc, #164]	@ (800967c <__swsetup_r+0xa8>)
 80095d8:	4605      	mov	r5, r0
 80095da:	6818      	ldr	r0, [r3, #0]
 80095dc:	460c      	mov	r4, r1
 80095de:	b118      	cbz	r0, 80095e8 <__swsetup_r+0x14>
 80095e0:	6a03      	ldr	r3, [r0, #32]
 80095e2:	b90b      	cbnz	r3, 80095e8 <__swsetup_r+0x14>
 80095e4:	f7ff fee0 	bl	80093a8 <__sinit>
 80095e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80095ec:	0719      	lsls	r1, r3, #28
 80095ee:	d422      	bmi.n	8009636 <__swsetup_r+0x62>
 80095f0:	06da      	lsls	r2, r3, #27
 80095f2:	d407      	bmi.n	8009604 <__swsetup_r+0x30>
 80095f4:	2209      	movs	r2, #9
 80095f6:	602a      	str	r2, [r5, #0]
 80095f8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80095fc:	81a3      	strh	r3, [r4, #12]
 80095fe:	f04f 30ff 	mov.w	r0, #4294967295
 8009602:	e033      	b.n	800966c <__swsetup_r+0x98>
 8009604:	0758      	lsls	r0, r3, #29
 8009606:	d512      	bpl.n	800962e <__swsetup_r+0x5a>
 8009608:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800960a:	b141      	cbz	r1, 800961e <__swsetup_r+0x4a>
 800960c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009610:	4299      	cmp	r1, r3
 8009612:	d002      	beq.n	800961a <__swsetup_r+0x46>
 8009614:	4628      	mov	r0, r5
 8009616:	f000 f8af 	bl	8009778 <_free_r>
 800961a:	2300      	movs	r3, #0
 800961c:	6363      	str	r3, [r4, #52]	@ 0x34
 800961e:	89a3      	ldrh	r3, [r4, #12]
 8009620:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009624:	81a3      	strh	r3, [r4, #12]
 8009626:	2300      	movs	r3, #0
 8009628:	6063      	str	r3, [r4, #4]
 800962a:	6923      	ldr	r3, [r4, #16]
 800962c:	6023      	str	r3, [r4, #0]
 800962e:	89a3      	ldrh	r3, [r4, #12]
 8009630:	f043 0308 	orr.w	r3, r3, #8
 8009634:	81a3      	strh	r3, [r4, #12]
 8009636:	6923      	ldr	r3, [r4, #16]
 8009638:	b94b      	cbnz	r3, 800964e <__swsetup_r+0x7a>
 800963a:	89a3      	ldrh	r3, [r4, #12]
 800963c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009640:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009644:	d003      	beq.n	800964e <__swsetup_r+0x7a>
 8009646:	4621      	mov	r1, r4
 8009648:	4628      	mov	r0, r5
 800964a:	f000 fa5f 	bl	8009b0c <__smakebuf_r>
 800964e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009652:	f013 0201 	ands.w	r2, r3, #1
 8009656:	d00a      	beq.n	800966e <__swsetup_r+0x9a>
 8009658:	2200      	movs	r2, #0
 800965a:	60a2      	str	r2, [r4, #8]
 800965c:	6962      	ldr	r2, [r4, #20]
 800965e:	4252      	negs	r2, r2
 8009660:	61a2      	str	r2, [r4, #24]
 8009662:	6922      	ldr	r2, [r4, #16]
 8009664:	b942      	cbnz	r2, 8009678 <__swsetup_r+0xa4>
 8009666:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800966a:	d1c5      	bne.n	80095f8 <__swsetup_r+0x24>
 800966c:	bd38      	pop	{r3, r4, r5, pc}
 800966e:	0799      	lsls	r1, r3, #30
 8009670:	bf58      	it	pl
 8009672:	6962      	ldrpl	r2, [r4, #20]
 8009674:	60a2      	str	r2, [r4, #8]
 8009676:	e7f4      	b.n	8009662 <__swsetup_r+0x8e>
 8009678:	2000      	movs	r0, #0
 800967a:	e7f7      	b.n	800966c <__swsetup_r+0x98>
 800967c:	200000e8 	.word	0x200000e8

08009680 <memset>:
 8009680:	4402      	add	r2, r0
 8009682:	4603      	mov	r3, r0
 8009684:	4293      	cmp	r3, r2
 8009686:	d100      	bne.n	800968a <memset+0xa>
 8009688:	4770      	bx	lr
 800968a:	f803 1b01 	strb.w	r1, [r3], #1
 800968e:	e7f9      	b.n	8009684 <memset+0x4>

08009690 <_close_r>:
 8009690:	b538      	push	{r3, r4, r5, lr}
 8009692:	4d06      	ldr	r5, [pc, #24]	@ (80096ac <_close_r+0x1c>)
 8009694:	2300      	movs	r3, #0
 8009696:	4604      	mov	r4, r0
 8009698:	4608      	mov	r0, r1
 800969a:	602b      	str	r3, [r5, #0]
 800969c:	f7f7 fd27 	bl	80010ee <_close>
 80096a0:	1c43      	adds	r3, r0, #1
 80096a2:	d102      	bne.n	80096aa <_close_r+0x1a>
 80096a4:	682b      	ldr	r3, [r5, #0]
 80096a6:	b103      	cbz	r3, 80096aa <_close_r+0x1a>
 80096a8:	6023      	str	r3, [r4, #0]
 80096aa:	bd38      	pop	{r3, r4, r5, pc}
 80096ac:	20001248 	.word	0x20001248

080096b0 <_lseek_r>:
 80096b0:	b538      	push	{r3, r4, r5, lr}
 80096b2:	4d07      	ldr	r5, [pc, #28]	@ (80096d0 <_lseek_r+0x20>)
 80096b4:	4604      	mov	r4, r0
 80096b6:	4608      	mov	r0, r1
 80096b8:	4611      	mov	r1, r2
 80096ba:	2200      	movs	r2, #0
 80096bc:	602a      	str	r2, [r5, #0]
 80096be:	461a      	mov	r2, r3
 80096c0:	f7f7 fd3c 	bl	800113c <_lseek>
 80096c4:	1c43      	adds	r3, r0, #1
 80096c6:	d102      	bne.n	80096ce <_lseek_r+0x1e>
 80096c8:	682b      	ldr	r3, [r5, #0]
 80096ca:	b103      	cbz	r3, 80096ce <_lseek_r+0x1e>
 80096cc:	6023      	str	r3, [r4, #0]
 80096ce:	bd38      	pop	{r3, r4, r5, pc}
 80096d0:	20001248 	.word	0x20001248

080096d4 <_read_r>:
 80096d4:	b538      	push	{r3, r4, r5, lr}
 80096d6:	4d07      	ldr	r5, [pc, #28]	@ (80096f4 <_read_r+0x20>)
 80096d8:	4604      	mov	r4, r0
 80096da:	4608      	mov	r0, r1
 80096dc:	4611      	mov	r1, r2
 80096de:	2200      	movs	r2, #0
 80096e0:	602a      	str	r2, [r5, #0]
 80096e2:	461a      	mov	r2, r3
 80096e4:	f7f7 fcca 	bl	800107c <_read>
 80096e8:	1c43      	adds	r3, r0, #1
 80096ea:	d102      	bne.n	80096f2 <_read_r+0x1e>
 80096ec:	682b      	ldr	r3, [r5, #0]
 80096ee:	b103      	cbz	r3, 80096f2 <_read_r+0x1e>
 80096f0:	6023      	str	r3, [r4, #0]
 80096f2:	bd38      	pop	{r3, r4, r5, pc}
 80096f4:	20001248 	.word	0x20001248

080096f8 <_write_r>:
 80096f8:	b538      	push	{r3, r4, r5, lr}
 80096fa:	4d07      	ldr	r5, [pc, #28]	@ (8009718 <_write_r+0x20>)
 80096fc:	4604      	mov	r4, r0
 80096fe:	4608      	mov	r0, r1
 8009700:	4611      	mov	r1, r2
 8009702:	2200      	movs	r2, #0
 8009704:	602a      	str	r2, [r5, #0]
 8009706:	461a      	mov	r2, r3
 8009708:	f7f7 fcd5 	bl	80010b6 <_write>
 800970c:	1c43      	adds	r3, r0, #1
 800970e:	d102      	bne.n	8009716 <_write_r+0x1e>
 8009710:	682b      	ldr	r3, [r5, #0]
 8009712:	b103      	cbz	r3, 8009716 <_write_r+0x1e>
 8009714:	6023      	str	r3, [r4, #0]
 8009716:	bd38      	pop	{r3, r4, r5, pc}
 8009718:	20001248 	.word	0x20001248

0800971c <__errno>:
 800971c:	4b01      	ldr	r3, [pc, #4]	@ (8009724 <__errno+0x8>)
 800971e:	6818      	ldr	r0, [r3, #0]
 8009720:	4770      	bx	lr
 8009722:	bf00      	nop
 8009724:	200000e8 	.word	0x200000e8

08009728 <__libc_init_array>:
 8009728:	b570      	push	{r4, r5, r6, lr}
 800972a:	4d0d      	ldr	r5, [pc, #52]	@ (8009760 <__libc_init_array+0x38>)
 800972c:	4c0d      	ldr	r4, [pc, #52]	@ (8009764 <__libc_init_array+0x3c>)
 800972e:	1b64      	subs	r4, r4, r5
 8009730:	10a4      	asrs	r4, r4, #2
 8009732:	2600      	movs	r6, #0
 8009734:	42a6      	cmp	r6, r4
 8009736:	d109      	bne.n	800974c <__libc_init_array+0x24>
 8009738:	4d0b      	ldr	r5, [pc, #44]	@ (8009768 <__libc_init_array+0x40>)
 800973a:	4c0c      	ldr	r4, [pc, #48]	@ (800976c <__libc_init_array+0x44>)
 800973c:	f000 fa54 	bl	8009be8 <_init>
 8009740:	1b64      	subs	r4, r4, r5
 8009742:	10a4      	asrs	r4, r4, #2
 8009744:	2600      	movs	r6, #0
 8009746:	42a6      	cmp	r6, r4
 8009748:	d105      	bne.n	8009756 <__libc_init_array+0x2e>
 800974a:	bd70      	pop	{r4, r5, r6, pc}
 800974c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009750:	4798      	blx	r3
 8009752:	3601      	adds	r6, #1
 8009754:	e7ee      	b.n	8009734 <__libc_init_array+0xc>
 8009756:	f855 3b04 	ldr.w	r3, [r5], #4
 800975a:	4798      	blx	r3
 800975c:	3601      	adds	r6, #1
 800975e:	e7f2      	b.n	8009746 <__libc_init_array+0x1e>
 8009760:	08009e68 	.word	0x08009e68
 8009764:	08009e68 	.word	0x08009e68
 8009768:	08009e68 	.word	0x08009e68
 800976c:	08009e6c 	.word	0x08009e6c

08009770 <__retarget_lock_init_recursive>:
 8009770:	4770      	bx	lr

08009772 <__retarget_lock_acquire_recursive>:
 8009772:	4770      	bx	lr

08009774 <__retarget_lock_release_recursive>:
 8009774:	4770      	bx	lr
	...

08009778 <_free_r>:
 8009778:	b538      	push	{r3, r4, r5, lr}
 800977a:	4605      	mov	r5, r0
 800977c:	2900      	cmp	r1, #0
 800977e:	d041      	beq.n	8009804 <_free_r+0x8c>
 8009780:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009784:	1f0c      	subs	r4, r1, #4
 8009786:	2b00      	cmp	r3, #0
 8009788:	bfb8      	it	lt
 800978a:	18e4      	addlt	r4, r4, r3
 800978c:	f000 f8e0 	bl	8009950 <__malloc_lock>
 8009790:	4a1d      	ldr	r2, [pc, #116]	@ (8009808 <_free_r+0x90>)
 8009792:	6813      	ldr	r3, [r2, #0]
 8009794:	b933      	cbnz	r3, 80097a4 <_free_r+0x2c>
 8009796:	6063      	str	r3, [r4, #4]
 8009798:	6014      	str	r4, [r2, #0]
 800979a:	4628      	mov	r0, r5
 800979c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80097a0:	f000 b8dc 	b.w	800995c <__malloc_unlock>
 80097a4:	42a3      	cmp	r3, r4
 80097a6:	d908      	bls.n	80097ba <_free_r+0x42>
 80097a8:	6820      	ldr	r0, [r4, #0]
 80097aa:	1821      	adds	r1, r4, r0
 80097ac:	428b      	cmp	r3, r1
 80097ae:	bf01      	itttt	eq
 80097b0:	6819      	ldreq	r1, [r3, #0]
 80097b2:	685b      	ldreq	r3, [r3, #4]
 80097b4:	1809      	addeq	r1, r1, r0
 80097b6:	6021      	streq	r1, [r4, #0]
 80097b8:	e7ed      	b.n	8009796 <_free_r+0x1e>
 80097ba:	461a      	mov	r2, r3
 80097bc:	685b      	ldr	r3, [r3, #4]
 80097be:	b10b      	cbz	r3, 80097c4 <_free_r+0x4c>
 80097c0:	42a3      	cmp	r3, r4
 80097c2:	d9fa      	bls.n	80097ba <_free_r+0x42>
 80097c4:	6811      	ldr	r1, [r2, #0]
 80097c6:	1850      	adds	r0, r2, r1
 80097c8:	42a0      	cmp	r0, r4
 80097ca:	d10b      	bne.n	80097e4 <_free_r+0x6c>
 80097cc:	6820      	ldr	r0, [r4, #0]
 80097ce:	4401      	add	r1, r0
 80097d0:	1850      	adds	r0, r2, r1
 80097d2:	4283      	cmp	r3, r0
 80097d4:	6011      	str	r1, [r2, #0]
 80097d6:	d1e0      	bne.n	800979a <_free_r+0x22>
 80097d8:	6818      	ldr	r0, [r3, #0]
 80097da:	685b      	ldr	r3, [r3, #4]
 80097dc:	6053      	str	r3, [r2, #4]
 80097de:	4408      	add	r0, r1
 80097e0:	6010      	str	r0, [r2, #0]
 80097e2:	e7da      	b.n	800979a <_free_r+0x22>
 80097e4:	d902      	bls.n	80097ec <_free_r+0x74>
 80097e6:	230c      	movs	r3, #12
 80097e8:	602b      	str	r3, [r5, #0]
 80097ea:	e7d6      	b.n	800979a <_free_r+0x22>
 80097ec:	6820      	ldr	r0, [r4, #0]
 80097ee:	1821      	adds	r1, r4, r0
 80097f0:	428b      	cmp	r3, r1
 80097f2:	bf04      	itt	eq
 80097f4:	6819      	ldreq	r1, [r3, #0]
 80097f6:	685b      	ldreq	r3, [r3, #4]
 80097f8:	6063      	str	r3, [r4, #4]
 80097fa:	bf04      	itt	eq
 80097fc:	1809      	addeq	r1, r1, r0
 80097fe:	6021      	streq	r1, [r4, #0]
 8009800:	6054      	str	r4, [r2, #4]
 8009802:	e7ca      	b.n	800979a <_free_r+0x22>
 8009804:	bd38      	pop	{r3, r4, r5, pc}
 8009806:	bf00      	nop
 8009808:	20001254 	.word	0x20001254

0800980c <sbrk_aligned>:
 800980c:	b570      	push	{r4, r5, r6, lr}
 800980e:	4e0f      	ldr	r6, [pc, #60]	@ (800984c <sbrk_aligned+0x40>)
 8009810:	460c      	mov	r4, r1
 8009812:	6831      	ldr	r1, [r6, #0]
 8009814:	4605      	mov	r5, r0
 8009816:	b911      	cbnz	r1, 800981e <sbrk_aligned+0x12>
 8009818:	f000 f9d6 	bl	8009bc8 <_sbrk_r>
 800981c:	6030      	str	r0, [r6, #0]
 800981e:	4621      	mov	r1, r4
 8009820:	4628      	mov	r0, r5
 8009822:	f000 f9d1 	bl	8009bc8 <_sbrk_r>
 8009826:	1c43      	adds	r3, r0, #1
 8009828:	d103      	bne.n	8009832 <sbrk_aligned+0x26>
 800982a:	f04f 34ff 	mov.w	r4, #4294967295
 800982e:	4620      	mov	r0, r4
 8009830:	bd70      	pop	{r4, r5, r6, pc}
 8009832:	1cc4      	adds	r4, r0, #3
 8009834:	f024 0403 	bic.w	r4, r4, #3
 8009838:	42a0      	cmp	r0, r4
 800983a:	d0f8      	beq.n	800982e <sbrk_aligned+0x22>
 800983c:	1a21      	subs	r1, r4, r0
 800983e:	4628      	mov	r0, r5
 8009840:	f000 f9c2 	bl	8009bc8 <_sbrk_r>
 8009844:	3001      	adds	r0, #1
 8009846:	d1f2      	bne.n	800982e <sbrk_aligned+0x22>
 8009848:	e7ef      	b.n	800982a <sbrk_aligned+0x1e>
 800984a:	bf00      	nop
 800984c:	20001250 	.word	0x20001250

08009850 <_malloc_r>:
 8009850:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009854:	1ccd      	adds	r5, r1, #3
 8009856:	f025 0503 	bic.w	r5, r5, #3
 800985a:	3508      	adds	r5, #8
 800985c:	2d0c      	cmp	r5, #12
 800985e:	bf38      	it	cc
 8009860:	250c      	movcc	r5, #12
 8009862:	2d00      	cmp	r5, #0
 8009864:	4606      	mov	r6, r0
 8009866:	db01      	blt.n	800986c <_malloc_r+0x1c>
 8009868:	42a9      	cmp	r1, r5
 800986a:	d904      	bls.n	8009876 <_malloc_r+0x26>
 800986c:	230c      	movs	r3, #12
 800986e:	6033      	str	r3, [r6, #0]
 8009870:	2000      	movs	r0, #0
 8009872:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009876:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800994c <_malloc_r+0xfc>
 800987a:	f000 f869 	bl	8009950 <__malloc_lock>
 800987e:	f8d8 3000 	ldr.w	r3, [r8]
 8009882:	461c      	mov	r4, r3
 8009884:	bb44      	cbnz	r4, 80098d8 <_malloc_r+0x88>
 8009886:	4629      	mov	r1, r5
 8009888:	4630      	mov	r0, r6
 800988a:	f7ff ffbf 	bl	800980c <sbrk_aligned>
 800988e:	1c43      	adds	r3, r0, #1
 8009890:	4604      	mov	r4, r0
 8009892:	d158      	bne.n	8009946 <_malloc_r+0xf6>
 8009894:	f8d8 4000 	ldr.w	r4, [r8]
 8009898:	4627      	mov	r7, r4
 800989a:	2f00      	cmp	r7, #0
 800989c:	d143      	bne.n	8009926 <_malloc_r+0xd6>
 800989e:	2c00      	cmp	r4, #0
 80098a0:	d04b      	beq.n	800993a <_malloc_r+0xea>
 80098a2:	6823      	ldr	r3, [r4, #0]
 80098a4:	4639      	mov	r1, r7
 80098a6:	4630      	mov	r0, r6
 80098a8:	eb04 0903 	add.w	r9, r4, r3
 80098ac:	f000 f98c 	bl	8009bc8 <_sbrk_r>
 80098b0:	4581      	cmp	r9, r0
 80098b2:	d142      	bne.n	800993a <_malloc_r+0xea>
 80098b4:	6821      	ldr	r1, [r4, #0]
 80098b6:	1a6d      	subs	r5, r5, r1
 80098b8:	4629      	mov	r1, r5
 80098ba:	4630      	mov	r0, r6
 80098bc:	f7ff ffa6 	bl	800980c <sbrk_aligned>
 80098c0:	3001      	adds	r0, #1
 80098c2:	d03a      	beq.n	800993a <_malloc_r+0xea>
 80098c4:	6823      	ldr	r3, [r4, #0]
 80098c6:	442b      	add	r3, r5
 80098c8:	6023      	str	r3, [r4, #0]
 80098ca:	f8d8 3000 	ldr.w	r3, [r8]
 80098ce:	685a      	ldr	r2, [r3, #4]
 80098d0:	bb62      	cbnz	r2, 800992c <_malloc_r+0xdc>
 80098d2:	f8c8 7000 	str.w	r7, [r8]
 80098d6:	e00f      	b.n	80098f8 <_malloc_r+0xa8>
 80098d8:	6822      	ldr	r2, [r4, #0]
 80098da:	1b52      	subs	r2, r2, r5
 80098dc:	d420      	bmi.n	8009920 <_malloc_r+0xd0>
 80098de:	2a0b      	cmp	r2, #11
 80098e0:	d917      	bls.n	8009912 <_malloc_r+0xc2>
 80098e2:	1961      	adds	r1, r4, r5
 80098e4:	42a3      	cmp	r3, r4
 80098e6:	6025      	str	r5, [r4, #0]
 80098e8:	bf18      	it	ne
 80098ea:	6059      	strne	r1, [r3, #4]
 80098ec:	6863      	ldr	r3, [r4, #4]
 80098ee:	bf08      	it	eq
 80098f0:	f8c8 1000 	streq.w	r1, [r8]
 80098f4:	5162      	str	r2, [r4, r5]
 80098f6:	604b      	str	r3, [r1, #4]
 80098f8:	4630      	mov	r0, r6
 80098fa:	f000 f82f 	bl	800995c <__malloc_unlock>
 80098fe:	f104 000b 	add.w	r0, r4, #11
 8009902:	1d23      	adds	r3, r4, #4
 8009904:	f020 0007 	bic.w	r0, r0, #7
 8009908:	1ac2      	subs	r2, r0, r3
 800990a:	bf1c      	itt	ne
 800990c:	1a1b      	subne	r3, r3, r0
 800990e:	50a3      	strne	r3, [r4, r2]
 8009910:	e7af      	b.n	8009872 <_malloc_r+0x22>
 8009912:	6862      	ldr	r2, [r4, #4]
 8009914:	42a3      	cmp	r3, r4
 8009916:	bf0c      	ite	eq
 8009918:	f8c8 2000 	streq.w	r2, [r8]
 800991c:	605a      	strne	r2, [r3, #4]
 800991e:	e7eb      	b.n	80098f8 <_malloc_r+0xa8>
 8009920:	4623      	mov	r3, r4
 8009922:	6864      	ldr	r4, [r4, #4]
 8009924:	e7ae      	b.n	8009884 <_malloc_r+0x34>
 8009926:	463c      	mov	r4, r7
 8009928:	687f      	ldr	r7, [r7, #4]
 800992a:	e7b6      	b.n	800989a <_malloc_r+0x4a>
 800992c:	461a      	mov	r2, r3
 800992e:	685b      	ldr	r3, [r3, #4]
 8009930:	42a3      	cmp	r3, r4
 8009932:	d1fb      	bne.n	800992c <_malloc_r+0xdc>
 8009934:	2300      	movs	r3, #0
 8009936:	6053      	str	r3, [r2, #4]
 8009938:	e7de      	b.n	80098f8 <_malloc_r+0xa8>
 800993a:	230c      	movs	r3, #12
 800993c:	6033      	str	r3, [r6, #0]
 800993e:	4630      	mov	r0, r6
 8009940:	f000 f80c 	bl	800995c <__malloc_unlock>
 8009944:	e794      	b.n	8009870 <_malloc_r+0x20>
 8009946:	6005      	str	r5, [r0, #0]
 8009948:	e7d6      	b.n	80098f8 <_malloc_r+0xa8>
 800994a:	bf00      	nop
 800994c:	20001254 	.word	0x20001254

08009950 <__malloc_lock>:
 8009950:	4801      	ldr	r0, [pc, #4]	@ (8009958 <__malloc_lock+0x8>)
 8009952:	f7ff bf0e 	b.w	8009772 <__retarget_lock_acquire_recursive>
 8009956:	bf00      	nop
 8009958:	2000124c 	.word	0x2000124c

0800995c <__malloc_unlock>:
 800995c:	4801      	ldr	r0, [pc, #4]	@ (8009964 <__malloc_unlock+0x8>)
 800995e:	f7ff bf09 	b.w	8009774 <__retarget_lock_release_recursive>
 8009962:	bf00      	nop
 8009964:	2000124c 	.word	0x2000124c

08009968 <__sflush_r>:
 8009968:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800996c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009970:	0716      	lsls	r6, r2, #28
 8009972:	4605      	mov	r5, r0
 8009974:	460c      	mov	r4, r1
 8009976:	d454      	bmi.n	8009a22 <__sflush_r+0xba>
 8009978:	684b      	ldr	r3, [r1, #4]
 800997a:	2b00      	cmp	r3, #0
 800997c:	dc02      	bgt.n	8009984 <__sflush_r+0x1c>
 800997e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009980:	2b00      	cmp	r3, #0
 8009982:	dd48      	ble.n	8009a16 <__sflush_r+0xae>
 8009984:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009986:	2e00      	cmp	r6, #0
 8009988:	d045      	beq.n	8009a16 <__sflush_r+0xae>
 800998a:	2300      	movs	r3, #0
 800998c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009990:	682f      	ldr	r7, [r5, #0]
 8009992:	6a21      	ldr	r1, [r4, #32]
 8009994:	602b      	str	r3, [r5, #0]
 8009996:	d030      	beq.n	80099fa <__sflush_r+0x92>
 8009998:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800999a:	89a3      	ldrh	r3, [r4, #12]
 800999c:	0759      	lsls	r1, r3, #29
 800999e:	d505      	bpl.n	80099ac <__sflush_r+0x44>
 80099a0:	6863      	ldr	r3, [r4, #4]
 80099a2:	1ad2      	subs	r2, r2, r3
 80099a4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80099a6:	b10b      	cbz	r3, 80099ac <__sflush_r+0x44>
 80099a8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80099aa:	1ad2      	subs	r2, r2, r3
 80099ac:	2300      	movs	r3, #0
 80099ae:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80099b0:	6a21      	ldr	r1, [r4, #32]
 80099b2:	4628      	mov	r0, r5
 80099b4:	47b0      	blx	r6
 80099b6:	1c43      	adds	r3, r0, #1
 80099b8:	89a3      	ldrh	r3, [r4, #12]
 80099ba:	d106      	bne.n	80099ca <__sflush_r+0x62>
 80099bc:	6829      	ldr	r1, [r5, #0]
 80099be:	291d      	cmp	r1, #29
 80099c0:	d82b      	bhi.n	8009a1a <__sflush_r+0xb2>
 80099c2:	4a2a      	ldr	r2, [pc, #168]	@ (8009a6c <__sflush_r+0x104>)
 80099c4:	40ca      	lsrs	r2, r1
 80099c6:	07d6      	lsls	r6, r2, #31
 80099c8:	d527      	bpl.n	8009a1a <__sflush_r+0xb2>
 80099ca:	2200      	movs	r2, #0
 80099cc:	6062      	str	r2, [r4, #4]
 80099ce:	04d9      	lsls	r1, r3, #19
 80099d0:	6922      	ldr	r2, [r4, #16]
 80099d2:	6022      	str	r2, [r4, #0]
 80099d4:	d504      	bpl.n	80099e0 <__sflush_r+0x78>
 80099d6:	1c42      	adds	r2, r0, #1
 80099d8:	d101      	bne.n	80099de <__sflush_r+0x76>
 80099da:	682b      	ldr	r3, [r5, #0]
 80099dc:	b903      	cbnz	r3, 80099e0 <__sflush_r+0x78>
 80099de:	6560      	str	r0, [r4, #84]	@ 0x54
 80099e0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80099e2:	602f      	str	r7, [r5, #0]
 80099e4:	b1b9      	cbz	r1, 8009a16 <__sflush_r+0xae>
 80099e6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80099ea:	4299      	cmp	r1, r3
 80099ec:	d002      	beq.n	80099f4 <__sflush_r+0x8c>
 80099ee:	4628      	mov	r0, r5
 80099f0:	f7ff fec2 	bl	8009778 <_free_r>
 80099f4:	2300      	movs	r3, #0
 80099f6:	6363      	str	r3, [r4, #52]	@ 0x34
 80099f8:	e00d      	b.n	8009a16 <__sflush_r+0xae>
 80099fa:	2301      	movs	r3, #1
 80099fc:	4628      	mov	r0, r5
 80099fe:	47b0      	blx	r6
 8009a00:	4602      	mov	r2, r0
 8009a02:	1c50      	adds	r0, r2, #1
 8009a04:	d1c9      	bne.n	800999a <__sflush_r+0x32>
 8009a06:	682b      	ldr	r3, [r5, #0]
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d0c6      	beq.n	800999a <__sflush_r+0x32>
 8009a0c:	2b1d      	cmp	r3, #29
 8009a0e:	d001      	beq.n	8009a14 <__sflush_r+0xac>
 8009a10:	2b16      	cmp	r3, #22
 8009a12:	d11e      	bne.n	8009a52 <__sflush_r+0xea>
 8009a14:	602f      	str	r7, [r5, #0]
 8009a16:	2000      	movs	r0, #0
 8009a18:	e022      	b.n	8009a60 <__sflush_r+0xf8>
 8009a1a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009a1e:	b21b      	sxth	r3, r3
 8009a20:	e01b      	b.n	8009a5a <__sflush_r+0xf2>
 8009a22:	690f      	ldr	r7, [r1, #16]
 8009a24:	2f00      	cmp	r7, #0
 8009a26:	d0f6      	beq.n	8009a16 <__sflush_r+0xae>
 8009a28:	0793      	lsls	r3, r2, #30
 8009a2a:	680e      	ldr	r6, [r1, #0]
 8009a2c:	bf08      	it	eq
 8009a2e:	694b      	ldreq	r3, [r1, #20]
 8009a30:	600f      	str	r7, [r1, #0]
 8009a32:	bf18      	it	ne
 8009a34:	2300      	movne	r3, #0
 8009a36:	eba6 0807 	sub.w	r8, r6, r7
 8009a3a:	608b      	str	r3, [r1, #8]
 8009a3c:	f1b8 0f00 	cmp.w	r8, #0
 8009a40:	dde9      	ble.n	8009a16 <__sflush_r+0xae>
 8009a42:	6a21      	ldr	r1, [r4, #32]
 8009a44:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009a46:	4643      	mov	r3, r8
 8009a48:	463a      	mov	r2, r7
 8009a4a:	4628      	mov	r0, r5
 8009a4c:	47b0      	blx	r6
 8009a4e:	2800      	cmp	r0, #0
 8009a50:	dc08      	bgt.n	8009a64 <__sflush_r+0xfc>
 8009a52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009a56:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009a5a:	81a3      	strh	r3, [r4, #12]
 8009a5c:	f04f 30ff 	mov.w	r0, #4294967295
 8009a60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a64:	4407      	add	r7, r0
 8009a66:	eba8 0800 	sub.w	r8, r8, r0
 8009a6a:	e7e7      	b.n	8009a3c <__sflush_r+0xd4>
 8009a6c:	20400001 	.word	0x20400001

08009a70 <_fflush_r>:
 8009a70:	b538      	push	{r3, r4, r5, lr}
 8009a72:	690b      	ldr	r3, [r1, #16]
 8009a74:	4605      	mov	r5, r0
 8009a76:	460c      	mov	r4, r1
 8009a78:	b913      	cbnz	r3, 8009a80 <_fflush_r+0x10>
 8009a7a:	2500      	movs	r5, #0
 8009a7c:	4628      	mov	r0, r5
 8009a7e:	bd38      	pop	{r3, r4, r5, pc}
 8009a80:	b118      	cbz	r0, 8009a8a <_fflush_r+0x1a>
 8009a82:	6a03      	ldr	r3, [r0, #32]
 8009a84:	b90b      	cbnz	r3, 8009a8a <_fflush_r+0x1a>
 8009a86:	f7ff fc8f 	bl	80093a8 <__sinit>
 8009a8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d0f3      	beq.n	8009a7a <_fflush_r+0xa>
 8009a92:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009a94:	07d0      	lsls	r0, r2, #31
 8009a96:	d404      	bmi.n	8009aa2 <_fflush_r+0x32>
 8009a98:	0599      	lsls	r1, r3, #22
 8009a9a:	d402      	bmi.n	8009aa2 <_fflush_r+0x32>
 8009a9c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009a9e:	f7ff fe68 	bl	8009772 <__retarget_lock_acquire_recursive>
 8009aa2:	4628      	mov	r0, r5
 8009aa4:	4621      	mov	r1, r4
 8009aa6:	f7ff ff5f 	bl	8009968 <__sflush_r>
 8009aaa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009aac:	07da      	lsls	r2, r3, #31
 8009aae:	4605      	mov	r5, r0
 8009ab0:	d4e4      	bmi.n	8009a7c <_fflush_r+0xc>
 8009ab2:	89a3      	ldrh	r3, [r4, #12]
 8009ab4:	059b      	lsls	r3, r3, #22
 8009ab6:	d4e1      	bmi.n	8009a7c <_fflush_r+0xc>
 8009ab8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009aba:	f7ff fe5b 	bl	8009774 <__retarget_lock_release_recursive>
 8009abe:	e7dd      	b.n	8009a7c <_fflush_r+0xc>

08009ac0 <__swhatbuf_r>:
 8009ac0:	b570      	push	{r4, r5, r6, lr}
 8009ac2:	460c      	mov	r4, r1
 8009ac4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ac8:	2900      	cmp	r1, #0
 8009aca:	b096      	sub	sp, #88	@ 0x58
 8009acc:	4615      	mov	r5, r2
 8009ace:	461e      	mov	r6, r3
 8009ad0:	da0d      	bge.n	8009aee <__swhatbuf_r+0x2e>
 8009ad2:	89a3      	ldrh	r3, [r4, #12]
 8009ad4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009ad8:	f04f 0100 	mov.w	r1, #0
 8009adc:	bf14      	ite	ne
 8009ade:	2340      	movne	r3, #64	@ 0x40
 8009ae0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009ae4:	2000      	movs	r0, #0
 8009ae6:	6031      	str	r1, [r6, #0]
 8009ae8:	602b      	str	r3, [r5, #0]
 8009aea:	b016      	add	sp, #88	@ 0x58
 8009aec:	bd70      	pop	{r4, r5, r6, pc}
 8009aee:	466a      	mov	r2, sp
 8009af0:	f000 f848 	bl	8009b84 <_fstat_r>
 8009af4:	2800      	cmp	r0, #0
 8009af6:	dbec      	blt.n	8009ad2 <__swhatbuf_r+0x12>
 8009af8:	9901      	ldr	r1, [sp, #4]
 8009afa:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009afe:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009b02:	4259      	negs	r1, r3
 8009b04:	4159      	adcs	r1, r3
 8009b06:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009b0a:	e7eb      	b.n	8009ae4 <__swhatbuf_r+0x24>

08009b0c <__smakebuf_r>:
 8009b0c:	898b      	ldrh	r3, [r1, #12]
 8009b0e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009b10:	079d      	lsls	r5, r3, #30
 8009b12:	4606      	mov	r6, r0
 8009b14:	460c      	mov	r4, r1
 8009b16:	d507      	bpl.n	8009b28 <__smakebuf_r+0x1c>
 8009b18:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009b1c:	6023      	str	r3, [r4, #0]
 8009b1e:	6123      	str	r3, [r4, #16]
 8009b20:	2301      	movs	r3, #1
 8009b22:	6163      	str	r3, [r4, #20]
 8009b24:	b003      	add	sp, #12
 8009b26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009b28:	ab01      	add	r3, sp, #4
 8009b2a:	466a      	mov	r2, sp
 8009b2c:	f7ff ffc8 	bl	8009ac0 <__swhatbuf_r>
 8009b30:	9f00      	ldr	r7, [sp, #0]
 8009b32:	4605      	mov	r5, r0
 8009b34:	4639      	mov	r1, r7
 8009b36:	4630      	mov	r0, r6
 8009b38:	f7ff fe8a 	bl	8009850 <_malloc_r>
 8009b3c:	b948      	cbnz	r0, 8009b52 <__smakebuf_r+0x46>
 8009b3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009b42:	059a      	lsls	r2, r3, #22
 8009b44:	d4ee      	bmi.n	8009b24 <__smakebuf_r+0x18>
 8009b46:	f023 0303 	bic.w	r3, r3, #3
 8009b4a:	f043 0302 	orr.w	r3, r3, #2
 8009b4e:	81a3      	strh	r3, [r4, #12]
 8009b50:	e7e2      	b.n	8009b18 <__smakebuf_r+0xc>
 8009b52:	89a3      	ldrh	r3, [r4, #12]
 8009b54:	6020      	str	r0, [r4, #0]
 8009b56:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009b5a:	81a3      	strh	r3, [r4, #12]
 8009b5c:	9b01      	ldr	r3, [sp, #4]
 8009b5e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009b62:	b15b      	cbz	r3, 8009b7c <__smakebuf_r+0x70>
 8009b64:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009b68:	4630      	mov	r0, r6
 8009b6a:	f000 f81d 	bl	8009ba8 <_isatty_r>
 8009b6e:	b128      	cbz	r0, 8009b7c <__smakebuf_r+0x70>
 8009b70:	89a3      	ldrh	r3, [r4, #12]
 8009b72:	f023 0303 	bic.w	r3, r3, #3
 8009b76:	f043 0301 	orr.w	r3, r3, #1
 8009b7a:	81a3      	strh	r3, [r4, #12]
 8009b7c:	89a3      	ldrh	r3, [r4, #12]
 8009b7e:	431d      	orrs	r5, r3
 8009b80:	81a5      	strh	r5, [r4, #12]
 8009b82:	e7cf      	b.n	8009b24 <__smakebuf_r+0x18>

08009b84 <_fstat_r>:
 8009b84:	b538      	push	{r3, r4, r5, lr}
 8009b86:	4d07      	ldr	r5, [pc, #28]	@ (8009ba4 <_fstat_r+0x20>)
 8009b88:	2300      	movs	r3, #0
 8009b8a:	4604      	mov	r4, r0
 8009b8c:	4608      	mov	r0, r1
 8009b8e:	4611      	mov	r1, r2
 8009b90:	602b      	str	r3, [r5, #0]
 8009b92:	f7f7 fab8 	bl	8001106 <_fstat>
 8009b96:	1c43      	adds	r3, r0, #1
 8009b98:	d102      	bne.n	8009ba0 <_fstat_r+0x1c>
 8009b9a:	682b      	ldr	r3, [r5, #0]
 8009b9c:	b103      	cbz	r3, 8009ba0 <_fstat_r+0x1c>
 8009b9e:	6023      	str	r3, [r4, #0]
 8009ba0:	bd38      	pop	{r3, r4, r5, pc}
 8009ba2:	bf00      	nop
 8009ba4:	20001248 	.word	0x20001248

08009ba8 <_isatty_r>:
 8009ba8:	b538      	push	{r3, r4, r5, lr}
 8009baa:	4d06      	ldr	r5, [pc, #24]	@ (8009bc4 <_isatty_r+0x1c>)
 8009bac:	2300      	movs	r3, #0
 8009bae:	4604      	mov	r4, r0
 8009bb0:	4608      	mov	r0, r1
 8009bb2:	602b      	str	r3, [r5, #0]
 8009bb4:	f7f7 fab7 	bl	8001126 <_isatty>
 8009bb8:	1c43      	adds	r3, r0, #1
 8009bba:	d102      	bne.n	8009bc2 <_isatty_r+0x1a>
 8009bbc:	682b      	ldr	r3, [r5, #0]
 8009bbe:	b103      	cbz	r3, 8009bc2 <_isatty_r+0x1a>
 8009bc0:	6023      	str	r3, [r4, #0]
 8009bc2:	bd38      	pop	{r3, r4, r5, pc}
 8009bc4:	20001248 	.word	0x20001248

08009bc8 <_sbrk_r>:
 8009bc8:	b538      	push	{r3, r4, r5, lr}
 8009bca:	4d06      	ldr	r5, [pc, #24]	@ (8009be4 <_sbrk_r+0x1c>)
 8009bcc:	2300      	movs	r3, #0
 8009bce:	4604      	mov	r4, r0
 8009bd0:	4608      	mov	r0, r1
 8009bd2:	602b      	str	r3, [r5, #0]
 8009bd4:	f7f7 fac0 	bl	8001158 <_sbrk>
 8009bd8:	1c43      	adds	r3, r0, #1
 8009bda:	d102      	bne.n	8009be2 <_sbrk_r+0x1a>
 8009bdc:	682b      	ldr	r3, [r5, #0]
 8009bde:	b103      	cbz	r3, 8009be2 <_sbrk_r+0x1a>
 8009be0:	6023      	str	r3, [r4, #0]
 8009be2:	bd38      	pop	{r3, r4, r5, pc}
 8009be4:	20001248 	.word	0x20001248

08009be8 <_init>:
 8009be8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bea:	bf00      	nop
 8009bec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009bee:	bc08      	pop	{r3}
 8009bf0:	469e      	mov	lr, r3
 8009bf2:	4770      	bx	lr

08009bf4 <_fini>:
 8009bf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bf6:	bf00      	nop
 8009bf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009bfa:	bc08      	pop	{r3}
 8009bfc:	469e      	mov	lr, r3
 8009bfe:	4770      	bx	lr
